# WordPress MySQL database migration
#
# Generated: Friday 5. September 2014 20:37 UTC
# Hostname: localhost
# Database: `wp_railsvitamins`
# --------------------------------------------------------

/*!40101 SET NAMES utf8 */;

SET sql_mode='NO_AUTO_VALUE_ON_ZERO';



#
# Delete any existing table `wp_commentmeta`
#

DROP TABLE IF EXISTS `wp_commentmeta`;


#
# Table structure of table `wp_commentmeta`
#

CREATE TABLE `wp_commentmeta` (
  `meta_id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `comment_id` bigint(20) unsigned NOT NULL DEFAULT '0',
  `meta_key` varchar(255) DEFAULT NULL,
  `meta_value` longtext,
  PRIMARY KEY (`meta_id`),
  KEY `comment_id` (`comment_id`),
  KEY `meta_key` (`meta_key`),
  KEY `disqus_dupecheck` (`meta_key`,`meta_value`(11))
) ENGINE=InnoDB AUTO_INCREMENT=11 DEFAULT CHARSET=utf8;


#
# Data contents of table `wp_commentmeta`
#
INSERT INTO `wp_commentmeta` ( `meta_id`, `comment_id`, `meta_key`, `meta_value`) VALUES
(1, 11, '_wp_trash_meta_status', '0'),
(2, 10, '_wp_trash_meta_status', '0'),
(3, 9, '_wp_trash_meta_status', '0'),
(4, 8, '_wp_trash_meta_status', '0'),
(5, 7, '_wp_trash_meta_status', '0'),
(6, 6, '_wp_trash_meta_status', '0'),
(7, 14, 'dsq_parent_post_id', ''),
(8, 14, 'dsq_post_id', '1439740298'),
(9, 14, '_wp_trash_meta_status', '0'),
(10, 14, '_wp_trash_meta_time', '1409861886') ;

#
# End of data contents of table `wp_commentmeta`
# --------------------------------------------------------



#
# Delete any existing table `wp_comments`
#

DROP TABLE IF EXISTS `wp_comments`;


#
# Table structure of table `wp_comments`
#

CREATE TABLE `wp_comments` (
  `comment_ID` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `comment_post_ID` bigint(20) unsigned NOT NULL DEFAULT '0',
  `comment_author` tinytext NOT NULL,
  `comment_author_email` varchar(100) NOT NULL DEFAULT '',
  `comment_author_url` varchar(200) NOT NULL DEFAULT '',
  `comment_author_IP` varchar(100) NOT NULL DEFAULT '',
  `comment_date` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `comment_date_gmt` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `comment_content` text NOT NULL,
  `comment_karma` int(11) NOT NULL DEFAULT '0',
  `comment_approved` varchar(20) NOT NULL DEFAULT '1',
  `comment_agent` varchar(255) NOT NULL DEFAULT '',
  `comment_type` varchar(20) NOT NULL DEFAULT '',
  `comment_parent` bigint(20) unsigned NOT NULL DEFAULT '0',
  `user_id` bigint(20) unsigned NOT NULL DEFAULT '0',
  PRIMARY KEY (`comment_ID`),
  KEY `comment_post_ID` (`comment_post_ID`),
  KEY `comment_approved_date_gmt` (`comment_approved`,`comment_date_gmt`),
  KEY `comment_date_gmt` (`comment_date_gmt`),
  KEY `comment_parent` (`comment_parent`)
) ENGINE=InnoDB AUTO_INCREMENT=15 DEFAULT CHARSET=utf8;


#
# Data contents of table `wp_comments`
#
INSERT INTO `wp_comments` ( `comment_ID`, `comment_post_ID`, `comment_author`, `comment_author_email`, `comment_author_url`, `comment_author_IP`, `comment_date`, `comment_date_gmt`, `comment_content`, `comment_karma`, `comment_approved`, `comment_agent`, `comment_type`, `comment_parent`, `user_id`) VALUES
(1, 42, 'Nick Meagher', 'nickme@gher.com', 'http://www.icepick.co', '173.74.33.52', '2014-08-05 00:53:00', '2014-08-05 05:53:00', 'Nice article, I\'d like to learn more about branches and remotes!', 0, '1', 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10.9; rv:31.0) Gecko/20100101 Firefox/31.0', '', 0, 0),
(2, 42, 'Ty Richards', 'me@tyrichards.com', '', '23.114.57.72', '2014-08-05 08:37:30', '2014-08-05 13:37:30', 'It\'s on the list! Thanks for the feedback.', 0, '1', 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/36.0.1985.125 Safari/537.36', '', 1, 1),
(3, 42, 'Ty Richards', 'me@tyrichards.com', '', '23.114.57.72', '2014-08-07 07:59:13', '2014-08-07 12:59:13', 'Hey Nick, just posted <a href="http://dev.dorails.com/hop-on-the-github-bandwagon/" rel="nofollow">Hop on the Github bandwagon</a>, which is a short intro to basic remotes. I will cover more advanced git remotes soon too.', 0, '1', 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/36.0.1985.125 Safari/537.36', '', 2, 1),
(4, 88, 'Milan Dobrota', 'milan@milandobrota.com', 'http://blog.milandobrota.com', '98.224.229.51', '2014-08-07 13:49:37', '2014-08-07 18:49:37', 'You can also hire someone to teach you Rails. I think that\'s the most effective option.', 0, '1', 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/36.0.1985.125 Safari/537.36 OPR/23.0.1522.60', '', 0, 0),
(5, 88, 'Ty Richards', 'me@tyrichards.com', '', '64.134.157.250', '2014-08-08 10:33:23', '2014-08-08 15:33:23', 'Agreed! Having a mentor/coach to show you their workflow or just watching someone experienced work will give you a huge jump that hours of schools/books will never accomplish. I found some options on Pat Maddox\'s blog post: http://patmaddox.com/2014/08/05/company-sponsored-learning/\n\nHe mentioned these:\n\n   <ul>\n	<li>Pluralsight PLUS – $49/mo or $499/yr</li>\n\n	<li>Thoughtbot 1-on-1 coaching – $249/mo</li>\n\n	<li>PragStudio Ruby – $179</li>\n\n	<li>PragStudio Rails Level 1 – $179</li>\n\n	<li>PragStudio Rails Level 2 – $179</li>\n\n	<li>RailsCasts Pro – $9/mo</li>\n\n	<li>Rails tutorial full package – $149</li>\n\n	<li>NewCircle ROR bootcamp – $2375</li>\n\n</ul>', 0, '1', 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/36.0.1985.125 Safari/537.36', '', 4, 1),
(6, 73, 'Marian', 'christineseaver@yahoo.com', 'http://Jennifer.edublogs.org', '123.150.215.70', '2014-08-11 20:31:12', '2014-08-12 01:31:12', 'I had problems to find your articles in google search results.\r\nI found it on 21 position, you should build a lot of high authority social backlinks , it will help you to get more visitors.\r\nI know how to help your site, just search in google - k2 seo tips', 0, 'spam', 'Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.116 Safari/537.36', '', 0, 0),
(7, 73, 'seo plugin', 'rllvel@gmail.com', 'http://www.SeoOptimizedRankings.com/', '192.99.141.252', '2014-08-13 19:30:51', '2014-08-14 00:30:51', 'Hello Web Admin, I noticed that your On-Page SEO is is missing a few factors, for one you do not use all three H tags in your post, also I notice that you are not using bold or italics properly in your SEO optimization. On-Page SEO means more now than ever since the new Google update: Panda. No longer are backlinks and simply pinging or sending out a RSS feed the key to getting Google PageRank or Alexa Rankings, You now NEED On-Page SEO. So what is good On-Page SEO?First your keyword must appear in the title.Then it must appear in the URL.You have to optimize your keyword and make sure that it has a nice keyword density of 3-5% in your article with relevant LSI (Latent Semantic Indexing). Then you should spread all H1,H2,H3 tags in your article.Your Keyword should appear in your first paragraph and in the last sentence of the page. You should have relevant usage of Bold and italics of your keyword.There should be one internal link to a page on your blog and you should have one image with an alt tag that has your keyword....wait there\'s even more Now what if i told you there was a simple Wordpress plugin that does all the On-Page SEO, and automatically for you? That\'s right AUTOMATICALLY, just watch this 4minute video for more information at. <a href="http://www.SeoOptimizedRankings.com" rel="nofollow">Seo Plugin</a>', 0, 'spam', 'Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1) ; .NET CLR 1.0.3705)', '', 0, 0),
(8, 73, 'Gregg', 'niklaskittelson@gawab.com', 'http://Ashton.wordpress.com', '112.18.33.112', '2014-08-14 08:49:08', '2014-08-14 13:49:08', 'I had problems to find your posts in google search results.\r\nI found it on 16 spot, you should build a lot \r\nof high authority social backlinks , it will help you to get \r\nmore visitors. I know how to help your site, just type in google - k2 seo tips and tricks', 0, 'spam', 'Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/28.0.1500.72 Safari/537.36', '', 0, 0),
(9, 88, 'Omer', 'isobelhartford@gmail.com', 'http://Felipe.edublogs.org', '76.31.146.17', '2014-08-14 18:56:01', '2014-08-14 23:56:01', 'I see you share interesting things here, you can earn some \r\nextra cash, your website has huge potential, for the monetizing method, just search in google - K2 advices how to \r\nmonetize a website', 0, 'spam', 'Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/28.0.1500.72 Safari/537.36', '', 0, 0),
(10, 88, 'Thanh', 'bebe.stott@gmail.com', 'http://Penni.skyrock.com', '197.149.64.18', '2014-08-18 06:42:06', '2014-08-18 11:42:06', 'I see you share interesting content here, you can earn some \r\nadditional money, your website has big potential, for the monetizing \r\nmethod, just type in google - K2 advices how to monetize a website', 0, 'spam', 'Mozilla/5.0 (Windows NT 6.1; rv:22.0) Gecko/20100101 Firefox/22.0', '', 0, 0),
(11, 73, '2014 New Louis Vuitton Men', '**@gmail.com', 'http://clayindustryng.com/UserFiles/lv', '192.187.126.42', '2014-08-20 02:53:00', '2014-08-20 07:53:00', 'Have you ever considered about adding a little bit more than just your articles?\r\n2014 New Louis Vuitton Men http://clayindustryng.com/UserFiles/lv', 0, 'spam', 'Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1) ; .NET CLR 1.0.3705)', '', 0, 0),
(12, 227, 'Ty Richards', 'me@tyrichards.com', '', '23.114.57.72', '2014-09-04 14:41:51', '2014-09-04 19:41:51', 'Jitendra had the comment that cmd-spacebar opens Mac Spotlight search for him. That is the default.\r\n\r\nWhen it comes to iTerm you can set the shortcut to be whatever you want when you go into the iTerm preferences. I just found that I use terminal a lot more than I use the search function on OSX so I disabled the search function by going to System Preferences > Keyboard > Shortcuts > Spotlight and I unchecked the "Show Spotlight Search Field". You can also reset it to another shortcut. I disabled it altogether because I never used it.', 0, '1', 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/37.0.2062.94 Safari/537.36', '', 0, 1),
(13, 238, 'Ty Richards', 'me@tyrichards.com', '', '23.114.57.72', '2014-09-04 14:46:05', '2014-09-04 19:46:05', 'Brian Douglas had the question:\r\n\r\ndo you just append the alias to the bottom of the .bash_profile? or does it need to be surrounded by [ ]?\r\n<code>\r\n.....\r\nalias sites=\'cd ./desktop/Sites\'\r\n</code>\r\n\r\nYou can just append aliases to the bottom. In most cases it should not be "sandwiched" in any other code.', 0, '1', 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/37.0.2062.94 Safari/537.36', '', 0, 1),
(14, 31, 'tyrichards', 'ty@paradoxsites.com', '', '172.4.181.220', '2014-06-17 13:34:00', '2014-06-17 18:34:00', 'Test', 0, 'trash', 'Disqus/1.1(2.77):1439740298', '', 0, 0) ;

#
# End of data contents of table `wp_comments`
# --------------------------------------------------------



#
# Delete any existing table `wp_gf_addon_feed`
#

DROP TABLE IF EXISTS `wp_gf_addon_feed`;


#
# Table structure of table `wp_gf_addon_feed`
#

CREATE TABLE `wp_gf_addon_feed` (
  `id` mediumint(8) unsigned NOT NULL AUTO_INCREMENT,
  `form_id` mediumint(8) unsigned NOT NULL,
  `is_active` tinyint(1) NOT NULL DEFAULT '1',
  `meta` longtext,
  `addon_slug` varchar(50) DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `addon_form` (`addon_slug`,`form_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;


#
# Data contents of table `wp_gf_addon_feed`
#

#
# End of data contents of table `wp_gf_addon_feed`
# --------------------------------------------------------



#
# Delete any existing table `wp_gf_addon_payment_callback`
#

DROP TABLE IF EXISTS `wp_gf_addon_payment_callback`;


#
# Table structure of table `wp_gf_addon_payment_callback`
#

CREATE TABLE `wp_gf_addon_payment_callback` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `lead_id` int(10) unsigned NOT NULL,
  `addon_slug` varchar(250) NOT NULL,
  `callback_id` varchar(250) DEFAULT NULL,
  `date_created` datetime DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `addon_slug_callback_id` (`addon_slug`(50),`callback_id`(100))
) ENGINE=InnoDB DEFAULT CHARSET=utf8;


#
# Data contents of table `wp_gf_addon_payment_callback`
#

#
# End of data contents of table `wp_gf_addon_payment_callback`
# --------------------------------------------------------



#
# Delete any existing table `wp_gf_addon_payment_transaction`
#

DROP TABLE IF EXISTS `wp_gf_addon_payment_transaction`;


#
# Table structure of table `wp_gf_addon_payment_transaction`
#

CREATE TABLE `wp_gf_addon_payment_transaction` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `lead_id` int(10) unsigned NOT NULL,
  `transaction_type` varchar(30) NOT NULL,
  `transaction_id` varchar(50) DEFAULT NULL,
  `is_recurring` tinyint(1) NOT NULL DEFAULT '0',
  `amount` decimal(19,2) DEFAULT NULL,
  `date_created` datetime DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `lead_id` (`lead_id`),
  KEY `transaction_type` (`transaction_type`),
  KEY `type_lead` (`lead_id`,`transaction_type`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;


#
# Data contents of table `wp_gf_addon_payment_transaction`
#

#
# End of data contents of table `wp_gf_addon_payment_transaction`
# --------------------------------------------------------



#
# Delete any existing table `wp_links`
#

DROP TABLE IF EXISTS `wp_links`;


#
# Table structure of table `wp_links`
#

CREATE TABLE `wp_links` (
  `link_id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `link_url` varchar(255) NOT NULL DEFAULT '',
  `link_name` varchar(255) NOT NULL DEFAULT '',
  `link_image` varchar(255) NOT NULL DEFAULT '',
  `link_target` varchar(25) NOT NULL DEFAULT '',
  `link_description` varchar(255) NOT NULL DEFAULT '',
  `link_visible` varchar(20) NOT NULL DEFAULT 'Y',
  `link_owner` bigint(20) unsigned NOT NULL DEFAULT '1',
  `link_rating` int(11) NOT NULL DEFAULT '0',
  `link_updated` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `link_rel` varchar(255) NOT NULL DEFAULT '',
  `link_notes` mediumtext NOT NULL,
  `link_rss` varchar(255) NOT NULL DEFAULT '',
  PRIMARY KEY (`link_id`),
  KEY `link_visible` (`link_visible`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;


#
# Data contents of table `wp_links`
#

#
# End of data contents of table `wp_links`
# --------------------------------------------------------



#
# Delete any existing table `wp_options`
#

DROP TABLE IF EXISTS `wp_options`;


#
# Table structure of table `wp_options`
#

CREATE TABLE `wp_options` (
  `option_id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `option_name` varchar(64) NOT NULL DEFAULT '',
  `option_value` longtext NOT NULL,
  `autoload` varchar(20) NOT NULL DEFAULT 'yes',
  PRIMARY KEY (`option_id`),
  UNIQUE KEY `option_name` (`option_name`)
) ENGINE=InnoDB AUTO_INCREMENT=2265 DEFAULT CHARSET=utf8;


#
# Data contents of table `wp_options`
#
INSERT INTO `wp_options` ( `option_id`, `option_name`, `option_value`, `autoload`) VALUES
(1, 'siteurl', 'http://dev.dorails.com', 'yes'),
(2, 'blogname', 'do_rails', 'yes'),
(3, 'blogdescription', 'Learn by doing', 'yes'),
(4, 'users_can_register', '0', 'yes'),
(5, 'admin_email', 'me@tyrichards.com', 'yes'),
(6, 'start_of_week', '1', 'yes'),
(7, 'use_balanceTags', '0', 'yes'),
(8, 'use_smilies', '1', 'yes'),
(9, 'require_name_email', '1', 'yes'),
(10, 'comments_notify', '1', 'yes'),
(11, 'posts_per_rss', '50', 'yes'),
(12, 'rss_use_excerpt', '0', 'yes'),
(13, 'mailserver_url', 'mail.example.com', 'yes'),
(14, 'mailserver_login', 'login@example.com', 'yes'),
(15, 'mailserver_pass', 'password', 'yes'),
(16, 'mailserver_port', '110', 'yes'),
(17, 'default_category', '1', 'yes'),
(18, 'default_comment_status', 'open', 'yes'),
(19, 'default_ping_status', 'open', 'yes'),
(20, 'default_pingback_flag', '0', 'yes'),
(21, 'posts_per_page', '20', 'yes'),
(22, 'date_format', 'F j, Y', 'yes'),
(23, 'time_format', 'g:i a', 'yes'),
(24, 'links_updated_date_format', 'F j, Y g:i a', 'yes'),
(25, 'comment_moderation', '0', 'yes'),
(26, 'moderation_notify', '1', 'yes'),
(27, 'permalink_structure', '/railsvitamins/%postname%/', 'yes'),
(28, 'gzipcompression', '0', 'yes'),
(29, 'hack_file', '0', 'yes'),
(30, 'blog_charset', 'UTF-8', 'yes'),
(31, 'moderation_keys', '', 'no'),
(32, 'active_plugins', 'a:13:{i:0;s:29:"gravityforms/gravityforms.php";i:1;s:35:"baw-manual-related-posts/bawmrp.php";i:2;s:32:"disqus-comment-system/disqus.php";i:3;s:56:"gravity-forms-placeholders/gravityforms-placeholders.php";i:4;s:35:"gravityformsmailchimp/mailchimp.php";i:5;s:29:"gravityformsstripe/stripe.php";i:6;s:49:"gravityformsuserregistration/userregistration.php";i:7;s:29:"image-widget/image-widget.php";i:8;s:19:"mailgun/mailgun.php";i:9;s:48:"simple-301-redirects/wp-simple-301-redirects.php";i:10;s:27:"woosidebars/woosidebars.php";i:11;s:24:"wordpress-seo/wp-seo.php";i:12;s:39:"wp-migrate-db-pro/wp-migrate-db-pro.php";}', 'yes'),
(33, 'home', 'http://dev.dorails.com', 'yes'),
(34, 'category_base', '', 'yes'),
(35, 'ping_sites', 'http://rpc.pingomatic.com/', 'yes'),
(36, 'advanced_edit', '0', 'yes'),
(37, 'comment_max_links', '2', 'yes'),
(38, 'gmt_offset', '-5', 'yes'),
(39, 'default_email_category', '1', 'yes'),
(40, 'recently_edited', '', 'no'),
(41, 'template', 'Paradox', 'yes'),
(42, 'stylesheet', 'Paradox', 'yes'),
(43, 'comment_whitelist', '1', 'yes'),
(44, 'blacklist_keys', '', 'no'),
(45, 'comment_registration', '0', 'yes'),
(46, 'html_type', 'text/html', 'yes'),
(47, 'use_trackback', '0', 'yes'),
(48, 'default_role', 'subscriber', 'yes'),
(49, 'db_version', '27916', 'yes'),
(50, 'uploads_use_yearmonth_folders', '1', 'yes'),
(51, 'upload_path', '', 'yes'),
(52, 'blog_public', '1', 'yes'),
(53, 'default_link_category', '2', 'yes'),
(54, 'show_on_front', 'page', 'yes'),
(55, 'tag_base', '', 'yes'),
(56, 'show_avatars', '1', 'yes'),
(57, 'avatar_rating', 'G', 'yes'),
(58, 'upload_url_path', '', 'yes'),
(59, 'thumbnail_size_w', '150', 'yes'),
(60, 'thumbnail_size_h', '150', 'yes'),
(61, 'thumbnail_crop', '1', 'yes'),
(62, 'medium_size_w', '300', 'yes'),
(63, 'medium_size_h', '300', 'yes'),
(64, 'avatar_default', 'mystery', 'yes'),
(65, 'large_size_w', '1024', 'yes'),
(66, 'large_size_h', '1024', 'yes'),
(67, 'image_default_link_type', 'file', 'yes'),
(68, 'image_default_size', '', 'yes'),
(69, 'image_default_align', '', 'yes'),
(70, 'close_comments_for_old_posts', '0', 'yes'),
(71, 'close_comments_days_old', '14', 'yes'),
(72, 'thread_comments', '1', 'yes'),
(73, 'thread_comments_depth', '5', 'yes'),
(74, 'page_comments', '0', 'yes'),
(75, 'comments_per_page', '50', 'yes'),
(76, 'default_comments_page', 'newest', 'yes'),
(77, 'comment_order', 'asc', 'yes'),
(78, 'sticky_posts', 'a:0:{}', 'yes'),
(79, 'widget_categories', 'a:2:{i:2;a:4:{s:5:"title";s:0:"";s:5:"count";i:0;s:12:"hierarchical";i:0;s:8:"dropdown";i:0;}s:12:"_multiwidget";i:1;}', 'yes'),
(80, 'widget_text', 'a:3:{i:2;a:3:{s:5:"title";s:5:"Howdy";s:4:"text";s:0:"";s:6:"filter";b:0;}i:3;a:3:{s:5:"title";s:13:"About Sidebar";s:4:"text";s:0:"";s:6:"filter";b:0;}s:12:"_multiwidget";i:1;}', 'yes'),
(81, 'widget_rss', 'a:0:{}', 'yes'),
(82, 'uninstall_plugins', 'a:1:{s:35:"baw-manual-related-posts/bawmrp.php";s:18:"bawmrp_uninstaller";}', 'no'),
(83, 'timezone_string', '', 'yes'),
(84, 'page_for_posts', '111', 'yes'),
(85, 'page_on_front', '109', 'yes'),
(86, 'default_post_format', '0', 'yes'),
(87, 'link_manager_enabled', '0', 'yes'),
(88, 'initial_db_version', '27916', 'yes'),
(89, 'wp_user_roles', 'a:5:{s:13:"administrator";a:2:{s:4:"name";s:13:"Administrator";s:12:"capabilities";a:67:{s:13:"switch_themes";b:1;s:11:"edit_themes";b:1;s:16:"activate_plugins";b:1;s:12:"edit_plugins";b:1;s:10:"edit_users";b:1;s:10:"edit_files";b:1;s:14:"manage_options";b:1;s:17:"moderate_comments";b:1;s:17:"manage_categories";b:1;s:12:"manage_links";b:1;s:12:"upload_files";b:1;s:6:"import";b:1;s:15:"unfiltered_html";b:1;s:10:"edit_posts";b:1;s:17:"edit_others_posts";b:1;s:20:"edit_published_posts";b:1;s:13:"publish_posts";b:1;s:10:"edit_pages";b:1;s:4:"read";b:1;s:8:"level_10";b:1;s:7:"level_9";b:1;s:7:"level_8";b:1;s:7:"level_7";b:1;s:7:"level_6";b:1;s:7:"level_5";b:1;s:7:"level_4";b:1;s:7:"level_3";b:1;s:7:"level_2";b:1;s:7:"level_1";b:1;s:7:"level_0";b:1;s:17:"edit_others_pages";b:1;s:20:"edit_published_pages";b:1;s:13:"publish_pages";b:1;s:12:"delete_pages";b:1;s:19:"delete_others_pages";b:1;s:22:"delete_published_pages";b:1;s:12:"delete_posts";b:1;s:19:"delete_others_posts";b:1;s:22:"delete_published_posts";b:1;s:20:"delete_private_posts";b:1;s:18:"edit_private_posts";b:1;s:18:"read_private_posts";b:1;s:20:"delete_private_pages";b:1;s:18:"edit_private_pages";b:1;s:18:"read_private_pages";b:1;s:12:"delete_users";b:1;s:12:"create_users";b:1;s:17:"unfiltered_upload";b:1;s:14:"edit_dashboard";b:1;s:14:"update_plugins";b:1;s:14:"delete_plugins";b:1;s:15:"install_plugins";b:1;s:13:"update_themes";b:1;s:14:"install_themes";b:1;s:11:"update_core";b:1;s:10:"list_users";b:1;s:12:"remove_users";b:1;s:9:"add_users";b:1;s:13:"promote_users";b:1;s:18:"edit_theme_options";b:1;s:13:"delete_themes";b:1;s:6:"export";b:1;s:30:"gravityforms_user_registration";b:1;s:40:"gravityforms_user_registration_uninstall";b:1;s:22:"gravityforms_mailchimp";b:1;s:32:"gravityforms_mailchimp_uninstall";b:1;s:15:"wpseo_bulk_edit";b:1;}}s:6:"editor";a:2:{s:4:"name";s:6:"Editor";s:12:"capabilities";a:35:{s:17:"moderate_comments";b:1;s:17:"manage_categories";b:1;s:12:"manage_links";b:1;s:12:"upload_files";b:1;s:15:"unfiltered_html";b:1;s:10:"edit_posts";b:1;s:17:"edit_others_posts";b:1;s:20:"edit_published_posts";b:1;s:13:"publish_posts";b:1;s:10:"edit_pages";b:1;s:4:"read";b:1;s:7:"level_7";b:1;s:7:"level_6";b:1;s:7:"level_5";b:1;s:7:"level_4";b:1;s:7:"level_3";b:1;s:7:"level_2";b:1;s:7:"level_1";b:1;s:7:"level_0";b:1;s:17:"edit_others_pages";b:1;s:20:"edit_published_pages";b:1;s:13:"publish_pages";b:1;s:12:"delete_pages";b:1;s:19:"delete_others_pages";b:1;s:22:"delete_published_pages";b:1;s:12:"delete_posts";b:1;s:19:"delete_others_posts";b:1;s:22:"delete_published_posts";b:1;s:20:"delete_private_posts";b:1;s:18:"edit_private_posts";b:1;s:18:"read_private_posts";b:1;s:20:"delete_private_pages";b:1;s:18:"edit_private_pages";b:1;s:18:"read_private_pages";b:1;s:15:"wpseo_bulk_edit";b:1;}}s:6:"author";a:2:{s:4:"name";s:6:"Author";s:12:"capabilities";a:11:{s:12:"upload_files";b:1;s:10:"edit_posts";b:1;s:20:"edit_published_posts";b:1;s:13:"publish_posts";b:1;s:4:"read";b:1;s:7:"level_2";b:1;s:7:"level_1";b:1;s:7:"level_0";b:1;s:12:"delete_posts";b:1;s:22:"delete_published_posts";b:1;s:15:"wpseo_bulk_edit";b:1;}}s:11:"contributor";a:2:{s:4:"name";s:11:"Contributor";s:12:"capabilities";a:5:{s:10:"edit_posts";b:1;s:4:"read";b:1;s:7:"level_1";b:1;s:7:"level_0";b:1;s:12:"delete_posts";b:1;}}s:10:"subscriber";a:2:{s:4:"name";s:10:"Subscriber";s:12:"capabilities";a:2:{s:4:"read";b:1;s:7:"level_0";b:1;}}}', 'yes'),
(90, 'widget_search', 'a:2:{i:2;a:1:{s:5:"title";s:0:"";}s:12:"_multiwidget";i:1;}', 'yes'),
(91, 'widget_recent-posts', 'a:2:{i:2;a:2:{s:5:"title";s:0:"";s:6:"number";i:5;}s:12:"_multiwidget";i:1;}', 'yes'),
(92, 'widget_recent-comments', 'a:2:{i:2;a:2:{s:5:"title";s:0:"";s:6:"number";i:5;}s:12:"_multiwidget";i:1;}', 'yes'),
(93, 'widget_archives', 'a:2:{i:2;a:3:{s:5:"title";s:0:"";s:5:"count";i:0;s:8:"dropdown";i:0;}s:12:"_multiwidget";i:1;}', 'yes'),
(94, 'widget_meta', 'a:2:{i:2;a:1:{s:5:"title";s:0:"";}s:12:"_multiwidget";i:1;}', 'yes'),
(95, 'sidebars_widgets', 'a:6:{s:13:"pages-sidebar";a:1:{i:0;s:6:"text-2";}s:19:"wp_inactive_widgets";a:0:{}s:13:"about-sidebar";a:1:{i:0;s:6:"text-3";}s:15:"sidebar-default";a:6:{i:0;s:8:"search-2";i:1;s:14:"recent-posts-2";i:2;s:17:"recent-comments-2";i:3;s:10:"archives-2";i:4;s:12:"categories-2";i:5;s:6:"meta-2";}s:14:"footer-credits";a:1:{i:0;s:10:"nav_menu-2";}s:13:"array_version";i:3;}', 'yes'),
(96, 'cron', 'a:5:{i:1409976461;a:3:{s:16:"wp_version_check";a:1:{s:32:"40cd750bba9870f18aada2478b24840a";a:3:{s:8:"schedule";s:10:"twicedaily";s:4:"args";a:0:{}s:8:"interval";i:43200;}}s:17:"wp_update_plugins";a:1:{s:32:"40cd750bba9870f18aada2478b24840a";a:3:{s:8:"schedule";s:10:"twicedaily";s:4:"args";a:0:{}s:8:"interval";i:43200;}}s:16:"wp_update_themes";a:1:{s:32:"40cd750bba9870f18aada2478b24840a";a:3:{s:8:"schedule";s:10:"twicedaily";s:4:"args";a:0:{}s:8:"interval";i:43200;}}}i:1409987580;a:1:{s:20:"wp_maybe_auto_update";a:1:{s:32:"40cd750bba9870f18aada2478b24840a";a:3:{s:8:"schedule";s:10:"twicedaily";s:4:"args";a:0:{}s:8:"interval";i:43200;}}}i:1410019676;a:1:{s:19:"wp_scheduled_delete";a:1:{s:32:"40cd750bba9870f18aada2478b24840a";a:3:{s:8:"schedule";s:5:"daily";s:4:"args";a:0:{}s:8:"interval";i:86400;}}}i:1410026280;a:1:{s:30:"wp_scheduled_auto_draft_delete";a:1:{s:32:"40cd750bba9870f18aada2478b24840a";a:3:{s:8:"schedule";s:5:"daily";s:4:"args";a:0:{}s:8:"interval";i:86400;}}}s:7:"version";i:2;}', 'yes'),
(105, 'auth_key', 'v5&8@bl%UFmoR}n]fT@@ZCV$<#/lja@[WD^jdr#uZ@|/^e=|Ephy bBjoJ2y/6ko', 'yes'),
(106, 'auth_salt', 'x1 HqCULcS:|TA>d@uFl pR#Hmw-Dr.%x4g)vp@d~oRgB&%>jIfdyig/fdt51]F*', 'yes'),
(107, 'logged_in_key', '!lk(}Q9CxIEu%{z{ay.k`P;mFASLZ,lo;W~a4l/[FF5/<OM$5NEy?j8,ye`,xP ;', 'yes'),
(108, 'logged_in_salt', 'FAhbg$X/lZ)G^ P:6iDXBk+0i%dZ p&QOls;{e:$/Yrl2;F#;2cF{A;On^iztKWz', 'yes') ;
INSERT INTO `wp_options` ( `option_id`, `option_name`, `option_value`, `autoload`) VALUES
(109, 'nonce_key', '1g#Kds(^Ro:1DaIt8U{WD+8->KI<T`ktX?g!rJ:0miA/5AmB%|*Euj/%p}a`_V)T', 'yes'),
(110, 'nonce_salt', 'z</ylVG#pEu3W>LrY)VF8ODAf?tH!Qy]Tb8a-bwmX.G>*elb8:);c_WBS hlDr0x', 'yes'),
(115, 'can_compress_scripts', '1', 'yes'),
(132, 'theme_mods_twentyfourteen', 'a:1:{s:16:"sidebars_widgets";a:2:{s:4:"time";i:1402934888;s:4:"data";a:4:{s:19:"wp_inactive_widgets";a:0:{}s:9:"sidebar-1";a:6:{i:0;s:8:"search-2";i:1;s:14:"recent-posts-2";i:2;s:17:"recent-comments-2";i:3;s:10:"archives-2";i:4;s:12:"categories-2";i:5;s:6:"meta-2";}s:9:"sidebar-2";a:0:{}s:9:"sidebar-3";a:0:{}}}}', 'yes'),
(133, 'current_theme', 'Paradox', 'yes'),
(134, 'theme_mods_Paradox', 'a:2:{i:0;b:0;s:18:"nav_menu_locations";a:1:{s:7:"primary";i:2;}}', 'yes'),
(135, 'theme_switched', '', 'yes'),
(139, 'recently_activated', 'a:3:{s:33:"w3-total-cache/w3-total-cache.php";i:1409881903;s:36:"fv-top-level-cats/top-level-cats.php";i:1409879830;s:35:"wordpress-https/wordpress-https.php";i:1409875475;}', 'yes'),
(147, '_image_widget_version', '4.1', 'yes'),
(148, 'gravityformsaddon_gravityformswebapi_version', '1.0', 'yes'),
(149, 'rg_form_version', '1.8.12', 'yes'),
(154, 'rg_gforms_key', '099c03f26e64e93459a2cf51dc992f60', 'yes'),
(155, 'rg_gforms_disable_css', '0', 'yes'),
(156, 'rg_gforms_enable_html5', '0', 'yes'),
(157, 'gform_enable_noconflict', '0', 'yes'),
(158, 'rg_gforms_enable_akismet', '', 'yes'),
(159, 'rg_gforms_captcha_public_key', '', 'yes'),
(160, 'rg_gforms_captcha_private_key', '', 'yes'),
(161, 'rg_gforms_currency', 'USD', 'yes'),
(162, 'rg_gforms_message', '<!--GFM-->', 'yes'),
(168, 'nav_menu_options', 'a:2:{i:0;b:0;s:8:"auto_add";a:0:{}}', 'yes'),
(169, 'widget_nav_menu', 'a:2:{i:2;a:2:{s:5:"title";s:0:"";s:8:"nav_menu";i:3;}s:12:"_multiwidget";i:1;}', 'yes'),
(188, 'category_children', 'a:0:{}', 'yes'),
(235, 'disqus_forum_url', 'railsvitamins', 'yes'),
(236, 'disqus_api_key', 't3qIqjeFZst9CXMf5EEL8HdJspRY76y5MPxgjhYxuekM5KK5WppIgWWFcCvW6JQq', 'yes'),
(237, 'disqus_user_api_key', '5YuY4X1eqAVKraqVoUqpyErwW3hDNQ7JxMxbYAqHMKn7OVCnXtfUY1x92bURO76M', 'yes'),
(238, 'disqus_replace', 'all', 'yes'),
(243, 'disqus_last_comment_id', '1439740298', 'yes'),
(256, 'gform_email_count', '18', 'yes'),
(266, 'gf_user_registration_version', '1.9', 'yes'),
(272, 'gf_mailchimp_version', '2.4.2', 'yes'),
(275, 'gf_mailchimp_settings', 'a:3:{s:8:"username";s:0:"";s:8:"password";s:0:"";s:6:"apikey";s:36:"1031d78d0040b255686a1423593780bf-us8";}', 'yes'),
(334, 'mailgun', 'a:10:{s:6:"useAPI";s:1:"1";s:6:"domain";s:19:"mg.paradoxsites.com";s:6:"apiKey";s:36:"key-7ol99x3jpeppy1846t-ri0dcc9xmy-j7";s:8:"username";s:0:"";s:8:"password";s:0:"";s:6:"secure";s:1:"1";s:12:"track-clicks";s:3:"yes";s:11:"track-opens";s:1:"1";s:11:"campaign-id";s:0:"";s:3:"tag";s:0:"";}', 'yes'),
(574, 'disqus_active', '1', 'yes'),
(575, 'disqus_version', '2.77', 'yes'),
(714, 'bawmrp', 'a:4:{s:9:"max_posts";s:1:"0";s:10:"post_types";a:3:{i:0;s:4:"post";i:1;s:4:"page";i:2;s:10:"attachment";}s:11:"head_titles";a:3:{s:4:"post";a:1:{s:5:"en_US";s:27:"You might want to checkout:";}s:4:"page";a:1:{s:5:"en_US";s:18:"You may also like:";}s:10:"attachment";a:1:{s:5:"en_US";s:18:"You may also like:";}}s:15:"in_content_mode";s:4:"list";}', 'yes'),
(1449, 'ssl_host', '', 'yes'),
(1450, 'ssl_port', '', 'yes'),
(1451, 'secure_external_urls', 'a:0:{}', 'yes'),
(1452, 'unsecure_external_urls', 'a:0:{}', 'yes'),
(1453, 'ssl_host_diff', '0', 'yes'),
(1454, 'ssl_host_subdomain', '0', 'yes'),
(1455, 'exclusive_https', '0', 'yes'),
(1456, 'remove_unsecure', '0', 'yes'),
(1457, 'ssl_admin', '0', 'yes'),
(1458, 'ssl_proxy', '0', 'yes'),
(1459, 'debug', '0', 'yes'),
(1460, 'admin_menu', 'side', 'yes'),
(1461, 'secure_filter', 'a:0:{}', 'yes'),
(1462, 'ssl_host_mapping', 'a:0:{}', 'yes'),
(1463, 'network_defaults', 'a:0:{}', 'yes'),
(1464, 'wordpress-https_secure_external_urls', 'a:2:{i:0;s:173:"https://secure.gravatar.com/avatar/06b9299892eb73d5df6fc38d5ea0b7d6?s=64&amp;d=https%3A%2F%2Fsecure.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D64&amp;r=G";i:1;s:173:"https://secure.gravatar.com/avatar/06b9299892eb73d5df6fc38d5ea0b7d6?s=26&amp;d=https%3A%2F%2Fsecure.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D26&amp;r=G";}', 'yes'),
(1465, 'wordpress-https_unsecure_external_urls', 'a:0:{}', 'yes'),
(1466, 'wordpress-https_ssl_host_mapping', 'a:2:{s:15:"w.sharethis.com";s:16:"ws.sharethis.com";s:15:"\\d.gravatar.com";s:19:"secure.gravatar.com";}', 'yes'),
(1467, 'wordpress-https_ssl_host', 'https://dev.dorails.com/', 'yes'),
(1468, 'wordpress-https_ssl_port', '', 'yes'),
(1469, 'wordpress-https_ssl_host_diff', '0', 'yes'),
(1470, 'wordpress-https_ssl_host_subdomain', '0', 'yes'),
(1471, 'wordpress-https_exclusive_https', '0', 'yes'),
(1472, 'wordpress-https_remove_unsecure', '0', 'yes'),
(1473, 'wordpress-https_ssl_admin', '0', 'yes'),
(1474, 'wordpress-https_ssl_proxy', '0', 'yes'),
(1475, 'wordpress-https_debug', '0', 'yes'),
(1476, 'wordpress-https_admin_menu', 'settings', 'yes'),
(1701, 'woosidebars-version', '1.3.1', 'yes'),
(1852, '301_redirects', 'a:2:{s:11:"/railscurve";s:11:"/30dayrails";s:18:"/railscurve/thanks";s:18:"/30dayrails/thanks";}', 'yes'),
(2043, 'secure_auth_key', 'KAj`{nK/e327c1yN4ZYum7_9Cz.jTb8b?06}16ZUZH+^ZYF&kzbK@WFE4O^0EhkZ', 'yes'),
(2044, 'secure_auth_salt', ']Wt@n2a2g@apT+l`$Rzn3G]If^/(}0tjIYu.;AYTi]_ &pCY|Jg}1ROju^*^A&7]', 'yes'),
(2071, 'wpseo', 'a:18:{s:14:"blocking_files";a:0:{}s:26:"ignore_blog_public_warning";b:0;s:31:"ignore_meta_description_warning";b:0;s:20:"ignore_page_comments";b:0;s:16:"ignore_permalink";b:0;s:11:"ignore_tour";b:1;s:15:"ms_defaults_set";b:0;s:23:"theme_description_found";s:0:"";s:21:"theme_has_description";b:0;s:19:"tracking_popup_done";b:1;s:7:"version";s:5:"1.5.6";s:11:"alexaverify";s:0:"";s:20:"disableadvanced_meta";b:1;s:12:"googleverify";s:0:"";s:8:"msverify";s:0:"";s:15:"pinterestverify";s:0:"";s:12:"yandexverify";s:0:"";s:14:"yoast_tracking";b:0;}', 'yes'),
(2072, 'wpseo_permalinks', 'a:10:{s:15:"cleanpermalinks";b:0;s:24:"cleanpermalink-extravars";s:0:"";s:29:"cleanpermalink-googlecampaign";b:0;s:31:"cleanpermalink-googlesitesearch";b:0;s:15:"cleanreplytocom";b:0;s:10:"cleanslugs";b:1;s:15:"force_transport";s:7:"default";s:18:"redirectattachment";b:0;s:17:"stripcategorybase";b:0;s:13:"trailingslash";b:0;}', 'yes'),
(2073, 'wpseo_titles', 'a:61:{s:10:"title_test";i:0;s:17:"forcerewritetitle";b:0;s:9:"separator";s:7:"sc-pipe";s:14:"hide-feedlinks";b:0;s:12:"hide-rsdlink";b:0;s:14:"hide-shortlink";b:0;s:16:"hide-wlwmanifest";b:0;s:5:"noodp";b:0;s:6:"noydir";b:0;s:15:"usemetakeywords";b:0;s:16:"title-home-wpseo";s:42:"%%sitename%% %%page%% %%sep%% %%sitedesc%%";s:18:"title-author-wpseo";s:41:"%%name%%, Author at %%sitename%% %%page%%";s:19:"title-archive-wpseo";s:38:"%%date%% %%page%% %%sep%% %%sitename%%";s:18:"title-search-wpseo";s:63:"You searched for %%searchphrase%% %%page%% %%sep%% %%sitename%%";s:15:"title-404-wpseo";s:35:"Page Not Found %%sep%% %%sitename%%";s:19:"metadesc-home-wpseo";s:0:"";s:21:"metadesc-author-wpseo";s:0:"";s:22:"metadesc-archive-wpseo";s:0:"";s:18:"metakey-home-wpseo";s:0:"";s:20:"metakey-author-wpseo";s:0:"";s:22:"noindex-subpages-wpseo";b:1;s:20:"noindex-author-wpseo";b:0;s:21:"noindex-archive-wpseo";b:1;s:14:"disable-author";b:0;s:12:"disable-date";b:0;s:10:"title-post";s:39:"%%title%% %%page%% %%sep%% %%sitename%%";s:13:"metadesc-post";s:0:"";s:12:"metakey-post";s:0:"";s:12:"noindex-post";b:0;s:17:"noauthorship-post";b:0;s:13:"showdate-post";b:0;s:16:"hideeditbox-post";b:0;s:10:"title-page";s:39:"%%title%% %%page%% %%sep%% %%sitename%%";s:13:"metadesc-page";s:0:"";s:12:"metakey-page";s:0:"";s:12:"noindex-page";b:0;s:17:"noauthorship-page";b:1;s:13:"showdate-page";b:0;s:16:"hideeditbox-page";b:0;s:16:"title-attachment";s:39:"%%title%% %%page%% %%sep%% %%sitename%%";s:19:"metadesc-attachment";s:0:"";s:18:"metakey-attachment";s:0:"";s:18:"noindex-attachment";b:0;s:23:"noauthorship-attachment";b:1;s:19:"showdate-attachment";b:0;s:22:"hideeditbox-attachment";b:0;s:18:"title-tax-category";s:53:"%%term_title%% Archives %%page%% %%sep%% %%sitename%%";s:21:"metadesc-tax-category";s:0:"";s:20:"metakey-tax-category";s:0:"";s:24:"hideeditbox-tax-category";b:0;s:20:"noindex-tax-category";b:0;s:18:"title-tax-post_tag";s:53:"%%term_title%% Archives %%page%% %%sep%% %%sitename%%";s:21:"metadesc-tax-post_tag";s:0:"";s:20:"metakey-tax-post_tag";s:0:"";s:24:"hideeditbox-tax-post_tag";b:0;s:20:"noindex-tax-post_tag";b:0;s:21:"title-tax-post_format";s:53:"%%term_title%% Archives %%page%% %%sep%% %%sitename%%";s:24:"metadesc-tax-post_format";s:0:"";s:23:"metakey-tax-post_format";s:0:"";s:27:"hideeditbox-tax-post_format";b:0;s:23:"noindex-tax-post_format";b:1;}', 'yes'),
(2074, 'wpseo_social', 'a:15:{s:9:"fb_admins";a:0:{}s:6:"fbapps";a:0:{}s:12:"fbconnectkey";s:32:"681a441f163826714feb957490082389";s:13:"facebook_site";s:0:"";s:16:"og_default_image";s:0:"";s:18:"og_frontpage_title";s:0:"";s:17:"og_frontpage_desc";s:0:"";s:18:"og_frontpage_image";s:0:"";s:9:"opengraph";b:1;s:10:"googleplus";b:0;s:14:"plus-publisher";s:0:"";s:7:"twitter";b:0;s:12:"twitter_site";s:0:"";s:17:"twitter_card_type";s:7:"summary";s:10:"fbadminapp";i:0;}', 'yes'),
(2075, 'wpseo_rss', 'a:2:{s:9:"rssbefore";s:0:"";s:8:"rssafter";s:53:"The post %%POSTLINK%% appeared first on %%BLOGLINK%%.";}', 'yes'),
(2076, 'wpseo_internallinks', 'a:10:{s:20:"breadcrumbs-404crumb";s:25:"Error 404: Page not found";s:23:"breadcrumbs-blog-remove";b:0;s:20:"breadcrumbs-boldlast";b:0;s:25:"breadcrumbs-archiveprefix";s:12:"Archives for";s:18:"breadcrumbs-enable";b:0;s:16:"breadcrumbs-home";s:4:"Home";s:18:"breadcrumbs-prefix";s:0:"";s:24:"breadcrumbs-searchprefix";s:16:"You searched for";s:15:"breadcrumbs-sep";s:7:"&raquo;";s:23:"post_types-post-maintax";i:0;}', 'yes'),
(2077, 'wpseo_xml', 'a:17:{s:22:"disable_author_sitemap";b:1;s:22:"disable_author_noposts";b:1;s:16:"enablexmlsitemap";b:1;s:16:"entries-per-page";i:1000;s:14:"xml_ping_yahoo";b:0;s:12:"xml_ping_ask";b:0;s:38:"user_role-administrator-not_in_sitemap";b:0;s:31:"user_role-editor-not_in_sitemap";b:0;s:31:"user_role-author-not_in_sitemap";b:0;s:36:"user_role-contributor-not_in_sitemap";b:0;s:35:"user_role-subscriber-not_in_sitemap";b:0;s:30:"post_types-post-not_in_sitemap";b:0;s:30:"post_types-page-not_in_sitemap";b:0;s:36:"post_types-attachment-not_in_sitemap";b:1;s:34:"taxonomies-category-not_in_sitemap";b:0;s:34:"taxonomies-post_tag-not_in_sitemap";b:0;s:37:"taxonomies-post_format-not_in_sitemap";b:0;}', 'yes'),
(2098, 'fv_top_level_cats', 'a:3:{s:14:"category-allow";N;s:14:"top-level-only";b:0;s:22:"category-allow-enabled";b:0;}', 'yes'),
(2138, 'gravityformsaddon_gravityformsstripe_version', '1.2.2', 'yes'),
(2139, 'gravityformsaddon_feed-base_version', '0.11', 'yes'),
(2140, 'gravityformsaddon_payment_addons', 'a:1:{i:0;s:18:"gravityformsstripe";}', 'yes'),
(2141, 'gravityformsaddon_payment_version', '1.2', 'yes'),
(2191, 'gravityformsaddon_gravityformsstripe_settings', 'a:10:{s:8:"api_mode";s:4:"live";s:15:"test_secret_key";s:32:"sk_test_4aTl13TAei373Kacl3xp75EN";s:20:"test_publishable_key";s:32:"pk_test_4aTlVzE71bqN2QqMZiTKXkM8";s:15:"live_secret_key";s:32:"sk_live_4aTl2Yn4dRpz9JVpTrCfdUy5";s:20:"live_publishable_key";s:32:"pk_live_4aTl0Mw7Fvta0RKpppES2bTf";s:29:"live_publishable_key_is_valid";s:1:"1";s:24:"live_secret_key_is_valid";s:1:"1";s:29:"test_publishable_key_is_valid";s:1:"1";s:24:"test_secret_key_is_valid";s:1:"1";s:16:"webhooks_enabled";s:1:"1";}', 'yes'),
(2192, 'wpmdb_error_log', '********************************************\n******  Log date: 2014/09/03 17:54:13 ******\n********************************************\n\nWPMDB Error: The connection failed, an unexpected error occurred, please contact support. (#121 - scope: ajax_verify_connection_to_remote_site)\n\nAttempted to connect to: http://dorails.com/wp-admin/admin-ajax.php\n\nWP_Error Object\n(\n    [errors] => Array\n        (\n            [http_request_failed] => Array\n                (\n                    [0] => Couldn\'t resolve host \'dorails.com\'\n                )\n\n        )\n\n    [error_data] => Array\n        (\n        )\n\n)\n\n\n********************************************\n******  Log date: 2014/09/04 18:21:23 ******\n********************************************\n\nWPMDB Error: The connection failed, an unexpected error occurred, please contact support. (#121 - scope: ajax_verify_connection_to_remote_site)\n\nAttempted to connect to: http://dorails.com/wp-admin/admin-ajax.php\n\nWP_Error Object\n(\n    [errors] => Array\n        (\n            [http_request_failed] => Array\n                (\n                    [0] => Couldn\'t resolve host \'dorails.com\'\n                )\n\n        )\n\n    [error_data] => Array\n        (\n        )\n\n)\n\n\n********************************************\n******  Log date: 2014/09/04 19:23:10 ******\n********************************************\n\nWPMDB Error: Unable to connect to the remote server, please check the connection details - 404 Not Found (#129 - scope: ajax_verify_connection_to_remote_site)\n\nAttempted to connect to: http://dorails.com/wp-admin/admin-ajax.php\n\nArray\n(\n    [headers] => Array\n        (\n            [date] => Thu, 04 Sep 2014 19:23:10 GMT\n            [server] => Apache\n            [content-length] => 221\n            [connection] => close\n            [content-type] => text/html; charset=iso-8859-1\n        )\n\n    [body] => <!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">\n<html><head>\n<title>404 Not Found</title>\n</head><body>\n<h1>Not Found</h1>\n<p>The requested URL /wp-admin/admin-ajax.php was not found on this server.</p>\n</body></html>\n\n    [response] => Array\n        (\n            [code] => 404\n            [message] => Not Found\n        )\n\n    [cookies] => Array\n        (\n        )\n\n    [filename] => \n)\n\n\n', 'yes'),
(2193, 'wpmdb_settings', 'a:8:{s:11:"max_request";i:1048576;s:3:"key";s:32:"ZHdQSQMCu1VuKULvcasbeTOY9GelYbWM";s:10:"allow_pull";b:0;s:10:"allow_push";b:0;s:8:"profiles";a:2:{i:0;a:18:{s:13:"save_computer";s:1:"1";s:9:"gzip_file";s:1:"1";s:13:"replace_guids";s:1:"1";s:12:"exclude_spam";s:1:"0";s:19:"keep_active_plugins";s:1:"0";s:13:"create_backup";s:1:"1";s:18:"exclude_post_types";s:1:"0";s:6:"action";s:4:"push";s:15:"connection_info";s:52:"http://dorails.com\r\nRcmIiK4pvqNtfbxkPDKM7xxPqOtJk6o2";s:11:"replace_old";a:2:{i:1;s:17:"//dev.dorails.com";i:2;s:44:"/Users/tyrichards/Sites/Do Rails/public_html";}s:11:"replace_new";a:2:{i:1;s:13:"//dorails.com";i:2;s:29:"/var/www/do_rails/public_html";}s:20:"table_migrate_option";s:24:"migrate_only_with_prefix";s:18:"exclude_transients";s:1:"1";s:13:"backup_option";s:23:"backup_only_with_prefix";s:22:"save_migration_profile";s:1:"1";s:29:"save_migration_profile_option";s:1:"0";s:18:"create_new_profile";s:11:"dorails.com";s:4:"name";s:18:"Push: Local > Live";}i:1;a:18:{s:13:"save_computer";s:1:"1";s:9:"gzip_file";s:1:"1";s:13:"replace_guids";s:1:"1";s:12:"exclude_spam";s:1:"0";s:19:"keep_active_plugins";s:1:"0";s:13:"create_backup";s:1:"1";s:18:"exclude_post_types";s:1:"0";s:6:"action";s:4:"pull";s:15:"connection_info";s:52:"http://dorails.com\r\nRcmIiK4pvqNtfbxkPDKM7xxPqOtJk6o2";s:11:"replace_old";a:2:{i:1;s:13:"//dorails.com";i:2;s:29:"/var/www/do_rails/public_html";}s:11:"replace_new";a:2:{i:1;s:17:"//dev.dorails.com";i:2;s:44:"/Users/tyrichards/Sites/Do Rails/public_html";}s:20:"table_migrate_option";s:24:"migrate_only_with_prefix";s:18:"exclude_transients";s:1:"1";s:13:"backup_option";s:23:"backup_only_with_prefix";s:22:"save_migration_profile";s:1:"1";s:29:"save_migration_profile_option";s:1:"1";s:18:"create_new_profile";s:11:"dorails.com";s:4:"name";s:18:"Pull: Live > Local";}}s:7:"licence";s:36:"4451cb15-9ae0-4ba0-a513-46ce44235bc9";s:10:"verify_ssl";b:0;s:17:"blacklist_plugins";a:0:{}}', 'yes'),
(2194, 'rewrite_rules', 'a:92:{s:19:"sitemap_index\\.xml$";s:19:"index.php?sitemap=1";s:31:"([^/]+?)-sitemap([0-9]+)?\\.xml$";s:51:"index.php?sitemap=$matches[1]&sitemap_n=$matches[2]";s:24:"([a-z]+)?-?sitemap\\.xsl$";s:25:"index.php?xsl=$matches[1]";s:25:"railsvitamins/sidebars/?$";s:27:"index.php?post_type=sidebar";s:55:"railsvitamins/sidebars/feed/(feed|rdf|rss|rss2|atom)/?$";s:44:"index.php?post_type=sidebar&feed=$matches[1]";s:50:"railsvitamins/sidebars/(feed|rdf|rss|rss2|atom)/?$";s:44:"index.php?post_type=sidebar&feed=$matches[1]";s:42:"railsvitamins/sidebars/page/([0-9]{1,})/?$";s:45:"index.php?post_type=sidebar&paged=$matches[1]";s:61:"railsvitamins/category/(.+?)/feed/(feed|rdf|rss|rss2|atom)/?$";s:52:"index.php?category_name=$matches[1]&feed=$matches[2]";s:56:"railsvitamins/category/(.+?)/(feed|rdf|rss|rss2|atom)/?$";s:52:"index.php?category_name=$matches[1]&feed=$matches[2]";s:49:"railsvitamins/category/(.+?)/page/?([0-9]{1,})/?$";s:53:"index.php?category_name=$matches[1]&paged=$matches[2]";s:31:"railsvitamins/category/(.+?)/?$";s:35:"index.php?category_name=$matches[1]";s:58:"railsvitamins/tag/([^/]+)/feed/(feed|rdf|rss|rss2|atom)/?$";s:42:"index.php?tag=$matches[1]&feed=$matches[2]";s:53:"railsvitamins/tag/([^/]+)/(feed|rdf|rss|rss2|atom)/?$";s:42:"index.php?tag=$matches[1]&feed=$matches[2]";s:46:"railsvitamins/tag/([^/]+)/page/?([0-9]{1,})/?$";s:43:"index.php?tag=$matches[1]&paged=$matches[2]";s:28:"railsvitamins/tag/([^/]+)/?$";s:25:"index.php?tag=$matches[1]";s:59:"railsvitamins/type/([^/]+)/feed/(feed|rdf|rss|rss2|atom)/?$";s:50:"index.php?post_format=$matches[1]&feed=$matches[2]";s:54:"railsvitamins/type/([^/]+)/(feed|rdf|rss|rss2|atom)/?$";s:50:"index.php?post_format=$matches[1]&feed=$matches[2]";s:47:"railsvitamins/type/([^/]+)/page/?([0-9]{1,})/?$";s:51:"index.php?post_format=$matches[1]&paged=$matches[2]";s:29:"railsvitamins/type/([^/]+)/?$";s:33:"index.php?post_format=$matches[1]";s:50:"railsvitamins/sidebars/[^/]+/attachment/([^/]+)/?$";s:32:"index.php?attachment=$matches[1]";s:60:"railsvitamins/sidebars/[^/]+/attachment/([^/]+)/trackback/?$";s:37:"index.php?attachment=$matches[1]&tb=1";s:80:"railsvitamins/sidebars/[^/]+/attachment/([^/]+)/feed/(feed|rdf|rss|rss2|atom)/?$";s:49:"index.php?attachment=$matches[1]&feed=$matches[2]";s:75:"railsvitamins/sidebars/[^/]+/attachment/([^/]+)/(feed|rdf|rss|rss2|atom)/?$";s:49:"index.php?attachment=$matches[1]&feed=$matches[2]";s:75:"railsvitamins/sidebars/[^/]+/attachment/([^/]+)/comment-page-([0-9]{1,})/?$";s:50:"index.php?attachment=$matches[1]&cpage=$matches[2]";s:43:"railsvitamins/sidebars/([^/]+)/trackback/?$";s:34:"index.php?sidebar=$matches[1]&tb=1";s:63:"railsvitamins/sidebars/([^/]+)/feed/(feed|rdf|rss|rss2|atom)/?$";s:46:"index.php?sidebar=$matches[1]&feed=$matches[2]";s:58:"railsvitamins/sidebars/([^/]+)/(feed|rdf|rss|rss2|atom)/?$";s:46:"index.php?sidebar=$matches[1]&feed=$matches[2]";s:51:"railsvitamins/sidebars/([^/]+)/page/?([0-9]{1,})/?$";s:47:"index.php?sidebar=$matches[1]&paged=$matches[2]";s:58:"railsvitamins/sidebars/([^/]+)/comment-page-([0-9]{1,})/?$";s:47:"index.php?sidebar=$matches[1]&cpage=$matches[2]";s:43:"railsvitamins/sidebars/([^/]+)(/[0-9]+)?/?$";s:46:"index.php?sidebar=$matches[1]&page=$matches[2]";s:39:"railsvitamins/sidebars/[^/]+/([^/]+)/?$";s:32:"index.php?attachment=$matches[1]";s:49:"railsvitamins/sidebars/[^/]+/([^/]+)/trackback/?$";s:37:"index.php?attachment=$matches[1]&tb=1";s:69:"railsvitamins/sidebars/[^/]+/([^/]+)/feed/(feed|rdf|rss|rss2|atom)/?$";s:49:"index.php?attachment=$matches[1]&feed=$matches[2]";s:64:"railsvitamins/sidebars/[^/]+/([^/]+)/(feed|rdf|rss|rss2|atom)/?$";s:49:"index.php?attachment=$matches[1]&feed=$matches[2]";s:64:"railsvitamins/sidebars/[^/]+/([^/]+)/comment-page-([0-9]{1,})/?$";s:50:"index.php?attachment=$matches[1]&cpage=$matches[2]";s:12:"robots\\.txt$";s:18:"index.php?robots=1";s:48:".*wp-(atom|rdf|rss|rss2|feed|commentsrss2)\\.php$";s:18:"index.php?feed=old";s:20:".*wp-app\\.php(/.*)?$";s:19:"index.php?error=403";s:18:".*wp-register.php$";s:23:"index.php?register=true";s:32:"feed/(feed|rdf|rss|rss2|atom)/?$";s:27:"index.php?&feed=$matches[1]";s:27:"(feed|rdf|rss|rss2|atom)/?$";s:27:"index.php?&feed=$matches[1]";s:20:"page/?([0-9]{1,})/?$";s:28:"index.php?&paged=$matches[1]";s:27:"comment-page-([0-9]{1,})/?$";s:40:"index.php?&page_id=109&cpage=$matches[1]";s:41:"comments/feed/(feed|rdf|rss|rss2|atom)/?$";s:42:"index.php?&feed=$matches[1]&withcomments=1";s:36:"comments/(feed|rdf|rss|rss2|atom)/?$";s:42:"index.php?&feed=$matches[1]&withcomments=1";s:44:"search/(.+)/feed/(feed|rdf|rss|rss2|atom)/?$";s:40:"index.php?s=$matches[1]&feed=$matches[2]";s:39:"search/(.+)/(feed|rdf|rss|rss2|atom)/?$";s:40:"index.php?s=$matches[1]&feed=$matches[2]";s:32:"search/(.+)/page/?([0-9]{1,})/?$";s:41:"index.php?s=$matches[1]&paged=$matches[2]";s:14:"search/(.+)/?$";s:23:"index.php?s=$matches[1]";s:61:"railsvitamins/author/([^/]+)/feed/(feed|rdf|rss|rss2|atom)/?$";s:50:"index.php?author_name=$matches[1]&feed=$matches[2]";s:56:"railsvitamins/author/([^/]+)/(feed|rdf|rss|rss2|atom)/?$";s:50:"index.php?author_name=$matches[1]&feed=$matches[2]";s:49:"railsvitamins/author/([^/]+)/page/?([0-9]{1,})/?$";s:51:"index.php?author_name=$matches[1]&paged=$matches[2]";s:31:"railsvitamins/author/([^/]+)/?$";s:33:"index.php?author_name=$matches[1]";s:83:"railsvitamins/([0-9]{4})/([0-9]{1,2})/([0-9]{1,2})/feed/(feed|rdf|rss|rss2|atom)/?$";s:80:"index.php?year=$matches[1]&monthnum=$matches[2]&day=$matches[3]&feed=$matches[4]";s:78:"railsvitamins/([0-9]{4})/([0-9]{1,2})/([0-9]{1,2})/(feed|rdf|rss|rss2|atom)/?$";s:80:"index.php?year=$matches[1]&monthnum=$matches[2]&day=$matches[3]&feed=$matches[4]";s:71:"railsvitamins/([0-9]{4})/([0-9]{1,2})/([0-9]{1,2})/page/?([0-9]{1,})/?$";s:81:"index.php?year=$matches[1]&monthnum=$matches[2]&day=$matches[3]&paged=$matches[4]";s:53:"railsvitamins/([0-9]{4})/([0-9]{1,2})/([0-9]{1,2})/?$";s:63:"index.php?year=$matches[1]&monthnum=$matches[2]&day=$matches[3]";s:70:"railsvitamins/([0-9]{4})/([0-9]{1,2})/feed/(feed|rdf|rss|rss2|atom)/?$";s:64:"index.php?year=$matches[1]&monthnum=$matches[2]&feed=$matches[3]";s:65:"railsvitamins/([0-9]{4})/([0-9]{1,2})/(feed|rdf|rss|rss2|atom)/?$";s:64:"index.php?year=$matches[1]&monthnum=$matches[2]&feed=$matches[3]";s:58:"railsvitamins/([0-9]{4})/([0-9]{1,2})/page/?([0-9]{1,})/?$";s:65:"index.php?year=$matches[1]&monthnum=$matches[2]&paged=$matches[3]";s:40:"railsvitamins/([0-9]{4})/([0-9]{1,2})/?$";s:47:"index.php?year=$matches[1]&monthnum=$matches[2]";s:57:"railsvitamins/([0-9]{4})/feed/(feed|rdf|rss|rss2|atom)/?$";s:43:"index.php?year=$matches[1]&feed=$matches[2]";s:52:"railsvitamins/([0-9]{4})/(feed|rdf|rss|rss2|atom)/?$";s:43:"index.php?year=$matches[1]&feed=$matches[2]";s:45:"railsvitamins/([0-9]{4})/page/?([0-9]{1,})/?$";s:44:"index.php?year=$matches[1]&paged=$matches[2]";s:27:"railsvitamins/([0-9]{4})/?$";s:26:"index.php?year=$matches[1]";s:27:".?.+?/attachment/([^/]+)/?$";s:32:"index.php?attachment=$matches[1]";s:37:".?.+?/attachment/([^/]+)/trackback/?$";s:37:"index.php?attachment=$matches[1]&tb=1";s:57:".?.+?/attachment/([^/]+)/feed/(feed|rdf|rss|rss2|atom)/?$";s:49:"index.php?attachment=$matches[1]&feed=$matches[2]";s:52:".?.+?/attachment/([^/]+)/(feed|rdf|rss|rss2|atom)/?$";s:49:"index.php?attachment=$matches[1]&feed=$matches[2]";s:52:".?.+?/attachment/([^/]+)/comment-page-([0-9]{1,})/?$";s:50:"index.php?attachment=$matches[1]&cpage=$matches[2]";s:20:"(.?.+?)/trackback/?$";s:35:"index.php?pagename=$matches[1]&tb=1";s:40:"(.?.+?)/feed/(feed|rdf|rss|rss2|atom)/?$";s:47:"index.php?pagename=$matches[1]&feed=$matches[2]";s:35:"(.?.+?)/(feed|rdf|rss|rss2|atom)/?$";s:47:"index.php?pagename=$matches[1]&feed=$matches[2]";s:28:"(.?.+?)/page/?([0-9]{1,})/?$";s:48:"index.php?pagename=$matches[1]&paged=$matches[2]";s:35:"(.?.+?)/comment-page-([0-9]{1,})/?$";s:48:"index.php?pagename=$matches[1]&cpage=$matches[2]";s:20:"(.?.+?)(/[0-9]+)?/?$";s:47:"index.php?pagename=$matches[1]&page=$matches[2]";s:41:"railsvitamins/[^/]+/attachment/([^/]+)/?$";s:32:"index.php?attachment=$matches[1]";s:51:"railsvitamins/[^/]+/attachment/([^/]+)/trackback/?$";s:37:"index.php?attachment=$matches[1]&tb=1";s:71:"railsvitamins/[^/]+/attachment/([^/]+)/feed/(feed|rdf|rss|rss2|atom)/?$";s:49:"index.php?attachment=$matches[1]&feed=$matches[2]";s:66:"railsvitamins/[^/]+/attachment/([^/]+)/(feed|rdf|rss|rss2|atom)/?$";s:49:"index.php?attachment=$matches[1]&feed=$matches[2]";s:66:"railsvitamins/[^/]+/attachment/([^/]+)/comment-page-([0-9]{1,})/?$";s:50:"index.php?attachment=$matches[1]&cpage=$matches[2]";s:34:"railsvitamins/([^/]+)/trackback/?$";s:31:"index.php?name=$matches[1]&tb=1";s:54:"railsvitamins/([^/]+)/feed/(feed|rdf|rss|rss2|atom)/?$";s:43:"index.php?name=$matches[1]&feed=$matches[2]";s:49:"railsvitamins/([^/]+)/(feed|rdf|rss|rss2|atom)/?$";s:43:"index.php?name=$matches[1]&feed=$matches[2]";s:42:"railsvitamins/([^/]+)/page/?([0-9]{1,})/?$";s:44:"index.php?name=$matches[1]&paged=$matches[2]";s:49:"railsvitamins/([^/]+)/comment-page-([0-9]{1,})/?$";s:44:"index.php?name=$matches[1]&cpage=$matches[2]";s:34:"railsvitamins/([^/]+)(/[0-9]+)?/?$";s:43:"index.php?name=$matches[1]&page=$matches[2]";s:30:"railsvitamins/[^/]+/([^/]+)/?$";s:32:"index.php?attachment=$matches[1]";s:40:"railsvitamins/[^/]+/([^/]+)/trackback/?$";s:37:"index.php?attachment=$matches[1]&tb=1";s:60:"railsvitamins/[^/]+/([^/]+)/feed/(feed|rdf|rss|rss2|atom)/?$";s:49:"index.php?attachment=$matches[1]&feed=$matches[2]";s:55:"railsvitamins/[^/]+/([^/]+)/(feed|rdf|rss|rss2|atom)/?$";s:49:"index.php?attachment=$matches[1]&feed=$matches[2]";s:55:"railsvitamins/[^/]+/([^/]+)/comment-page-([0-9]{1,})/?$";s:50:"index.php?attachment=$matches[1]&cpage=$matches[2]";}', 'yes'),
(2199, '_transient_timeout_gform_update_info', '1409975627', 'no'),
(2200, '_transient_gform_update_info', 'a:5:{s:7:"headers";a:8:{s:4:"date";s:29:"Fri, 05 Sep 2014 03:53:48 GMT";s:6:"server";s:12:"Apache/2.4.7";s:12:"x-powered-by";s:20:"PHP/5.5.9-1ubuntu4.3";s:4:"vary";s:15:"Accept-Encoding";s:16:"content-encoding";s:4:"gzip";s:14:"content-length";s:4:"1167";s:10:"connection";s:5:"close";s:12:"content-type";s:9:"text/html";}s:4:"body";s:5433:"{"is_valid_key":"1","version":"1.8.12","url":"http:\\/\\/s3.amazonaws.com\\/gravityforms\\/releases\\/gravityforms_1.8.12.zip?AWSAccessKeyId=1603BBK66770VCSCJSG2&Expires=1410062028&Signature=kyzTQ2zPMgVxyAlitzm%2BSb8yuHU%3D","expiration_time":1431147600,"offerings":{"gravityforms":{"is_available":true,"version":"1.8.12","url":"http:\\/\\/s3.amazonaws.com\\/gravityforms\\/releases\\/gravityforms_1.8.12.zip?AWSAccessKeyId=1603BBK66770VCSCJSG2&Expires=1410062028&Signature=kyzTQ2zPMgVxyAlitzm%2BSb8yuHU%3D"},"gravityformsauthorizenet":{"is_available":true,"version":"1.5","url":"http:\\/\\/s3.amazonaws.com\\/gravityforms\\/addons\\/authorizenet\\/gravityformsauthorizenet_1.5.zip?AWSAccessKeyId=1603BBK66770VCSCJSG2&Expires=1410062028&Signature=hBxzXhsOUu72RYGN0oGXgoo8hhY%3D"},"gravityformsaweber":{"is_available":true,"version":"1.4","url":"http:\\/\\/s3.amazonaws.com\\/gravityforms\\/addons\\/aweber\\/gravityformsaweber_1.4.zip?AWSAccessKeyId=1603BBK66770VCSCJSG2&Expires=1410062028&Signature=t2iy5K4mdlQXLblVrHRwg%2Bqx44g%3D"},"gravityformscampaignmonitor":{"is_available":true,"version":"2.5","url":"http:\\/\\/s3.amazonaws.com\\/gravityforms\\/addons\\/campaignmonitor\\/gravityformscampaignmonitor_2.5.zip?AWSAccessKeyId=1603BBK66770VCSCJSG2&Expires=1410062028&Signature=U328z%2Bk9ogE9c3dQ0SQfP2eix4Q%3D"},"gravityformscoupons":{"is_available":true,"version":"1.0","url":"http:\\/\\/s3.amazonaws.com\\/gravityforms\\/addons\\/coupons\\/gravityformscoupons_1.0.zip?AWSAccessKeyId=1603BBK66770VCSCJSG2&Expires=1410062028&Signature=LdhKEtZT4XSPIx5L1w5KkAdro2U%3D"},"gravityformsfreshbooks":{"is_available":true,"version":"1.5","url":"http:\\/\\/s3.amazonaws.com\\/gravityforms\\/addons\\/freshbooks\\/gravityformsfreshbooks_1.5.zip?AWSAccessKeyId=1603BBK66770VCSCJSG2&Expires=1410062028&Signature=pzrfcw50kL7%2BCc1g8k7QsdSVcrM%3D"},"gravityformslogging":{"is_available":true,"version":"1.0","url":"http:\\/\\/s3.amazonaws.com\\/gravityforms\\/addons\\/authorizenet\\/gravityformsauthorizenet_1.3.4.zip?AWSAccessKeyId=1603BBK66770VCSCJSG2&Expires=1410062028&Signature=b5Fc%2BDs2esDhMv%2BuG89MDV28vCE%3D"},"gravityformsmailchimp":{"is_available":true,"version":"2.4","url":"http:\\/\\/s3.amazonaws.com\\/gravityforms\\/addons\\/mailchimp\\/gravityformsmailchimp_2.4.zip?AWSAccessKeyId=1603BBK66770VCSCJSG2&Expires=1410062028&Signature=w0r6yuraEq8REGQOKewF1T5arjQ%3D"},"gravityformspaypal":{"is_available":true,"version":"1.10","url":"http:\\/\\/s3.amazonaws.com\\/gravityforms\\/addons\\/paypal\\/gravityformspaypal_1.10.zip?AWSAccessKeyId=1603BBK66770VCSCJSG2&Expires=1410062028&Signature=rmWAa%2B48IYMsII1NY8Lt%2B%2B0Gpko%3D"},"gravityformspaypalpaymentspro":{"is_available":true,"version":"1.4","url":"http:\\/\\/s3.amazonaws.com\\/gravityforms\\/addons\\/paypalpaymentspro\\/gravityformspaypalpaymentspro_1.4.zip?AWSAccessKeyId=1603BBK66770VCSCJSG2&Expires=1410062028&Signature=CLd1PXzdP294h9%2BvmmpOm%2B3%2BP6U%3D"},"gravityformspaypalpro":{"is_available":true,"version":"1.4","url":"http:\\/\\/s3.amazonaws.com\\/gravityforms\\/addons\\/paypalpro\\/gravityformspaypalpro_1.4.zip?AWSAccessKeyId=1603BBK66770VCSCJSG2&Expires=1410062028&Signature=K1hI7j1XYYKQ1%2Fr63S9C3ujX%2Bcw%3D"},"gravityformspicatcha":{"is_available":true,"version":"2.0","url":"http:\\/\\/s3.amazonaws.com\\/gravityforms\\/addons\\/picatcha\\/gravityformspicatcha_2.0.zip?AWSAccessKeyId=1603BBK66770VCSCJSG2&Expires=1410062028&Signature=gz%2FhqXhrstQa92Lsp%2B4qI%2FfozAA%3D"},"gravityformspolls":{"is_available":true,"version":"2.0","url":"http:\\/\\/s3.amazonaws.com\\/gravityforms\\/addons\\/polls\\/gravityformspolls_2.0.zip?AWSAccessKeyId=1603BBK66770VCSCJSG2&Expires=1410062028&Signature=nKKHZyD5OWnCU%2B9f40USA2V7qqc%3D"},"gravityformsquiz":{"is_available":true,"version":"2.1","url":"http:\\/\\/s3.amazonaws.com\\/gravityforms\\/addons\\/quiz\\/gravityformsquiz_2.1.zip?AWSAccessKeyId=1603BBK66770VCSCJSG2&Expires=1410062028&Signature=e%2BkTcmvHfIPEWgtifGohhyPINU8%3D"},"gravityformssignature":{"is_available":true,"version":"2.2","url":"http:\\/\\/s3.amazonaws.com\\/gravityforms\\/addons\\/signature\\/gravityformssignature_2.2.zip?AWSAccessKeyId=1603BBK66770VCSCJSG2&Expires=1410062028&Signature=qOp4pG3uRgpi98ADIF9aV54UqGg%3D"},"gravityformsstripe":{"is_available":true,"version":"1.2","url":"http:\\/\\/s3.amazonaws.com\\/gravityforms\\/addons\\/stripe\\/gravityformsstripe_1.2.zip?AWSAccessKeyId=1603BBK66770VCSCJSG2&Expires=1410062028&Signature=CQpBbuP4ZYXs4R%2FZ8%2BgJ9qU2%2BAU%3D"},"gravityformssurvey":{"is_available":true,"version":"2.1","url":"http:\\/\\/s3.amazonaws.com\\/gravityforms\\/addons\\/survey\\/gravityformssurvey_2.1.zip?AWSAccessKeyId=1603BBK66770VCSCJSG2&Expires=1410062028&Signature=myxx7X%2FVDiUx8Pm4%2FeZQC6nd2JY%3D"},"gravityformstwilio":{"is_available":true,"version":"1.0","url":"http:\\/\\/s3.amazonaws.com\\/gravityforms\\/addons\\/twilio\\/gravityformstwilio_1.0.zip?AWSAccessKeyId=1603BBK66770VCSCJSG2&Expires=1410062028&Signature=Fzn%2B2Hi%2BoZt4ZYIph6bAdxAlj%2Bs%3D"},"gravityformsuserregistration":{"is_available":true,"version":"1.9","url":"http:\\/\\/s3.amazonaws.com\\/gravityforms\\/addons\\/userregistration\\/gravityformsuserregistration_1.9.zip?AWSAccessKeyId=1603BBK66770VCSCJSG2&Expires=1410062028&Signature=zba%2F6lh4BWHKct9Ea%2BGhdMECkXo%3D"},"gravityformszapier":{"is_available":true,"version":"1.4","url":"http:\\/\\/s3.amazonaws.com\\/gravityforms\\/addons\\/zapier\\/gravityformszapier_1.4.zip?AWSAccessKeyId=1603BBK66770VCSCJSG2&Expires=1410062028&Signature=xwayxGhpAt2G8pu%2Fu%2FvzELOplL4%3D"}},"is_active":"1"}";s:8:"response";a:2:{s:4:"code";i:200;s:7:"message";s:2:"OK";}s:7:"cookies";a:0:{}s:8:"filename";N;}', 'no'),
(2205, '_site_transient_update_core', 'O:8:"stdClass":4:{s:7:"updates";a:2:{i:0;O:8:"stdClass":10:{s:8:"response";s:7:"upgrade";s:8:"download";s:57:"https://downloads.wordpress.org/release/wordpress-4.0.zip";s:6:"locale";s:5:"en_US";s:8:"packages";O:8:"stdClass":5:{s:4:"full";s:57:"https://downloads.wordpress.org/release/wordpress-4.0.zip";s:10:"no_content";s:68:"https://downloads.wordpress.org/release/wordpress-4.0-no-content.zip";s:11:"new_bundled";s:69:"https://downloads.wordpress.org/release/wordpress-4.0-new-bundled.zip";s:7:"partial";b:0;s:8:"rollback";b:0;}s:7:"current";s:3:"4.0";s:7:"version";s:3:"4.0";s:11:"php_version";s:5:"5.2.4";s:13:"mysql_version";s:3:"5.0";s:11:"new_bundled";s:3:"3.8";s:15:"partial_version";s:0:"";}i:1;O:8:"stdClass":11:{s:8:"response";s:10:"autoupdate";s:8:"download";s:57:"https://downloads.wordpress.org/release/wordpress-4.0.zip";s:6:"locale";s:5:"en_US";s:8:"packages";O:8:"stdClass":5:{s:4:"full";s:57:"https://downloads.wordpress.org/release/wordpress-4.0.zip";s:10:"no_content";s:68:"https://downloads.wordpress.org/release/wordpress-4.0-no-content.zip";s:11:"new_bundled";s:69:"https://downloads.wordpress.org/release/wordpress-4.0-new-bundled.zip";s:7:"partial";b:0;s:8:"rollback";b:0;}s:7:"current";s:3:"4.0";s:7:"version";s:3:"4.0";s:11:"php_version";s:5:"5.2.4";s:13:"mysql_version";s:3:"5.0";s:11:"new_bundled";s:3:"3.8";s:15:"partial_version";s:0:"";s:13:"support_email";s:27:"updatehelp392@wordpress.org";}}s:12:"last_checked";i:1409944464;s:15:"version_checked";s:5:"3.9.2";s:12:"translations";a:0:{}}', 'yes'),
(2206, '_site_transient_update_plugins', 'O:8:"stdClass":3:{s:12:"last_checked";i:1409944465;s:8:"response";a:0:{}s:12:"translations";a:0:{}}', 'yes'),
(2209, '_site_transient_update_themes', 'O:8:"stdClass":4:{s:12:"last_checked";i:1409944465;s:7:"checked";a:1:{s:7:"Paradox";s:3:"1.0";}s:8:"response";a:0:{}s:12:"translations";a:0:{}}', 'yes'),
(2214, '_transient_timeout_GFCache_945ced1e738341cf603a6cd295d8bbb0', '1409889354', 'no'),
(2215, '_transient_GFCache_945ced1e738341cf603a6cd295d8bbb0', '1', 'no'),
(2233, '_transient_timeout_GFCache_bec17feac0fc2dc7ac5c934911fcda40', '1409931187', 'no'),
(2234, '_transient_GFCache_bec17feac0fc2dc7ac5c934911fcda40', '1', 'no'),
(2235, '_site_transient_timeout_wpmdb_upgrade_data', '1409973833', 'yes'),
(2236, '_site_transient_wpmdb_upgrade_data', 'a:3:{s:17:"wp-migrate-db-pro";a:2:{s:7:"version";s:5:"1.4.2";s:6:"tested";s:5:"3.9.2";}s:29:"wp-migrate-db-pro-media-files";a:2:{s:7:"version";s:5:"1.1.5";s:6:"tested";s:5:"3.9.2";}s:21:"wp-migrate-db-pro-cli";a:2:{s:7:"version";s:5:"1.0.1";s:6:"tested";s:5:"3.9.2";}}', 'yes'),
(2237, '_site_transient_timeout_gforms_userregistration_version', '1409973833', 'yes'),
(2238, '_site_transient_gforms_userregistration_version', 'a:3:{s:12:"is_valid_key";s:1:"1";s:7:"version";s:3:"1.9";s:3:"url";s:193:"http://s3.amazonaws.com/gravityforms/addons/userregistration/gravityformsuserregistration_1.9.zip?AWSAccessKeyId=1603BBK66770VCSCJSG2&Expires=1410103432&Signature=dQ4VsoP4ywFmRVpVgNM8xKx6HDs%3D";}', 'yes'),
(2239, '_site_transient_timeout_gforms_mailchimp_version', '1409973833', 'yes'),
(2240, '_site_transient_gforms_mailchimp_version', 'a:3:{s:12:"is_valid_key";s:1:"1";s:7:"version";s:3:"2.4";s:3:"url";s:179:"http://s3.amazonaws.com/gravityforms/addons/mailchimp/gravityformsmailchimp_2.4.zip?AWSAccessKeyId=1603BBK66770VCSCJSG2&Expires=1410103432&Signature=DAs1C1gpSNLMxbfyq8oaQv5Yz3w%3D";}', 'yes'),
(2241, '_transient_timeout_GFCache_453db3b43527a504c83a246d4e6b814b', '1409931196', 'no') ;
INSERT INTO `wp_options` ( `option_id`, `option_name`, `option_value`, `autoload`) VALUES
(2242, '_transient_GFCache_453db3b43527a504c83a246d4e6b814b', '1', 'no'),
(2253, '_transient_timeout_GFCache_ba9acd21efecc4e17c085da4fd2e3636', '1409940055', 'no'),
(2254, '_transient_GFCache_ba9acd21efecc4e17c085da4fd2e3636', '1', 'no'),
(2256, '_transient_timeout_GFCache_db649f051608ef380f6a829c5df3e113', '1409940094', 'no'),
(2257, '_transient_GFCache_db649f051608ef380f6a829c5df3e113', '1', 'no'),
(2258, '_site_transient_timeout_wpmdb_licence_response', '1409983161', 'yes'),
(2259, '_site_transient_wpmdb_licence_response', '{"message":"\\t\\t\\t<p>\\n\\t\\t\\t\\tYou have an active <strong>Developer<\\/strong> license.<br \\/>You may send an email to the following address to get front-of-the-line support service.\\t\\t\\t<\\/p>\\n\\n\\t\\t\\t<p>\\n\\t\\t\\t\\t<strong>Please copy the Diagnostic Info &amp; Error Log info below into a text file and attach it to your email. Do the same for any other site involved in your email.<\\/strong>\\n\\t\\t\\t<\\/p>\\n\\n\\t\\t\\t<p class=\\"email\\">\\n\\t\\t\\t\\t<a class=\\"button\\" href=\\"mailto:priority-wpmdb@deliciousbrains.com\\">priority-wpmdb@deliciousbrains.com<\\/a>\\n\\t\\t\\t<\\/p>\\n\\t\\t","addons_available":"1","addon_list":{"wp-migrate-db-pro-media-files":{"name":"Media Files","desc":"Determines the Media Library files that have been added or updated on the remote site and downloads them. Includes an option to remove local files that are no longer found on the remote site. <a style=\\"color:#fff;text-decoration:underline;\\" href=\\"https:\\/\\/deliciousbrains.com\\/wp-migrate-db-pro\\/documentation\\/#media-files-addon\\" style=\\"\\">More Details &rarr;<\\/a>","version":"1.1.5","beta_version":"","tested":"3.9.2"},"wp-migrate-db-pro-cli":{"name":"CLI","desc":"Use WP-CLI to run migrations from the command line: <code>wp wpmdb migrate <span class=\\"bracket\\">&lt;<\\/span><span class=\\"var\\">profile<\\/span><span class=\\"bracket\\">&gt;<\\/span><\\/code> or run them from your own code with the <code>wpmdb_migrate<span class=\\"bracket\\">(<\\/span> <span class=\\"var\\">$profile<\\/span> <span class=\\"bracket\\">)<\\/span><\\/code> function. <a href=\\"https:\\/\\/deliciousbrains.com\\/wp-migrate-db-pro\\/documentation\\/#cli-addon\\" style=\\"\\">More Details &rarr;<\\/a>","version":"1.0.1","beta_version":"","required":"1.4b1","tested":"3.9.2"}}}', 'yes'),
(2262, '_site_transient_timeout_theme_roots', '1409946264', 'yes'),
(2263, '_site_transient_theme_roots', 'a:1:{s:7:"Paradox";s:7:"/themes";}', 'yes'),
(2264, '_transient_random_seed', '4fc78272a14569862ffaec2cc398dd70', 'yes') ;

#
# End of data contents of table `wp_options`
# --------------------------------------------------------



#
# Delete any existing table `wp_postmeta`
#

DROP TABLE IF EXISTS `wp_postmeta`;


#
# Table structure of table `wp_postmeta`
#

CREATE TABLE `wp_postmeta` (
  `meta_id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `post_id` bigint(20) unsigned NOT NULL DEFAULT '0',
  `meta_key` varchar(255) DEFAULT NULL,
  `meta_value` longtext,
  PRIMARY KEY (`meta_id`),
  KEY `post_id` (`post_id`),
  KEY `meta_key` (`meta_key`)
) ENGINE=InnoDB AUTO_INCREMENT=447 DEFAULT CHARSET=utf8;


#
# Data contents of table `wp_postmeta`
#
INSERT INTO `wp_postmeta` ( `meta_id`, `post_id`, `meta_key`, `meta_value`) VALUES
(1, 2, '_wp_page_template', 'default'),
(2, 2, '_edit_last', '1'),
(3, 2, '_edit_lock', '1408726147:1'),
(4, 5, '_edit_last', '1'),
(5, 5, '_edit_lock', '1409792740:1'),
(6, 5, '_wp_page_template', 'default'),
(7, 9, '_edit_last', '1'),
(8, 9, '_edit_lock', '1409880952:1'),
(9, 9, '_wp_page_template', 'default'),
(47, 15, '_edit_last', '1'),
(48, 15, '_edit_lock', '1409881068:1'),
(49, 15, '_wp_page_template', 'default'),
(69, 19, '_menu_item_type', 'post_type'),
(70, 19, '_menu_item_menu_item_parent', '0'),
(71, 19, '_menu_item_object_id', '15'),
(72, 19, '_menu_item_object', 'page'),
(73, 19, '_menu_item_target', ''),
(74, 19, '_menu_item_classes', 'a:1:{i:0;s:0:"";}'),
(75, 19, '_menu_item_xfn', ''),
(76, 19, '_menu_item_url', ''),
(78, 20, '_menu_item_type', 'post_type'),
(79, 20, '_menu_item_menu_item_parent', '0'),
(80, 20, '_menu_item_object_id', '9'),
(81, 20, '_menu_item_object', 'page'),
(82, 20, '_menu_item_target', ''),
(83, 20, '_menu_item_classes', 'a:1:{i:0;s:0:"";}'),
(84, 20, '_menu_item_xfn', ''),
(85, 20, '_menu_item_url', ''),
(87, 21, '_menu_item_type', 'post_type'),
(88, 21, '_menu_item_menu_item_parent', '0'),
(89, 21, '_menu_item_object_id', '5'),
(90, 21, '_menu_item_object', 'page'),
(91, 21, '_menu_item_target', ''),
(92, 21, '_menu_item_classes', 'a:1:{i:0;s:0:"";}'),
(93, 21, '_menu_item_xfn', ''),
(94, 21, '_menu_item_url', ''),
(162, 15, 'dsq_thread_id', ''),
(168, 42, '_edit_last', '1'),
(169, 42, '_edit_lock', '1409066654:1'),
(172, 42, 'dsq_thread_id', '2893811191'),
(187, 52, '_edit_last', '1'),
(188, 52, '_edit_lock', '1409066507:1'),
(191, 52, '_wp_old_slug', 'speed-up-styling-in-rails-with-bootstrap-sass'),
(193, 73, '_edit_last', '1'),
(194, 73, '_edit_lock', '1409066446:1'),
(195, 80, '_wp_attached_file', '2014/08/Git-Clone.jpg'),
(196, 80, '_wp_attachment_metadata', 'a:5:{s:5:"width";i:1208;s:6:"height";i:739;s:4:"file";s:21:"2014/08/Git-Clone.jpg";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:21:"Git-Clone-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:21:"Git-Clone-300x183.jpg";s:5:"width";i:300;s:6:"height";i:183;s:9:"mime-type";s:10:"image/jpeg";}s:5:"large";a:4:{s:4:"file";s:22:"Git-Clone-1024x626.jpg";s:5:"width";i:1024;s:6:"height";i:626;s:9:"mime-type";s:10:"image/jpeg";}s:13:"sidebar-thumb";a:4:{s:4:"file";s:21:"Git-Clone-500x305.jpg";s:5:"width";i:500;s:6:"height";i:305;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}'),
(197, 80, '_wp_attachment_image_alt', 'Git Clone'),
(200, 73, '_wp_old_slug', 'get-out-of-the-cave-and-onto-github'),
(204, 73, '_yyarpp', '42'),
(205, 88, '_edit_last', '1'),
(206, 88, '_edit_lock', '1409066381:1'),
(207, 88, '_yyarpp', ''),
(210, 98, '_edit_last', '1'),
(211, 98, '_edit_lock', '1409068126:1'),
(213, 98, '_yyarpp', '105,73,42'),
(214, 105, '_edit_last', '1'),
(215, 105, '_edit_lock', '1409880240:1'),
(216, 105, '_wp_page_template', 'page-30dayrails.php'),
(217, 109, '_edit_last', '1'),
(218, 109, '_edit_lock', '1408762748:1'),
(219, 109, '_wp_page_template', 'page-home.php'),
(220, 111, '_edit_last', '1'),
(221, 111, '_edit_lock', '1409880594:1'),
(222, 111, '_wp_page_template', 'index.php'),
(223, 114, '_menu_item_type', 'post_type'),
(224, 114, '_menu_item_menu_item_parent', '0'),
(225, 114, '_menu_item_object_id', '111'),
(226, 114, '_menu_item_object', 'page'),
(227, 114, '_menu_item_target', ''),
(228, 114, '_menu_item_classes', 'a:1:{i:0;s:0:"";}'),
(229, 114, '_menu_item_xfn', ''),
(230, 114, '_menu_item_url', ''),
(232, 115, '_menu_item_type', 'post_type'),
(233, 115, '_menu_item_menu_item_parent', '0'),
(234, 115, '_menu_item_object_id', '105'),
(235, 115, '_menu_item_object', 'page'),
(236, 115, '_menu_item_target', ''),
(237, 115, '_menu_item_classes', 'a:1:{i:0;s:0:"";}'),
(238, 115, '_menu_item_xfn', ''),
(239, 115, '_menu_item_url', ''),
(241, 116, '_menu_item_type', 'custom'),
(242, 116, '_menu_item_menu_item_parent', '0'),
(243, 116, '_menu_item_object_id', '116'),
(244, 116, '_menu_item_object', 'custom'),
(245, 116, '_menu_item_target', ''),
(246, 116, '_menu_item_classes', 'a:1:{i:0;s:0:"";}'),
(247, 116, '_menu_item_xfn', ''),
(248, 116, '_menu_item_url', 'http://plsa'),
(249, 116, '_menu_item_orphaned', '1408719244'),
(250, 2, '_wp_trash_meta_status', 'publish'),
(251, 2, '_wp_trash_meta_time', '1408726298'),
(252, 137, '_edit_last', '1'),
(253, 137, '_edit_lock', '1409855129:1'),
(256, 147, '_edit_last', '1'),
(257, 147, '_edit_lock', '1409075401:1'),
(258, 147, '_wp_page_template', 'default'),
(259, 165, '_edit_last', '1'),
(260, 165, '_edit_lock', '1409075415:1'),
(261, 165, '_wp_page_template', 'default') ;
INSERT INTO `wp_postmeta` ( `meta_id`, `post_id`, `meta_key`, `meta_value`) VALUES
(264, 137, '_yyarpp', '73,42,98,105'),
(267, 52, '_yyarpp', '105'),
(269, 42, '_yyarpp', '98,105,73'),
(275, 178, '_edit_last', '1'),
(276, 178, '_edit_lock', '1409075072:1'),
(277, 178, '_wp_page_template', 'default'),
(278, 178, '_yyarpp', ''),
(279, 181, '_edit_last', '1'),
(280, 181, '_edit_lock', '1409075583:1'),
(281, 181, '_yyarpp', '98,105'),
(282, 178, '_wp_trash_meta_status', 'future'),
(283, 178, '_wp_trash_meta_time', '1409075384'),
(284, 188, '_edit_last', '1'),
(285, 188, '_edit_lock', '1409088099:1'),
(286, 188, '_yyarpp', '98,105,73,42'),
(287, 196, '_wp_attached_file', '2014/08/git-remotes.jpg'),
(288, 196, '_wp_attachment_metadata', 'a:5:{s:5:"width";i:600;s:6:"height";i:663;s:4:"file";s:23:"2014/08/git-remotes.jpg";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:23:"git-remotes-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:23:"git-remotes-271x300.jpg";s:5:"width";i:271;s:6:"height";i:300;s:9:"mime-type";s:10:"image/jpeg";}s:13:"sidebar-thumb";a:4:{s:4:"file";s:23:"git-remotes-500x552.jpg";s:5:"width";i:500;s:6:"height";i:552;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}'),
(289, 196, '_wp_attachment_image_alt', 'A beginners guide to the what, why & how of Git remotes'),
(292, 209, '_menu_item_type', 'post_type'),
(293, 209, '_menu_item_menu_item_parent', '0'),
(294, 209, '_menu_item_object_id', '9'),
(295, 209, '_menu_item_object', 'page'),
(296, 209, '_menu_item_target', ''),
(297, 209, '_menu_item_classes', 'a:1:{i:0;s:0:"";}'),
(298, 209, '_menu_item_xfn', ''),
(299, 209, '_menu_item_url', ''),
(301, 210, '_menu_item_type', 'custom'),
(302, 210, '_menu_item_menu_item_parent', '0'),
(303, 210, '_menu_item_object_id', '210'),
(304, 210, '_menu_item_object', 'custom'),
(305, 210, '_menu_item_target', ''),
(306, 210, '_menu_item_classes', 'a:1:{i:0;s:0:"";}'),
(307, 210, '_menu_item_xfn', ''),
(308, 210, '_menu_item_url', 'http://ww'),
(309, 210, '_menu_item_orphaned', '1409624427'),
(310, 211, '_edit_last', '1'),
(311, 211, '_edit_lock', '1409880407:1'),
(312, 211, '_wp_page_template', 'page-right-sidebar.php'),
(313, 211, '_yyarpp', ''),
(314, 213, '_menu_item_type', 'post_type'),
(315, 213, '_menu_item_menu_item_parent', '0'),
(316, 213, '_menu_item_object_id', '211'),
(317, 213, '_menu_item_object', 'page'),
(318, 213, '_menu_item_target', ''),
(319, 213, '_menu_item_classes', 'a:1:{i:0;s:0:"";}'),
(320, 213, '_menu_item_xfn', ''),
(321, 213, '_menu_item_url', ''),
(322, 222, '_wp_attached_file', '2014/09/TyRichards.jpg'),
(323, 222, '_wp_attachment_metadata', 'a:5:{s:5:"width";i:960;s:6:"height";i:960;s:4:"file";s:22:"2014/09/TyRichards.jpg";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:22:"TyRichards-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:22:"TyRichards-300x300.jpg";s:5:"width";i:300;s:6:"height";i:300;s:9:"mime-type";s:10:"image/jpeg";}s:13:"sidebar-thumb";a:4:{s:4:"file";s:22:"TyRichards-500x500.jpg";s:5:"width";i:500;s:6:"height";i:500;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}'),
(324, 222, '_wp_attachment_image_alt', 'Ty Richards - do_rails'),
(325, 211, '_thumbnail_id', '222'),
(326, 225, '_edit_last', '1'),
(327, 225, '_sidebar_to_replace', 'sidebar-default'),
(328, 225, '_edit_lock', '1409677113:1'),
(338, 225, '_condition', 'post-211'),
(339, 225, '_wp_old_slug', 'pages-sidebar'),
(340, 227, '_edit_last', '1'),
(341, 227, '_edit_lock', '1409772747:1'),
(342, 227, '_yyarpp', ''),
(347, 233, '_edit_last', '1'),
(348, 233, '_edit_lock', '1409772706:1'),
(349, 233, '_yyarpp', '238,227'),
(354, 238, '_edit_last', '1'),
(355, 238, '_edit_lock', '1409772939:1'),
(357, 238, '_yyarpp', '227,233,188,98,73,42'),
(370, 233, '_wp_old_slug', 'how-to-setup-sublime-with-the-command-line'),
(380, 260, '_edit_last', '1'),
(381, 260, '_edit_lock', '1409777030:1'),
(382, 260, '_wp_page_template', 'default'),
(383, 260, '_yyarpp', ''),
(384, 264, '_edit_last', '1'),
(385, 264, '_edit_lock', '1409775850:1'),
(386, 264, '_wp_page_template', 'default'),
(387, 264, '_yyarpp', ''),
(388, 270, '_edit_last', '1'),
(389, 270, '_edit_lock', '1409792426:1'),
(390, 270, '_wp_page_template', 'default'),
(391, 270, '_yyarpp', ''),
(392, 274, '_menu_item_type', 'post_type'),
(393, 274, '_menu_item_menu_item_parent', '0'),
(394, 274, '_menu_item_object_id', '270'),
(395, 274, '_menu_item_object', 'page'),
(396, 274, '_menu_item_target', ''),
(397, 274, '_menu_item_classes', 'a:1:{i:0;s:0:"";}'),
(398, 274, '_menu_item_xfn', ''),
(399, 274, '_menu_item_url', ''),
(401, 5, '_yyarpp', ''),
(402, 15, '_yyarpp', ''),
(404, 105, '_yyarpp', ''),
(409, 238, 'dsq_thread_id', ''),
(410, 31, 'dsq_thread_id', '2772903441'),
(412, 227, 'dsq_thread_id', ''),
(416, 233, 'dsq_thread_id', ''),
(420, 105, 'force_ssl', '1'),
(421, 105, 'force_ssl_children', '1'),
(423, 105, '_yoast_wpseo_focuskw', 'Learn Ruby on Rails'),
(424, 105, '_yoast_wpseo_title', 'Learn Ruby on Rails | 30-Day Rails'),
(425, 105, '_yoast_wpseo_metadesc', 'Build a Ruby on Rails app from start-to-finish in 30 days. Learn Ruby on Rails quickly by going through the 30-Day Rails crash-course.'),
(426, 105, '_yoast_wpseo_linkdex', '75'),
(427, 211, '_yoast_wpseo_focuskw', 'About') ;
INSERT INTO `wp_postmeta` ( `meta_id`, `post_id`, `meta_key`, `meta_value`) VALUES
(428, 211, '_yoast_wpseo_metadesc', 'do_rails is all about making it easier to learn Ruby on Rails. do_rails is for those who learn by doing.'),
(429, 211, '_yoast_wpseo_linkdex', '86'),
(430, 111, '_yyarpp', ''),
(431, 111, '_yoast_wpseo_focuskw', 'Rails Vitamins'),
(432, 111, '_yoast_wpseo_title', 'Rails Vitamins | do_rails'),
(433, 111, '_yoast_wpseo_metadesc', 'Rails Vitamins gives you a weekly dose of Ruby on Rails tips & tricks! Learn by doing.'),
(434, 111, '_yoast_wpseo_linkdex', '44'),
(435, 9, 'dsq_thread_id', ''),
(436, 9, '_yyarpp', ''),
(437, 9, '_yoast_wpseo_focuskw', 'Newsletter'),
(438, 9, '_yoast_wpseo_metadesc', 'Join the Rails Vitamins newsletter to receive weekly Ruby on Rails tips and tricks right to your inbox.'),
(439, 9, '_yoast_wpseo_linkdex', '44'),
(440, 9, '_yoast_wpseo_title', 'Join Newsletter | do_rails'),
(441, 15, '_yoast_wpseo_focuskw', 'Contact Us'),
(442, 15, '_yoast_wpseo_metadesc', 'Give me a shout anytime. Send a suggestion for the next Rails Vitamins post. Or any feedback on how we can do better.'),
(443, 15, '_yoast_wpseo_linkdex', '40') ;

#
# End of data contents of table `wp_postmeta`
# --------------------------------------------------------



#
# Delete any existing table `wp_posts`
#

DROP TABLE IF EXISTS `wp_posts`;


#
# Table structure of table `wp_posts`
#

CREATE TABLE `wp_posts` (
  `ID` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `post_author` bigint(20) unsigned NOT NULL DEFAULT '0',
  `post_date` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `post_date_gmt` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `post_content` longtext NOT NULL,
  `post_title` text NOT NULL,
  `post_excerpt` text NOT NULL,
  `post_status` varchar(20) NOT NULL DEFAULT 'publish',
  `comment_status` varchar(20) NOT NULL DEFAULT 'open',
  `ping_status` varchar(20) NOT NULL DEFAULT 'open',
  `post_password` varchar(20) NOT NULL DEFAULT '',
  `post_name` varchar(200) NOT NULL DEFAULT '',
  `to_ping` text NOT NULL,
  `pinged` text NOT NULL,
  `post_modified` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `post_modified_gmt` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `post_content_filtered` longtext NOT NULL,
  `post_parent` bigint(20) unsigned NOT NULL DEFAULT '0',
  `guid` varchar(255) NOT NULL DEFAULT '',
  `menu_order` int(11) NOT NULL DEFAULT '0',
  `post_type` varchar(20) NOT NULL DEFAULT 'post',
  `post_mime_type` varchar(100) NOT NULL DEFAULT '',
  `comment_count` bigint(20) NOT NULL DEFAULT '0',
  PRIMARY KEY (`ID`),
  KEY `post_name` (`post_name`),
  KEY `type_status_date` (`post_type`,`post_status`,`post_date`,`ID`),
  KEY `post_parent` (`post_parent`),
  KEY `post_author` (`post_author`)
) ENGINE=InnoDB AUTO_INCREMENT=296 DEFAULT CHARSET=utf8;


#
# Data contents of table `wp_posts`
#
INSERT INTO `wp_posts` ( `ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(2, 1, '2014-06-16 16:07:20', '2014-06-16 16:07:20', 'This is an example page. It\'s different from a blog post because it will stay in one place and will show up in your site navigation (in most themes). Most people start with an About page that introduces them to potential site visitors. It might say something like this:\n\n<blockquote>Hi there! I\'m a bike messenger by day, aspiring actor by night, and this is my blog. I live in Los Angeles, have a great dog named Jack, and I like pi&#241;a coladas. (And gettin\' caught in the rain.)</blockquote>\n\n...or something like this:\n\n<blockquote>The XYZ Doohickey Company was founded in 1971, and has been providing quality doohickeys to the public ever since. Located in Gotham City, XYZ employs over 2,000 people and does all kinds of awesome things for the Gotham community.</blockquote>\n\nAs a new WordPress user, you should go to <a href="http://dev.dorails.com/wp-admin/">your dashboard</a> to delete this page and create new pages for your content. Have fun!', 'Journal', '', 'trash', 'closed', 'closed', '', 'journal', '', '', '2014-08-22 11:51:38', '2014-08-22 16:51:38', '', 0, 'http://dev.dorails.com/?page_id=2', 0, 'page', '', 0),
(4, 1, '2014-06-16 17:57:57', '2014-06-16 17:57:57', 'This is an example page. It\'s different from a blog post because it will stay in one place and will show up in your site navigation (in most themes). Most people start with an About page that introduces them to potential site visitors. It might say something like this:\n\n<blockquote>Hi there! I\'m a bike messenger by day, aspiring actor by night, and this is my blog. I live in Los Angeles, have a great dog named Jack, and I like pi&#241;a coladas. (And gettin\' caught in the rain.)</blockquote>\n\n...or something like this:\n\n<blockquote>The XYZ Doohickey Company was founded in 1971, and has been providing quality doohickeys to the public ever since. Located in Gotham City, XYZ employs over 2,000 people and does all kinds of awesome things for the Gotham community.</blockquote>\n\nAs a new WordPress user, you should go to <a href="http://dev.dorails.com/wp-admin/">your dashboard</a> to delete this page and create new pages for your content. Have fun!', 'Journal', '', 'inherit', 'open', 'open', '', '2-revision-v1', '', '', '2014-06-16 17:57:57', '2014-06-16 17:57:57', '', 2, 'http://dev.dorails.com/?p=4', 0, 'revision', '', 0),
(5, 1, '2014-06-16 17:58:46', '2014-06-16 17:58:46', '<h1 style="text-align: center;">Privacy Policy</h1>\r\n\r\n<hr />\r\n\r\n<h3> What information do we collect?</h3>\r\nWe collect information from you when you register on our site, place an order, subscribe to our newsletter, respond to a survey, fill out a form or send band information.\r\n\r\nWhen ordering or registering on our site, as appropriate, you may be asked to enter your: name, e-mail address, mailing address or phone number. You may, however, visit our site anonymously.\r\n<h3>What do we use your information for?</h3>\r\nAny of the information we collect from you may be used in one of the following ways:\r\n\r\n; To personalize your experience\r\n(your information helps us to better respond to your individual needs)\r\n\r\n; To improve our website\r\n(we continually strive to improve our website offerings based on the information and feedback we receive from you)\r\n\r\n; To improve customer service\r\n(your information helps us to more effectively respond to your customer service requests and support needs)\r\n\r\n; To administer a contest, promotion, survey or other site feature\r\n\r\n; To send periodic emails\r\n<blockquote>The email address you provide for order processing, may be used to send you information and updates pertaining to your order, in addition to receiving occasional company news, updates, related product or service information, etc.</blockquote>\r\nNote: If at any time you would like to unsubscribe from receiving future emails, we include detailed unsubscribe instructions at the bottom of each email.\r\n<h3>How do we protect your information?</h3>\r\nWe implement a variety of security measures to maintain the safety of your personal information when you place an order or enter, submit, or access your personal information.\r\n\r\nWe offer the use of a secure server. All supplied sensitive/credit information is transmitted via Secure Socket Layer (SSL) technology and then encrypted into our Payment gateway providers database only to be accessible by those authorized with special access rights to such systems, and are required to?keep the information confidential.\r\n\r\nAfter a transaction, your private information (credit cards, social security numbers, financials, etc.) will not be stored on our servers.\r\n<h3>Do we use cookies?</h3>\r\nYes (Cookies are small files that a site or its service provider transfers to your computers hard drive through your Web browser (if you allow) that enables the sites or service providers systems to recognize your browser and capture and remember certain information\r\n\r\nWe use cookies to understand and save your preferences for future visits, keep track of advertisements and compile aggregate data about site traffic and site interaction so that we can offer better site experiences and tools in the future. We may contract with third-party service providers to assist us in better understanding our site visitors. These service providers are not permitted to use the information collected on our behalf except to help us conduct and improve our business.\r\n\r\nIf you prefer, you can choose to have your computer warn you each time a cookie is being sent, or you can choose to turn off all cookies via your browser settings. Like most websites, if you turn your cookies off, some of our services may not function properly. However, you can still place orders over the telephone or by contacting customer service.\r\n<h3>Do we disclose any information to outside parties?</h3>\r\nWe do not sell, trade, or otherwise transfer to outside parties your personally identifiable information. This does not include trusted third parties who assist us in operating our website, conducting our business, or servicing you, so long as those parties agree to keep this information confidential. We may also release your information when we believe release is appropriate to comply with the law, enforce our site policies, or protect ours or others rights, property, or safety. However, non-personally identifiable visitor information may be provided to other parties for marketing, advertising, or other uses.\r\n<h3>Third party links</h3>\r\nOccasionally, at our discretion, we may include or offer third party products or services on our website. These third party sites have separate and independent privacy policies. We therefore have no responsibility or liability for the content and activities of these linked sites. Nonetheless, we seek to protect the integrity of our site and welcome any feedback about these sites.\r\n<h3>California Online Privacy Protection Act Compliance</h3>\r\nBecause we value your privacy we have taken the necessary precautions to be in compliance with the California Online Privacy Protection Act. We therefore will not distribute your personal information to outside parties without your consent.\r\n<h3>Childrens Online Privacy Protection Act Compliance</h3>\r\nWe are in compliance with the requirements of COPPA (Childrens Online Privacy Protection Act), we do not collect any information from anyone under 13 years of age. Our website, products and services are all directed to people who are at least 13 years old or older.\r\n<h3>Online Privacy Policy Only</h3>\r\nThis online privacy policy applies only to information collected through our website and not to information collected offline.\r\n<h3>Your Consent</h3>\r\nBy using our site, you consent to our web site privacy policy.\r\n<h3>Changes to our Privacy Policy</h3>\r\nIf we decide to change our privacy policy, we will post those changes on this page, and/or update the Privacy Policy modification date below.\r\n\r\nThis policy was last modified on 6/30/2014\r\n<h3>Contacting Us</h3>\r\nIf there are any questions regarding this privacy policy you may contact us using the information below.\r\n\r\nhttp://dev.dorails.com\r\n\r\nParadox\r\ninfo@paradoxsites.com', 'Privacy Policy', '', 'publish', 'closed', 'open', '', 'privacy', '', '', '2014-09-03 20:07:20', '2014-09-04 01:07:20', '', 0, 'http://dev.dorails.com/?page_id=5', 0, 'page', '', 0),
(6, 1, '2014-06-16 17:58:46', '2014-06-16 17:58:46', '', 'Privacy', '', 'inherit', 'open', 'open', '', '5-revision-v1', '', '', '2014-06-16 17:58:46', '2014-06-16 17:58:46', '', 5, 'http://dev.dorails.com/5-revision-v1/', 0, 'revision', '', 0),
(7, 1, '2014-06-16 17:59:47', '2014-06-16 17:59:47', '', 'Privacy Policy', '', 'inherit', 'open', 'open', '', '5-autosave-v1', '', '', '2014-06-16 17:59:47', '2014-06-16 17:59:47', '', 5, 'http://dev.dorails.com/5-autosave-v1/', 0, 'revision', '', 0),
(8, 1, '2014-06-16 18:00:48', '2014-06-16 18:00:48', '<h3>What information do we collect?</h3>\r\n\r\nWe collect information from you when you register on our site, place an order, subscribe to our newsletter, respond to a survey, fill out a form or send band information.\r\n\r\nWhen ordering or registering on our site, as appropriate, you may be asked to enter your: name, e-mail address, mailing address or phone number. You may, however, visit our site anonymously.\r\n<h3>What do we use your information for?</h3>\r\nAny of the information we collect from you may be used in one of the following ways:\r\n\r\n; To personalize your experience\r\n(your information helps us to better respond to your individual needs)\r\n\r\n; To improve our website\r\n(we continually strive to improve our website offerings based on the information and feedback we receive from you)\r\n\r\n; To improve customer service\r\n(your information helps us to more effectively respond to your customer service requests and support needs)\r\n\r\n; To administer a contest, promotion, survey or other site feature\r\n\r\n; To send periodic emails\r\n<blockquote>The email address you provide for order processing, may be used to send you information and updates pertaining to your order, in addition to receiving occasional company news, updates, related product or service information, etc.</blockquote>\r\nNote: If at any time you would like to unsubscribe from receiving future emails, we include detailed unsubscribe instructions at the bottom of each email.\r\n<h3>How do we protect your information?</h3>\r\nWe implement a variety of security measures to maintain the safety of your personal information when you place an order or enter, submit, or access your personal information.\r\n\r\nWe offer the use of a secure server. All supplied sensitive/credit information is transmitted via Secure Socket Layer (SSL) technology and then encrypted into our Payment gateway providers database only to be accessible by those authorized with special access rights to such systems, and are required to?keep the information confidential.\r\n\r\nAfter a transaction, your private information (credit cards, social security numbers, financials, etc.) will not be stored on our servers.\r\n<h3>Do we use cookies?</h3>\r\nYes (Cookies are small files that a site or its service provider transfers to your computers hard drive through your Web browser (if you allow) that enables the sites or service providers systems to recognize your browser and capture and remember certain information\r\n\r\nWe use cookies to understand and save your preferences for future visits, keep track of advertisements and compile aggregate data about site traffic and site interaction so that we can offer better site experiences and tools in the future. We may contract with third-party service providers to assist us in better understanding our site visitors. These service providers are not permitted to use the information collected on our behalf except to help us conduct and improve our business.\r\n\r\nIf you prefer, you can choose to have your computer warn you each time a cookie is being sent, or you can choose to turn off all cookies via your browser settings. Like most websites, if you turn your cookies off, some of our services may not function properly. However, you can still place orders over the telephone or by contacting customer service.\r\n<h3>Do we disclose any information to outside parties?</h3>\r\nWe do not sell, trade, or otherwise transfer to outside parties your personally identifiable information. This does not include trusted third parties who assist us in operating our website, conducting our business, or servicing you, so long as those parties agree to keep this information confidential. We may also release your information when we believe release is appropriate to comply with the law, enforce our site policies, or protect ours or others rights, property, or safety. However, non-personally identifiable visitor information may be provided to other parties for marketing, advertising, or other uses.\r\n<h3>Third party links</h3>\r\nOccasionally, at our discretion, we may include or offer third party products or services on our website. These third party sites have separate and independent privacy policies. We therefore have no responsibility or liability for the content and activities of these linked sites. Nonetheless, we seek to protect the integrity of our site and welcome any feedback about these sites.\r\n<h3>California Online Privacy Protection Act Compliance</h3>\r\nBecause we value your privacy we have taken the necessary precautions to be in compliance with the California Online Privacy Protection Act. We therefore will not distribute your personal information to outside parties without your consent.\r\n<h3>Childrens Online Privacy Protection Act Compliance</h3>\r\nWe are in compliance with the requirements of COPPA (Childrens Online Privacy Protection Act), we do not collect any information from anyone under 13 years of age. Our website, products and services are all directed to people who are at least 13 years old or older.\r\n<h3>Online Privacy Policy Only</h3>\r\nThis online privacy policy applies only to information collected through our website and not to information collected offline.\r\n<h3>Your Consent</h3>\r\nBy using our site, you consent to our web site privacy policy.\r\n<h3>Changes to our Privacy Policy</h3>\r\nIf we decide to change our privacy policy, we will post those changes on this page, and/or update the Privacy Policy modification date below.\r\n\r\nThis policy was last modified on 6/30/2014\r\n<h3>Contacting Us</h3>\r\nIf there are any questions regarding this privacy policy you may contact us using the information below.\r\n\r\nhttp://dev.dorails.com\r\n\r\nParadox\r\ninfo@paradoxsites.com', 'Privacy Policy', '', 'inherit', 'open', 'open', '', '5-revision-v1', '', '', '2014-06-16 18:00:48', '2014-06-16 18:00:48', '', 5, 'http://dev.dorails.com/5-revision-v1/', 0, 'revision', '', 0),
(9, 1, '2014-06-16 18:01:52', '2014-06-16 18:01:52', '[gravityform id="1" name="Want more?" ajax="true"]', 'Get Newsletter', '', 'publish', 'closed', 'open', '', 'newsletter', '', '', '2014-09-04 20:38:09', '2014-09-05 01:38:09', '', 0, 'http://dev.dorails.com/?page_id=9', 0, 'page', '', 0),
(10, 1, '2014-06-16 18:01:52', '2014-06-16 18:01:52', '', 'Subscribe', '', 'inherit', 'open', 'open', '', '9-revision-v1', '', '', '2014-06-16 18:01:52', '2014-06-16 18:01:52', '', 9, 'http://dev.dorails.com/9-revision-v1/', 0, 'revision', '', 0),
(15, 1, '2014-06-16 18:23:28', '2014-06-16 23:23:28', '<h1 style="text-align: center;">Contact Us</h1>\r\n\r\n<hr />\r\n\r\n[gravityform id="2" name="Contact Us" ajax="true"]', 'Contact Us', '', 'publish', 'closed', 'closed', '', 'contact', '', '', '2014-09-04 20:40:10', '2014-09-05 01:40:10', '', 0, 'http://dev.dorails.com/?page_id=15', 0, 'page', '', 0),
(16, 1, '2014-06-16 18:23:28', '2014-06-16 18:23:28', '', 'Start a Project', '', 'inherit', 'open', 'open', '', '15-revision-v1', '', '', '2014-06-16 18:23:28', '2014-06-16 18:23:28', '', 15, 'http://dev.dorails.com/15-revision-v1/', 0, 'revision', '', 0),
(19, 1, '2014-06-16 19:57:04', '2014-06-16 19:57:04', ' ', '', '', 'publish', 'open', 'open', '', '19', '', '', '2014-09-03 19:59:52', '2014-09-04 00:59:52', '', 0, 'http://dev.dorails.com/?p=19', 4, 'nav_menu_item', '', 0),
(20, 1, '2014-06-16 19:57:04', '2014-06-16 19:57:04', ' ', '', '', 'publish', 'open', 'open', '', '20', '', '', '2014-09-03 19:59:52', '2014-09-04 00:59:52', '', 0, 'http://dev.dorails.com/?p=20', 1, 'nav_menu_item', '', 0),
(21, 1, '2014-06-16 19:57:04', '2014-06-16 19:57:04', ' ', '', '', 'publish', 'open', 'open', '', '21', '', '', '2014-09-03 19:59:52', '2014-09-04 00:59:52', '', 0, 'http://dev.dorails.com/?p=21', 3, 'nav_menu_item', '', 0),
(35, 1, '2014-06-17 14:30:39', '2014-06-17 19:30:39', '[gravityform id="1" name="Want more?" ajax="true"]', 'Subscribe', '', 'inherit', 'open', 'open', '', '9-revision-v1', '', '', '2014-06-17 14:30:39', '2014-06-17 19:30:39', '', 9, 'http://dev.dev.dorails.com/9-revision-v1/', 0, 'revision', '', 0),
(38, 1, '2014-06-17 15:51:06', '2014-06-17 20:51:06', '', 'Contact Us', '', 'inherit', 'open', 'open', '', '15-revision-v1', '', '', '2014-06-17 15:51:06', '2014-06-17 20:51:06', '', 15, 'http://dev.dev.dorails.com/15-revision-v1/', 0, 'revision', '', 0),
(39, 1, '2014-06-17 15:51:21', '2014-06-17 20:51:21', '[gravityform id="2" name="Contact Us" ajax="true"]', 'Contact Us', '', 'inherit', 'open', 'open', '', '15-revision-v1', '', '', '2014-06-17 15:51:21', '2014-06-17 20:51:21', '', 15, 'http://dev.dev.dorails.com/15-revision-v1/', 0, 'revision', '', 0),
(42, 1, '2014-08-01 12:57:23', '2014-08-01 17:57:23', 'Do you feel like your still doing web/software dev in the stoneage? Still using FTP or SVN? Ever have a client ask you to put things back how they were 2 weeks ago? Or do you have a hard time collaborating with other developers?\r\n\r\nImagine you can rewind or revert to any stage in development at the drop of a hat. And when it’s time to work on a risky or experimental feature you could get messy without affecting the main source code of the project. Imagine it is simple and straight forward to collaborate with other devs on your team without stepping on each others toes. For these and a million other reasons, you need to use Git! Git is a small but powerful tool vital to any Rails developer. If you are new to Rails and are ready to usher in a new age for yourself, it’s best to just jump on the Git bandwagon right away so you’ve got a leg to stand on.\r\n\r\nNote: Their is a distinction between Git and Github. Although related and used in tandem, it’s important to know that Git is the version control system on your local computer and Github is  a web-based hosting service. We will focus on Git for today but I do have a <a title="Hop on the Github bandwagon" href="http://dev.dorails.com/railsvitamins/hop-on-the-github-bandwagon/">post about Github</a> when you are ready.\r\n\r\nHere’s a fast track to getting setup with Git:\r\n<h3>1. Open Terminal</h3>\r\nFind the application called Terminal on your Mac (or Windows Equivalent) and open it. You should see a black command-line screen once opened\r\n<h3>2. Setup Git</h3>\r\nTo setup Git on your computer, type these in the command-line ($ signifies that this is a command, don’t type the $):\r\n<pre>$ git config --global user.name “Ty Richards”</pre>\r\n<pre>$ git config --global user.name   # to confirm name saved</pre>\r\n<pre>$ git config --global user.email “me@tyrichards.com”</pre>\r\n<pre>$ git config --global user.email   # to confirm email saved</pre>\r\n<h3>3. Create New Repo</h3>\r\nTo setup a Git repo for a new project or give an existing project a repo:\r\n<pre>$ cd ~/Sites/new_project  # travel to your new project folder in terminal</pre>\r\n<pre>$ pwd   # verify that you are in that directory</pre>\r\n<pre>$ git init  # creates a new repo</pre>\r\n<pre>$ git status # to see what files are being tracked$ git add .  # adds all files in current folder)</pre>\r\n<pre>$ git commit -a -m “initial commit”  # commits all(-a) modified files and includes a message(-m)</pre>\r\n<h3>4. Do Stuff</h3>\r\nAfter every task you do you can:\r\n<pre>$ git status # to see what is being tracked and modified</pre>\r\n<pre>$ git add .</pre>\r\n<pre>$ git commit -am “Build initial scaffolding”</pre>\r\nand repeat\r\n\r\nWith this you’ll be setup and ready to go in the era of Git. At it’s best you have full control of your source code revisions and collaboration, and at worst you have a nicely documented history of revisions that have been made on the project. There are many more advanced features of Git and GitHub makes things more exciting too. With Git you also need to understand branches, remotes, and the .gitignore file, but you are at least jumpstarted into the world of Git. More on these other things later.', 'Get going with Git', '', 'publish', 'open', 'open', '', 'get-going-with-git', '', '', '2014-08-26 10:26:07', '2014-08-26 15:26:07', '', 0, 'http://dev.dorails.com/?p=42', 0, 'post', '', 3),
(43, 1, '2014-08-01 12:57:23', '2014-08-01 17:57:23', 'Do you feel like your still doing web/software dev in the stoneage? Still using FTP or SVN? Ever have a client ask you to put things back how they were 2 weeks ago? Or do you have a hard time collaborating with other developers?\r\n\r\nImagine you can rewind or revert to any stage in development at the drop of a hat. And when it’s time to work on a risky or experimental feature you could get messy without affecting the main source code of the project. Imagine it is simple and straight forward to collaborate with other devs on your team without stepping on each others toes. For these and a million other reasons, you need to use Git! Git is a small but powerful tool vital to any Rails developer. If you are new to Rails and are ready to usher in a new age for yourself, it’s best to just jump on the Git bandwagon right away so you’ve got a leg to stand on.\r\n\r\nNote: Their is a distinction between Git and Github. Although related and used in tandem, it’s important to know that Git is the version control system on your local computer and Github is  a web-based hosting service. We will focus on Git\r\n\r\nHere’s a fast track to getting setup with Git:\r\n<ol>\r\n	<li>Find the application called Terminal on your Mac (or Windows Equivalent) and open it. You should see a black command-line screen once opened</li>\r\n	<li>To setup Git on your computer, type these in the command-line ($ signifies that this is a command, don’t type the $):\r\n$ git config —global user.name “Ty Richards”\r\n$ git config —global user.name   # to confirm name saved\r\n$ git config —global user.email “me@tyrichards.com”\r\n$ git config —global user.email   # to confirm email saved</li>\r\n	<li>To setup a Git repo for a new project or give an existing project a repo:\r\n$ cd ~/Sites/new_project  # travel to your new project folder in terminal\r\n$ pwd   # verify that you are in that directory\r\n$ git init  # creates a new repo\r\n$ git status # to see what files are being tracked\r\n$ git add .  # adds all files in current folder)\r\n$ git commit -a -m “initial commit”  # commits all(-a) modified files and includes a message(-m)</li>\r\n	<li>After every task you do you can:\r\n$ git status\r\n$ git add .\r\n$ git commit -am “Build initial scaffolding”\r\nrepeat</li>\r\n</ol>\r\nWith this you’ll be setup and ready to go in the era of Git. At it’s best you have full control of your source code revisions and collaboration, and at worst you have a nicely documented history of revisions that have been made on the project. There are many more advanced features of Git and GitHub makes things more exciting too. With Git you also need to understand branches, remotes, and the .gitignore file, but you are at least jumpstarted into the world of Git. More on these other things later.', 'Get going with Git', '', 'inherit', 'open', 'open', '', '42-revision-v1', '', '', '2014-08-01 12:57:23', '2014-08-01 17:57:23', '', 42, 'http://dev.dorails.com/42-revision-v1/', 0, 'revision', '', 0),
(44, 1, '2014-08-02 01:06:14', '2014-08-02 06:06:14', 'Do you feel like your still doing web/software dev in the stoneage? Still using FTP or SVN? Ever have a client ask you to put things back how they were 2 weeks ago? Or do you have a hard time collaborating with other developers?\r\n\r\nImagine you can rewind or revert to any stage in development at the drop of a hat. And when it’s time to work on a risky or experimental feature you could get messy without affecting the main source code of the project. Imagine it is simple and straight forward to collaborate with other devs on your team without stepping on each others toes. For these and a million other reasons, you need to use Git! Git is a small but powerful tool vital to any Rails developer. If you are new to Rails and are ready to usher in a new age for yourself, it’s best to just jump on the Git bandwagon right away so you’ve got a leg to stand on.\r\n\r\nNote: Their is a distinction between Git and Github. Although related and used in tandem, it’s important to know that Git is the version control system on your local computer and Github is  a web-based hosting service. We will focus on Git\r\n\r\nHere’s a fast track to getting setup with Git:\r\n<ol>\r\n	<li>Find the application called Terminal on your Mac (or Windows Equivalent) and open it. You should see a black command-line screen once opened</li>\r\n	<li>To setup Git on your computer, type these in the command-line ($ signifies that this is a command, don’t type the $):\r\n<pre>$ git config —global user.name “Ty Richards”\r\n$ git config —global user.name   # to confirm name saved\r\n$ git config —global user.email “me@tyrichards.com”\r\n$ git config —global user.email   # to confirm email saved</li></pre>\r\n	<li>To setup a Git repo for a new project or give an existing project a repo:\r\n$ cd ~/Sites/new_project  # travel to your new project folder in terminal\r\n$ pwd   # verify that you are in that directory\r\n$ git init  # creates a new repo\r\n$ git status # to see what files are being tracked\r\n$ git add .  # adds all files in current folder)\r\n$ git commit -a -m “initial commit”  # commits all(-a) modified files and includes a message(-m)</li>\r\n	<li>After every task you do you can:\r\n$ git status\r\n$ git add .\r\n$ git commit -am “Build initial scaffolding”\r\nrepeat</li>\r\n</ol>\r\nWith this you’ll be setup and ready to go in the era of Git. At it’s best you have full control of your source code revisions and collaboration, and at worst you have a nicely documented history of revisions that have been made on the project. There are many more advanced features of Git and GitHub makes things more exciting too. With Git you also need to understand branches, remotes, and the .gitignore file, but you are at least jumpstarted into the world of Git. More on these other things later.', 'Get going with Git', '', 'inherit', 'open', 'open', '', '42-revision-v1', '', '', '2014-08-02 01:06:14', '2014-08-02 06:06:14', '', 42, 'http://dev.dorails.com/42-revision-v1/', 0, 'revision', '', 0),
(45, 1, '2014-08-26 10:25:15', '2014-08-26 15:25:15', 'Do you feel like your still doing web/software dev in the stoneage? Still using FTP or SVN? Ever have a client ask you to put things back how they were 2 weeks ago? Or do you have a hard time collaborating with other developers?\n\nImagine you can rewind or revert to any stage in development at the drop of a hat. And when it’s time to work on a risky or experimental feature you could get messy without affecting the main source code of the project. Imagine it is simple and straight forward to collaborate with other devs on your team without stepping on each others toes. For these and a million other reasons, you need to use Git! Git is a small but powerful tool vital to any Rails developer. If you are new to Rails and are ready to usher in a new age for yourself, it’s best to just jump on the Git bandwagon right away so you’ve got a leg to stand on.\n\nNote: Their is a distinction between Git and Github. Although related and used in tandem, it’s important to know that Git is the version control system on your local computer and Github is  a web-based hosting service. We will focus on Git for today but I do have a post about Github when you are ready.\n\nHere’s a fast track to getting setup with Git:\n<h3>1. Open Terminal</h3>\nFind the application called Terminal on your Mac (or Windows Equivalent) and open it. You should see a black command-line screen once opened\n<h3>2. Setup Git</h3>\nTo setup Git on your computer, type these in the command-line ($ signifies that this is a command, don’t type the $):\n<pre>$ git config --global user.name “Ty Richards”</pre>\n<pre>$ git config --global user.name   # to confirm name saved</pre>\n<pre>$ git config --global user.email “me@tyrichards.com”</pre>\n<pre>$ git config --global user.email   # to confirm email saved</pre>\n<h3>3. Create New Repo</h3>\nTo setup a Git repo for a new project or give an existing project a repo:\n<pre>$ cd ~/Sites/new_project  # travel to your new project folder in terminal</pre>\n<pre>$ pwd   # verify that you are in that directory</pre>\n<pre>$ git init  # creates a new repo</pre>\n<pre>$ git status # to see what files are being tracked$ git add .  # adds all files in current folder)</pre>\n<pre>$ git commit -a -m “initial commit”  # commits all(-a) modified files and includes a message(-m)</pre>\n<h3>4. Do Stuff</h3>\nAfter every task you do you can:\n<pre>$ git status # to see what is being tracked and modified</pre>\n<pre>$ git add .</pre>\n<pre>$ git commit -am “Build initial scaffolding”</pre>\nand repeat\n\nWith this you’ll be setup and ready to go in the era of Git. At it’s best you have full control of your source code revisions and collaboration, and at worst you have a nicely documented history of revisions that have been made on the project. There are many more advanced features of Git and GitHub makes things more exciting too. With Git you also need to understand branches, remotes, and the .gitignore file, but you are at least jumpstarted into the world of Git. More on these other things later.', 'Get going with Git', '', 'inherit', 'open', 'open', '', '42-autosave-v1', '', '', '2014-08-26 10:25:15', '2014-08-26 15:25:15', '', 42, 'http://dev.dorails.com/42-autosave-v1/', 0, 'revision', '', 0),
(46, 1, '2014-08-02 01:07:24', '2014-08-02 06:07:24', 'Do you feel like your still doing web/software dev in the stoneage? Still using FTP or SVN? Ever have a client ask you to put things back how they were 2 weeks ago? Or do you have a hard time collaborating with other developers?\r\n\r\nImagine you can rewind or revert to any stage in development at the drop of a hat. And when it’s time to work on a risky or experimental feature you could get messy without affecting the main source code of the project. Imagine it is simple and straight forward to collaborate with other devs on your team without stepping on each others toes. For these and a million other reasons, you need to use Git! Git is a small but powerful tool vital to any Rails developer. If you are new to Rails and are ready to usher in a new age for yourself, it’s best to just jump on the Git bandwagon right away so you’ve got a leg to stand on.\r\n\r\nNote: Their is a distinction between Git and Github. Although related and used in tandem, it’s important to know that Git is the version control system on your local computer and Github is  a web-based hosting service. We will focus on Git\r\n\r\nHere’s a fast track to getting setup with Git:\r\n<ol>\r\n	<li>Find the application called Terminal on your Mac (or Windows Equivalent) and open it. You should see a black command-line screen once opened</li>\r\n	<li>To setup Git on your computer, type these in the command-line ($ signifies that this is a command, don’t type the $):\r\n<pre><code class="html">$ git config —global user.name “Ty Richards”\r\n$ git config —global user.name   # to confirm name saved\r\n$ git config —global user.email “me@tyrichards.com”\r\n$ git config —global user.email   # to confirm email saved</li></code></pre>\r\n	<li>To setup a Git repo for a new project or give an existing project a repo:\r\n$ cd ~/Sites/new_project  # travel to your new project folder in terminal\r\n$ pwd   # verify that you are in that directory\r\n$ git init  # creates a new repo\r\n$ git status # to see what files are being tracked\r\n$ git add .  # adds all files in current folder)\r\n$ git commit -a -m “initial commit”  # commits all(-a) modified files and includes a message(-m)</li>\r\n	<li>After every task you do you can:\r\n$ git status\r\n$ git add .\r\n$ git commit -am “Build initial scaffolding”\r\nrepeat</li>\r\n</ol>\r\nWith this you’ll be setup and ready to go in the era of Git. At it’s best you have full control of your source code revisions and collaboration, and at worst you have a nicely documented history of revisions that have been made on the project. There are many more advanced features of Git and GitHub makes things more exciting too. With Git you also need to understand branches, remotes, and the .gitignore file, but you are at least jumpstarted into the world of Git. More on these other things later.', 'Get going with Git', '', 'inherit', 'open', 'open', '', '42-revision-v1', '', '', '2014-08-02 01:07:24', '2014-08-02 06:07:24', '', 42, 'http://dev.dorails.com/42-revision-v1/', 0, 'revision', '', 0),
(47, 1, '2014-08-02 01:08:46', '2014-08-02 06:08:46', 'Do you feel like your still doing web/software dev in the stoneage? Still using FTP or SVN? Ever have a client ask you to put things back how they were 2 weeks ago? Or do you have a hard time collaborating with other developers?\r\n\r\nImagine you can rewind or revert to any stage in development at the drop of a hat. And when it’s time to work on a risky or experimental feature you could get messy without affecting the main source code of the project. Imagine it is simple and straight forward to collaborate with other devs on your team without stepping on each others toes. For these and a million other reasons, you need to use Git! Git is a small but powerful tool vital to any Rails developer. If you are new to Rails and are ready to usher in a new age for yourself, it’s best to just jump on the Git bandwagon right away so you’ve got a leg to stand on.\r\n\r\nNote: Their is a distinction between Git and Github. Although related and used in tandem, it’s important to know that Git is the version control system on your local computer and Github is  a web-based hosting service. We will focus on Git\r\n\r\nHere’s a fast track to getting setup with Git:\r\n<h2>1. Open Terminal</h2>\r\nFind the application called Terminal on your Mac (or Windows Equivalent) and open it. You should see a black command-line screen once opened\r\n<ol>\r\n	<li>To setup Git on your computer, type these in the command-line ($ signifies that this is a command, don’t type the $):\r\n<pre>$ git config —global user.name “Ty Richards”\r\n$ git config —global user.name   # to confirm name saved\r\n$ git config —global user.email “me@tyrichards.com”\r\n$ git config —global user.email   # to confirm email saved</pre>\r\n</li>\r\n	<li>To setup a Git repo for a new project or give an existing project a repo:\r\n$ cd ~/Sites/new_project  # travel to your new project folder in terminal\r\n$ pwd   # verify that you are in that directory\r\n$ git init  # creates a new repo\r\n$ git status # to see what files are being tracked\r\n$ git add .  # adds all files in current folder)\r\n$ git commit -a -m “initial commit”  # commits all(-a) modified files and includes a message(-m)</li>\r\n	<li>After every task you do you can:\r\n$ git status\r\n$ git add .\r\n$ git commit -am “Build initial scaffolding”\r\nrepeat</li>\r\n</ol>\r\nWith this you’ll be setup and ready to go in the era of Git. At it’s best you have full control of your source code revisions and collaboration, and at worst you have a nicely documented history of revisions that have been made on the project. There are many more advanced features of Git and GitHub makes things more exciting too. With Git you also need to understand branches, remotes, and the .gitignore file, but you are at least jumpstarted into the world of Git. More on these other things later.', 'Get going with Git', '', 'inherit', 'open', 'open', '', '42-revision-v1', '', '', '2014-08-02 01:08:46', '2014-08-02 06:08:46', '', 42, 'http://dev.dorails.com/42-revision-v1/', 0, 'revision', '', 0),
(48, 1, '2014-08-02 01:13:53', '2014-08-02 06:13:53', 'Do you feel like your still doing web/software dev in the stoneage? Still using FTP or SVN? Ever have a client ask you to put things back how they were 2 weeks ago? Or do you have a hard time collaborating with other developers?\r\n\r\nImagine you can rewind or revert to any stage in development at the drop of a hat. And when it’s time to work on a risky or experimental feature you could get messy without affecting the main source code of the project. Imagine it is simple and straight forward to collaborate with other devs on your team without stepping on each others toes. For these and a million other reasons, you need to use Git! Git is a small but powerful tool vital to any Rails developer. If you are new to Rails and are ready to usher in a new age for yourself, it’s best to just jump on the Git bandwagon right away so you’ve got a leg to stand on.\r\n\r\nNote: Their is a distinction between Git and Github. Although related and used in tandem, it’s important to know that Git is the version control system on your local computer and Github is  a web-based hosting service. We will focus on Git\r\n\r\nHere’s a fast track to getting setup with Git:\r\n<h2>1. Open Terminal</h2>\r\nFind the application called Terminal on your Mac (or Windows Equivalent) and open it. You should see a black command-line screen once opened\r\n<h2>2. Setup Git</h2>\r\nTo setup Git on your computer, type these in the command-line ($ signifies that this is a command, don’t type the $):\r\n\r\n<pre>\r\n$ git config —global user.name “Ty Richards”\r\n\r\n$ git config —global user.name   # to confirm name saved\r\n\r\n$ git config —global user.email “me@tyrichards.com”\r\n\r\n$ git config —global user.email   # to confirm email saved\r\n</pre>\r\n\r\n<h2>3. Create New Repo</h2>\r\nTo setup a Git repo for a new project or give an existing project a repo:\r\n\r\n<pre>\r\n$ cd ~/Sites/new_project  # travel to your new project folder in terminal\r\n$ pwd   # verify that you are in that directory\r\n$ git init  # creates a new repo\r\n$ git status # to see what files are being tracked\r\n$ git add .  # adds all files in current folder)\r\n$ git commit -a -m “initial commit”  # commits all(-a) modified files and includes a message(-m)\r\n</pre>\r\n\r\n<h2>4. Do Stuff</h2>\r\nAfter every task you do you can:\r\n<pre>\r\n$ git status # to see what is being tracked and modified\r\n$ git add .\r\n$ git commit -am “Build initial scaffolding”\r\nrepeat\r\n</pre>\r\n\r\nWith this you’ll be setup and ready to go in the era of Git. At it’s best you have full control of your source code revisions and collaboration, and at worst you have a nicely documented history of revisions that have been made on the project. There are many more advanced features of Git and GitHub makes things more exciting too. With Git you also need to understand branches, remotes, and the .gitignore file, but you are at least jumpstarted into the world of Git. More on these other things later.', 'Get going with Git', '', 'inherit', 'open', 'open', '', '42-revision-v1', '', '', '2014-08-02 01:13:53', '2014-08-02 06:13:53', '', 42, 'http://dev.dorails.com/42-revision-v1/', 0, 'revision', '', 0),
(49, 1, '2014-08-02 01:29:23', '2014-08-02 06:29:23', 'Do you feel like your still doing web/software dev in the stoneage? Still using FTP or SVN? Ever have a client ask you to put things back how they were 2 weeks ago? Or do you have a hard time collaborating with other developers?\r\n\r\nImagine you can rewind or revert to any stage in development at the drop of a hat. And when it’s time to work on a risky or experimental feature you could get messy without affecting the main source code of the project. Imagine it is simple and straight forward to collaborate with other devs on your team without stepping on each others toes. For these and a million other reasons, you need to use Git! Git is a small but powerful tool vital to any Rails developer. If you are new to Rails and are ready to usher in a new age for yourself, it’s best to just jump on the Git bandwagon right away so you’ve got a leg to stand on.\r\n\r\nNote: Their is a distinction between Git and Github. Although related and used in tandem, it’s important to know that Git is the version control system on your local computer and Github is  a web-based hosting service. We will focus on Git\r\n\r\nHere’s a fast track to getting setup with Git:\r\n<h2>1. Open Terminal</h2>\r\nFind the application called Terminal on your Mac (or Windows Equivalent) and open it. You should see a black command-line screen once opened\r\n<h2>2. Setup Git</h2>\r\nTo setup Git on your computer, type these in the command-line ($ signifies that this is a command, don’t type the $):\r\n<pre>$ git config —global user.name “Ty Richards”</pre>\r\n<pre>$ git config —global user.name   # to confirm name saved</pre>\r\n<pre>$ git config —global user.email “me@tyrichards.com”</pre>\r\n<pre>$ git config —global user.email   # to confirm email saved</pre>\r\n<h2>3. Create New Repo</h2>\r\nTo setup a Git repo for a new project or give an existing project a repo:\r\n<pre>$ cd ~/Sites/new_project  # travel to your new project folder in terminal</pre>\r\n<pre>$ pwd   # verify that you are in that directory</pre>\r\n<pre>$ git init  # creates a new repo</pre>\r\n<pre>$ git status # to see what files are being tracked$ git add .  # adds all files in current folder)</pre>\r\n<pre>$ git commit -a -m “initial commit”  # commits all(-a) modified files and includes a message(-m)</pre>\r\n<h2>4. Do Stuff</h2>\r\nAfter every task you do you can:\r\n<pre>$ git status # to see what is being tracked and modified</pre>\r\n<pre>$ git add .</pre>\r\n<pre>$ git commit -am “Build initial scaffolding”</pre>\r\nand repeat\r\n\r\nWith this you’ll be setup and ready to go in the era of Git. At it’s best you have full control of your source code revisions and collaboration, and at worst you have a nicely documented history of revisions that have been made on the project. There are many more advanced features of Git and GitHub makes things more exciting too. With Git you also need to understand branches, remotes, and the .gitignore file, but you are at least jumpstarted into the world of Git. More on these other things later.', 'Get going with Git', '', 'inherit', 'open', 'open', '', '42-revision-v1', '', '', '2014-08-02 01:29:23', '2014-08-02 06:29:23', '', 42, 'http://dev.dorails.com/42-revision-v1/', 0, 'revision', '', 0),
(50, 1, '2014-08-04 09:21:56', '2014-08-04 14:21:56', '<hr />\r\n\r\n&nbsp;\r\n\r\n[gravityform id="2" name="Contact Us" ajax="true"]', 'Contact Us', '', 'inherit', 'open', 'open', '', '15-revision-v1', '', '', '2014-08-04 09:21:56', '2014-08-04 14:21:56', '', 15, 'http://dev.dorails.com/15-revision-v1/', 0, 'revision', '', 0),
(51, 1, '2014-08-04 23:15:15', '2014-08-05 04:15:15', 'Do you feel like your still doing web/software dev in the stoneage? Still using FTP or SVN? Ever have a client ask you to put things back how they were 2 weeks ago? Or do you have a hard time collaborating with other developers?\n\nImagine you can rewind or revert to any stage in development at the drop of a hat. And when it’s time to work on a risky or experimental feature you could get messy without affecting the main source code of the project. Imagine it is simple and straight forward to collaborate with other devs on your team without stepping on each others toes. For these and a million other reasons, you need to use Git! Git is a small but powerful tool vital to any Rails developer. If you are new to Rails and are ready to usher in a new age for yourself, it’s best to just jump on the Git bandwagon right away so you’ve got a leg to stand on.\n\nNote: Their is a distinction between Git and Github. Although related and used in tandem, it’s important to know that Git is the version control system on your local computer and Github is  a web-based hosting service. We will focus on Git\n\nHere’s a fast track to getting setup with Git:\n<h2>1. Open Terminal</h2>\nFind the application called Terminal on your Mac (or Windows Equivalent) and open it. You should see a black command-line screen once opened\n<h2>2. Setup Git</h2>\nTo setup Git on your computer, type these in the command-line ($ signifies that this is a command, don’t type the $):\n<pre>$ git config --global user.name “Ty Richards”</pre>\n<pre>$ git config --global user.name   # to confirm name saved</pre>\n<pre>$ git config --global user.email “me@tyrichards.com”</pre>\n<pre>$ git config --global user.email   # to confirm email saved</pre>\n<h2>3. Create New Repo</h2>\nTo setup a Git repo for a new project or give an existing project a repo:\n<pre>$ cd ~/Sites/new_project  # travel to your new project folder in terminal</pre>\n<pre>$ pwd   # verify that you are in that directory</pre>\n<pre>$ git init  # creates a new repo</pre>\n<pre>$ git status # to see what files are being tracked$ git add .  # adds all files in current folder)</pre>\n<pre>$ git commit -a -m “initial commit”  # commits all(-a) modified files and includes a message(-m)</pre>\n<h2>4. Do Stuff</h2>\nAfter every task you do you can:\n<pre>$ git status # to see what is being tracked and modified</pre>\n<pre>$ git add .</pre>\n<pre>$ git commit -am “Build initial scaffolding”</pre>\nand repeat\n\nWith this you’ll be setup and ready to go in the era of Git. At it’s best you have full control of your source code revisions and collaboration, and at worst you have a nicely documented history of revisions that have been made on the project. There are many more advanced features of Git and GitHub makes things more exciting too. With Git you also need to understand branches, remotes, and the .gitignore file, but you are at least jumpstarted into the world of Git. More on these other things later.', 'Get going with Git', '', 'inherit', 'open', 'open', '', '42-revision-v1', '', '', '2014-08-04 23:15:15', '2014-08-05 04:15:15', '', 42, 'http://dev.dorails.com/42-revision-v1/', 0, 'revision', '', 0) ;
INSERT INTO `wp_posts` ( `ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(52, 1, '2014-08-05 10:21:07', '2014-08-05 15:21:07', 'Are you new to web development/design and need a quick and easy starting point for your front-end styling so you can hit the ground running? Or are you familiar with Twitter Bootstrap but having trouble get it up and running in Rails? What if you could speed up front-end styling by 5-10x? Imagine you could have a nice looking starting point for the style of your web app with little to no work. What if you could customize colors, fonts, button sizes, padding sizes, background colors, link colors, add icons, responsive behavior etc, etc. within seconds and write little to no CSS? With <a href="http://getbootstrap.com" target="_blank">Bootstrap</a> &amp; <a href="http://sass-lang.com/" target="_blank">Sass</a> you can accomplish this and a lot more.\r\n\r\nFollow these quick steps and you’ll be up and running with Bootstrap &amp; Sass in no time:\r\n<h3>1. Add Gem</h3>\r\nGo to your rails app directory, open your <code>/Gemfile</code> and add:\r\n<pre>gem ‘bootstrap-sass’, ‘~&gt; 3.2.0’ # or whatever the latest version is</pre>\r\n<h3>2. Bundle Install</h3>\r\nAlways run bundle install in terminal after you add a new gem to install it\r\n\r\nIn command-line\r\n<pre>$ cd /your/rails/project/path/\r\n$ bundle install</pre>\r\n<h3>3. Create Style File</h3>\r\nCreate the file <code>style.css.scss</code> here:\r\n<code>/app/assets/stylesheets/style.css.scss</code>\r\n\r\n<small>Note: <code>.sass</code> and <code>.scss</code> are both considered Sass files but <code>.scss</code> files work with the newer syntax that you will likely want to stick with.</small>\r\n\r\n<small>Note (again): <code>.css.scss</code> double extension tells rails to compile the scss to css</small>\r\n<h3>4. Import Bootstrap CSS</h3>\r\nAdd line to top of the new <code>style.css.scss</code> file\r\n<pre>@import ‘bootstrap’; #adds bootstrap styles to the file</pre>\r\n<h3>5. Restart Rails Server</h3>\r\n<pre>cd /your/project/directory/ # or go to your current rails server window\r\n$ ctrl-C # if you have rails server running currently\r\n$ rails server</pre>\r\n<h3>6. Add Bootstrap Javascript</h3>\r\nOpen /app/assets/javascripts/application.js and add:\r\n<pre>//= require query\r\n//= require jquery_ujs\r\n//= require bootstrap  # note that it’s important for bootstrap to be required AFTER query\r\n…</pre>\r\n<h3>7. Add Viewport to <code>&lt;head&gt;</code> tags</h3>\r\nOpen <code>/app/views/layouts/application.html.erb</code> and replace viewport meta tags with this:\r\n<pre>&lt;head&gt;\r\n...\r\n&lt;meta name=“viewport” content=“width=device-width, initial-scale=1.0”&gt;\r\n...\r\n&lt;/head&gt;</pre>\r\n<h3>8. Add Bootstrap Classes</h3>\r\nYou can now add bootstrap elements to pages by adding css classes to your elements to change the style\r\n<pre>&lt;%= link_to “Learn More”, “#yourlink”, class: “btn btn-primary” %&gt; # makes the link a btn with the main brand color</pre>\r\nbecomes\r\n<pre>&lt;a href=“#” class=“btn btn-primary"&gt;Learn More&lt;/a&gt;</pre>\r\nNow you can go into your rails views and add styled <a href="http://getbootstrap.com/components/#navbar" target="_blank">navbars</a>, <a href="http://getbootstrap.com/css/#buttons" target="_blank">buttons</a>, <a href="http://getbootstrap.com/css/#forms" target="_blank">forms</a>, and <a href="http://getbootstrap.com/components/#jumbotron" target="_blank">jumbotrons</a> with little effort. Bootstrap is also extremely helpful with a <a href="http://getbootstrap.com/css/#grid" target="_blank">responsive grid</a> that works right out of the box. If you are new to Bootstrap, checkout their <a href="http://getbootstrap.com/getting-started/#examples" target="_blank">examples</a>. They can be helpful for getting started.\r\n\r\nIf I am throwing something quick together or working on a high-end custom-designed site, I use Bootstrap &amp; Sass as a starting point because it is so rapid and moldable.\r\n\r\nThe <a href="http://getbootstrap.com" target="_blank">Twitter Bootstrap site</a> has a complete list of classes &amp; documentation\r\n<h3>9. Add Bootstrap Variables</h3>\r\nHere\'s where the magic happens. In your <code>style.css.scss</code> file you can also add Sass variables for even quicker development\r\n\r\nVariables:\r\n<pre>$brand-primary: #2ecc71\r\n$brand-success: #5cb85c;\r\n$body-bg: #222222;\r\n$text-color: #95a5a6;\r\n$link-color:  $brand-primary;\r\n@import ‘bootstrap’; # variables must be above main bootstrap import</pre>\r\n<ul>\r\n	<li><strong>Variables:</strong> You can use this list of all <a href="http://getbootstrap.com/customize/#variables-basics" target="_blank">Bootstrap variables</a>\r\n<small>Note: if you use the bootstrap list of variables, be sure to replace the <code>@</code> with <code>$</code>. <code>@</code> is for Less and <code>$</code> is for Sass.</small></li>\r\n	<li><strong>Colors:</strong> I use <a href="http://flatuicolor.com" target="_blank">Flat UI Colors</a> as a starting point for color scheme and go from there.</li>\r\n</ul>\r\nThat\'s it!  Keep in mind this will get you jump started but there are definitely more sophisticated Sass setups that will keep your variables and style code separate and more organized. There are also many more tips for Bootstrap. I could do a whole set of posts on the responsive grid and how to use columns the right way.\r\n\r\nMore on this later. But this is all you need to get going. Go kick some front-end ass!', 'Kick front-end ass with Bootstrap & Sass', '', 'publish', 'open', 'open', '', 'kick-front-end-ass-with-bootstrap-sass', '', '', '2014-08-26 10:24:07', '2014-08-26 15:24:07', '', 0, 'http://dev.dorails.com/?p=52', 0, 'post', '', 0),
(53, 1, '2014-08-05 09:06:26', '2014-08-05 14:06:26', 'Are you new to web development/design and need a quick and easy starting point for your front-end styling so you can hit the ground running? Or are you familiar with Twitter Bootstrap but having trouble get it up and running in Rails? What if you could speed up front-end styling by 5-10x? Imagine you could have a nice looking starting point for the style of your web app with little to no work. What if you could customize colors, fonts, button sizes, padding sizes, background colors, link colors, add icons, responsive behavior etc, etc. within seconds and write little to no CSS. With Bootstrap &amp; Sass you can accomplish just this and kick front-end ass.\r\n\r\nFollow these quick steps and you’ll be up and running with Bootstrap &amp; SASS in no time:\r\n<ol>\r\n	<li>\r\n<h3>Add Gem to your Gemfile</h3>\r\nGo to your rails app directory and open your Gemfile and add:\r\n<pre>gem ‘bootstrap-sass’, ‘~&gt; 3.2.0’ # whatever the latest version is</pre>\r\n</li>\r\n	<li>\r\n<h3>Always run bundle install in terminal after you add a new gem:</h3>\r\n<pre>$ bundle install</pre>\r\n</li>\r\n	<li>\r\n<h3>Create a new SCSS (SASS) file in /app/assets/stylesheets/</h3>\r\napp/assets/stylesheets/style.css.scss\r\n<pre>".css.scss" extension tells rails to compile the scss to css</pre>\r\n</li>\r\n	<li>\r\n<h3>Add line to top of the new style.css file</h3>\r\n<pre>@import ‘bootstrap’; #adds bootstrap styles to the file</pre>\r\n</li>\r\n	<li>\r\n<h3>Restart Rails Server</h3>\r\n<pre>cd /your/project/directory/ # or go to your current rails server window</pre>\r\n<pre>$ ctrl-C # if you have rails server running currently</pre>\r\n<pre>$ rails server</pre>\r\n</li>\r\n	<li>\r\n<h3>Add Bootstrap Javascript</h3>\r\nOpen /app/assets/javascripts/application.js and add:\r\n<pre>//= require query</pre>\r\n<pre>//= require jquery_ujs</pre>\r\n<pre>//= require bootstrap  # note that it’s important for bootstrap to be required AFTER query</pre>\r\n<pre>…</pre>\r\n</li>\r\n	<li>\r\n<h3>Add Viewport to &lt;head&gt; tags</h3>\r\nOpen /app/views/layouts/application.html.erb\r\n<pre>...</pre>\r\n<pre>&lt;meta name=“viewport” content=“width=device-width, initial-scale=1.0”&gt;</pre>\r\n<pre>...</pre>\r\n</li>\r\n	<li>\r\n<h3>Add Bootstrap Classes</h3>\r\nYou can now add bootstrap elements to pages by adding css classes to your elements to change the style\r\n<pre>&lt;%= link_to “Learn More”, “#yourlink”, class: “btn btn-primary” %&gt; # makes the link a btn with the main brand color</pre>\r\n<pre>becomes &lt;a href=“#” class=“btw btn-primary"&gt;Learn More&lt;/a&gt;</pre>\r\n</li>\r\n	<li>\r\n<h3>In your style.css.scss file you can also add SASS variables for even quicker changes</h3>\r\nVariables\r\n<code>$brand-primary: #2ecc71\r\n$brand-success: #5cb85c;\r\n$body-bg: #222222;\r\n</span>$text-color: #95a5a6;\r\n$link-color:  $brand-primary;\r\n@import ‘bootstrap’; # variables must be above main bootstrap import</code>\r\n\r\nFind all the variables here: <span style="color: #042eee;"><span style="text-decoration: underline;">http://getbootstrap.com/customize/#variables-basics</span></span>\r\nI use these colors as a starting point: flatuicolor.com\r\nKeep in mind this will get you jump started but there are definitely more sophisticated SASS setups that will keep your variables and style code separate. More on this later. But this will get you started with Bootstrap &amp; Sass. Go get ‘em!', 'Speed up styling with Bootstrap + Sass in Rails', '', 'inherit', 'open', 'open', '', '52-revision-v1', '', '', '2014-08-05 09:06:26', '2014-08-05 14:06:26', '', 52, 'http://dev.dorails.com/52-revision-v1/', 0, 'revision', '', 0),
(54, 1, '2014-08-05 09:10:33', '2014-08-05 14:10:33', 'Are you new to web development/design and need a quick and easy starting point for your front-end styling so you can hit the ground running? Or are you familiar with Twitter Bootstrap but having trouble get it up and running in Rails? What if you could speed up front-end styling by 5-10x? Imagine you could have a nice looking starting point for the style of your web app with little to no work. What if you could customize colors, fonts, button sizes, padding sizes, background colors, link colors, add icons, responsive behavior etc, etc. within seconds and write little to no CSS. With Bootstrap &amp; Sass you can accomplish this and a lot more.\r\n\r\nFollow these quick steps and you’ll be up and running with Bootstrap &amp; SASS in no time:\r\n<ol>\r\n	<li>\r\n<h3>Add bootstrap-sass to your Gemfile</h3>\r\nGo to your rails app directory and open your Gemfile and add:\r\n<pre>gem ‘bootstrap-sass’, ‘~&gt; 3.2.0’ # whatever the latest version is</pre>\r\n</li>\r\n	<li>\r\n<h3>Always run bundle install in terminal after you add a new gem:</h3>\r\n<pre>$ bundle install</pre>\r\n</li>\r\n	<li>\r\n<h3>Create a new SCSS (SASS) file in /app/assets/stylesheets/</h3>\r\napp/assets/stylesheets/style.css.scss\r\n<pre>".css.scss" extension tells rails to compile the scss to css</pre>\r\n</li>\r\n	<li>\r\n<h3>Add line to top of the new style.css file</h3>\r\n<pre>@import ‘bootstrap’; #adds bootstrap styles to the file</pre>\r\n</li>\r\n	<li>\r\n<h3>Restart Rails Server</h3>\r\n<pre>cd /your/project/directory/ # or go to your current rails server window</pre>\r\n<pre>$ ctrl-C # if you have rails server running currently</pre>\r\n<pre>$ rails server</pre>\r\n</li>\r\n	<li>\r\n<h3>Add Bootstrap Javascript</h3>\r\nOpen /app/assets/javascripts/application.js and add:\r\n<pre>//= require query</pre>\r\n<pre>//= require jquery_ujs</pre>\r\n<pre>//= require bootstrap  # note that it’s important for bootstrap to be required AFTER query</pre>\r\n<pre>…</pre>\r\n</li>\r\n	<li>\r\n<h3>Add Viewport to &lt;head&gt; tags</h3>\r\nOpen /app/views/layouts/application.html.erb\r\n<pre>...</pre>\r\n<pre>&lt;meta name=“viewport” content=“width=device-width, initial-scale=1.0”&gt;</pre>\r\n<pre>...</pre>\r\n</li>\r\n	<li>\r\n<h3>Add Bootstrap Classes</h3>\r\nYou can now add bootstrap elements to pages by adding css classes to your elements to change the style\r\n<pre>&lt;%= link_to “Learn More”, “#yourlink”, class: “btn btn-primary” %&gt; # makes the link a btn with the main brand color</pre>\r\n<pre>becomes &lt;a href=“#” class=“btw btn-primary"&gt;Learn More&lt;/a&gt;</pre>\r\n</li>\r\n	<li>\r\n<h3>In your style.css.scss file you can also add SASS variables for even quicker changes</h3>\r\nVariables\r\n<pre>$brand-primary: #2ecc71\r\n$brand-success: #5cb85c;\r\n$body-bg: #222222;\r\n$text-color: #95a5a6;\r\n$link-color:  $brand-primary;\r\n@import ‘bootstrap’; # variables must be above main bootstrap import</pre>\r\nFind all the variables here: <span style="color: #042eee;"><span style="text-decoration: underline;">http://getbootstrap.com/customize/#variables-basics</span></span>\r\nI use these colors as a starting point: http://flatuicolor.com\r\nKeep in mind this will get you jump started but there are definitely more sophisticated Sass setups that will keep your variables and style code separate and more organized. More on this later. This is all you need to get going. Go kick some front-end ass!</li>\r\n</ol>', 'Speed up styling with Bootstrap + Sass in Rails', '', 'inherit', 'open', 'open', '', '52-revision-v1', '', '', '2014-08-05 09:10:33', '2014-08-05 14:10:33', '', 52, 'http://dev.dorails.com/52-revision-v1/', 0, 'revision', '', 0),
(55, 1, '2014-08-05 09:11:47', '2014-08-05 14:11:47', 'Do you feel like your still doing web/software dev in the stoneage? Still using FTP or SVN? Ever have a client ask you to put things back how they were 2 weeks ago? Or do you have a hard time collaborating with other developers?\r\n\r\nImagine you can rewind or revert to any stage in development at the drop of a hat. And when it’s time to work on a risky or experimental feature you could get messy without affecting the main source code of the project. Imagine it is simple and straight forward to collaborate with other devs on your team without stepping on each others toes. For these and a million other reasons, you need to use Git! Git is a small but powerful tool vital to any Rails developer. If you are new to Rails and are ready to usher in a new age for yourself, it’s best to just jump on the Git bandwagon right away so you’ve got a leg to stand on.\r\n\r\nNote: Their is a distinction between Git and Github. Although related and used in tandem, it’s important to know that Git is the version control system on your local computer and Github is  a web-based hosting service. We will focus on Git\r\n\r\nHere’s a fast track to getting setup with Git:\r\n<h3>1. Open Terminal</h3>\r\nFind the application called Terminal on your Mac (or Windows Equivalent) and open it. You should see a black command-line screen once opened\r\n<h3>2. Setup Git</h3>\r\nTo setup Git on your computer, type these in the command-line ($ signifies that this is a command, don’t type the $):\r\n<pre>$ git config --global user.name “Ty Richards”</pre>\r\n<pre>$ git config --global user.name   # to confirm name saved</pre>\r\n<pre>$ git config --global user.email “me@tyrichards.com”</pre>\r\n<pre>$ git config --global user.email   # to confirm email saved</pre>\r\n<h3>3. Create New Repo</h3>\r\nTo setup a Git repo for a new project or give an existing project a repo:\r\n<pre>$ cd ~/Sites/new_project  # travel to your new project folder in terminal</pre>\r\n<pre>$ pwd   # verify that you are in that directory</pre>\r\n<pre>$ git init  # creates a new repo</pre>\r\n<pre>$ git status # to see what files are being tracked$ git add .  # adds all files in current folder)</pre>\r\n<pre>$ git commit -a -m “initial commit”  # commits all(-a) modified files and includes a message(-m)</pre>\r\n<h3>4. Do Stuff</h3>\r\nAfter every task you do you can:\r\n<pre>$ git status # to see what is being tracked and modified</pre>\r\n<pre>$ git add .</pre>\r\n<pre>$ git commit -am “Build initial scaffolding”</pre>\r\nand repeat\r\n\r\nWith this you’ll be setup and ready to go in the era of Git. At it’s best you have full control of your source code revisions and collaboration, and at worst you have a nicely documented history of revisions that have been made on the project. There are many more advanced features of Git and GitHub makes things more exciting too. With Git you also need to understand branches, remotes, and the .gitignore file, but you are at least jumpstarted into the world of Git. More on these other things later.', 'Get going with Git', '', 'inherit', 'open', 'open', '', '42-revision-v1', '', '', '2014-08-05 09:11:47', '2014-08-05 14:11:47', '', 42, 'http://dev.dorails.com/42-revision-v1/', 0, 'revision', '', 0),
(56, 1, '2014-08-05 09:15:36', '2014-08-05 14:15:36', 'Are you new to web development/design and need a quick and easy starting point for your front-end styling so you can hit the ground running? Or are you familiar with Twitter Bootstrap but having trouble get it up and running in Rails? What if you could speed up front-end styling by 5-10x? Imagine you could have a nice looking starting point for the style of your web app with little to no work. What if you could customize colors, fonts, button sizes, padding sizes, background colors, link colors, add icons, responsive behavior etc, etc. within seconds and write little to no CSS. With Bootstrap &amp; Sass you can accomplish this and a lot more.\r\n\r\nFollow these quick steps and you’ll be up and running with Bootstrap &amp; SASS in no time:\r\n<h3>1. Add bootstrap-sass to your Gemfile</h3>\r\nGo to your rails app directory and open your Gemfile and add:\r\n<pre>gem ‘bootstrap-sass’, ‘~&gt; 3.2.0’ # whatever the latest version is</pre>\r\n<h3>Always run bundle install in terminal after you add a new gem:</h3>\r\n<pre>$ bundle install</pre>\r\n<h3>2. Create a new SCSS (SASS) file in /app/assets/stylesheets/</h3>\r\napp/assets/stylesheets/style.css.scss\r\n<pre>".css.scss" extension tells rails to compile the scss to css</pre>\r\n<h3>3. Add line to top of the new style.css file</h3>\r\n<pre>@import ‘bootstrap’; #adds bootstrap styles to the file</pre>\r\n<h3>4. Restart Rails Server</h3>\r\n<pre>cd /your/project/directory/ # or go to your current rails server window</pre>\r\n<pre>$ ctrl-C # if you have rails server running currently</pre>\r\n<pre>$ rails server</pre>\r\n<h3>5. Add Bootstrap Javascript</h3>\r\nOpen /app/assets/javascripts/application.js and add:\r\n<pre>//= require query\r\n//= require jquery_ujs\r\n//= require bootstrap  # note that it’s important for bootstrap to be required AFTER query\r\n…</pre>\r\n<h3>Add Viewport to &lt;head&gt; tags</h3>\r\nOpen /app/views/layouts/application.html.erb\r\n<pre>...\r\n&lt;meta name=“viewport” content=“width=device-width, initial-scale=1.0”&gt;\r\n...</pre>\r\n<h3>Add Bootstrap Classes</h3>\r\nYou can now add bootstrap elements to pages by adding css classes to your elements to change the style\r\n<pre>&lt;%= link_to “Learn More”, “#yourlink”, class: “btn btn-primary” %&gt; # makes the link a btn with the main brand color</pre>\r\n<pre>becomes &lt;a href=“#” class=“btw btn-primary"&gt;Learn More&lt;/a&gt;</pre>\r\n<h3>In your style.css.scss file you can also add SASS variables for even quicker changes</h3>\r\nVariables\r\n<pre>$brand-primary: #2ecc71\r\n$brand-success: #5cb85c;\r\n$body-bg: #222222;\r\n$text-color: #95a5a6;\r\n$link-color:  $brand-primary;\r\n@import ‘bootstrap’; # variables must be above main bootstrap import</pre>\r\nFind all the variables here: http://getbootstrap.com/customize/#variables-basics\r\nI use these colors as a starting point: http://flatuicolor.com\r\n\r\nThat\'s it!  Keep in mind this will get you jump started but there are definitely more sophisticated Sass setups that will keep your variables and style code separate and more organized. More on this later. This is all you need to get going. Go kick some front-end ass!', 'Speed up styling with Bootstrap + Sass in Rails', '', 'inherit', 'open', 'open', '', '52-revision-v1', '', '', '2014-08-05 09:15:36', '2014-08-05 14:15:36', '', 52, 'http://dev.dorails.com/52-revision-v1/', 0, 'revision', '', 0),
(57, 1, '2014-08-05 09:31:36', '2014-08-05 14:31:36', 'Are you new to web development/design and need a quick and easy starting point for your front-end styling so you can hit the ground running? Or are you familiar with Twitter Bootstrap but having trouble get it up and running in Rails? What if you could speed up front-end styling by 5-10x? Imagine you could have a nice looking starting point for the style of your web app with little to no work. What if you could customize colors, fonts, button sizes, padding sizes, background colors, link colors, add icons, responsive behavior etc, etc. within seconds and write little to no CSS. With Bootstrap &amp; Sass you can accomplish this and a lot more.\r\n\r\nFollow these quick steps and you’ll be up and running with Bootstrap &amp; SASS in no time:\r\n<h3>1. Add Gem</h3>\r\nGo to your rails app directory, open your Gemfile and add:\r\n/Gemfile\r\n<pre>gem ‘bootstrap-sass’, ‘~&gt; 3.2.0’ # or whatever the latest version is</pre>\r\n<h3>2. Bundle Install</h3>\r\nAlways run bundle install in terminal after you add a new gem to install it\r\n\r\nIn command-line\r\n<pre>$ cd /your/rails/project/path/</pre>\r\n<pre>$ bundle install</pre>\r\n<h3>3. Create Style File</h3>\r\nCreate the file style.css.scss here:  /app/assets/stylesheets/style.css.scss\r\n\r\n<small>Note: <code>.sass</code> and <code>.scss</code> are both considered Sass files but <code>.scss</code> files work with the newer syntax that you will likely want to stick with.\r\n\r\nNote (again): <code>.css.scss</code> double extension tells rails to compile the scss to css</small>\r\n<h3>4. Add line to top of the new style.css file</h3>\r\n<pre>@import ‘bootstrap’; #adds bootstrap styles to the file</pre>\r\n<h3>5. Restart Rails Server</h3>\r\n<pre>cd /your/project/directory/ # or go to your current rails server window</pre>\r\n<pre>$ ctrl-C # if you have rails server running currently</pre>\r\n<pre>$ rails server</pre>\r\n<h3>6. Add Bootstrap Javascript</h3>\r\nOpen /app/assets/javascripts/application.js and add:\r\n<pre>//= require query\r\n//= require jquery_ujs\r\n//= require bootstrap  # note that it’s important for bootstrap to be required AFTER query\r\n…</pre>\r\n<h3>7. Add Viewport to &lt;head&gt; tags</h3>\r\nOpen /app/views/layouts/application.html.erb\r\n<pre>...\r\n&lt;meta name=“viewport” content=“width=device-width, initial-scale=1.0”&gt;\r\n...</pre>\r\n<h3>8. Add Bootstrap Classes</h3>\r\nYou can now add bootstrap elements to pages by adding css classes to your elements to change the style\r\n<pre>&lt;%= link_to “Learn More”, “#yourlink”, class: “btn btn-primary” %&gt; # makes the link a btn with the main brand color</pre>\r\n<pre>becomes &lt;a href=“#” class=“btw btn-primary"&gt;Learn More&lt;/a&gt;</pre>\r\n<h3>9. In your style.css.scss file you can also add SASS variables for even quicker changes</h3>\r\nVariables\r\n<pre>$brand-primary: #2ecc71\r\n$brand-success: #5cb85c;\r\n$body-bg: #222222;\r\n$text-color: #95a5a6;\r\n$link-color:  $brand-primary;\r\n@import ‘bootstrap’; # variables must be above main bootstrap import</pre>\r\nFind all the variables here: http://getbootstrap.com/customize/#variables-basics\r\nI use these colors as a starting point: http://flatuicolor.com\r\n\r\nThat\'s it!  Keep in mind this will get you jump started but there are definitely more sophisticated Sass setups that will keep your variables and style code separate and more organized. More on this later. This is all you need to get going. Go kick some front-end ass!', 'Speed up styling with Bootstrap + Sass in Rails', '', 'inherit', 'open', 'open', '', '52-revision-v1', '', '', '2014-08-05 09:31:36', '2014-08-05 14:31:36', '', 52, 'http://dev.dorails.com/52-revision-v1/', 0, 'revision', '', 0),
(58, 1, '2014-08-05 09:32:07', '2014-08-05 14:32:07', 'Are you new to web development/design and need a quick and easy starting point for your front-end styling so you can hit the ground running? Or are you familiar with Twitter Bootstrap but having trouble get it up and running in Rails? What if you could speed up front-end styling by 5-10x? Imagine you could have a nice looking starting point for the style of your web app with little to no work. What if you could customize colors, fonts, button sizes, padding sizes, background colors, link colors, add icons, responsive behavior etc, etc. within seconds and write little to no CSS. With Bootstrap &amp; Sass you can accomplish this and a lot more.\r\n\r\nFollow these quick steps and you’ll be up and running with Bootstrap &amp; SASS in no time:\r\n<h3>1. Add Gem</h3>\r\nGo to your rails app directory, open your Gemfile and add:\r\n/Gemfile\r\n<pre>gem ‘bootstrap-sass’, ‘~&gt; 3.2.0’ # or whatever the latest version is</pre>\r\n<h3>2. Bundle Install</h3>\r\nAlways run bundle install in terminal after you add a new gem to install it\r\n\r\nIn command-line\r\n<pre>$ cd /your/rails/project/path/</pre>\r\n<pre>$ bundle install</pre>\r\n<h3>3. Create Style File</h3>\r\nCreate the file style.css.scss here:  /app/assets/stylesheets/style.css.scss\r\n\r\n<small>Note: <code>.sass</code> and <code>.scss</code> are both considered Sass files but <code>.scss</code> files work with the newer syntax that you will likely want to stick with.</small>\r\n\r\nNote (again): <code>.css.scss</code> double extension tells rails to compile the scss to css\r\n<h3>4. Add line to top of the new style.css file</h3>\r\n<pre>@import ‘bootstrap’; #adds bootstrap styles to the file</pre>\r\n<h3>5. Restart Rails Server</h3>\r\n<pre>cd /your/project/directory/ # or go to your current rails server window</pre>\r\n<pre>$ ctrl-C # if you have rails server running currently</pre>\r\n<pre>$ rails server</pre>\r\n<h3>6. Add Bootstrap Javascript</h3>\r\nOpen /app/assets/javascripts/application.js and add:\r\n<pre>//= require query\r\n//= require jquery_ujs\r\n//= require bootstrap  # note that it’s important for bootstrap to be required AFTER query\r\n…</pre>\r\n<h3>7. Add Viewport to &lt;head&gt; tags</h3>\r\nOpen /app/views/layouts/application.html.erb\r\n<pre>...\r\n&lt;meta name=“viewport” content=“width=device-width, initial-scale=1.0”&gt;\r\n...</pre>\r\n<h3>8. Add Bootstrap Classes</h3>\r\nYou can now add bootstrap elements to pages by adding css classes to your elements to change the style\r\n<pre>&lt;%= link_to “Learn More”, “#yourlink”, class: “btn btn-primary” %&gt; # makes the link a btn with the main brand color</pre>\r\n<pre>becomes &lt;a href=“#” class=“btw btn-primary"&gt;Learn More&lt;/a&gt;</pre>\r\n<h3>9. In your style.css.scss file you can also add SASS variables for even quicker changes</h3>\r\nVariables\r\n<pre>$brand-primary: #2ecc71\r\n$brand-success: #5cb85c;\r\n$body-bg: #222222;\r\n$text-color: #95a5a6;\r\n$link-color:  $brand-primary;\r\n@import ‘bootstrap’; # variables must be above main bootstrap import</pre>\r\nFind all the variables here: http://getbootstrap.com/customize/#variables-basics\r\nI use these colors as a starting point: http://flatuicolor.com\r\n\r\nThat\'s it!  Keep in mind this will get you jump started but there are definitely more sophisticated Sass setups that will keep your variables and style code separate and more organized. More on this later. This is all you need to get going. Go kick some front-end ass!', 'Speed up styling with Bootstrap + Sass in Rails', '', 'inherit', 'open', 'open', '', '52-revision-v1', '', '', '2014-08-05 09:32:07', '2014-08-05 14:32:07', '', 52, 'http://dev.dorails.com/52-revision-v1/', 0, 'revision', '', 0),
(59, 1, '2014-08-05 09:33:23', '2014-08-05 14:33:23', 'Are you new to web development/design and need a quick and easy starting point for your front-end styling so you can hit the ground running? Or are you familiar with Twitter Bootstrap but having trouble get it up and running in Rails? What if you could speed up front-end styling by 5-10x? Imagine you could have a nice looking starting point for the style of your web app with little to no work. What if you could customize colors, fonts, button sizes, padding sizes, background colors, link colors, add icons, responsive behavior etc, etc. within seconds and write little to no CSS. With Bootstrap &amp; Sass you can accomplish this and a lot more.\r\n\r\nFollow these quick steps and you’ll be up and running with Bootstrap &amp; SASS in no time:\r\n<h3>1. Add Gem</h3>\r\nGo to your rails app directory, open your Gemfile and add:\r\n/Gemfile\r\n<pre>gem ‘bootstrap-sass’, ‘~&gt; 3.2.0’ # or whatever the latest version is</pre>\r\n<h3>2. Bundle Install</h3>\r\nAlways run bundle install in terminal after you add a new gem to install it\r\n\r\nIn command-line\r\n<pre>$ cd /your/rails/project/path/</pre>\r\n<pre>$ bundle install</pre>\r\n<h3>3. Create Style File</h3>\r\nCreate the file style.css.scss here:  /app/assets/stylesheets/style.css.scss\r\n\r\n<small>Note: <code>.sass</code> and <code>.scss</code> are both considered Sass files but <code>.scss</code> files work with the newer syntax that you will likely want to stick with.\r\n\r\nNote (again): <code>.css.scss</code> double extension tells rails to compile the scss to css</small>\r\n<h3>4. Add line to top of the new style.css file</h3>\r\n<pre>@import ‘bootstrap’; #adds bootstrap styles to the file</pre>\r\n<h3>5. Restart Rails Server</h3>\r\n<pre>cd /your/project/directory/ # or go to your current rails server window</pre>\r\n<pre>$ ctrl-C # if you have rails server running currently</pre>\r\n<pre>$ rails server</pre>\r\n<h3>6. Add Bootstrap Javascript</h3>\r\nOpen /app/assets/javascripts/application.js and add:\r\n<pre>//= require query\r\n//= require jquery_ujs\r\n//= require bootstrap  # note that it’s important for bootstrap to be required AFTER query\r\n…</pre>\r\n<h3>7. Add Viewport to &lt;head&gt; tags</h3>\r\nOpen /app/views/layouts/application.html.erb\r\n<pre>...\r\n&lt;meta name=“viewport” content=“width=device-width, initial-scale=1.0”&gt;\r\n...</pre>\r\n<h3>8. Add Bootstrap Classes</h3>\r\nYou can now add bootstrap elements to pages by adding css classes to your elements to change the style\r\n<pre>&lt;%= link_to “Learn More”, “#yourlink”, class: “btn btn-primary” %&gt; # makes the link a btn with the main brand color</pre>\r\n<pre>becomes &lt;a href=“#” class=“btw btn-primary"&gt;Learn More&lt;/a&gt;</pre>\r\n<h3>9. In your style.css.scss file you can also add SASS variables for even quicker changes</h3>\r\nVariables\r\n<pre>$brand-primary: #2ecc71\r\n$brand-success: #5cb85c;\r\n$body-bg: #222222;\r\n$text-color: #95a5a6;\r\n$link-color:  $brand-primary;\r\n@import ‘bootstrap’; # variables must be above main bootstrap import</pre>\r\nFind all the variables here: http://getbootstrap.com/customize/#variables-basics\r\nI use these colors as a starting point: http://flatuicolor.com\r\n\r\nThat\'s it!  Keep in mind this will get you jump started but there are definitely more sophisticated Sass setups that will keep your variables and style code separate and more organized. More on this later. This is all you need to get going. Go kick some front-end ass!', 'Speed up styling with Bootstrap + Sass in Rails', '', 'inherit', 'open', 'open', '', '52-revision-v1', '', '', '2014-08-05 09:33:23', '2014-08-05 14:33:23', '', 52, 'http://dev.dorails.com/52-revision-v1/', 0, 'revision', '', 0),
(60, 1, '2014-08-05 09:37:54', '2014-08-05 14:37:54', 'Are you new to web development/design and need a quick and easy starting point for your front-end styling so you can hit the ground running? Or are you familiar with Twitter Bootstrap but having trouble get it up and running in Rails? What if you could speed up front-end styling by 5-10x? Imagine you could have a nice looking starting point for the style of your web app with little to no work. What if you could customize colors, fonts, button sizes, padding sizes, background colors, link colors, add icons, responsive behavior etc, etc. within seconds and write little to no CSS. With Bootstrap &amp; Sass you can accomplish this and a lot more.\r\n\r\nFollow these quick steps and you’ll be up and running with Bootstrap &amp; SASS in no time:\r\n<h3>1. Add Gem</h3>\r\nGo to your rails app directory, open your Gemfile and add:\r\n/Gemfile\r\n<pre>gem ‘bootstrap-sass’, ‘~&gt; 3.2.0’ # or whatever the latest version is</pre>\r\n<h3>2. Bundle Install</h3>\r\nAlways run bundle install in terminal after you add a new gem to install it\r\n\r\nIn command-line\r\n<pre>$ cd /your/rails/project/path/\r\n$ bundle install</pre>\r\n<h3>3. Create Style File</h3>\r\nCreate the file <code>style.css.scss</code> here:\r\n<code>/app/assets/stylesheets/style.css.scss</code>\r\n\r\n<small>Note: <code>.sass</code> and <code>.scss</code> are both considered Sass files but <code>.scss</code> files work with the newer syntax that you will likely want to stick with.</small>\r\n\r\nNote (again): <code>.css.scss</code> double extension tells rails to compile the scss to css\r\n<h3>4. Import Bootstrap CSS</h3>\r\nAdd line to top of the new <code>style.css.scss</code> file\r\n<pre>@import ‘bootstrap’; #adds bootstrap styles to the file</pre>\r\n<h3>5. Restart Rails Server</h3>\r\n<pre>cd /your/project/directory/ # or go to your current rails server window\r\n$ ctrl-C # if you have rails server running currently\r\n$ rails server</pre>\r\n<h3>6. Add Bootstrap Javascript</h3>\r\nOpen /app/assets/javascripts/application.js and add:\r\n<pre>//= require query\r\n//= require jquery_ujs\r\n//= require bootstrap  # note that it’s important for bootstrap to be required AFTER query\r\n…</pre>\r\n<h3>7. Add Viewport to <code>&lt;head&gt;</code> tags</h3>\r\nOpen <code>/app/views/layouts/application.html.erb</code>\r\n<pre>...\r\n&lt;meta name=“viewport” content=“width=device-width, initial-scale=1.0”&gt;\r\n...</pre>\r\n<h3>8. Add Bootstrap Classes</h3>\r\nYou can now add bootstrap elements to pages by adding css classes to your elements to change the style\r\n<pre>&lt;%= link_to “Learn More”, “#yourlink”, class: “btn btn-primary” %&gt; # makes the link a btn with the main brand color</pre>\r\n<pre>becomes &lt;a href=“#” class=“btw btn-primary"&gt;Learn More&lt;/a&gt;</pre>\r\n<h3>9. In your <code>style.css.scss</code> file you can also add Sass variables for even quicker development</h3>\r\nVariables:\r\n<pre>$brand-primary: #2ecc71\r\n$brand-success: #5cb85c;\r\n$body-bg: #222222;\r\n$text-color: #95a5a6;\r\n$link-color:  $brand-primary;\r\n@import ‘bootstrap’; # variables must be above main bootstrap import</pre>\r\nFind all the variables here: http://getbootstrap.com/customize/#variables-basics\r\nI use these colors as a starting point: http://flatuicolor.com\r\n\r\nThat\'s it!  Keep in mind this will get you jump started but there are definitely more sophisticated Sass setups that will keep your variables and style code separate and more organized. More on this later. This is all you need to get going. Go kick some front-end ass!', 'Speed up styling with Bootstrap + Sass in Rails', '', 'inherit', 'open', 'open', '', '52-revision-v1', '', '', '2014-08-05 09:37:54', '2014-08-05 14:37:54', '', 52, 'http://dev.dorails.com/52-revision-v1/', 0, 'revision', '', 0),
(61, 1, '2014-08-05 09:48:22', '2014-08-05 14:48:22', 'Are you new to web development/design and need a quick and easy starting point for your front-end styling so you can hit the ground running? Or are you familiar with Twitter Bootstrap but having trouble get it up and running in Rails? What if you could speed up front-end styling by 5-10x? Imagine you could have a nice looking starting point for the style of your web app with little to no work. What if you could customize colors, fonts, button sizes, padding sizes, background colors, link colors, add icons, responsive behavior etc, etc. within seconds and write little to no CSS. With Bootstrap &amp; Sass you can accomplish this and a lot more.\r\n\r\nFollow these quick steps and you’ll be up and running with Bootstrap &amp; SASS in no time:\r\n<h3>1. Add Gem</h3>\r\nGo to your rails app directory, open your Gemfile and add:\r\n/Gemfile\r\n<pre>gem ‘bootstrap-sass’, ‘~&gt; 3.2.0’ # or whatever the latest version is</pre>\r\n<h3>2. Bundle Install</h3>\r\nAlways run bundle install in terminal after you add a new gem to install it\r\n\r\nIn command-line\r\n<pre>$ cd /your/rails/project/path/\r\n$ bundle install</pre>\r\n<h3>3. Create Style File</h3>\r\nCreate the file <code>style.css.scss</code> here:\r\n<code>/app/assets/stylesheets/style.css.scss</code>\r\n\r\n<small>Note: <code>.sass</code> and <code>.scss</code> are both considered Sass files but <code>.scss</code> files work with the newer syntax that you will likely want to stick with.</small>\r\n\r\nNote (again): <code>.css.scss</code> double extension tells rails to compile the scss to css\r\n<h3>4. Import Bootstrap CSS</h3>\r\nAdd line to top of the new <code>style.css.scss</code> file\r\n<pre>@import ‘bootstrap’; #adds bootstrap styles to the file</pre>\r\n<h3>5. Restart Rails Server</h3>\r\n<pre>cd /your/project/directory/ # or go to your current rails server window\r\n$ ctrl-C # if you have rails server running currently\r\n$ rails server</pre>\r\n<h3>6. Add Bootstrap Javascript</h3>\r\nOpen /app/assets/javascripts/application.js and add:\r\n<pre>//= require query\r\n//= require jquery_ujs\r\n//= require bootstrap  # note that it’s important for bootstrap to be required AFTER query\r\n…</pre>\r\n<h3>7. Add Viewport to <code>&lt;head&gt;</code> tags</h3>\r\nOpen <code>/app/views/layouts/application.html.erb and replace viewport meta tags with this:</code>\r\n<pre>...\r\n&lt;meta name=“viewport” content=“width=device-width, initial-scale=1.0”&gt;\r\n...</pre>\r\n<h3>8. Add Bootstrap Classes</h3>\r\nYou can now add bootstrap elements to pages by adding css classes to your elements to change the style\r\n<pre>&lt;%= link_to “Learn More”, “#yourlink”, class: “btn btn-primary” %&gt; # makes the link a btn with the main brand color</pre>\r\nbecomes &lt;a href=“#” class=“btw btn-primary"&gt;Learn More&lt;/a&gt;\r\n\r\nThe <a href="http://getbootstrap.com" target="_blank">Twitter Bootstrap site</a> has a complete list of classes &amp; documentation\r\n<h3>9. Add Bootstrap Variables</h3>\r\nIn your <code>style.css.scss</code> file you can also add Sass variables for even quicker development\r\nVariables:\r\n<pre>$brand-primary: #2ecc71\r\n$brand-success: #5cb85c;\r\n$body-bg: #222222;\r\n$text-color: #95a5a6;\r\n$link-color:  $brand-primary;\r\n@import ‘bootstrap’; # variables must be above main bootstrap import</pre>\r\n<ul>\r\n	<li><strong>Variables:</strong> You can use this list of all <a href="http://getbootstrap.com/customize/#variables-basics" target="_blank">Bootstrap variables</a>\r\nNote: if you use the bootstrap list of variables, be sure to replace the @ with $. @ is for Less and $ is for Sass.</li>\r\n	<li><strong>Colors:</strong> I use <a href="http://flatuicolor.com" target="_blank">Flat UI Colors</a> as a starting point for color scheme and go from there.</li>\r\n</ul>\r\nThat\'s it!  Keep in mind this will get you jump started but there are definitely more sophisticated Sass setups that will keep your variables and style code separate and more organized. More on this later. This is all you need to get going. Go kick some front-end ass!', 'Speed up styling with Bootstrap + Sass in Rails', '', 'inherit', 'open', 'open', '', '52-revision-v1', '', '', '2014-08-05 09:48:22', '2014-08-05 14:48:22', '', 52, 'http://dev.dorails.com/52-revision-v1/', 0, 'revision', '', 0),
(62, 1, '2014-08-05 09:50:32', '2014-08-05 14:50:32', 'Are you new to web development/design and need a quick and easy starting point for your front-end styling so you can hit the ground running? Or are you familiar with Twitter Bootstrap but having trouble get it up and running in Rails? What if you could speed up front-end styling by 5-10x? Imagine you could have a nice looking starting point for the style of your web app with little to no work. What if you could customize colors, fonts, button sizes, padding sizes, background colors, link colors, add icons, responsive behavior etc, etc. within seconds and write little to no CSS. With Bootstrap &amp; Sass you can accomplish this and a lot more.\r\n\r\nFollow these quick steps and you’ll be up and running with Bootstrap &amp; SASS in no time:\r\n<h3>1. Add Gem</h3>\r\nGo to your rails app directory, open your Gemfile and add:\r\n/Gemfile\r\n<pre>gem ‘bootstrap-sass’, ‘~&gt; 3.2.0’ # or whatever the latest version is</pre>\r\n<h3>2. Bundle Install</h3>\r\nAlways run bundle install in terminal after you add a new gem to install it\r\n\r\nIn command-line\r\n<pre>$ cd /your/rails/project/path/\r\n$ bundle install</pre>\r\n<h3>3. Create Style File</h3>\r\nCreate the file <code>style.css.scss</code> here:\r\n<code>/app/assets/stylesheets/style.css.scss</code>\r\n\r\n<small>Note: <code>.sass</code> and <code>.scss</code> are both considered Sass files but <code>.scss</code> files work with the newer syntax that you will likely want to stick with.</small>\r\n\r\nNote (again): <code>.css.scss</code> double extension tells rails to compile the scss to css\r\n<h3>4. Import Bootstrap CSS</h3>\r\nAdd line to top of the new <code>style.css.scss</code> file\r\n<pre>@import ‘bootstrap’; #adds bootstrap styles to the file</pre>\r\n<h3>5. Restart Rails Server</h3>\r\n<pre>cd /your/project/directory/ # or go to your current rails server window\r\n$ ctrl-C # if you have rails server running currently\r\n$ rails server</pre>\r\n<h3>6. Add Bootstrap Javascript</h3>\r\nOpen /app/assets/javascripts/application.js and add:\r\n<pre>//= require query\r\n//= require jquery_ujs\r\n//= require bootstrap  # note that it’s important for bootstrap to be required AFTER query\r\n…</pre>\r\n<h3>7. Add Viewport to <code>&lt;head&gt;</code> tags</h3>\r\nOpen <code>/app/views/layouts/application.html.erb and replace viewport meta tags with this:</code>\r\n<pre>...\r\n&lt;meta name=“viewport” content=“width=device-width, initial-scale=1.0”&gt;\r\n...</pre>\r\n<h3>8. Add Bootstrap Classes</h3>\r\nYou can now add bootstrap elements to pages by adding css classes to your elements to change the style\r\n<pre>&lt;%= link_to “Learn More”, “#yourlink”, class: “btn btn-primary” %&gt; # makes the link a btn with the main brand color</pre>\r\nbecomes &lt;a href=“#” class=“btw btn-primary"&gt;Learn More&lt;/a&gt;\r\n\r\nThe <a href="http://getbootstrap.com" target="_blank">Twitter Bootstrap site</a> has a complete list of classes &amp; documentation\r\n<h3>9. Add Bootstrap Variables</h3>\r\nIn your <code>style.css.scss</code> file you can also add Sass variables for even quicker development\r\nVariables:\r\n<pre>$brand-primary: #2ecc71\r\n$brand-success: #5cb85c;\r\n$body-bg: #222222;\r\n$text-color: #95a5a6;\r\n$link-color:  $brand-primary;\r\n@import ‘bootstrap’; # variables must be above main bootstrap import</pre>\r\n<ul>\r\n	<li><strong>Variables:</strong> You can use this list of all <a href="http://getbootstrap.com/customize/#variables-basics" target="_blank">Bootstrap variables</a>\r\n<small>Note: if you use the bootstrap list of variables, be sure to replace the <code>@</code> with <code>$</code>. <code>@</code> is for Less and <code>$</code> is for Sass.</small></li>\r\n	<li><strong>Colors:</strong> I use <a href="http://flatuicolor.com" target="_blank">Flat UI Colors</a> as a starting point for color scheme and go from there.</li>\r\n</ul>\r\nThat\'s it!  Keep in mind this will get you jump started but there are definitely more sophisticated Sass setups that will keep your variables and style code separate and more organized. More on this later. This is all you need to get going. Go kick some front-end ass!', 'Speed up styling in Rails with Bootstrap & Sass', '', 'inherit', 'open', 'open', '', '52-revision-v1', '', '', '2014-08-05 09:50:32', '2014-08-05 14:50:32', '', 52, 'http://dev.dorails.com/52-revision-v1/', 0, 'revision', '', 0),
(63, 1, '2014-08-05 09:55:26', '2014-08-05 14:55:26', 'Are you new to web development/design and need a quick and easy starting point for your front-end styling so you can hit the ground running? Or are you familiar with Twitter Bootstrap but having trouble get it up and running in Rails? What if you could speed up front-end styling by 5-10x? Imagine you could have a nice looking starting point for the style of your web app with little to no work. What if you could customize colors, fonts, button sizes, padding sizes, background colors, link colors, add icons, responsive behavior etc, etc. within seconds and write little to no CSS? With Bootstrap &amp; Sass you can accomplish this and a lot more.\r\n\r\nFollow these quick steps and you’ll be up and running with Bootstrap &amp; SASS in no time:\r\n<h3>1. Add Gem</h3>\r\nGo to your rails app directory, open your Gemfile and add:\r\n/Gemfile\r\n<pre>gem ‘bootstrap-sass’, ‘~&gt; 3.2.0’ # or whatever the latest version is</pre>\r\n<h3>2. Bundle Install</h3>\r\nAlways run bundle install in terminal after you add a new gem to install it\r\n\r\nIn command-line\r\n<pre>$ cd /your/rails/project/path/\r\n$ bundle install</pre>\r\n<h3>3. Create Style File</h3>\r\nCreate the file <code>style.css.scss</code> here:\r\n<code>/app/assets/stylesheets/style.css.scss</code>\r\n\r\n<small>Note: <code>.sass</code> and <code>.scss</code> are both considered Sass files but <code>.scss</code> files work with the newer syntax that you will likely want to stick with.</small>\r\n\r\nNote (again): <code>.css.scss</code> double extension tells rails to compile the scss to css\r\n<h3>4. Import Bootstrap CSS</h3>\r\nAdd line to top of the new <code>style.css.scss</code> file\r\n<pre>@import ‘bootstrap’; #adds bootstrap styles to the file</pre>\r\n<h3>5. Restart Rails Server</h3>\r\n<pre>cd /your/project/directory/ # or go to your current rails server window\r\n$ ctrl-C # if you have rails server running currently\r\n$ rails server</pre>\r\n<h3>6. Add Bootstrap Javascript</h3>\r\nOpen /app/assets/javascripts/application.js and add:\r\n<pre>//= require query\r\n//= require jquery_ujs\r\n//= require bootstrap  # note that it’s important for bootstrap to be required AFTER query\r\n…</pre>\r\n<h3>7. Add Viewport to <code>&lt;head&gt;</code> tags</h3>\r\nOpen <code>/app/views/layouts/application.html.erb and replace viewport meta tags with this:</code>\r\n<pre>...\r\n&lt;meta name=“viewport” content=“width=device-width, initial-scale=1.0”&gt;\r\n...</pre>\r\n<h3>8. Add Bootstrap Classes</h3>\r\nYou can now add bootstrap elements to pages by adding css classes to your elements to change the style\r\n<pre>&lt;%= link_to “Learn More”, “#yourlink”, class: “btn btn-primary” %&gt; # makes the link a btn with the main brand color</pre>\r\nbecomes &lt;a href=“#” class=“btw btn-primary"&gt;Learn More&lt;/a&gt;\r\n\r\nThe <a href="http://getbootstrap.com" target="_blank">Twitter Bootstrap site</a> has a complete list of classes &amp; documentation\r\n<h3>9. Add Bootstrap Variables</h3>\r\nIn your <code>style.css.scss</code> file you can also add Sass variables for even quicker development\r\nVariables:\r\n<pre>$brand-primary: #2ecc71\r\n$brand-success: #5cb85c;\r\n$body-bg: #222222;\r\n$text-color: #95a5a6;\r\n$link-color:  $brand-primary;\r\n@import ‘bootstrap’; # variables must be above main bootstrap import</pre>\r\n<ul>\r\n	<li><strong>Variables:</strong> You can use this list of all <a href="http://getbootstrap.com/customize/#variables-basics" target="_blank">Bootstrap variables</a>\r\n<small>Note: if you use the bootstrap list of variables, be sure to replace the <code>@</code> with <code>$</code>. <code>@</code> is for Less and <code>$</code> is for Sass.</small></li>\r\n	<li><strong>Colors:</strong> I use <a href="http://flatuicolor.com" target="_blank">Flat UI Colors</a> as a starting point for color scheme and go from there.</li>\r\n</ul>\r\nThat\'s it!  Keep in mind this will get you jump started but there are definitely more sophisticated Sass setups that will keep your variables and style code separate and more organized. More on this later. This is all you need to get going. Go kick some front-end ass!', 'Speed up styling in Rails with Bootstrap & Sass', '', 'inherit', 'open', 'open', '', '52-revision-v1', '', '', '2014-08-05 09:55:26', '2014-08-05 14:55:26', '', 52, 'http://dev.dorails.com/52-revision-v1/', 0, 'revision', '', 0) ;
INSERT INTO `wp_posts` ( `ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(64, 1, '2014-08-05 09:57:18', '2014-08-05 14:57:18', 'Are you new to web development/design and need a quick and easy starting point for your front-end styling so you can hit the ground running? Or are you familiar with Twitter Bootstrap but having trouble get it up and running in Rails? What if you could speed up front-end styling by 5-10x? Imagine you could have a nice looking starting point for the style of your web app with little to no work. What if you could customize colors, fonts, button sizes, padding sizes, background colors, link colors, add icons, responsive behavior etc, etc. within seconds and write little to no CSS? With <a href="http://getbootstrap.com" target="_blank">Bootstrap</a> &amp; <a href="http://sass-lang.com/" target="_blank">Sass</a> you can accomplish this and a lot more.\r\n\r\nFollow these quick steps and you’ll be up and running with Bootstrap &amp; Sass in no time:\r\n<h3>1. Add Gem</h3>\r\nGo to your rails app directory, open your <code>/Gemfile</code> and add:\r\n<pre>gem ‘bootstrap-sass’, ‘~&gt; 3.2.0’ # or whatever the latest version is</pre>\r\n<h3>2. Bundle Install</h3>\r\nAlways run bundle install in terminal after you add a new gem to install it\r\n\r\nIn command-line\r\n<pre>$ cd /your/rails/project/path/\r\n$ bundle install</pre>\r\n<h3>3. Create Style File</h3>\r\nCreate the file <code>style.css.scss</code> here:\r\n<code>/app/assets/stylesheets/style.css.scss</code>\r\n\r\n<small>Note: <code>.sass</code> and <code>.scss</code> are both considered Sass files but <code>.scss</code> files work with the newer syntax that you will likely want to stick with.</small>\r\n\r\nNote (again): <code>.css.scss</code> double extension tells rails to compile the scss to css\r\n<h3>4. Import Bootstrap CSS</h3>\r\nAdd line to top of the new <code>style.css.scss</code> file\r\n<pre>@import ‘bootstrap’; #adds bootstrap styles to the file</pre>\r\n<h3>5. Restart Rails Server</h3>\r\n<pre>cd /your/project/directory/ # or go to your current rails server window\r\n$ ctrl-C # if you have rails server running currently\r\n$ rails server</pre>\r\n<h3>6. Add Bootstrap Javascript</h3>\r\nOpen /app/assets/javascripts/application.js and add:\r\n<pre>//= require query\r\n//= require jquery_ujs\r\n//= require bootstrap  # note that it’s important for bootstrap to be required AFTER query\r\n…</pre>\r\n<h3>7. Add Viewport to <code>&lt;head&gt;</code> tags</h3>\r\nOpen <code>/app/views/layouts/application.html.erb and replace viewport meta tags with this:</code>\r\n<pre>...\r\n&lt;meta name=“viewport” content=“width=device-width, initial-scale=1.0”&gt;\r\n...</pre>\r\n<h3>8. Add Bootstrap Classes</h3>\r\nYou can now add bootstrap elements to pages by adding css classes to your elements to change the style\r\n<pre>&lt;%= link_to “Learn More”, “#yourlink”, class: “btn btn-primary” %&gt; # makes the link a btn with the main brand color</pre>\r\nbecomes &lt;a href=“#” class=“btw btn-primary"&gt;Learn More&lt;/a&gt;\r\n\r\nThe <a href="http://getbootstrap.com" target="_blank">Twitter Bootstrap site</a> has a complete list of classes &amp; documentation\r\n<h3>9. Add Bootstrap Variables</h3>\r\nIn your <code>style.css.scss</code> file you can also add Sass variables for even quicker development\r\nVariables:\r\n<pre>$brand-primary: #2ecc71\r\n$brand-success: #5cb85c;\r\n$body-bg: #222222;\r\n$text-color: #95a5a6;\r\n$link-color:  $brand-primary;\r\n@import ‘bootstrap’; # variables must be above main bootstrap import</pre>\r\n<ul>\r\n	<li><strong>Variables:</strong> You can use this list of all <a href="http://getbootstrap.com/customize/#variables-basics" target="_blank">Bootstrap variables</a>\r\n<small>Note: if you use the bootstrap list of variables, be sure to replace the <code>@</code> with <code>$</code>. <code>@</code> is for Less and <code>$</code> is for Sass.</small></li>\r\n	<li><strong>Colors:</strong> I use <a href="http://flatuicolor.com" target="_blank">Flat UI Colors</a> as a starting point for color scheme and go from there.</li>\r\n</ul>\r\nThat\'s it!  Keep in mind this will get you jump started but there are definitely more sophisticated Sass setups that will keep your variables and style code separate and more organized. More on this later. This is all you need to get going. Go kick some front-end ass!', 'Speed up styling in Rails with Bootstrap & Sass', '', 'inherit', 'open', 'open', '', '52-revision-v1', '', '', '2014-08-05 09:57:18', '2014-08-05 14:57:18', '', 52, 'http://dev.dorails.com/52-revision-v1/', 0, 'revision', '', 0),
(65, 1, '2014-08-05 09:58:10', '2014-08-05 14:58:10', 'Are you new to web development/design and need a quick and easy starting point for your front-end styling so you can hit the ground running? Or are you familiar with Twitter Bootstrap but having trouble get it up and running in Rails? What if you could speed up front-end styling by 5-10x? Imagine you could have a nice looking starting point for the style of your web app with little to no work. What if you could customize colors, fonts, button sizes, padding sizes, background colors, link colors, add icons, responsive behavior etc, etc. within seconds and write little to no CSS? With <a href="http://getbootstrap.com" target="_blank">Bootstrap</a> &amp; <a href="http://sass-lang.com/" target="_blank">Sass</a> you can accomplish this and a lot more.\r\n\r\nFollow these quick steps and you’ll be up and running with Bootstrap &amp; Sass in no time:\r\n<h3>1. Add Gem</h3>\r\nGo to your rails app directory, open your <code>/Gemfile</code> and add:\r\n<pre>gem ‘bootstrap-sass’, ‘~&gt; 3.2.0’ # or whatever the latest version is</pre>\r\n<h3>2. Bundle Install</h3>\r\nAlways run bundle install in terminal after you add a new gem to install it\r\n\r\nIn command-line\r\n<pre>$ cd /your/rails/project/path/\r\n$ bundle install</pre>\r\n<h3>3. Create Style File</h3>\r\nCreate the file <code>style.css.scss</code> here:\r\n<code>/app/assets/stylesheets/style.css.scss</code>\r\n\r\n<small>Note: <code>.sass</code> and <code>.scss</code> are both considered Sass files but <code>.scss</code> files work with the newer syntax that you will likely want to stick with.</small>\r\n\r\n<small>Note (again): <code>.css.scss</code> double extension tells rails to compile the scss to css</small>\r\n<h3>4. Import Bootstrap CSS</h3>\r\nAdd line to top of the new <code>style.css.scss</code> file\r\n<pre>@import ‘bootstrap’; #adds bootstrap styles to the file</pre>\r\n<h3>5. Restart Rails Server</h3>\r\n<pre>cd /your/project/directory/ # or go to your current rails server window\r\n$ ctrl-C # if you have rails server running currently\r\n$ rails server</pre>\r\n<h3>6. Add Bootstrap Javascript</h3>\r\nOpen /app/assets/javascripts/application.js and add:\r\n<pre>//= require query\r\n//= require jquery_ujs\r\n//= require bootstrap  # note that it’s important for bootstrap to be required AFTER query\r\n…</pre>\r\n<h3>7. Add Viewport to <code>&lt;head&gt;</code> tags</h3>\r\nOpen <code>/app/views/layouts/application.html.erb and replace viewport meta tags with this:</code>\r\n<pre>...\r\n&lt;meta name=“viewport” content=“width=device-width, initial-scale=1.0”&gt;\r\n...</pre>\r\n<h3>8. Add Bootstrap Classes</h3>\r\nYou can now add bootstrap elements to pages by adding css classes to your elements to change the style\r\n<pre>&lt;%= link_to “Learn More”, “#yourlink”, class: “btn btn-primary” %&gt; # makes the link a btn with the main brand color</pre>\r\nbecomes &lt;a href=“#” class=“btw btn-primary"&gt;Learn More&lt;/a&gt;\r\n\r\nThe <a href="http://getbootstrap.com" target="_blank">Twitter Bootstrap site</a> has a complete list of classes &amp; documentation\r\n<h3>9. Add Bootstrap Variables</h3>\r\nIn your <code>style.css.scss</code> file you can also add Sass variables for even quicker development\r\nVariables:\r\n<pre>$brand-primary: #2ecc71\r\n$brand-success: #5cb85c;\r\n$body-bg: #222222;\r\n$text-color: #95a5a6;\r\n$link-color:  $brand-primary;\r\n@import ‘bootstrap’; # variables must be above main bootstrap import</pre>\r\n<ul>\r\n	<li><strong>Variables:</strong> You can use this list of all <a href="http://getbootstrap.com/customize/#variables-basics" target="_blank">Bootstrap variables</a>\r\n<small>Note: if you use the bootstrap list of variables, be sure to replace the <code>@</code> with <code>$</code>. <code>@</code> is for Less and <code>$</code> is for Sass.</small></li>\r\n	<li><strong>Colors:</strong> I use <a href="http://flatuicolor.com" target="_blank">Flat UI Colors</a> as a starting point for color scheme and go from there.</li>\r\n</ul>\r\nThat\'s it!  Keep in mind this will get you jump started but there are definitely more sophisticated Sass setups that will keep your variables and style code separate and more organized. More on this later. This is all you need to get going. Go kick some front-end ass!', 'Speed up styling in Rails with Bootstrap & Sass', '', 'inherit', 'open', 'open', '', '52-revision-v1', '', '', '2014-08-05 09:58:10', '2014-08-05 14:58:10', '', 52, 'http://dev.dorails.com/52-revision-v1/', 0, 'revision', '', 0),
(66, 1, '2014-08-05 09:59:23', '2014-08-05 14:59:23', 'Are you new to web development/design and need a quick and easy starting point for your front-end styling so you can hit the ground running? Or are you familiar with Twitter Bootstrap but having trouble get it up and running in Rails? What if you could speed up front-end styling by 5-10x? Imagine you could have a nice looking starting point for the style of your web app with little to no work. What if you could customize colors, fonts, button sizes, padding sizes, background colors, link colors, add icons, responsive behavior etc, etc. within seconds and write little to no CSS? With <a href="http://getbootstrap.com" target="_blank">Bootstrap</a> &amp; <a href="http://sass-lang.com/" target="_blank">Sass</a> you can accomplish this and a lot more.\r\n\r\nFollow these quick steps and you’ll be up and running with Bootstrap &amp; Sass in no time:\r\n<h3>1. Add Gem</h3>\r\nGo to your rails app directory, open your <code>/Gemfile</code> and add:\r\n<pre>gem ‘bootstrap-sass’, ‘~&gt; 3.2.0’ # or whatever the latest version is</pre>\r\n<h3>2. Bundle Install</h3>\r\nAlways run bundle install in terminal after you add a new gem to install it\r\n\r\nIn command-line\r\n<pre>$ cd /your/rails/project/path/\r\n$ bundle install</pre>\r\n<h3>3. Create Style File</h3>\r\nCreate the file <code>style.css.scss</code> here:\r\n<code>/app/assets/stylesheets/style.css.scss</code>\r\n\r\n<small>Note: <code>.sass</code> and <code>.scss</code> are both considered Sass files but <code>.scss</code> files work with the newer syntax that you will likely want to stick with.</small>\r\n\r\n<small>Note (again): <code>.css.scss</code> double extension tells rails to compile the scss to css</small>\r\n<h3>4. Import Bootstrap CSS</h3>\r\nAdd line to top of the new <code>style.css.scss</code> file\r\n<pre>@import ‘bootstrap’; #adds bootstrap styles to the file</pre>\r\n<h3>5. Restart Rails Server</h3>\r\n<pre>cd /your/project/directory/ # or go to your current rails server window\r\n$ ctrl-C # if you have rails server running currently\r\n$ rails server</pre>\r\n<h3>6. Add Bootstrap Javascript</h3>\r\nOpen /app/assets/javascripts/application.js and add:\r\n<pre>//= require query\r\n//= require jquery_ujs\r\n//= require bootstrap  # note that it’s important for bootstrap to be required AFTER query\r\n…</pre>\r\n<h3>7. Add Viewport to <code>&lt;head&gt;</code> tags</h3>\r\nOpen <code>/app/views/layouts/application.html.erb</code> and replace viewport meta tags with this:\r\n<pre>...\r\n&lt;meta name=“viewport” content=“width=device-width, initial-scale=1.0”&gt;\r\n...</pre>\r\n<h3>8. Add Bootstrap Classes</h3>\r\nYou can now add bootstrap elements to pages by adding css classes to your elements to change the style\r\n<pre>&lt;%= link_to “Learn More”, “#yourlink”, class: “btn btn-primary” %&gt; # makes the link a btn with the main brand color</pre>\r\nbecomes &lt;a href=“#” class=“btw btn-primary"&gt;Learn More&lt;/a&gt;\r\n\r\nThe <a href="http://getbootstrap.com" target="_blank">Twitter Bootstrap site</a> has a complete list of classes &amp; documentation\r\n<h3>9. Add Bootstrap Variables</h3>\r\nIn your <code>style.css.scss</code> file you can also add Sass variables for even quicker development\r\nVariables:\r\n<pre>$brand-primary: #2ecc71\r\n$brand-success: #5cb85c;\r\n$body-bg: #222222;\r\n$text-color: #95a5a6;\r\n$link-color:  $brand-primary;\r\n@import ‘bootstrap’; # variables must be above main bootstrap import</pre>\r\n<ul>\r\n	<li><strong>Variables:</strong> You can use this list of all <a href="http://getbootstrap.com/customize/#variables-basics" target="_blank">Bootstrap variables</a>\r\n<small>Note: if you use the bootstrap list of variables, be sure to replace the <code>@</code> with <code>$</code>. <code>@</code> is for Less and <code>$</code> is for Sass.</small></li>\r\n	<li><strong>Colors:</strong> I use <a href="http://flatuicolor.com" target="_blank">Flat UI Colors</a> as a starting point for color scheme and go from there.</li>\r\n</ul>\r\nThat\'s it!  Keep in mind this will get you jump started but there are definitely more sophisticated Sass setups that will keep your variables and style code separate and more organized. More on this later. This is all you need to get going. Go kick some front-end ass!', 'Speed up styling in Rails with Bootstrap & Sass', '', 'inherit', 'open', 'open', '', '52-revision-v1', '', '', '2014-08-05 09:59:23', '2014-08-05 14:59:23', '', 52, 'http://dev.dorails.com/52-revision-v1/', 0, 'revision', '', 0),
(67, 1, '2014-08-05 10:01:09', '2014-08-05 15:01:09', 'Are you new to web development/design and need a quick and easy starting point for your front-end styling so you can hit the ground running? Or are you familiar with Twitter Bootstrap but having trouble get it up and running in Rails? What if you could speed up front-end styling by 5-10x? Imagine you could have a nice looking starting point for the style of your web app with little to no work. What if you could customize colors, fonts, button sizes, padding sizes, background colors, link colors, add icons, responsive behavior etc, etc. within seconds and write little to no CSS? With <a href="http://getbootstrap.com" target="_blank">Bootstrap</a> &amp; <a href="http://sass-lang.com/" target="_blank">Sass</a> you can accomplish this and a lot more.\r\n\r\nFollow these quick steps and you’ll be up and running with Bootstrap &amp; Sass in no time:\r\n<h3>1. Add Gem</h3>\r\nGo to your rails app directory, open your <code>/Gemfile</code> and add:\r\n<pre>gem ‘bootstrap-sass’, ‘~&gt; 3.2.0’ # or whatever the latest version is</pre>\r\n<h3>2. Bundle Install</h3>\r\nAlways run bundle install in terminal after you add a new gem to install it\r\n\r\nIn command-line\r\n<pre>$ cd /your/rails/project/path/\r\n$ bundle install</pre>\r\n<h3>3. Create Style File</h3>\r\nCreate the file <code>style.css.scss</code> here:\r\n<code>/app/assets/stylesheets/style.css.scss</code>\r\n\r\n<small>Note: <code>.sass</code> and <code>.scss</code> are both considered Sass files but <code>.scss</code> files work with the newer syntax that you will likely want to stick with.</small>\r\n\r\n<small>Note (again): <code>.css.scss</code> double extension tells rails to compile the scss to css</small>\r\n<h3>4. Import Bootstrap CSS</h3>\r\nAdd line to top of the new <code>style.css.scss</code> file\r\n<pre>@import ‘bootstrap’; #adds bootstrap styles to the file</pre>\r\n<h3>5. Restart Rails Server</h3>\r\n<pre>cd /your/project/directory/ # or go to your current rails server window\r\n$ ctrl-C # if you have rails server running currently\r\n$ rails server</pre>\r\n<h3>6. Add Bootstrap Javascript</h3>\r\nOpen /app/assets/javascripts/application.js and add:\r\n<pre>//= require query\r\n//= require jquery_ujs\r\n//= require bootstrap  # note that it’s important for bootstrap to be required AFTER query\r\n…</pre>\r\n<h3>7. Add Viewport to <code>&lt;head&gt;</code> tags</h3>\r\nOpen <code>/app/views/layouts/application.html.erb</code> and replace viewport meta tags with this:\r\n<pre>&lt;head&gt;\r\n...\r\n&lt;meta name=“viewport” content=“width=device-width, initial-scale=1.0”&gt;\r\n...</pre>\r\n<pre>&lt;/head&gt;</pre>\r\n<h3>8. Add Bootstrap Classes</h3>\r\nYou can now add bootstrap elements to pages by adding css classes to your elements to change the style\r\n<pre>&lt;%= link_to “Learn More”, “#yourlink”, class: “btn btn-primary” %&gt; # makes the link a btn with the main brand color</pre>\r\nbecomes &lt;a href=“#” class=“btw btn-primary"&gt;Learn More&lt;/a&gt;\r\n\r\nThe <a href="http://getbootstrap.com" target="_blank">Twitter Bootstrap site</a> has a complete list of classes &amp; documentation\r\n<h3>9. Add Bootstrap Variables</h3>\r\nIn your <code>style.css.scss</code> file you can also add Sass variables for even quicker development\r\nVariables:\r\n<pre>$brand-primary: #2ecc71\r\n$brand-success: #5cb85c;\r\n$body-bg: #222222;\r\n$text-color: #95a5a6;\r\n$link-color:  $brand-primary;\r\n@import ‘bootstrap’; # variables must be above main bootstrap import</pre>\r\n<ul>\r\n	<li><strong>Variables:</strong> You can use this list of all <a href="http://getbootstrap.com/customize/#variables-basics" target="_blank">Bootstrap variables</a>\r\n<small>Note: if you use the bootstrap list of variables, be sure to replace the <code>@</code> with <code>$</code>. <code>@</code> is for Less and <code>$</code> is for Sass.</small></li>\r\n	<li><strong>Colors:</strong> I use <a href="http://flatuicolor.com" target="_blank">Flat UI Colors</a> as a starting point for color scheme and go from there.</li>\r\n</ul>\r\nThat\'s it!  Keep in mind this will get you jump started but there are definitely more sophisticated Sass setups that will keep your variables and style code separate and more organized. More on this later. This is all you need to get going. Go kick some front-end ass!', 'Speed up styling in Rails with Bootstrap & Sass', '', 'inherit', 'open', 'open', '', '52-revision-v1', '', '', '2014-08-05 10:01:09', '2014-08-05 15:01:09', '', 52, 'http://dev.dorails.com/52-revision-v1/', 0, 'revision', '', 0),
(68, 1, '2014-08-05 10:01:51', '2014-08-05 15:01:51', 'Are you new to web development/design and need a quick and easy starting point for your front-end styling so you can hit the ground running? Or are you familiar with Twitter Bootstrap but having trouble get it up and running in Rails? What if you could speed up front-end styling by 5-10x? Imagine you could have a nice looking starting point for the style of your web app with little to no work. What if you could customize colors, fonts, button sizes, padding sizes, background colors, link colors, add icons, responsive behavior etc, etc. within seconds and write little to no CSS? With <a href="http://getbootstrap.com" target="_blank">Bootstrap</a> &amp; <a href="http://sass-lang.com/" target="_blank">Sass</a> you can accomplish this and a lot more.\r\n\r\nFollow these quick steps and you’ll be up and running with Bootstrap &amp; Sass in no time:\r\n<h3>1. Add Gem</h3>\r\nGo to your rails app directory, open your <code>/Gemfile</code> and add:\r\n<pre>gem ‘bootstrap-sass’, ‘~&gt; 3.2.0’ # or whatever the latest version is</pre>\r\n<h3>2. Bundle Install</h3>\r\nAlways run bundle install in terminal after you add a new gem to install it\r\n\r\nIn command-line\r\n<pre>$ cd /your/rails/project/path/\r\n$ bundle install</pre>\r\n<h3>3. Create Style File</h3>\r\nCreate the file <code>style.css.scss</code> here:\r\n<code>/app/assets/stylesheets/style.css.scss</code>\r\n\r\n<small>Note: <code>.sass</code> and <code>.scss</code> are both considered Sass files but <code>.scss</code> files work with the newer syntax that you will likely want to stick with.</small>\r\n\r\n<small>Note (again): <code>.css.scss</code> double extension tells rails to compile the scss to css</small>\r\n<h3>4. Import Bootstrap CSS</h3>\r\nAdd line to top of the new <code>style.css.scss</code> file\r\n<pre>@import ‘bootstrap’; #adds bootstrap styles to the file</pre>\r\n<h3>5. Restart Rails Server</h3>\r\n<pre>cd /your/project/directory/ # or go to your current rails server window\r\n$ ctrl-C # if you have rails server running currently\r\n$ rails server</pre>\r\n<h3>6. Add Bootstrap Javascript</h3>\r\nOpen /app/assets/javascripts/application.js and add:\r\n<pre>//= require query\r\n//= require jquery_ujs\r\n//= require bootstrap  # note that it’s important for bootstrap to be required AFTER query\r\n…</pre>\r\n<h3>7. Add Viewport to <code>&lt;head&gt;</code> tags</h3>\r\nOpen <code>/app/views/layouts/application.html.erb</code> and replace viewport meta tags with this:\r\n<pre>&lt;head&gt;\r\n...\r\n&lt;meta name=“viewport” content=“width=device-width, initial-scale=1.0”&gt;\r\n...\r\n&lt;/head&gt;</pre>\r\n<h3>8. Add Bootstrap Classes</h3>\r\nYou can now add bootstrap elements to pages by adding css classes to your elements to change the style\r\n<pre>&lt;%= link_to “Learn More”, “#yourlink”, class: “btn btn-primary” %&gt; # makes the link a btn with the main brand color</pre>\r\nbecomes &lt;a href=“#” class=“btw btn-primary"&gt;Learn More&lt;/a&gt;\r\n\r\nThe <a href="http://getbootstrap.com" target="_blank">Twitter Bootstrap site</a> has a complete list of classes &amp; documentation\r\n<h3>9. Add Bootstrap Variables</h3>\r\nIn your <code>style.css.scss</code> file you can also add Sass variables for even quicker development\r\nVariables:\r\n<pre>$brand-primary: #2ecc71\r\n$brand-success: #5cb85c;\r\n$body-bg: #222222;\r\n$text-color: #95a5a6;\r\n$link-color:  $brand-primary;\r\n@import ‘bootstrap’; # variables must be above main bootstrap import</pre>\r\n<ul>\r\n	<li><strong>Variables:</strong> You can use this list of all <a href="http://getbootstrap.com/customize/#variables-basics" target="_blank">Bootstrap variables</a>\r\n<small>Note: if you use the bootstrap list of variables, be sure to replace the <code>@</code> with <code>$</code>. <code>@</code> is for Less and <code>$</code> is for Sass.</small></li>\r\n	<li><strong>Colors:</strong> I use <a href="http://flatuicolor.com" target="_blank">Flat UI Colors</a> as a starting point for color scheme and go from there.</li>\r\n</ul>\r\nThat\'s it!  Keep in mind this will get you jump started but there are definitely more sophisticated Sass setups that will keep your variables and style code separate and more organized. More on this later. This is all you need to get going. Go kick some front-end ass!', 'Speed up styling in Rails with Bootstrap & Sass', '', 'inherit', 'open', 'open', '', '52-revision-v1', '', '', '2014-08-05 10:01:51', '2014-08-05 15:01:51', '', 52, 'http://dev.dorails.com/52-revision-v1/', 0, 'revision', '', 0),
(69, 1, '2014-08-05 10:12:32', '2014-08-05 15:12:32', 'Are you new to web development/design and need a quick and easy starting point for your front-end styling so you can hit the ground running? Or are you familiar with Twitter Bootstrap but having trouble get it up and running in Rails? What if you could speed up front-end styling by 5-10x? Imagine you could have a nice looking starting point for the style of your web app with little to no work. What if you could customize colors, fonts, button sizes, padding sizes, background colors, link colors, add icons, responsive behavior etc, etc. within seconds and write little to no CSS? With <a href="http://getbootstrap.com" target="_blank">Bootstrap</a> &amp; <a href="http://sass-lang.com/" target="_blank">Sass</a> you can accomplish this and a lot more.\r\n\r\nFollow these quick steps and you’ll be up and running with Bootstrap &amp; Sass in no time:\r\n<h3>1. Add Gem</h3>\r\nGo to your rails app directory, open your <code>/Gemfile</code> and add:\r\n<pre>gem ‘bootstrap-sass’, ‘~&gt; 3.2.0’ # or whatever the latest version is</pre>\r\n<h3>2. Bundle Install</h3>\r\nAlways run bundle install in terminal after you add a new gem to install it\r\n\r\nIn command-line\r\n<pre>$ cd /your/rails/project/path/\r\n$ bundle install</pre>\r\n<h3>3. Create Style File</h3>\r\nCreate the file <code>style.css.scss</code> here:\r\n<code>/app/assets/stylesheets/style.css.scss</code>\r\n\r\n<small>Note: <code>.sass</code> and <code>.scss</code> are both considered Sass files but <code>.scss</code> files work with the newer syntax that you will likely want to stick with.</small>\r\n\r\n<small>Note (again): <code>.css.scss</code> double extension tells rails to compile the scss to css</small>\r\n<h3>4. Import Bootstrap CSS</h3>\r\nAdd line to top of the new <code>style.css.scss</code> file\r\n<pre>@import ‘bootstrap’; #adds bootstrap styles to the file</pre>\r\n<h3>5. Restart Rails Server</h3>\r\n<pre>cd /your/project/directory/ # or go to your current rails server window\r\n$ ctrl-C # if you have rails server running currently\r\n$ rails server</pre>\r\n<h3>6. Add Bootstrap Javascript</h3>\r\nOpen /app/assets/javascripts/application.js and add:\r\n<pre>//= require query\r\n//= require jquery_ujs\r\n//= require bootstrap  # note that it’s important for bootstrap to be required AFTER query\r\n…</pre>\r\n<h3>7. Add Viewport to <code>&lt;head&gt;</code> tags</h3>\r\nOpen <code>/app/views/layouts/application.html.erb</code> and replace viewport meta tags with this:\r\n<pre>&lt;head&gt;\r\n...\r\n&lt;meta name=“viewport” content=“width=device-width, initial-scale=1.0”&gt;\r\n...\r\n&lt;/head&gt;</pre>\r\n<h3>8. Add Bootstrap Classes</h3>\r\nYou can now add bootstrap elements to pages by adding css classes to your elements to change the style\r\n<pre>&lt;%= link_to “Learn More”, “#yourlink”, class: “btn btn-primary” %&gt; # makes the link a btn with the main brand color</pre>\r\nbecomes &lt;a href=“#” class=“btn btn-primary"&gt;Learn More&lt;/a&gt;\r\n\r\nNow you can go into your rails views and add styled <a href="http://getbootstrap.com/components/#navbar" target="_blank">navbars</a>, <a href="http://getbootstrap.com/css/#buttons" target="_blank">buttons</a>, <a href="http://getbootstrap.com/css/#forms" target="_blank">forms</a>, and <a href="http://getbootstrap.com/components/#jumbotron" target="_blank">jumbotrons</a> with little effort. Bootstrap is also extremely helpful with a <a href="http://getbootstrap.com/css/#grid" target="_blank">responsive grid</a> that works right out of the box. If you are new to Bootstrap, checkout their <a href="http://getbootstrap.com/getting-started/#examples" target="_blank">examples</a>. They can be helpful for getting started.\r\n\r\nThe <a href="http://getbootstrap.com" target="_blank">Twitter Bootstrap site</a> has a complete list of classes &amp; documentation\r\n<h3>9. Add Bootstrap Variables</h3>\r\nIn your <code>style.css.scss</code> file you can also add Sass variables for even quicker development\r\nVariables:\r\n<pre>$brand-primary: #2ecc71\r\n$brand-success: #5cb85c;\r\n$body-bg: #222222;\r\n$text-color: #95a5a6;\r\n$link-color:  $brand-primary;\r\n@import ‘bootstrap’; # variables must be above main bootstrap import</pre>\r\n<ul>\r\n	<li><strong>Variables:</strong> You can use this list of all <a href="http://getbootstrap.com/customize/#variables-basics" target="_blank">Bootstrap variables</a>\r\n<small>Note: if you use the bootstrap list of variables, be sure to replace the <code>@</code> with <code>$</code>. <code>@</code> is for Less and <code>$</code> is for Sass.</small></li>\r\n	<li><strong>Colors:</strong> I use <a href="http://flatuicolor.com" target="_blank">Flat UI Colors</a> as a starting point for color scheme and go from there.</li>\r\n</ul>\r\nThat\'s it!  Keep in mind this will get you jump started but there are definitely more sophisticated Sass setups that will keep your variables and style code separate and more organized. There are also many more tips for Bootstrap. I could do a whole set of posts on the responsive grid and how to use columns the right way. More on this later. This is all you need to get going. Go kick some front-end ass!', 'Kick Front-end Ass in Rails with Bootstrap & Sass', '', 'inherit', 'open', 'open', '', '52-revision-v1', '', '', '2014-08-05 10:12:32', '2014-08-05 15:12:32', '', 52, 'http://dev.dorails.com/52-revision-v1/', 0, 'revision', '', 0),
(70, 1, '2014-08-05 10:15:07', '2014-08-05 15:15:07', 'Are you new to web development/design and need a quick and easy starting point for your front-end styling so you can hit the ground running? Or are you familiar with Twitter Bootstrap but having trouble get it up and running in Rails? What if you could speed up front-end styling by 5-10x? Imagine you could have a nice looking starting point for the style of your web app with little to no work. What if you could customize colors, fonts, button sizes, padding sizes, background colors, link colors, add icons, responsive behavior etc, etc. within seconds and write little to no CSS? With <a href="http://getbootstrap.com" target="_blank">Bootstrap</a> &amp; <a href="http://sass-lang.com/" target="_blank">Sass</a> you can accomplish this and a lot more.\r\n\r\nFollow these quick steps and you’ll be up and running with Bootstrap &amp; Sass in no time:\r\n<h3>1. Add Gem</h3>\r\nGo to your rails app directory, open your <code>/Gemfile</code> and add:\r\n<pre>gem ‘bootstrap-sass’, ‘~&gt; 3.2.0’ # or whatever the latest version is</pre>\r\n<h3>2. Bundle Install</h3>\r\nAlways run bundle install in terminal after you add a new gem to install it\r\n\r\nIn command-line\r\n<pre>$ cd /your/rails/project/path/\r\n$ bundle install</pre>\r\n<h3>3. Create Style File</h3>\r\nCreate the file <code>style.css.scss</code> here:\r\n<code>/app/assets/stylesheets/style.css.scss</code>\r\n\r\n<small>Note: <code>.sass</code> and <code>.scss</code> are both considered Sass files but <code>.scss</code> files work with the newer syntax that you will likely want to stick with.</small>\r\n\r\n<small>Note (again): <code>.css.scss</code> double extension tells rails to compile the scss to css</small>\r\n<h3>4. Import Bootstrap CSS</h3>\r\nAdd line to top of the new <code>style.css.scss</code> file\r\n<pre>@import ‘bootstrap’; #adds bootstrap styles to the file</pre>\r\n<h3>5. Restart Rails Server</h3>\r\n<pre>cd /your/project/directory/ # or go to your current rails server window\r\n$ ctrl-C # if you have rails server running currently\r\n$ rails server</pre>\r\n<h3>6. Add Bootstrap Javascript</h3>\r\nOpen /app/assets/javascripts/application.js and add:\r\n<pre>//= require query\r\n//= require jquery_ujs\r\n//= require bootstrap  # note that it’s important for bootstrap to be required AFTER query\r\n…</pre>\r\n<h3>7. Add Viewport to <code>&lt;head&gt;</code> tags</h3>\r\nOpen <code>/app/views/layouts/application.html.erb</code> and replace viewport meta tags with this:\r\n<pre>&lt;head&gt;\r\n...\r\n&lt;meta name=“viewport” content=“width=device-width, initial-scale=1.0”&gt;\r\n...\r\n&lt;/head&gt;</pre>\r\n<h3>8. Add Bootstrap Classes</h3>\r\nYou can now add bootstrap elements to pages by adding css classes to your elements to change the style\r\n<pre>&lt;%= link_to “Learn More”, “#yourlink”, class: “btn btn-primary” %&gt; # makes the link a btn with the main brand color</pre>\r\nbecomes &lt;a href=“#” class=“btn btn-primary"&gt;Learn More&lt;/a&gt;\r\n\r\nNow you can go into your rails views and add styled <a href="http://getbootstrap.com/components/#navbar" target="_blank">navbars</a>, <a href="http://getbootstrap.com/css/#buttons" target="_blank">buttons</a>, <a href="http://getbootstrap.com/css/#forms" target="_blank">forms</a>, and <a href="http://getbootstrap.com/components/#jumbotron" target="_blank">jumbotrons</a> with little effort. Bootstrap is also extremely helpful with a <a href="http://getbootstrap.com/css/#grid" target="_blank">responsive grid</a> that works right out of the box. If you are new to Bootstrap, checkout their <a href="http://getbootstrap.com/getting-started/#examples" target="_blank">examples</a>. They can be helpful for getting started.\r\n\r\nThe <a href="http://getbootstrap.com" target="_blank">Twitter Bootstrap site</a> has a complete list of classes &amp; documentation\r\n<h3>9. Add Bootstrap Variables</h3>\r\nIn your <code>style.css.scss</code> file you can also add Sass variables for even quicker development\r\nVariables:\r\n<pre>$brand-primary: #2ecc71\r\n$brand-success: #5cb85c;\r\n$body-bg: #222222;\r\n$text-color: #95a5a6;\r\n$link-color:  $brand-primary;\r\n@import ‘bootstrap’; # variables must be above main bootstrap import</pre>\r\n<ul>\r\n	<li><strong>Variables:</strong> You can use this list of all <a href="http://getbootstrap.com/customize/#variables-basics" target="_blank">Bootstrap variables</a>\r\n<small>Note: if you use the bootstrap list of variables, be sure to replace the <code>@</code> with <code>$</code>. <code>@</code> is for Less and <code>$</code> is for Sass.</small></li>\r\n	<li><strong>Colors:</strong> I use <a href="http://flatuicolor.com" target="_blank">Flat UI Colors</a> as a starting point for color scheme and go from there.</li>\r\n</ul>\r\nThat\'s it!  Keep in mind this will get you jump started but there are definitely more sophisticated Sass setups that will keep your variables and style code separate and more organized. There are also many more tips for Bootstrap. I could do a whole set of posts on the responsive grid and how to use columns the right way.\r\n\r\nMore on this later. But this is all you need to get going. Go kick some front-end ass!', 'Kick front-end ass with Bootstrap & Sass', '', 'inherit', 'open', 'open', '', '52-revision-v1', '', '', '2014-08-05 10:15:07', '2014-08-05 15:15:07', '', 52, 'http://dev.dorails.com/52-revision-v1/', 0, 'revision', '', 0),
(71, 1, '2014-08-05 10:15:46', '2014-08-05 15:15:46', 'Are you new to web development/design and need a quick and easy starting point for your front-end styling so you can hit the ground running? Or are you familiar with Twitter Bootstrap but having trouble get it up and running in Rails? What if you could speed up front-end styling by 5-10x? Imagine you could have a nice looking starting point for the style of your web app with little to no work. What if you could customize colors, fonts, button sizes, padding sizes, background colors, link colors, add icons, responsive behavior etc, etc. within seconds and write little to no CSS? With <a href="http://getbootstrap.com" target="_blank">Bootstrap</a> &amp; <a href="http://sass-lang.com/" target="_blank">Sass</a> you can accomplish this and a lot more.\r\n\r\nFollow these quick steps and you’ll be up and running with Bootstrap &amp; Sass in no time:\r\n<h3>1. Add Gem</h3>\r\nGo to your rails app directory, open your <code>/Gemfile</code> and add:\r\n<pre>gem ‘bootstrap-sass’, ‘~&gt; 3.2.0’ # or whatever the latest version is</pre>\r\n<h3>2. Bundle Install</h3>\r\nAlways run bundle install in terminal after you add a new gem to install it\r\n\r\nIn command-line\r\n<pre>$ cd /your/rails/project/path/\r\n$ bundle install</pre>\r\n<h3>3. Create Style File</h3>\r\nCreate the file <code>style.css.scss</code> here:\r\n<code>/app/assets/stylesheets/style.css.scss</code>\r\n\r\n<small>Note: <code>.sass</code> and <code>.scss</code> are both considered Sass files but <code>.scss</code> files work with the newer syntax that you will likely want to stick with.</small>\r\n\r\n<small>Note (again): <code>.css.scss</code> double extension tells rails to compile the scss to css</small>\r\n<h3>4. Import Bootstrap CSS</h3>\r\nAdd line to top of the new <code>style.css.scss</code> file\r\n<pre>@import ‘bootstrap’; #adds bootstrap styles to the file</pre>\r\n<h3>5. Restart Rails Server</h3>\r\n<pre>cd /your/project/directory/ # or go to your current rails server window\r\n$ ctrl-C # if you have rails server running currently\r\n$ rails server</pre>\r\n<h3>6. Add Bootstrap Javascript</h3>\r\nOpen /app/assets/javascripts/application.js and add:\r\n<pre>//= require query\r\n//= require jquery_ujs\r\n//= require bootstrap  # note that it’s important for bootstrap to be required AFTER query\r\n…</pre>\r\n<h3>7. Add Viewport to <code>&lt;head&gt;</code> tags</h3>\r\nOpen <code>/app/views/layouts/application.html.erb</code> and replace viewport meta tags with this:\r\n<pre>&lt;head&gt;\r\n...\r\n&lt;meta name=“viewport” content=“width=device-width, initial-scale=1.0”&gt;\r\n...\r\n&lt;/head&gt;</pre>\r\n<h3>8. Add Bootstrap Classes</h3>\r\nYou can now add bootstrap elements to pages by adding css classes to your elements to change the style\r\n<pre>&lt;%= link_to “Learn More”, “#yourlink”, class: “btn btn-primary” %&gt; # makes the link a btn with the main brand color</pre>\r\nbecomes\r\n<pre>&lt;a href=“#” class=“btn btn-primary"&gt;Learn More&lt;/a&gt;</pre>\r\nNow you can go into your rails views and add styled <a href="http://getbootstrap.com/components/#navbar" target="_blank">navbars</a>, <a href="http://getbootstrap.com/css/#buttons" target="_blank">buttons</a>, <a href="http://getbootstrap.com/css/#forms" target="_blank">forms</a>, and <a href="http://getbootstrap.com/components/#jumbotron" target="_blank">jumbotrons</a> with little effort. Bootstrap is also extremely helpful with a <a href="http://getbootstrap.com/css/#grid" target="_blank">responsive grid</a> that works right out of the box. If you are new to Bootstrap, checkout their <a href="http://getbootstrap.com/getting-started/#examples" target="_blank">examples</a>. They can be helpful for getting started.\r\n\r\nThe <a href="http://getbootstrap.com" target="_blank">Twitter Bootstrap site</a> has a complete list of classes &amp; documentation\r\n<h3>9. Add Bootstrap Variables</h3>\r\nIn your <code>style.css.scss</code> file you can also add Sass variables for even quicker development\r\nVariables:\r\n<pre>$brand-primary: #2ecc71\r\n$brand-success: #5cb85c;\r\n$body-bg: #222222;\r\n$text-color: #95a5a6;\r\n$link-color:  $brand-primary;\r\n@import ‘bootstrap’; # variables must be above main bootstrap import</pre>\r\n<ul>\r\n	<li><strong>Variables:</strong> You can use this list of all <a href="http://getbootstrap.com/customize/#variables-basics" target="_blank">Bootstrap variables</a>\r\n<small>Note: if you use the bootstrap list of variables, be sure to replace the <code>@</code> with <code>$</code>. <code>@</code> is for Less and <code>$</code> is for Sass.</small></li>\r\n	<li><strong>Colors:</strong> I use <a href="http://flatuicolor.com" target="_blank">Flat UI Colors</a> as a starting point for color scheme and go from there.</li>\r\n</ul>\r\nThat\'s it!  Keep in mind this will get you jump started but there are definitely more sophisticated Sass setups that will keep your variables and style code separate and more organized. There are also many more tips for Bootstrap. I could do a whole set of posts on the responsive grid and how to use columns the right way.\r\n\r\nMore on this later. But this is all you need to get going. Go kick some front-end ass!', 'Kick front-end ass with Bootstrap & Sass', '', 'inherit', 'open', 'open', '', '52-revision-v1', '', '', '2014-08-05 10:15:46', '2014-08-05 15:15:46', '', 52, 'http://dev.dorails.com/52-revision-v1/', 0, 'revision', '', 0),
(72, 1, '2014-08-05 10:19:32', '2014-08-05 15:19:32', 'Are you new to web development/design and need a quick and easy starting point for your front-end styling so you can hit the ground running? Or are you familiar with Twitter Bootstrap but having trouble get it up and running in Rails? What if you could speed up front-end styling by 5-10x? Imagine you could have a nice looking starting point for the style of your web app with little to no work. What if you could customize colors, fonts, button sizes, padding sizes, background colors, link colors, add icons, responsive behavior etc, etc. within seconds and write little to no CSS? With <a href="http://getbootstrap.com" target="_blank">Bootstrap</a> &amp; <a href="http://sass-lang.com/" target="_blank">Sass</a> you can accomplish this and a lot more.\r\n\r\nFollow these quick steps and you’ll be up and running with Bootstrap &amp; Sass in no time:\r\n<h3>1. Add Gem</h3>\r\nGo to your rails app directory, open your <code>/Gemfile</code> and add:\r\n<pre>gem ‘bootstrap-sass’, ‘~&gt; 3.2.0’ # or whatever the latest version is</pre>\r\n<h3>2. Bundle Install</h3>\r\nAlways run bundle install in terminal after you add a new gem to install it\r\n\r\nIn command-line\r\n<pre>$ cd /your/rails/project/path/\r\n$ bundle install</pre>\r\n<h3>3. Create Style File</h3>\r\nCreate the file <code>style.css.scss</code> here:\r\n<code>/app/assets/stylesheets/style.css.scss</code>\r\n\r\n<small>Note: <code>.sass</code> and <code>.scss</code> are both considered Sass files but <code>.scss</code> files work with the newer syntax that you will likely want to stick with.</small>\r\n\r\n<small>Note (again): <code>.css.scss</code> double extension tells rails to compile the scss to css</small>\r\n<h3>4. Import Bootstrap CSS</h3>\r\nAdd line to top of the new <code>style.css.scss</code> file\r\n<pre>@import ‘bootstrap’; #adds bootstrap styles to the file</pre>\r\n<h3>5. Restart Rails Server</h3>\r\n<pre>cd /your/project/directory/ # or go to your current rails server window\r\n$ ctrl-C # if you have rails server running currently\r\n$ rails server</pre>\r\n<h3>6. Add Bootstrap Javascript</h3>\r\nOpen /app/assets/javascripts/application.js and add:\r\n<pre>//= require query\r\n//= require jquery_ujs\r\n//= require bootstrap  # note that it’s important for bootstrap to be required AFTER query\r\n…</pre>\r\n<h3>7. Add Viewport to <code>&lt;head&gt;</code> tags</h3>\r\nOpen <code>/app/views/layouts/application.html.erb</code> and replace viewport meta tags with this:\r\n<pre>&lt;head&gt;\r\n...\r\n&lt;meta name=“viewport” content=“width=device-width, initial-scale=1.0”&gt;\r\n...\r\n&lt;/head&gt;</pre>\r\n<h3>8. Add Bootstrap Classes</h3>\r\nYou can now add bootstrap elements to pages by adding css classes to your elements to change the style\r\n<pre>&lt;%= link_to “Learn More”, “#yourlink”, class: “btn btn-primary” %&gt; # makes the link a btn with the main brand color</pre>\r\nbecomes\r\n<pre>&lt;a href=“#” class=“btn btn-primary"&gt;Learn More&lt;/a&gt;</pre>\r\nNow you can go into your rails views and add styled <a href="http://getbootstrap.com/components/#navbar" target="_blank">navbars</a>, <a href="http://getbootstrap.com/css/#buttons" target="_blank">buttons</a>, <a href="http://getbootstrap.com/css/#forms" target="_blank">forms</a>, and <a href="http://getbootstrap.com/components/#jumbotron" target="_blank">jumbotrons</a> with little effort. Bootstrap is also extremely helpful with a <a href="http://getbootstrap.com/css/#grid" target="_blank">responsive grid</a> that works right out of the box. If you are new to Bootstrap, checkout their <a href="http://getbootstrap.com/getting-started/#examples" target="_blank">examples</a>. They can be helpful for getting started.\r\n\r\nIf I am throwing something quick together or working on a high-end custom-designed site, I use Bootstrap &amp; Sass as a starting point because it is so rapid and moldable.\r\n\r\nThe <a href="http://getbootstrap.com" target="_blank">Twitter Bootstrap site</a> has a complete list of classes &amp; documentation\r\n<h3>9. Add Bootstrap Variables</h3>\r\nHere\'s where the magic happens. In your <code>style.css.scss</code> file you can also add Sass variables for even quicker development\r\n\r\nVariables:\r\n<pre>$brand-primary: #2ecc71\r\n$brand-success: #5cb85c;\r\n$body-bg: #222222;\r\n$text-color: #95a5a6;\r\n$link-color:  $brand-primary;\r\n@import ‘bootstrap’; # variables must be above main bootstrap import</pre>\r\n<ul>\r\n	<li><strong>Variables:</strong> You can use this list of all <a href="http://getbootstrap.com/customize/#variables-basics" target="_blank">Bootstrap variables</a>\r\n<small>Note: if you use the bootstrap list of variables, be sure to replace the <code>@</code> with <code>$</code>. <code>@</code> is for Less and <code>$</code> is for Sass.</small></li>\r\n	<li><strong>Colors:</strong> I use <a href="http://flatuicolor.com" target="_blank">Flat UI Colors</a> as a starting point for color scheme and go from there.</li>\r\n</ul>\r\nThat\'s it!  Keep in mind this will get you jump started but there are definitely more sophisticated Sass setups that will keep your variables and style code separate and more organized. There are also many more tips for Bootstrap. I could do a whole set of posts on the responsive grid and how to use columns the right way.\r\n\r\nMore on this later. But this is all you need to get going. Go kick some front-end ass!', 'Kick front-end ass with Bootstrap & Sass', '', 'inherit', 'open', 'open', '', '52-revision-v1', '', '', '2014-08-05 10:19:32', '2014-08-05 15:19:32', '', 52, 'http://dev.dorails.com/52-revision-v1/', 0, 'revision', '', 0) ;
INSERT INTO `wp_posts` ( `ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(73, 1, '2014-08-06 12:19:46', '2014-08-06 17:19:46', 'I used to see web/software development as a lonely, anti-social and disorganized activity. It was incredibly difficult to collaborate and follow along with the progress of a project. Also it was a beat-down to transfer and backup projects to a place where I could always access them from anywhere. That was until I discovered <a href="https://github.com/" target="_blank">Github</a>.\r\n\r\nNow I push all my projects to an online repository. I see a real-time history of all my projects. I easily collaborate and contribute to other\'s projects, and get instant access to my source code whenever I need it. Github also serves as a social network of sorts for developers. In a glance others can see what I\'m working on and I can explore to see what my friends are working on. This is all part of the modern web/software developer\'s repertoire  (especially Rails), along with <a href="http://git-scm.com/" target="_blank">Git</a>.\r\n\r\nKeep in mind that Github and Git are related but different things. Git is a local version control tool for your projects, and Github is online hosting of your project source code.\r\n\r\nSo what\'s the best way to get started with Github? Follow these steps and you\'ll be rolling.\r\n<h3>1. Setup Git</h3>\r\nGit is required to be able to use Github, so if you haven\'t read my post <em><a title="Get going with Git" href="http://dev.dorails.com/railsvitamins/get-going-with-git/">Get going with Git</a></em>, go there first and setup Git on your local computer.\r\n<h3>2. Make initial commit</h3>\r\nOnce you\'ve setup Git on your computer. Find an existing project that you want to put on Github or create a new folder for an upcoming project. Then open terminal and enter the following:\r\n<pre>$ cd /path/to/your/project/ # change to the directory of your project\r\n$ git init # create local repository\r\n$ git add . # add all files in the directory\r\n$ git commit -am "Initial Commit" # commit with a message</pre>\r\nYou now have a local repository with your new or existing project. How do we push this to Github? Continue on...\r\n<h3>3. Start Github account</h3>\r\nGo to <a href="http://github.com" target="_blank">github.com</a> and setup your account.\r\n<h3>4. Create SSH Keys</h3>\r\nFollow Github instructions <a href="https://help.github.com/articles/generating-ssh-keys" target="_blank">here</a>.\r\n<h3>5. Create a new repo</h3>\r\nOnce you are setup and logged in:\r\n<ul>\r\n	<li>Click on the <code>+</code> sign in the top right hand corner</li>\r\n	<li>Click <code>New repository</code> from the dropdown</li>\r\n	<li>Give repo a name like <code>my_project</code>, <code>my-project</code>, or <code>MyProject</code> (I like to pick a convention and stick with it).</li>\r\n	<li>Give your project a description</li>\r\n	<li>Choose <code>Public</code> or <code>Private</code>.\r\n<small>Stick with public right now unless you are doing a company/client project (they might not like you publishing their source code for the world to see). Public repos are free. Private repos will cost you a little. I use them myself though.</small></li>\r\n	<li>I usually leave the <code>Initialize this repo with a README</code> unchecked because Rails projects have these by default when you setup a rails project.</li>\r\n	<li>Then click the <code>Create Repository</code> Button</li>\r\n</ul>\r\n<h3>6. Push Local Git Repo to Github Repo</h3>\r\nAfter your Github repo is created you will see a screen with setup instructions. Skip down to the <code>Push an existing repository from the command line</code> section. Type the following into the command line on your local machine:\r\n<pre>git remote add origin git@github.com:MyAccount/my_project.git\r\ngit push -u origin master</pre>\r\nYou have now set your new Github repo as the origin "remote" repository (more on remotes later). And you have set the ability to push your <em>local</em> Git repo to your <em>remote</em> Github repo.\r\n<h3>7. Do the Git Jive</h3>\r\nNow you can work on your project, make changes, and do the Git dance.\r\n<ol>\r\n	<li>Work on stuff</li>\r\n	<li>\r\n<pre>$ git add .</pre>\r\n</li>\r\n	<li>\r\n<pre>$ git commit -am "Create Navbar"</pre>\r\n<small>Note: Best practice for commits is to write in present tense and keep it short</small></li>\r\n	<li>\r\n<pre>$ git push</pre>\r\n<small>Pushes to Github repo</small></li>\r\n	<li>Repeat</li>\r\n</ol>\r\n<h3>8. Bonus</h3>\r\nI was going to save this for another post, but it\'s too much fun. Now that your Github repo is setup for your project you can pull up your project from any computer in a jiffy (as long as it has Git setup on it). You can actually do this with anyone\'s public project on Github. This is called <em>cloning</em>, and it does just that. Just open the directory where you want to drop it on your local machine and clone the repo to download the project instantly. The quickest way to clone a project is to find the project repo on Github and copy the clone code on the righthand side here:\r\n\r\n<a href="http://dev.dorails.com/wp-content/uploads/2014/08/Git-Clone.jpg"><img class="aligncenter wp-image-80" src="http://dev.dorails.com/wp-content/uploads/2014/08/Git-Clone-300x183.jpg" alt="Git Clone" width="500" height="306" /></a>\r\n\r\nThen travel to the directory you want to drop it and type <code>$ git clone</code> and paste the clone text in like so:\r\n<pre>$ cd /path/to/new/project/destination/\r\n$ git clone git@github.com:MyAccount/my_project.git</pre>\r\nFeel free to dig around Github and find other amazing developers with fun projects and clone theirs too to dig through their code.\r\n\r\nThere are a thousand other more advanced techniques I will cover with Git/Github including branches, remotes and deploying your Rails app, but you can hit the ground running now. With this jump start you can keep your code in an online repo, share what you are working on with others, easily collaborate, and interact with other humans. Congrats you\'re now a <em>modern</em> developer living in the 21st century!', 'Hop on the Github bandwagon', '', 'publish', 'open', 'open', '', 'hop-on-the-github-bandwagon', '', '', '2014-08-26 10:23:00', '2014-08-26 15:23:00', '', 0, 'http://dev.dorails.com/?p=73', 0, 'post', '', 0),
(74, 1, '2014-08-06 09:38:26', '2014-08-06 14:38:26', 'I used to see web/software development as a lonely, anti-social and disorganized activity. It was incredibly difficult to collaborate and follow along with the progress of a project. Also it was a beat-down to transfer and backup projects to a place where I could always access them. That was until I discovered <a href="https://github.com/" target="_blank">Github</a>.\r\n\r\nNow I push all my projects to an online repository. I see a real-time history of all my projects. I easily collaborate and contribute to other\'s projects, and get instant access to my source code whenever I need it. Github also serves as a social network of sorts for developers. In a glance others can see what I\'m working on and I can explore to see what my friends are working on. This is all part of the modern web/software developer\'s repertoire  (especially Rails), along with <a href="http://git-scm.com/" target="_blank">Git</a>.\r\n\r\nKeep in mind that Github and Git are related but different things. Git is a local version control tool for your projects, and Github is online hosting of your project source code.\r\n\r\nSo what\'s the best way to get started with Github? Follow these steps and you\'ll be rolling.\r\n<h3>1. Setup Git</h3>\r\nGit is required to be able to use Github, so if you haven\'t read my post <em><a title="Get going with Git" href="http://dev.dorails.com/get-going-with-git/">Get going with Git</a></em>, go there first.\r\n<h3>2. Make initial commit</h3>\r\nFind an existing project that you want to put on Github or create a new folder for an upcoming project.\r\n\r\n$ cd /path/to/your/project/ # change to the directory of your project\r\n$ git init # create local repository\r\n$ git add . # add all files in the directory\r\n$ git commit -am "Initial Commit" # commit with a message\r\n\r\nYou now have a local repository with your new or existing project. How do we push this to Github? Continue on...\r\n<h3>3. Start Github account</h3>\r\nGo to <a href="http://github.com" target="_blank">github.com</a> and setup your account.\r\n<h3>4. Create a new repo</h3>\r\nOnce you are setup and logged in:\r\n<ul>\r\n	<li>Click on the <code>+</code> sign in the top right hand corner</li>\r\n	<li>Click "New repository" from the dropdown</li>\r\n	<li>Give repo a name like <code>my_project</code>, <code>my-project</code>, or <code>MyProject</code> (I like to pick a convention and stick with it).</li>\r\n	<li>Give your project a description</li>\r\n	<li>Choose Public or Private.\r\nStick with public right now unless you are doing a company/client project (they might not like you publishing their source code for the world to see). Public repos are free. Private repos will cost you a little. I use them myself though.</li>\r\n	<li>I usually leave the "Initialize this repo with a README" unchecked because Rails projects have these by default when you setup a rails project.</li>\r\n	<li>Click "Create Repository"</li>\r\n</ul>\r\n<h3>5. Push Local Git Repo to Github Repo</h3>\r\nAfter your Github repo is created you will see a screen with setup instructions. Skip down to the "Push an existing repository from the command line" section. Type the following into the command line on your local machine:\r\n<pre>git remote add origin git@github.com:TyRichards/test_repo.git\r\ngit push -u origin master</pre>\r\n<h3>6. Done!</h3>\r\nNow you can work on your project, make changes, and do the Git dance.\r\n<ul>\r\n	<li>Work on stuff</li>\r\n	<li>\r\n<pre>$ git add .</pre>\r\n</li>\r\n	<li>\r\n<pre>$ git commit -am "Create Navbar"</pre>\r\nNote: Best practice for commits is to write in present tense and keep it short\r\n</li>\r\n	<li>\r\n<pre>$ git push</pre>\r\nPushes to Github repo\r\n</li>\r\n	<li>Repeat</li>\r\n</ul>', 'Get going with Github', '', 'inherit', 'open', 'open', '', '73-revision-v1', '', '', '2014-08-06 09:38:26', '2014-08-06 14:38:26', '', 73, 'http://dev.dorails.com/73-revision-v1/', 0, 'revision', '', 0),
(75, 1, '2014-08-06 09:38:29', '2014-08-06 14:38:29', 'I used to see web/software development as a lonely, anti-social and disorganized activity. It was incredibly difficult to collaborate and follow along with the progress of a project. Also it was a beat-down to transfer and backup projects to a place where I could always access them. That was until I discovered <a href="https://github.com/" target="_blank">Github</a>.\r\n\r\nNow I push all my projects to an online repository. I see a real-time history of all my projects. I easily collaborate and contribute to other\'s projects, and get instant access to my source code whenever I need it. Github also serves as a social network of sorts for developers. In a glance others can see what I\'m working on and I can explore to see what my friends are working on. This is all part of the modern web/software developer\'s repertoire  (especially Rails), along with <a href="http://git-scm.com/" target="_blank">Git</a>.\r\n\r\nKeep in mind that Github and Git are related but different things. Git is a local version control tool for your projects, and Github is online hosting of your project source code.\r\n\r\nSo what\'s the best way to get started with Github? Follow these steps and you\'ll be rolling.\r\n<h3>1. Setup Git</h3>\r\nGit is required to be able to use Github, so if you haven\'t read my post <em><a title="Get going with Git" href="http://dev.dorails.com/get-going-with-git/">Get going with Git</a></em>, go there first.\r\n<h3>2. Make initial commit</h3>\r\nFind an existing project that you want to put on Github or create a new folder for an upcoming project.\r\n\r\n$ cd /path/to/your/project/ # change to the directory of your project\r\n$ git init # create local repository\r\n$ git add . # add all files in the directory\r\n$ git commit -am "Initial Commit" # commit with a message\r\n\r\nYou now have a local repository with your new or existing project. How do we push this to Github? Continue on...\r\n<h3>3. Start Github account</h3>\r\nGo to <a href="http://github.com" target="_blank">github.com</a> and setup your account.\r\n<h3>4. Create a new repo</h3>\r\nOnce you are setup and logged in:\r\n<ul>\r\n	<li>Click on the <code>+</code> sign in the top right hand corner</li>\r\n	<li>Click "New repository" from the dropdown</li>\r\n	<li>Give repo a name like <code>my_project</code>, <code>my-project</code>, or <code>MyProject</code> (I like to pick a convention and stick with it).</li>\r\n	<li>Give your project a description</li>\r\n	<li>Choose Public or Private.\r\nStick with public right now unless you are doing a company/client project (they might not like you publishing their source code for the world to see). Public repos are free. Private repos will cost you a little. I use them myself though.</li>\r\n	<li>I usually leave the "Initialize this repo with a README" unchecked because Rails projects have these by default when you setup a rails project.</li>\r\n	<li>Click "Create Repository"</li>\r\n</ul>\r\n<h3>5. Push Local Git Repo to Github Repo</h3>\r\nAfter your Github repo is created you will see a screen with setup instructions. Skip down to the "Push an existing repository from the command line" section. Type the following into the command line on your local machine:\r\n<pre>git remote add origin git@github.com:TyRichards/test_repo.git\r\ngit push -u origin master</pre>\r\n<h3>6. Done!</h3>\r\nNow you can work on your project, make changes, and do the Git dance.\r\n<ul>\r\n	<li>Work on stuff</li>\r\n	<li>\r\n<pre>$ git add .</pre>\r\n</li>\r\n	<li>\r\n<pre>$ git commit -am "Create Navbar"</pre>\r\nNote: Best practice for commits is to write in present tense and keep it short</li>\r\n	<li>\r\n<pre>$ git push</pre>\r\nPushes to Github repo</li>\r\n	<li>Repeat</li>\r\n</ul>', 'Get going with Github', '', 'inherit', 'open', 'open', '', '73-revision-v1', '', '', '2014-08-06 09:38:29', '2014-08-06 14:38:29', '', 73, 'http://dev.dorails.com/73-revision-v1/', 0, 'revision', '', 0),
(76, 1, '2014-08-06 09:40:14', '2014-08-06 14:40:14', 'I used to see web/software development as a lonely, anti-social and disorganized activity. It was incredibly difficult to collaborate and follow along with the progress of a project. Also it was a beat-down to transfer and backup projects to a place where I could always access them. That was until I discovered <a href="https://github.com/" target="_blank">Github</a>.\r\n\r\nNow I push all my projects to an online repository. I see a real-time history of all my projects. I easily collaborate and contribute to other\'s projects, and get instant access to my source code whenever I need it. Github also serves as a social network of sorts for developers. In a glance others can see what I\'m working on and I can explore to see what my friends are working on. This is all part of the modern web/software developer\'s repertoire  (especially Rails), along with <a href="http://git-scm.com/" target="_blank">Git</a>.\r\n\r\nKeep in mind that Github and Git are related but different things. Git is a local version control tool for your projects, and Github is online hosting of your project source code.\r\n\r\nSo what\'s the best way to get started with Github? Follow these steps and you\'ll be rolling.\r\n<h3>1. Setup Git</h3>\r\nGit is required to be able to use Github, so if you haven\'t read my post <em><a title="Get going with Git" href="http://dev.dorails.com/get-going-with-git/">Get going with Git</a></em>, go there first and setup Git on your local computer.\r\n<h3>2. Make initial commit</h3>\r\nOnce you\'ve setup Git on your computer. Find an existing project that you want to put on Github or create a new folder for an upcoming project. Then open terminal and enter the following:\r\n\r\n$ cd /path/to/your/project/ # change to the directory of your project\r\n$ git init # create local repository\r\n$ git add . # add all files in the directory\r\n$ git commit -am "Initial Commit" # commit with a message\r\n\r\nYou now have a local repository with your new or existing project. How do we push this to Github? Continue on...\r\n<h3>3. Start Github account</h3>\r\nGo to <a href="http://github.com" target="_blank">github.com</a> and setup your account.\r\n<h3>4. Create a new repo</h3>\r\nOnce you are setup and logged in:\r\n<ul>\r\n	<li>Click on the <code>+</code> sign in the top right hand corner</li>\r\n	<li>Click "New repository" from the dropdown</li>\r\n	<li>Give repo a name like <code>my_project</code>, <code>my-project</code>, or <code>MyProject</code> (I like to pick a convention and stick with it).</li>\r\n	<li>Give your project a description</li>\r\n	<li>Choose Public or Private.\r\nStick with public right now unless you are doing a company/client project (they might not like you publishing their source code for the world to see). Public repos are free. Private repos will cost you a little. I use them myself though.</li>\r\n	<li>I usually leave the "Initialize this repo with a README" unchecked because Rails projects have these by default when you setup a rails project.</li>\r\n	<li>Click "Create Repository"</li>\r\n</ul>\r\n<h3>5. Push Local Git Repo to Github Repo</h3>\r\nAfter your Github repo is created you will see a screen with setup instructions. Skip down to the "Push an existing repository from the command line" section. Type the following into the command line on your local machine:\r\n<pre>git remote add origin git@github.com:TyRichards/test_repo.git\r\ngit push -u origin master</pre>\r\n<h3>6. Done!</h3>\r\nNow you can work on your project, make changes, and do the Git dance.\r\n<ul>\r\n	<li>Work on stuff</li>\r\n	<li>\r\n<pre>$ git add .</pre>\r\n</li>\r\n	<li>\r\n<pre>$ git commit -am "Create Navbar"</pre>\r\nNote: Best practice for commits is to write in present tense and keep it short</li>\r\n	<li>\r\n<pre>$ git push</pre>\r\nPushes to Github repo</li>\r\n	<li>Repeat</li>\r\n</ul>', 'Get going with Github', '', 'inherit', 'open', 'open', '', '73-revision-v1', '', '', '2014-08-06 09:40:14', '2014-08-06 14:40:14', '', 73, 'http://dev.dorails.com/73-revision-v1/', 0, 'revision', '', 0),
(77, 1, '2014-08-06 09:40:39', '2014-08-06 14:40:39', 'I used to see web/software development as a lonely, anti-social and disorganized activity. It was incredibly difficult to collaborate and follow along with the progress of a project. Also it was a beat-down to transfer and backup projects to a place where I could always access them. That was until I discovered <a href="https://github.com/" target="_blank">Github</a>.\r\n\r\nNow I push all my projects to an online repository. I see a real-time history of all my projects. I easily collaborate and contribute to other\'s projects, and get instant access to my source code whenever I need it. Github also serves as a social network of sorts for developers. In a glance others can see what I\'m working on and I can explore to see what my friends are working on. This is all part of the modern web/software developer\'s repertoire  (especially Rails), along with <a href="http://git-scm.com/" target="_blank">Git</a>.\r\n\r\nKeep in mind that Github and Git are related but different things. Git is a local version control tool for your projects, and Github is online hosting of your project source code.\r\n\r\nSo what\'s the best way to get started with Github? Follow these steps and you\'ll be rolling.\r\n<h3>1. Setup Git</h3>\r\nGit is required to be able to use Github, so if you haven\'t read my post <em><a title="Get going with Git" href="http://dev.dorails.com/get-going-with-git/">Get going with Git</a></em>, go there first and setup Git on your local computer.\r\n<h3>2. Make initial commit</h3>\r\nOnce you\'ve setup Git on your computer. Find an existing project that you want to put on Github or create a new folder for an upcoming project. Then open terminal and enter the following:\r\n<pre>$ cd /path/to/your/project/ # change to the directory of your project\r\n$ git init # create local repository\r\n$ git add . # add all files in the directory\r\n$ git commit -am "Initial Commit" # commit with a message</pre>\r\nYou now have a local repository with your new or existing project. How do we push this to Github? Continue on...\r\n<h3>3. Start Github account</h3>\r\nGo to <a href="http://github.com" target="_blank">github.com</a> and setup your account.\r\n<h3>4. Create a new repo</h3>\r\nOnce you are setup and logged in:\r\n<ul>\r\n	<li>Click on the <code>+</code> sign in the top right hand corner</li>\r\n	<li>Click "New repository" from the dropdown</li>\r\n	<li>Give repo a name like <code>my_project</code>, <code>my-project</code>, or <code>MyProject</code> (I like to pick a convention and stick with it).</li>\r\n	<li>Give your project a description</li>\r\n	<li>Choose Public or Private.\r\nStick with public right now unless you are doing a company/client project (they might not like you publishing their source code for the world to see). Public repos are free. Private repos will cost you a little. I use them myself though.</li>\r\n	<li>I usually leave the "Initialize this repo with a README" unchecked because Rails projects have these by default when you setup a rails project.</li>\r\n	<li>Click "Create Repository"</li>\r\n</ul>\r\n<h3>5. Push Local Git Repo to Github Repo</h3>\r\nAfter your Github repo is created you will see a screen with setup instructions. Skip down to the "Push an existing repository from the command line" section. Type the following into the command line on your local machine:\r\n<pre>git remote add origin git@github.com:TyRichards/test_repo.git\r\ngit push -u origin master</pre>\r\n<h3>6. Done!</h3>\r\nNow you can work on your project, make changes, and do the Git dance.\r\n<ul>\r\n	<li>Work on stuff</li>\r\n	<li>\r\n<pre>$ git add .</pre>\r\n</li>\r\n	<li>\r\n<pre>$ git commit -am "Create Navbar"</pre>\r\nNote: Best practice for commits is to write in present tense and keep it short</li>\r\n	<li>\r\n<pre>$ git push</pre>\r\nPushes to Github repo</li>\r\n	<li>Repeat</li>\r\n</ul>', 'Get going with Github', '', 'inherit', 'open', 'open', '', '73-revision-v1', '', '', '2014-08-06 09:40:39', '2014-08-06 14:40:39', '', 73, 'http://dev.dorails.com/73-revision-v1/', 0, 'revision', '', 0),
(78, 1, '2014-08-06 09:44:28', '2014-08-06 14:44:28', 'I used to see web/software development as a lonely, anti-social and disorganized activity. It was incredibly difficult to collaborate and follow along with the progress of a project. Also it was a beat-down to transfer and backup projects to a place where I could always access them. That was until I discovered <a href="https://github.com/" target="_blank">Github</a>.\r\n\r\nNow I push all my projects to an online repository. I see a real-time history of all my projects. I easily collaborate and contribute to other\'s projects, and get instant access to my source code whenever I need it. Github also serves as a social network of sorts for developers. In a glance others can see what I\'m working on and I can explore to see what my friends are working on. This is all part of the modern web/software developer\'s repertoire  (especially Rails), along with <a href="http://git-scm.com/" target="_blank">Git</a>.\r\n\r\nKeep in mind that Github and Git are related but different things. Git is a local version control tool for your projects, and Github is online hosting of your project source code.\r\n\r\nSo what\'s the best way to get started with Github? Follow these steps and you\'ll be rolling.\r\n<h3>1. Setup Git</h3>\r\nGit is required to be able to use Github, so if you haven\'t read my post <em><a title="Get going with Git" href="http://dev.dorails.com/get-going-with-git/">Get going with Git</a></em>, go there first and setup Git on your local computer.\r\n<h3>2. Make initial commit</h3>\r\nOnce you\'ve setup Git on your computer. Find an existing project that you want to put on Github or create a new folder for an upcoming project. Then open terminal and enter the following:\r\n<pre>$ cd /path/to/your/project/ # change to the directory of your project\r\n$ git init # create local repository\r\n$ git add . # add all files in the directory\r\n$ git commit -am "Initial Commit" # commit with a message</pre>\r\nYou now have a local repository with your new or existing project. How do we push this to Github? Continue on...\r\n<h3>3. Start Github account</h3>\r\nGo to <a href="http://github.com" target="_blank">github.com</a> and setup your account.\r\n<h3>4. Create a new repo</h3>\r\nOnce you are setup and logged in:\r\n<ul>\r\n	<li>Click on the <code>+</code> sign in the top right hand corner</li>\r\n	<li>Click <code>New repository</code> from the dropdown</li>\r\n	<li>Give repo a name like <code>my_project</code>, <code>my-project</code>, or <code>MyProject</code> (I like to pick a convention and stick with it).</li>\r\n	<li>Give your project a description</li>\r\n	<li>Choose <code>Public</code> or <code>Private</code>.\r\n<small>Stick with public right now unless you are doing a company/client project (they might not like you publishing their source code for the world to see). Public repos are free. Private repos will cost you a little. I use them myself though.</small></li>\r\n	<li>I usually leave the <code>Initialize this repo with a README</code> unchecked because Rails projects have these by default when you setup a rails project.</li>\r\n	<li>Then click the <code>Create Repository</code> Button</li>\r\n</ul>\r\n<h3>5. Push Local Git Repo to Github Repo</h3>\r\nAfter your Github repo is created you will see a screen with setup instructions. Skip down to the <code>Push an existing repository from the command line</code> section. Type the following into the command line on your local machine:\r\n<pre>git remote add origin git@github.com:TyRichards/test_repo.git\r\ngit push -u origin master</pre>\r\n<h3>6. Done!</h3>\r\nNow you can work on your project, make changes, and do the Git dance.\r\n<ul>\r\n	<li>Work on stuff</li>\r\n	<li>\r\n<pre>$ git add .</pre>\r\n</li>\r\n	<li>\r\n<pre>$ git commit -am "Create Navbar"</pre>\r\n<small>Note: Best practice for commits is to write in present tense and keep it short</small></li>\r\n	<li>\r\n<pre>$ git push</pre>\r\n<small>Pushes to Github repo</small></li>\r\n	<li>Repeat</li>\r\n</ul>', 'Get going with Github', '', 'inherit', 'open', 'open', '', '73-revision-v1', '', '', '2014-08-06 09:44:28', '2014-08-06 14:44:28', '', 73, 'http://dev.dorails.com/73-revision-v1/', 0, 'revision', '', 0),
(79, 1, '2014-08-06 09:45:18', '2014-08-06 14:45:18', 'I used to see web/software development as a lonely, anti-social and disorganized activity. It was incredibly difficult to collaborate and follow along with the progress of a project. Also it was a beat-down to transfer and backup projects to a place where I could always access them. That was until I discovered <a href="https://github.com/" target="_blank">Github</a>.\r\n\r\nNow I push all my projects to an online repository. I see a real-time history of all my projects. I easily collaborate and contribute to other\'s projects, and get instant access to my source code whenever I need it. Github also serves as a social network of sorts for developers. In a glance others can see what I\'m working on and I can explore to see what my friends are working on. This is all part of the modern web/software developer\'s repertoire  (especially Rails), along with <a href="http://git-scm.com/" target="_blank">Git</a>.\r\n\r\nKeep in mind that Github and Git are related but different things. Git is a local version control tool for your projects, and Github is online hosting of your project source code.\r\n\r\nSo what\'s the best way to get started with Github? Follow these steps and you\'ll be rolling.\r\n<h3>1. Setup Git</h3>\r\nGit is required to be able to use Github, so if you haven\'t read my post <em><a title="Get going with Git" href="http://dev.dorails.com/get-going-with-git/">Get going with Git</a></em>, go there first and setup Git on your local computer.\r\n<h3>2. Make initial commit</h3>\r\nOnce you\'ve setup Git on your computer. Find an existing project that you want to put on Github or create a new folder for an upcoming project. Then open terminal and enter the following:\r\n<pre>$ cd /path/to/your/project/ # change to the directory of your project\r\n$ git init # create local repository\r\n$ git add . # add all files in the directory\r\n$ git commit -am "Initial Commit" # commit with a message</pre>\r\nYou now have a local repository with your new or existing project. How do we push this to Github? Continue on...\r\n<h3>3. Start Github account</h3>\r\nGo to <a href="http://github.com" target="_blank">github.com</a> and setup your account.\r\n<h3>4. Create a new repo</h3>\r\nOnce you are setup and logged in:\r\n<ul>\r\n	<li>Click on the <code>+</code> sign in the top right hand corner</li>\r\n	<li>Click <code>New repository</code> from the dropdown</li>\r\n	<li>Give repo a name like <code>my_project</code>, <code>my-project</code>, or <code>MyProject</code> (I like to pick a convention and stick with it).</li>\r\n	<li>Give your project a description</li>\r\n	<li>Choose <code>Public</code> or <code>Private</code>.\r\n<small>Stick with public right now unless you are doing a company/client project (they might not like you publishing their source code for the world to see). Public repos are free. Private repos will cost you a little. I use them myself though.</small></li>\r\n	<li>I usually leave the <code>Initialize this repo with a README</code> unchecked because Rails projects have these by default when you setup a rails project.</li>\r\n	<li>Then click the <code>Create Repository</code> Button</li>\r\n</ul>\r\n<h3>5. Push Local Git Repo to Github Repo</h3>\r\nAfter your Github repo is created you will see a screen with setup instructions. Skip down to the <code>Push an existing repository from the command line</code> section. Type the following into the command line on your local machine:\r\n<pre>git remote add origin git@github.com:TyRichards/test_repo.git\r\ngit push -u origin master</pre>\r\n<h3>6. Done!</h3>\r\nNow you can work on your project, make changes, and do the Git dance.\r\n<ol>\r\n	<li>Work on stuff</li>\r\n	<li>\r\n<pre>$ git add .</pre>\r\n</li>\r\n	<li>\r\n<pre>$ git commit -am "Create Navbar"</pre>\r\n<small>Note: Best practice for commits is to write in present tense and keep it short</small></li>\r\n	<li>\r\n<pre>$ git push</pre>\r\n<small>Pushes to Github repo</small></li>\r\n	<li>Repeat</li>\r\n</ol>', 'Get going with Github', '', 'inherit', 'open', 'open', '', '73-revision-v1', '', '', '2014-08-06 09:45:18', '2014-08-06 14:45:18', '', 73, 'http://dev.dorails.com/73-revision-v1/', 0, 'revision', '', 0),
(80, 1, '2014-08-06 10:00:48', '2014-08-06 15:00:48', '', 'Git-Clone', '', 'inherit', 'open', 'open', '', 'git-clone', '', '', '2014-08-06 10:00:48', '2014-08-06 15:00:48', '', 73, 'http://dev.dorails.com/wp-content/uploads/2014/08/Git-Clone.jpg', 0, 'attachment', 'image/jpeg', 0),
(81, 1, '2014-08-06 10:01:39', '2014-08-06 15:01:39', 'I used to see web/software development as a lonely, anti-social and disorganized activity. It was incredibly difficult to collaborate and follow along with the progress of a project. Also it was a beat-down to transfer and backup projects to a place where I could always access them. That was until I discovered <a href="https://github.com/" target="_blank">Github</a>.\r\n\r\nNow I push all my projects to an online repository. I see a real-time history of all my projects. I easily collaborate and contribute to other\'s projects, and get instant access to my source code whenever I need it. Github also serves as a social network of sorts for developers. In a glance others can see what I\'m working on and I can explore to see what my friends are working on. This is all part of the modern web/software developer\'s repertoire  (especially Rails), along with <a href="http://git-scm.com/" target="_blank">Git</a>.\r\n\r\nKeep in mind that Github and Git are related but different things. Git is a local version control tool for your projects, and Github is online hosting of your project source code.\r\n\r\nSo what\'s the best way to get started with Github? Follow these steps and you\'ll be rolling.\r\n<h3>1. Setup Git</h3>\r\nGit is required to be able to use Github, so if you haven\'t read my post <em><a title="Get going with Git" href="http://dev.dorails.com/get-going-with-git/">Get going with Git</a></em>, go there first and setup Git on your local computer.\r\n<h3>2. Make initial commit</h3>\r\nOnce you\'ve setup Git on your computer. Find an existing project that you want to put on Github or create a new folder for an upcoming project. Then open terminal and enter the following:\r\n<pre>$ cd /path/to/your/project/ # change to the directory of your project\r\n$ git init # create local repository\r\n$ git add . # add all files in the directory\r\n$ git commit -am "Initial Commit" # commit with a message</pre>\r\nYou now have a local repository with your new or existing project. How do we push this to Github? Continue on...\r\n<h3>3. Start Github account</h3>\r\nGo to <a href="http://github.com" target="_blank">github.com</a> and setup your account.\r\n<h3>4. Create a new repo</h3>\r\nOnce you are setup and logged in:\r\n<ul>\r\n	<li>Click on the <code>+</code> sign in the top right hand corner</li>\r\n	<li>Click <code>New repository</code> from the dropdown</li>\r\n	<li>Give repo a name like <code>my_project</code>, <code>my-project</code>, or <code>MyProject</code> (I like to pick a convention and stick with it).</li>\r\n	<li>Give your project a description</li>\r\n	<li>Choose <code>Public</code> or <code>Private</code>.\r\n<small>Stick with public right now unless you are doing a company/client project (they might not like you publishing their source code for the world to see). Public repos are free. Private repos will cost you a little. I use them myself though.</small></li>\r\n	<li>I usually leave the <code>Initialize this repo with a README</code> unchecked because Rails projects have these by default when you setup a rails project.</li>\r\n	<li>Then click the <code>Create Repository</code> Button</li>\r\n</ul>\r\n<h3>5. Push Local Git Repo to Github Repo</h3>\r\nAfter your Github repo is created you will see a screen with setup instructions. Skip down to the <code>Push an existing repository from the command line</code> section. Type the following into the command line on your local machine:\r\n<pre>git remote add origin git@github.com:MyAccount/my_project.git\r\ngit push -u origin master</pre>\r\n<h3>6. The Git Jive</h3>\r\nNow you can work on your project, make changes, and do the Git dance.\r\n<ol>\r\n	<li>Work on stuff</li>\r\n	<li>\r\n<pre>$ git add .</pre>\r\n</li>\r\n	<li>\r\n<pre>$ git commit -am "Create Navbar"</pre>\r\n<small>Note: Best practice for commits is to write in present tense and keep it short</small></li>\r\n	<li>\r\n<pre>$ git push</pre>\r\n<small>Pushes to Github repo</small></li>\r\n	<li>Repeat</li>\r\n</ol>\r\n<h3>7. Bonus</h3>\r\nI was going to save this for another post, but it\'s too much fun. Now that your Github repo is setup for your project you can pull up your project from any computer in a jiffy (as long as it has Git setup on it). You can actually do this with anyone\'s public project on Github. This is called <em>cloning</em>, and it does just that. Just open the directory where you want to drop it on your local machine and clone the repo to download the project instantly. The quickest way to clone a project is to find the project repo on Github and copy/paste the clone code on the righthand side here:\r\n\r\n<a href="http://dev.dorails.com/wp-content/uploads/2014/08/Git-Clone.jpg"><img class="alignnone size-medium wp-image-80" src="http://dev.dorails.com/wp-content/uploads/2014/08/Git-Clone-300x183.jpg" alt="Git Clone" width="300" height="183" /></a>\r\n<pre>$ cd /path/to/new/project/destination/\r\n$ git clone git@github.com:MyAccount/my_project.git</pre>\r\nCongrats you\'re now a <em>modern</em> developer living in the 21st century! You can now keep your code in a repo, share what you are working on with others, easily collaborate,', 'Get going with Github', '', 'inherit', 'open', 'open', '', '73-revision-v1', '', '', '2014-08-06 10:01:39', '2014-08-06 15:01:39', '', 73, 'http://dev.dorails.com/73-revision-v1/', 0, 'revision', '', 0),
(82, 1, '2014-08-06 10:04:48', '2014-08-06 15:04:48', 'I used to see web/software development as a lonely, anti-social and disorganized activity. It was incredibly difficult to collaborate and follow along with the progress of a project. Also it was a beat-down to transfer and backup projects to a place where I could always access them. That was until I discovered <a href="https://github.com/" target="_blank">Github</a>.\r\n\r\nNow I push all my projects to an online repository. I see a real-time history of all my projects. I easily collaborate and contribute to other\'s projects, and get instant access to my source code whenever I need it. Github also serves as a social network of sorts for developers. In a glance others can see what I\'m working on and I can explore to see what my friends are working on. This is all part of the modern web/software developer\'s repertoire  (especially Rails), along with <a href="http://git-scm.com/" target="_blank">Git</a>.\r\n\r\nKeep in mind that Github and Git are related but different things. Git is a local version control tool for your projects, and Github is online hosting of your project source code.\r\n\r\nSo what\'s the best way to get started with Github? Follow these steps and you\'ll be rolling.\r\n<h3>1. Setup Git</h3>\r\nGit is required to be able to use Github, so if you haven\'t read my post <em><a title="Get going with Git" href="http://dev.dorails.com/get-going-with-git/">Get going with Git</a></em>, go there first and setup Git on your local computer.\r\n<h3>2. Make initial commit</h3>\r\nOnce you\'ve setup Git on your computer. Find an existing project that you want to put on Github or create a new folder for an upcoming project. Then open terminal and enter the following:\r\n<pre>$ cd /path/to/your/project/ # change to the directory of your project\r\n$ git init # create local repository\r\n$ git add . # add all files in the directory\r\n$ git commit -am "Initial Commit" # commit with a message</pre>\r\nYou now have a local repository with your new or existing project. How do we push this to Github? Continue on...\r\n<h3>3. Start Github account</h3>\r\nGo to <a href="http://github.com" target="_blank">github.com</a> and setup your account.\r\n<h3>4. Create a new repo</h3>\r\nOnce you are setup and logged in:\r\n<ul>\r\n	<li>Click on the <code>+</code> sign in the top right hand corner</li>\r\n	<li>Click <code>New repository</code> from the dropdown</li>\r\n	<li>Give repo a name like <code>my_project</code>, <code>my-project</code>, or <code>MyProject</code> (I like to pick a convention and stick with it).</li>\r\n	<li>Give your project a description</li>\r\n	<li>Choose <code>Public</code> or <code>Private</code>.\r\n<small>Stick with public right now unless you are doing a company/client project (they might not like you publishing their source code for the world to see). Public repos are free. Private repos will cost you a little. I use them myself though.</small></li>\r\n	<li>I usually leave the <code>Initialize this repo with a README</code> unchecked because Rails projects have these by default when you setup a rails project.</li>\r\n	<li>Then click the <code>Create Repository</code> Button</li>\r\n</ul>\r\n<h3>5. Push Local Git Repo to Github Repo</h3>\r\nAfter your Github repo is created you will see a screen with setup instructions. Skip down to the <code>Push an existing repository from the command line</code> section. Type the following into the command line on your local machine:\r\n<pre>git remote add origin git@github.com:MyAccount/my_project.git\r\ngit push -u origin master</pre>\r\n<h3>6. The Git Jive</h3>\r\nNow you can work on your project, make changes, and do the Git dance.\r\n<ol>\r\n	<li>Work on stuff</li>\r\n	<li>\r\n<pre>$ git add .</pre>\r\n</li>\r\n	<li>\r\n<pre>$ git commit -am "Create Navbar"</pre>\r\n<small>Note: Best practice for commits is to write in present tense and keep it short</small></li>\r\n	<li>\r\n<pre>$ git push</pre>\r\n<small>Pushes to Github repo</small></li>\r\n	<li>Repeat</li>\r\n</ol>\r\n<h3>7. Bonus</h3>\r\nI was going to save this for another post, but it\'s too much fun. Now that your Github repo is setup for your project you can pull up your project from any computer in a jiffy (as long as it has Git setup on it). You can actually do this with anyone\'s public project on Github. This is called <em>cloning</em>, and it does just that. Just open the directory where you want to drop it on your local machine and clone the repo to download the project instantly. The quickest way to clone a project is to find the project repo on Github and copy the clone code on the righthand side here:\r\n\r\n<a href="http://dev.dorails.com/wp-content/uploads/2014/08/Git-Clone.jpg"><img class="aligncenter wp-image-80" src="http://dev.dorails.com/wp-content/uploads/2014/08/Git-Clone-300x183.jpg" alt="Git Clone" width="500" height="306" /></a>\r\n\r\nThen travel to the directory you want to drop it and type <code>$ git clone</code> and paste the clone text in like so:\r\n<pre>$ cd /path/to/new/project/destination/\r\n$ git clone git@github.com:MyAccount/my_project.git</pre>\r\nCongrats you\'re now a <em>modern</em> developer living in the 21st century! You can now keep your code in a repo, share what you are working on with others, easily collaborate,', 'Get going with Github', '', 'inherit', 'open', 'open', '', '73-revision-v1', '', '', '2014-08-06 10:04:48', '2014-08-06 15:04:48', '', 73, 'http://dev.dorails.com/73-revision-v1/', 0, 'revision', '', 0),
(83, 1, '2014-08-06 10:06:20', '2014-08-06 15:06:20', 'I used to see web/software development as a lonely, anti-social and disorganized activity. It was incredibly difficult to collaborate and follow along with the progress of a project. Also it was a beat-down to transfer and backup projects to a place where I could always access them. That was until I discovered <a href="https://github.com/" target="_blank">Github</a>.\r\n\r\nNow I push all my projects to an online repository. I see a real-time history of all my projects. I easily collaborate and contribute to other\'s projects, and get instant access to my source code whenever I need it. Github also serves as a social network of sorts for developers. In a glance others can see what I\'m working on and I can explore to see what my friends are working on. This is all part of the modern web/software developer\'s repertoire  (especially Rails), along with <a href="http://git-scm.com/" target="_blank">Git</a>.\r\n\r\nKeep in mind that Github and Git are related but different things. Git is a local version control tool for your projects, and Github is online hosting of your project source code.\r\n\r\nSo what\'s the best way to get started with Github? Follow these steps and you\'ll be rolling.\r\n<h3>1. Setup Git</h3>\r\nGit is required to be able to use Github, so if you haven\'t read my post <em><a title="Get going with Git" href="http://dev.dorails.com/get-going-with-git/">Get going with Git</a></em>, go there first and setup Git on your local computer.\r\n<h3>2. Make initial commit</h3>\r\nOnce you\'ve setup Git on your computer. Find an existing project that you want to put on Github or create a new folder for an upcoming project. Then open terminal and enter the following:\r\n<pre>$ cd /path/to/your/project/ # change to the directory of your project\r\n$ git init # create local repository\r\n$ git add . # add all files in the directory\r\n$ git commit -am "Initial Commit" # commit with a message</pre>\r\nYou now have a local repository with your new or existing project. How do we push this to Github? Continue on...\r\n<h3>3. Start Github account</h3>\r\nGo to <a href="http://github.com" target="_blank">github.com</a> and setup your account.\r\n<h3>4. Create a new repo</h3>\r\nOnce you are setup and logged in:\r\n<ul>\r\n	<li>Click on the <code>+</code> sign in the top right hand corner</li>\r\n	<li>Click <code>New repository</code> from the dropdown</li>\r\n	<li>Give repo a name like <code>my_project</code>, <code>my-project</code>, or <code>MyProject</code> (I like to pick a convention and stick with it).</li>\r\n	<li>Give your project a description</li>\r\n	<li>Choose <code>Public</code> or <code>Private</code>.\r\n<small>Stick with public right now unless you are doing a company/client project (they might not like you publishing their source code for the world to see). Public repos are free. Private repos will cost you a little. I use them myself though.</small></li>\r\n	<li>I usually leave the <code>Initialize this repo with a README</code> unchecked because Rails projects have these by default when you setup a rails project.</li>\r\n	<li>Then click the <code>Create Repository</code> Button</li>\r\n</ul>\r\n<h3>5. Push Local Git Repo to Github Repo</h3>\r\nAfter your Github repo is created you will see a screen with setup instructions. Skip down to the <code>Push an existing repository from the command line</code> section. Type the following into the command line on your local machine:\r\n<pre>git remote add origin git@github.com:MyAccount/my_project.git\r\ngit push -u origin master</pre>\r\n<h3>6. The Git Jive</h3>\r\nNow you can work on your project, make changes, and do the Git dance.\r\n<ol>\r\n	<li>Work on stuff</li>\r\n	<li>\r\n<pre>$ git add .</pre>\r\n</li>\r\n	<li>\r\n<pre>$ git commit -am "Create Navbar"</pre>\r\n<small>Note: Best practice for commits is to write in present tense and keep it short</small></li>\r\n	<li>\r\n<pre>$ git push</pre>\r\n<small>Pushes to Github repo</small></li>\r\n	<li>Repeat</li>\r\n</ol>\r\n<h3>7. Bonus</h3>\r\nI was going to save this for another post, but it\'s too much fun. Now that your Github repo is setup for your project you can pull up your project from any computer in a jiffy (as long as it has Git setup on it). You can actually do this with anyone\'s public project on Github. This is called <em>cloning</em>, and it does just that. Just open the directory where you want to drop it on your local machine and clone the repo to download the project instantly. The quickest way to clone a project is to find the project repo on Github and copy the clone code on the righthand side here:\r\n\r\n<a href="http://dev.dorails.com/wp-content/uploads/2014/08/Git-Clone.jpg"><img class="aligncenter wp-image-80" src="http://dev.dorails.com/wp-content/uploads/2014/08/Git-Clone-300x183.jpg" alt="Git Clone" width="500" height="306" /></a>\r\n\r\nThen travel to the directory you want to drop it and type <code>$ git clone</code> and paste the clone text in like so:\r\n<pre>$ cd /path/to/new/project/destination/\r\n$ git clone git@github.com:MyAccount/my_project.git</pre>\r\nCongrats you\'re now a <em>modern</em> developer living in the 21st century! You can now keep your code in an online repo, share what you are working on with others, easily collaborate, and interact with other humans.', 'Get going with Github', '', 'inherit', 'open', 'open', '', '73-revision-v1', '', '', '2014-08-06 10:06:20', '2014-08-06 15:06:20', '', 73, 'http://dev.dorails.com/73-revision-v1/', 0, 'revision', '', 0) ;
INSERT INTO `wp_posts` ( `ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(84, 1, '2014-08-06 10:07:26', '2014-08-06 15:07:26', 'I used to see web/software development as a lonely, anti-social and disorganized activity. It was incredibly difficult to collaborate and follow along with the progress of a project. Also it was a beat-down to transfer and backup projects to a place where I could always access them. That was until I discovered <a href="https://github.com/" target="_blank">Github</a>.\r\n\r\nNow I push all my projects to an online repository. I see a real-time history of all my projects. I easily collaborate and contribute to other\'s projects, and get instant access to my source code whenever I need it. Github also serves as a social network of sorts for developers. In a glance others can see what I\'m working on and I can explore to see what my friends are working on. This is all part of the modern web/software developer\'s repertoire  (especially Rails), along with <a href="http://git-scm.com/" target="_blank">Git</a>.\r\n\r\nKeep in mind that Github and Git are related but different things. Git is a local version control tool for your projects, and Github is online hosting of your project source code.\r\n\r\nSo what\'s the best way to get started with Github? Follow these steps and you\'ll be rolling.\r\n<h3>1. Setup Git</h3>\r\nGit is required to be able to use Github, so if you haven\'t read my post <em><a title="Get going with Git" href="http://dev.dorails.com/get-going-with-git/">Get going with Git</a></em>, go there first and setup Git on your local computer.\r\n<h3>2. Make initial commit</h3>\r\nOnce you\'ve setup Git on your computer. Find an existing project that you want to put on Github or create a new folder for an upcoming project. Then open terminal and enter the following:\r\n<pre>$ cd /path/to/your/project/ # change to the directory of your project\r\n$ git init # create local repository\r\n$ git add . # add all files in the directory\r\n$ git commit -am "Initial Commit" # commit with a message</pre>\r\nYou now have a local repository with your new or existing project. How do we push this to Github? Continue on...\r\n<h3>3. Start Github account</h3>\r\nGo to <a href="http://github.com" target="_blank">github.com</a> and setup your account.\r\n<h3>4. Create a new repo</h3>\r\nOnce you are setup and logged in:\r\n<ul>\r\n	<li>Click on the <code>+</code> sign in the top right hand corner</li>\r\n	<li>Click <code>New repository</code> from the dropdown</li>\r\n	<li>Give repo a name like <code>my_project</code>, <code>my-project</code>, or <code>MyProject</code> (I like to pick a convention and stick with it).</li>\r\n	<li>Give your project a description</li>\r\n	<li>Choose <code>Public</code> or <code>Private</code>.\r\n<small>Stick with public right now unless you are doing a company/client project (they might not like you publishing their source code for the world to see). Public repos are free. Private repos will cost you a little. I use them myself though.</small></li>\r\n	<li>I usually leave the <code>Initialize this repo with a README</code> unchecked because Rails projects have these by default when you setup a rails project.</li>\r\n	<li>Then click the <code>Create Repository</code> Button</li>\r\n</ul>\r\n<h3>5. Push Local Git Repo to Github Repo</h3>\r\nAfter your Github repo is created you will see a screen with setup instructions. Skip down to the <code>Push an existing repository from the command line</code> section. Type the following into the command line on your local machine:\r\n<pre>git remote add origin git@github.com:MyAccount/my_project.git\r\ngit push -u origin master</pre>\r\n<h3>6. The Git Jive</h3>\r\nNow you can work on your project, make changes, and do the Git dance.\r\n<ol>\r\n	<li>Work on stuff</li>\r\n	<li>\r\n<pre>$ git add .</pre>\r\n</li>\r\n	<li>\r\n<pre>$ git commit -am "Create Navbar"</pre>\r\n<small>Note: Best practice for commits is to write in present tense and keep it short</small></li>\r\n	<li>\r\n<pre>$ git push</pre>\r\n<small>Pushes to Github repo</small></li>\r\n	<li>Repeat</li>\r\n</ol>\r\n<h3>7. Bonus</h3>\r\nI was going to save this for another post, but it\'s too much fun. Now that your Github repo is setup for your project you can pull up your project from any computer in a jiffy (as long as it has Git setup on it). You can actually do this with anyone\'s public project on Github. This is called <em>cloning</em>, and it does just that. Just open the directory where you want to drop it on your local machine and clone the repo to download the project instantly. The quickest way to clone a project is to find the project repo on Github and copy the clone code on the righthand side here:\r\n\r\n<a href="http://dev.dorails.com/wp-content/uploads/2014/08/Git-Clone.jpg"><img class="aligncenter wp-image-80" src="http://dev.dorails.com/wp-content/uploads/2014/08/Git-Clone-300x183.jpg" alt="Git Clone" width="500" height="306" /></a>\r\n\r\nThen travel to the directory you want to drop it and type <code>$ git clone</code> and paste the clone text in like so:\r\n<pre>$ cd /path/to/new/project/destination/\r\n$ git clone git@github.com:MyAccount/my_project.git</pre>\r\nCongrats you\'re now a <em>modern</em> developer living in the 21st century! You can now keep your code in an online repo, share what you are working on with others, easily collaborate, and interact with other humans.', 'Get out of the cave and onto Github', '', 'inherit', 'open', 'open', '', '73-revision-v1', '', '', '2014-08-06 10:07:26', '2014-08-06 15:07:26', '', 73, 'http://dev.dorails.com/73-revision-v1/', 0, 'revision', '', 0),
(85, 1, '2014-08-06 10:20:42', '2014-08-06 15:20:42', 'I used to see web/software development as a lonely, anti-social and disorganized activity. It was incredibly difficult to collaborate and follow along with the progress of a project. Also it was a beat-down to transfer and backup projects to a place where I could always access them from anywhere. That was until I discovered <a href="https://github.com/" target="_blank">Github</a>.\r\n\r\nNow I push all my projects to an online repository. I see a real-time history of all my projects. I easily collaborate and contribute to other\'s projects, and get instant access to my source code whenever I need it. Github also serves as a social network of sorts for developers. In a glance others can see what I\'m working on and I can explore to see what my friends are working on. This is all part of the modern web/software developer\'s repertoire  (especially Rails), along with <a href="http://git-scm.com/" target="_blank">Git</a>.\r\n\r\nKeep in mind that Github and Git are related but different things. Git is a local version control tool for your projects, and Github is online hosting of your project source code.\r\n\r\nSo what\'s the best way to get started with Github? Follow these steps and you\'ll be rolling.\r\n<h3>1. Setup Git</h3>\r\nGit is required to be able to use Github, so if you haven\'t read my post <em><a title="Get going with Git" href="http://dev.dorails.com/get-going-with-git/">Get going with Git</a></em>, go there first and setup Git on your local computer.\r\n<h3>2. Make initial commit</h3>\r\nOnce you\'ve setup Git on your computer. Find an existing project that you want to put on Github or create a new folder for an upcoming project. Then open terminal and enter the following:\r\n<pre>$ cd /path/to/your/project/ # change to the directory of your project\r\n$ git init # create local repository\r\n$ git add . # add all files in the directory\r\n$ git commit -am "Initial Commit" # commit with a message</pre>\r\nYou now have a local repository with your new or existing project. How do we push this to Github? Continue on...\r\n<h3>3. Start Github account</h3>\r\nGo to <a href="http://github.com" target="_blank">github.com</a> and setup your account.\r\n<h3>4. Create a new repo</h3>\r\nOnce you are setup and logged in:\r\n<ul>\r\n	<li>Click on the <code>+</code> sign in the top right hand corner</li>\r\n	<li>Click <code>New repository</code> from the dropdown</li>\r\n	<li>Give repo a name like <code>my_project</code>, <code>my-project</code>, or <code>MyProject</code> (I like to pick a convention and stick with it).</li>\r\n	<li>Give your project a description</li>\r\n	<li>Choose <code>Public</code> or <code>Private</code>.\r\n<small>Stick with public right now unless you are doing a company/client project (they might not like you publishing their source code for the world to see). Public repos are free. Private repos will cost you a little. I use them myself though.</small></li>\r\n	<li>I usually leave the <code>Initialize this repo with a README</code> unchecked because Rails projects have these by default when you setup a rails project.</li>\r\n	<li>Then click the <code>Create Repository</code> Button</li>\r\n</ul>\r\n<h3>5. Push Local Git Repo to Github Repo</h3>\r\nAfter your Github repo is created you will see a screen with setup instructions. Skip down to the <code>Push an existing repository from the command line</code> section. Type the following into the command line on your local machine:\r\n<pre>git remote add origin git@github.com:MyAccount/my_project.git\r\ngit push -u origin master</pre>\r\nYou have now set your new Github repo as the origin "remote" repository (more on remotes later). And you have set the ability to push your <em>local</em> Git repo to your <em>remote</em> Github repo.\r\n<h3>6. Do the Git Jive</h3>\r\nNow you can work on your project, make changes, and do the Git dance.\r\n<ol>\r\n	<li>Work on stuff</li>\r\n	<li>\r\n<pre>$ git add .</pre>\r\n</li>\r\n	<li>\r\n<pre>$ git commit -am "Create Navbar"</pre>\r\n<small>Note: Best practice for commits is to write in present tense and keep it short</small></li>\r\n	<li>\r\n<pre>$ git push</pre>\r\n<small>Pushes to Github repo</small></li>\r\n	<li>Repeat</li>\r\n</ol>\r\n<h3>7. Bonus</h3>\r\nI was going to save this for another post, but it\'s too much fun. Now that your Github repo is setup for your project you can pull up your project from any computer in a jiffy (as long as it has Git setup on it). You can actually do this with anyone\'s public project on Github. This is called <em>cloning</em>, and it does just that. Just open the directory where you want to drop it on your local machine and clone the repo to download the project instantly. The quickest way to clone a project is to find the project repo on Github and copy the clone code on the righthand side here:\r\n\r\n<a href="http://dev.dorails.com/wp-content/uploads/2014/08/Git-Clone.jpg"><img class="aligncenter wp-image-80" src="http://dev.dorails.com/wp-content/uploads/2014/08/Git-Clone-300x183.jpg" alt="Git Clone" width="500" height="306" /></a>\r\n\r\nThen travel to the directory you want to drop it and type <code>$ git clone</code> and paste the clone text in like so:\r\n<pre>$ cd /path/to/new/project/destination/\r\n$ git clone git@github.com:MyAccount/my_project.git</pre>\r\nFeel free to dig around Github and find other amazing developers with fun projects and clone theirs too to dig through their code.\r\n\r\nThere are a thousand other more advanced techniques I will cover with Git/Github including branches, remotes and deploying your Rails app, but you can hit the ground running now. With this jump start you can keep your code in an online repo, share what you are working on with others, easily collaborate, and interact with other humans. Congrats you\'re now a <em>modern</em> developer living in the 21st century!', 'Get out of the cave and onto Github', '', 'inherit', 'open', 'open', '', '73-revision-v1', '', '', '2014-08-06 10:20:42', '2014-08-06 15:20:42', '', 73, 'http://dev.dorails.com/73-revision-v1/', 0, 'revision', '', 0),
(86, 1, '2014-08-08 16:35:21', '2014-08-08 21:35:21', 'I used to see web/software development as a lonely, anti-social and disorganized activity. It was incredibly difficult to collaborate and follow along with the progress of a project. Also it was a beat-down to transfer and backup projects to a place where I could always access them from anywhere. That was until I discovered <a href="https://github.com/" target="_blank">Github</a>.\n\nNow I push all my projects to an online repository. I see a real-time history of all my projects. I easily collaborate and contribute to other\'s projects, and get instant access to my source code whenever I need it. Github also serves as a social network of sorts for developers. In a glance others can see what I\'m working on and I can explore to see what my friends are working on. This is all part of the modern web/software developer\'s repertoire  (especially Rails), along with <a href="http://git-scm.com/" target="_blank">Git</a>.\n\nKeep in mind that Github and Git are related but different things. Git is a local version control tool for your projects, and Github is online hosting of your project source code.\n\nSo what\'s the best way to get started with Github? Follow these steps and you\'ll be rolling.\n<h3>1. Setup Git</h3>\nGit is required to be able to use Github, so if you haven\'t read my post <em><a title="Get going with Git" href="http://dev.dorails.com/get-going-with-git/">Get going with Git</a></em>, go there first and setup Git on your local computer.\n<h3>2. Make initial commit</h3>\nOnce you\'ve setup Git on your computer. Find an existing project that you want to put on Github or create a new folder for an upcoming project. Then open terminal and enter the following:\n<pre>$ cd /path/to/your/project/ # change to the directory of your project\n$ git init # create local repository\n$ git add . # add all files in the directory\n$ git commit -am "Initial Commit" # commit with a message</pre>\nYou now have a local repository with your new or existing project. How do we push this to Github? Continue on...\n<h3>3. Start Github account</h3>\nGo to <a href="http://github.com" target="_blank">github.com</a> and setup your account.\n<h3>4. Create SSH Keys</h3>\nFollow Github instructions here: https://help.github.com/articles/generating-ssh-keys\n<h3>4. Create a new repo</h3>\nOnce you are setup and logged in:\n<ul>\n	<li>Click on the <code>+</code> sign in the top right hand corner</li>\n	<li>Click <code>New repository</code> from the dropdown</li>\n	<li>Give repo a name like <code>my_project</code>, <code>my-project</code>, or <code>MyProject</code> (I like to pick a convention and stick with it).</li>\n	<li>Give your project a description</li>\n	<li>Choose <code>Public</code> or <code>Private</code>.\n<small>Stick with public right now unless you are doing a company/client project (they might not like you publishing their source code for the world to see). Public repos are free. Private repos will cost you a little. I use them myself though.</small></li>\n	<li>I usually leave the <code>Initialize this repo with a README</code> unchecked because Rails projects have these by default when you setup a rails project.</li>\n	<li>Then click the <code>Create Repository</code> Button</li>\n</ul>\n<h3>5. Push Local Git Repo to Github Repo</h3>\nAfter your Github repo is created you will see a screen with setup instructions. Skip down to the <code>Push an existing repository from the command line</code> section. Type the following into the command line on your local machine:\n<pre>git remote add origin git@github.com:MyAccount/my_project.git\ngit push -u origin master</pre>\nYou have now set your new Github repo as the origin "remote" repository (more on remotes later). And you have set the ability to push your <em>local</em> Git repo to your <em>remote</em> Github repo.\n<h3>6. Do the Git Jive</h3>\nNow you can work on your project, make changes, and do the Git dance.\n<ol>\n	<li>Work on stuff</li>\n	<li>\n<pre>$ git add .</pre>\n</li>\n	<li>\n<pre>$ git commit -am "Create Navbar"</pre>\n<small>Note: Best practice for commits is to write in present tense and keep it short</small></li>\n	<li>\n<pre>$ git push</pre>\n<small>Pushes to Github repo</small></li>\n	<li>Repeat</li>\n</ol>\n<h3>7. Bonus</h3>\nI was going to save this for another post, but it\'s too much fun. Now that your Github repo is setup for your project you can pull up your project from any computer in a jiffy (as long as it has Git setup on it). You can actually do this with anyone\'s public project on Github. This is called <em>cloning</em>, and it does just that. Just open the directory where you want to drop it on your local machine and clone the repo to download the project instantly. The quickest way to clone a project is to find the project repo on Github and copy the clone code on the righthand side here:\n\n<a href="http://dev.dorails.com/wp-content/uploads/2014/08/Git-Clone.jpg"><img class="aligncenter wp-image-80" src="http://dev.dorails.com/wp-content/uploads/2014/08/Git-Clone-300x183.jpg" alt="Git Clone" width="500" height="306" /></a>\n\nThen travel to the directory you want to drop it and type <code>$ git clone</code> and paste the clone text in like so:\n<pre>$ cd /path/to/new/project/destination/\n$ git clone git@github.com:MyAccount/my_project.git</pre>\nFeel free to dig around Github and find other amazing developers with fun projects and clone theirs too to dig through their code.\n\nThere are a thousand other more advanced techniques I will cover with Git/Github including branches, remotes and deploying your Rails app, but you can hit the ground running now. With this jump start you can keep your code in an online repo, share what you are working on with others, easily collaborate, and interact with other humans. Congrats you\'re now a <em>modern</em> developer living in the 21st century!', 'Hop on the Github bandwagon', '', 'inherit', 'open', 'open', '', '73-autosave-v1', '', '', '2014-08-08 16:35:21', '2014-08-08 21:35:21', '', 73, 'http://dev.dorails.com/73-autosave-v1/', 0, 'revision', '', 0),
(87, 1, '2014-08-06 12:23:21', '2014-08-06 17:23:21', 'I used to see web/software development as a lonely, anti-social and disorganized activity. It was incredibly difficult to collaborate and follow along with the progress of a project. Also it was a beat-down to transfer and backup projects to a place where I could always access them from anywhere. That was until I discovered <a href="https://github.com/" target="_blank">Github</a>.\r\n\r\nNow I push all my projects to an online repository. I see a real-time history of all my projects. I easily collaborate and contribute to other\'s projects, and get instant access to my source code whenever I need it. Github also serves as a social network of sorts for developers. In a glance others can see what I\'m working on and I can explore to see what my friends are working on. This is all part of the modern web/software developer\'s repertoire  (especially Rails), along with <a href="http://git-scm.com/" target="_blank">Git</a>.\r\n\r\nKeep in mind that Github and Git are related but different things. Git is a local version control tool for your projects, and Github is online hosting of your project source code.\r\n\r\nSo what\'s the best way to get started with Github? Follow these steps and you\'ll be rolling.\r\n<h3>1. Setup Git</h3>\r\nGit is required to be able to use Github, so if you haven\'t read my post <em><a title="Get going with Git" href="http://dev.dorails.com/get-going-with-git/">Get going with Git</a></em>, go there first and setup Git on your local computer.\r\n<h3>2. Make initial commit</h3>\r\nOnce you\'ve setup Git on your computer. Find an existing project that you want to put on Github or create a new folder for an upcoming project. Then open terminal and enter the following:\r\n<pre>$ cd /path/to/your/project/ # change to the directory of your project\r\n$ git init # create local repository\r\n$ git add . # add all files in the directory\r\n$ git commit -am "Initial Commit" # commit with a message</pre>\r\nYou now have a local repository with your new or existing project. How do we push this to Github? Continue on...\r\n<h3>3. Start Github account</h3>\r\nGo to <a href="http://github.com" target="_blank">github.com</a> and setup your account.\r\n<h3>4. Create a new repo</h3>\r\nOnce you are setup and logged in:\r\n<ul>\r\n	<li>Click on the <code>+</code> sign in the top right hand corner</li>\r\n	<li>Click <code>New repository</code> from the dropdown</li>\r\n	<li>Give repo a name like <code>my_project</code>, <code>my-project</code>, or <code>MyProject</code> (I like to pick a convention and stick with it).</li>\r\n	<li>Give your project a description</li>\r\n	<li>Choose <code>Public</code> or <code>Private</code>.\r\n<small>Stick with public right now unless you are doing a company/client project (they might not like you publishing their source code for the world to see). Public repos are free. Private repos will cost you a little. I use them myself though.</small></li>\r\n	<li>I usually leave the <code>Initialize this repo with a README</code> unchecked because Rails projects have these by default when you setup a rails project.</li>\r\n	<li>Then click the <code>Create Repository</code> Button</li>\r\n</ul>\r\n<h3>5. Push Local Git Repo to Github Repo</h3>\r\nAfter your Github repo is created you will see a screen with setup instructions. Skip down to the <code>Push an existing repository from the command line</code> section. Type the following into the command line on your local machine:\r\n<pre>git remote add origin git@github.com:MyAccount/my_project.git\r\ngit push -u origin master</pre>\r\nYou have now set your new Github repo as the origin "remote" repository (more on remotes later). And you have set the ability to push your <em>local</em> Git repo to your <em>remote</em> Github repo.\r\n<h3>6. Do the Git Jive</h3>\r\nNow you can work on your project, make changes, and do the Git dance.\r\n<ol>\r\n	<li>Work on stuff</li>\r\n	<li>\r\n<pre>$ git add .</pre>\r\n</li>\r\n	<li>\r\n<pre>$ git commit -am "Create Navbar"</pre>\r\n<small>Note: Best practice for commits is to write in present tense and keep it short</small></li>\r\n	<li>\r\n<pre>$ git push</pre>\r\n<small>Pushes to Github repo</small></li>\r\n	<li>Repeat</li>\r\n</ol>\r\n<h3>7. Bonus</h3>\r\nI was going to save this for another post, but it\'s too much fun. Now that your Github repo is setup for your project you can pull up your project from any computer in a jiffy (as long as it has Git setup on it). You can actually do this with anyone\'s public project on Github. This is called <em>cloning</em>, and it does just that. Just open the directory where you want to drop it on your local machine and clone the repo to download the project instantly. The quickest way to clone a project is to find the project repo on Github and copy the clone code on the righthand side here:\r\n\r\n<a href="http://dev.dorails.com/wp-content/uploads/2014/08/Git-Clone.jpg"><img class="aligncenter wp-image-80" src="http://dev.dorails.com/wp-content/uploads/2014/08/Git-Clone-300x183.jpg" alt="Git Clone" width="500" height="306" /></a>\r\n\r\nThen travel to the directory you want to drop it and type <code>$ git clone</code> and paste the clone text in like so:\r\n<pre>$ cd /path/to/new/project/destination/\r\n$ git clone git@github.com:MyAccount/my_project.git</pre>\r\nFeel free to dig around Github and find other amazing developers with fun projects and clone theirs too to dig through their code.\r\n\r\nThere are a thousand other more advanced techniques I will cover with Git/Github including branches, remotes and deploying your Rails app, but you can hit the ground running now. With this jump start you can keep your code in an online repo, share what you are working on with others, easily collaborate, and interact with other humans. Congrats you\'re now a <em>modern</em> developer living in the 21st century!', 'Hop on the Github bandwagon', '', 'inherit', 'open', 'open', '', '73-revision-v1', '', '', '2014-08-06 12:23:21', '2014-08-06 17:23:21', '', 73, 'http://dev.dorails.com/73-revision-v1/', 0, 'revision', '', 0),
(88, 1, '2014-08-07 10:33:57', '2014-08-07 15:33:57', 'Want to learn Rails, but don\'t know where to start? Are you stuck before you even started? Everyone says that Rails is easy to learn, but where do you go and how easy is it? Well you have no excuse now, time\'s a-wastin\'. Here are 6 amazing resources for learning Rails that you\'ve gotta checkout. You could learn them in this order or start with the most interesting one.\r\n<h3>1. <a href="http://installrails.com/" target="_blank">Install Rails</a></h3>\r\nWhen you get stuck in Rails you get <em>really</em> stuck. Have you gotten stuck before you even started? What if you could get a walkthrough on installing Rails? Well <a href="installrails.com" target="_blank">Install Rails</a> is an easy step-by-step guide to installing Rails on your computer. This covers installing on Windows, Mac &amp; Linux and has some great troubleshooting forums for each step if you get stuck along the way. This will carry you from install to creating your first shell rails app.\r\n<h3>2. <a href="http://guides.rubyonrails.org/" target="_blank">Rails Guides</a></h3>\r\nTired of hearing about Rails from other? Want to get info straight from the source? You can\'t fail with the good ol\' Rails Guides put together by the Rails core team themselves. These online walk-throughs will take you through all the conventions of Rails. It covers installing, creating a new rails project, scaffolding, routes, MVC, database migrations, forms, Active Record, validations, callbacks, associations and a lot more! This path is for the DIY kind of person who wants to explore what Rails is capable of on their own, and this is a great way to become familiar with the language and concepts of Rails.\r\n<h3>3. <a href="https://onemonth.com/courses/one-month-rails" target="_blank">One Month Rails</a></h3>\r\nTired of learning concepts and want to build something real? Are you short on spare time and want a quick win? This is an online course created by <a href="https://twitter.com/mattangriffel" target="_blank">Mattan Griffel</a> out of <a href="http://www.ycombinator.com/" target="_blank">YCombinator</a> that helps beginners learn the basics of Rails by spending 30 minutes a day for one month. This course is instant gratification for people that have been spinning their wheels with no traction. In this course you will build a rails app start to finish and covers features and concepts like MVC, user authorization, photo pins, Twitter Bootstrap, CSS/Sass, Git/Github, deploying to Heroku and more. You will basically rebuild a basic version of Pinterest from scratch. This is a great online course if you are just starting out and want a crash course with a quick win. There are also troubleshooting forums for each lesson for when you get stuck. Cost is $100 flat, but here\'s a <a href="http://onemonth.com/signup?discount_code=W9vPoG" target="_blank">25% off</a> link though if you are interested. It does not cover advanced topics like testing, caching, etc but it will get you jump started and excited. It\'s called <em>One Month Rails </em>but if you work fast, this class is more like one week rails.\r\n<h3>4. <a href="http://www.railstutorial.org/book" target="_blank">Michael Hartl RoR Tutorial</a></h3>\r\nDo you want to know what\'s behind the magic of Rails? Want to look under the hood and understand the how &amp; why behind each aspect of Rails? This is a great tutorial for beginners by <a href="http://www.michaelhartl.com/" target="_blank">Michael Hartl</a> for those who want all the dirty details and in-depth knowledge of Rails. This course has a multi-faceted, professional-level approach. It is designed for beginners, but be ready dive deep into Git, routes, MVC, deploying to Heroku, rolling your own user auth system, TDD, Model Testing, Integration Testing, sample data, and a lot more. The course demystifies a lot of the <em>magic</em> that happens in Rails. You will essentially rebuild Twitter from scratch. Depending on your free-time/dedication, this course should take roughly one month to go through, but it\'s worth it. Oh yeah, did I mention it\'s <a href="http://www.railstutorial.org/book" target="_blank">free</a>. But you may want to consider the screencasts for $149 if you want to move faster.\r\n<h3>5. <a href="http://railsforzombies.org/" target="_blank">Rails for Zombies</a></h3>\r\nDon\'t care to go through the install process and deal with error messages, just to get your feet wet? What if you could code right in the browser? This is a fun &amp; compelling online course by <a href="https://www.codeschool.com/" target="_blank">Code School</a> that will help you wrap your brain around the programming concepts, conventions, structure and syntax of Ruby and Ruby on Rails and eventually get you into the nitty gritty trenches where you want to be. In this course you can expect to do most of your coding right in the browser so you don\'t have to deal with installing Rails at the start and can focus on understanding Ruby/Rails programming concepts. The first course is free but as of writing this post, Code School enrollment is $30 a month. There are many useful rails courses you can take that follow this one.\r\n<h3>6. <a href="http://patmaddox.com/rubysteps/" target="_blank">Ruby Steps</a></h3>\r\nAs great as books and courses are, learning Rails is not always a linear process. As you may know by now, it is so easy to get stuck in Rails and it is important to see the framework from multiple angles to really gain a full understanding and get unstuck. This resource has a multi-discipline approach that focuses on daily practice of essential topics. <a href="http://patmaddox.com/" target="_blank">Pat Maddox</a> will send you 5 lessons per week covering Ruby, Rails, <a href="http://en.wikipedia.org/wiki/Test-driven_development" target="_blank">Test Driven Development (TDD)</a>, <a href="http://en.wikipedia.org/wiki/Object-oriented_programming" target="_blank">Object-Oriented Programming (OOP)</a>, and Refactoring. This is for the beginner or advanced Rails developer who wants to build up their professional programming chops to build amazing software. The mailing list is <a href="http://patmaddox.com/rubysteps/" target="_blank">free</a> to join.\r\n<h3>JFDI</h3>\r\nThere they are. Go get \'em tiger! You\'ve got no excuses now. You may even want to consider doing these in that order depending on your personality/preferences. I like this order because you can get it installed, get familiar with Rails, build a quick win, build a not-so-quick win, learn good programming concepts/syntax and then with <a href="http://patmaddox.com/rubysteps/" target="_blank">Ruby Steps</a> develop a daily discipline for yourself. Don\'t waste any time, just look yourself in the mirror and say <a href="https://www.google.com/webhp?sourceid=chrome-instant&amp;ion=1&amp;espv=2&amp;ie=UTF-8#q=jfdi" target="_blank">jfdi</a>.', '6 ways to learn Ruby on Rails (JFDI)', '', 'publish', 'open', 'open', '', 'jfdi-6-ways-to-learn-ruby-on-rails', '', '', '2014-08-07 10:43:42', '2014-08-07 15:43:42', '', 0, 'http://dev.dorails.com/?p=88', 0, 'post', '', 2),
(89, 1, '2014-08-06 22:39:00', '2014-08-07 03:39:00', 'P\r\n\r\nD\r\n\r\nF\r\n<h3>1. <a href="https://onemonth.com/" target="_blank">OneMonth</a></h3>\r\nOne month is a\r\n<h3><a href="http://www.railstutorial.org/book" target="_blank">Michael Hart Tutorial</a></h3>\r\n<h3><a href="https://www.codeschool.com/" target="_blank">CodeSchool</a></h3>\r\n<h3><a href="http://pragprog.com/book/rails4/agile-web-development-with-rails-4" target="_blank">Agile Development Book</a></h3>\r\n<h3><a href="http://guides.rubyonrails.org/" target="_blank">Rails Guides</a></h3>\r\n<h3><a href="http://railscasts.com/" target="_blank">Rails Casts</a></h3>\r\n<h3><a href="http://patmaddox.com/rubysteps/" target="_blank">Ruby Steps</a></h3>', '5 resources for Rails beginners', '', 'inherit', 'open', 'open', '', '88-revision-v1', '', '', '2014-08-06 22:39:00', '2014-08-07 03:39:00', '', 88, 'http://dev.dorails.com/88-revision-v1/', 0, 'revision', '', 0),
(90, 1, '2014-08-07 10:22:36', '2014-08-07 15:22:36', 'Want to learn Rails, but don\'t know where to start? Are you stuck before you even started? Everyone says that Rails is easy to learn, but where do you go and how easy is it? Well the Ruby language is more expressive and easier to write and read than any other language, in my opinion. And Rails makes a lot of things way easier. But learning Rails is hard because there are <a href="https://www.codefellows.org/blog/this-is-why-learning-rails-is-hard" target="_blank">so many disciplines</a> you have to cover. Well, here are 6 amazing resources for learning Rails that you\'ve gotta checkout.\r\n<h3>1. <a href="http://guides.rubyonrails.org/" target="_blank">Rails Guides</a></h3>\r\nTired of hearing about Rails from other? Want to get info straight from the source? You can\'t fail with the good ol\' Rails Guides put together by the Rails core team themselves. These online walk-throughs will take you through all the conventions of Rails. It covers installing, creating a new rails project, scaffolding, routes, MVC, database migrations, forms, Active Record, validations, callbacks, associations and a lot more! This path is for the DIY kind of person who wants to explore what Rails is capable of on their own, and this is a great way to become familiar with the language and concepts of Rails.\r\n<h3>2. <a href="http://installrails.com/" target="_blank">Install Rails</a></h3>\r\nWhen you get stuck in Rails you get <em>really</em> stuck. Have you gotten stuck before you even started? What if you could get a walkthrough on installing Rails? Well <a href="installrails.com" target="_blank">Install Rails</a> is an easy step-by-step guide to installing Rails on your computer. This covers installing on Windows, Mac &amp; Linux and has some great troubleshooting forums for each step if you get stuck along the way. This will carry you from install to creating your first shell rails app.\r\n<h3>3. <a href="https://onemonth.com/courses/one-month-rails" target="_blank">One Month Rails</a></h3>\r\nTired of learning concepts and want to build something real? Are you short on spare time and want a quick win? This is an online course created by <a href="https://twitter.com/mattangriffel" target="_blank">Mattan Griffel</a> out of <a href="http://www.ycombinator.com/" target="_blank">YCombinator</a> that helps beginners learn the basics of Rails by spending 30 minutes a day for one month. This course is instant gratification for people that have been spinning their wheels with no traction. In this course you will build a rails app start to finish and covers features and concepts like MVC, user authorization, photo pins, Twitter Bootstrap, CSS/Sass, Git/Github, deploying to Heroku and more. You will basically rebuild a basic version of Pinterest from scratch. This is a great online course if you are just starting out and want a crash course with a quick win. There are also troubleshooting forums for each lesson for when you get stuck. Cost is $100 flat, but here\'s a <a href="http://onemonth.com/signup?discount_code=W9vPoG" target="_blank">25% off</a> link though if you are interested. It does not cover advanced topics like testing, caching, etc but it will get you jump started and excited. It\'s called <em>One Month Rails </em>but if you work fast, this class is more like one week rails.\r\n<h3>4. <a href="http://www.railstutorial.org/book" target="_blank">Michael Hartl Tutorial</a></h3>\r\nDo you want to know what\'s behind the magic of Rails? Want to look under the hood and understand the how &amp; why behind each aspect of Rails? This is a great tutorial for beginners by <a href="http://www.michaelhartl.com/" target="_blank">Michael Hartl</a> for those who want all the dirty details and in-depth knowledge of Rails. This course has a multi-faceted, professional-level approach. It is designed for beginners, but be ready dive deep into Git, routes, MVC, deploying to Heroku, rolling your own user auth system, TDD, Model Testing, Integration Testing, sample data, and a lot more. The course demystifies a lot of the <em>magic</em> that happens in Rails. You will essentially rebuild Twitter from scratch. Depending on your free-time/dedication, this course should take roughly one month to go through, but it\'s worth it. Oh yeah, did I mention it\'s <a href="http://www.railstutorial.org/book" target="_blank">free</a>. But you may want to consider the screencasts for $149 if you want to move faster.\r\n<h3>5. <a href="http://railsforzombies.org/" target="_blank">Rails for Zombies</a></h3>\r\nDon\'t care to go through the install process and deal with error messages, just to get your feet wet? What if you could code right in the browser? This is a fun &amp; compelling online course by <a href="https://www.codeschool.com/" target="_blank">Code School</a> that will help you wrap your brain around the programming concepts, conventions, structure and syntax of Ruby and Ruby on Rails and eventually get you into the nitty gritty trenches where you want to be. In this course you can expect to do most of your coding right in the browser so you don\'t have to deal with installing Rails at the start and can focus on understanding Ruby/Rails programming concepts. The first course is free but as of writing this post, Code School enrollment is $30 a month. There are many useful rails courses you can take that follow this one.\r\n<h3>6. <a href="http://patmaddox.com/rubysteps/" target="_blank">Ruby Steps</a></h3>\r\nAs great as books and courses are, learning Rails is not always a linear process. As you may know by now, it is so easy to get stuck in Rails and it is important to see the framework from multiple angles to really gain a full understanding and get unstuck. This resource has a multi-discipline approach that focuses on daily practice of essential topics. <a href="http://patmaddox.com/" target="_blank">Pat Maddox</a> will send you 5 lessons per week covering Ruby, Rails, <a href="http://en.wikipedia.org/wiki/Test-driven_development" target="_blank">Test Driven Development (TDD)</a>, <a href="http://en.wikipedia.org/wiki/Object-oriented_programming" target="_blank">Object-Oriented Programming (OOP)</a>, and Refactoring. This is for the beginner or advanced Rails developer who wants to build up their professional programming chops to build amazing software. The mailing list is <a href="http://patmaddox.com/rubysteps/" target="_blank">free</a> to join.', '6 resources for Rails beginners', '', 'inherit', 'open', 'open', '', '88-revision-v1', '', '', '2014-08-07 10:22:36', '2014-08-07 15:22:36', '', 88, 'http://dev.dorails.com/88-revision-v1/', 0, 'revision', '', 0),
(91, 1, '2014-08-07 10:23:59', '2014-08-07 15:23:59', 'Want to learn Rails, but don\'t know where to start? Are you stuck before you even started? Everyone says that Rails is easy to learn, but where do you go and how easy is it? Well the Ruby language is more expressive and easier to write and read than any other language, in my opinion. And Rails makes a lot of things way easier. But learning Rails is hard because there are <a href="https://www.codefellows.org/blog/this-is-why-learning-rails-is-hard" target="_blank">so many disciplines</a> you have to cover. Well, here are 6 amazing resources for learning Rails that you\'ve gotta checkout.\r\n<h3>1. <a href="http://guides.rubyonrails.org/" target="_blank">Rails Guides</a></h3>\r\nTired of hearing about Rails from other? Want to get info straight from the source? You can\'t fail with the good ol\' Rails Guides put together by the Rails core team themselves. These online walk-throughs will take you through all the conventions of Rails. It covers installing, creating a new rails project, scaffolding, routes, MVC, database migrations, forms, Active Record, validations, callbacks, associations and a lot more! This path is for the DIY kind of person who wants to explore what Rails is capable of on their own, and this is a great way to become familiar with the language and concepts of Rails.\r\n<h3>2. <a href="http://installrails.com/" target="_blank">Install Rails</a></h3>\r\nWhen you get stuck in Rails you get <em>really</em> stuck. Have you gotten stuck before you even started? What if you could get a walkthrough on installing Rails? Well <a href="installrails.com" target="_blank">Install Rails</a> is an easy step-by-step guide to installing Rails on your computer. This covers installing on Windows, Mac &amp; Linux and has some great troubleshooting forums for each step if you get stuck along the way. This will carry you from install to creating your first shell rails app.\r\n<h3>3. <a href="https://onemonth.com/courses/one-month-rails" target="_blank">One Month Rails</a></h3>\r\nTired of learning concepts and want to build something real? Are you short on spare time and want a quick win? This is an online course created by <a href="https://twitter.com/mattangriffel" target="_blank">Mattan Griffel</a> out of <a href="http://www.ycombinator.com/" target="_blank">YCombinator</a> that helps beginners learn the basics of Rails by spending 30 minutes a day for one month. This course is instant gratification for people that have been spinning their wheels with no traction. In this course you will build a rails app start to finish and covers features and concepts like MVC, user authorization, photo pins, Twitter Bootstrap, CSS/Sass, Git/Github, deploying to Heroku and more. You will basically rebuild a basic version of Pinterest from scratch. This is a great online course if you are just starting out and want a crash course with a quick win. There are also troubleshooting forums for each lesson for when you get stuck. Cost is $100 flat, but here\'s a <a href="http://onemonth.com/signup?discount_code=W9vPoG" target="_blank">25% off</a> link though if you are interested. It does not cover advanced topics like testing, caching, etc but it will get you jump started and excited. It\'s called <em>One Month Rails </em>but if you work fast, this class is more like one week rails.\r\n<h3>4. <a href="http://www.railstutorial.org/book" target="_blank">Michael Hartl Tutorial</a></h3>\r\nDo you want to know what\'s behind the magic of Rails? Want to look under the hood and understand the how &amp; why behind each aspect of Rails? This is a great tutorial for beginners by <a href="http://www.michaelhartl.com/" target="_blank">Michael Hartl</a> for those who want all the dirty details and in-depth knowledge of Rails. This course has a multi-faceted, professional-level approach. It is designed for beginners, but be ready dive deep into Git, routes, MVC, deploying to Heroku, rolling your own user auth system, TDD, Model Testing, Integration Testing, sample data, and a lot more. The course demystifies a lot of the <em>magic</em> that happens in Rails. You will essentially rebuild Twitter from scratch. Depending on your free-time/dedication, this course should take roughly one month to go through, but it\'s worth it. Oh yeah, did I mention it\'s <a href="http://www.railstutorial.org/book" target="_blank">free</a>. But you may want to consider the screencasts for $149 if you want to move faster.\r\n<h3>5. <a href="http://railsforzombies.org/" target="_blank">Rails for Zombies</a></h3>\r\nDon\'t care to go through the install process and deal with error messages, just to get your feet wet? What if you could code right in the browser? This is a fun &amp; compelling online course by <a href="https://www.codeschool.com/" target="_blank">Code School</a> that will help you wrap your brain around the programming concepts, conventions, structure and syntax of Ruby and Ruby on Rails and eventually get you into the nitty gritty trenches where you want to be. In this course you can expect to do most of your coding right in the browser so you don\'t have to deal with installing Rails at the start and can focus on understanding Ruby/Rails programming concepts. The first course is free but as of writing this post, Code School enrollment is $30 a month. There are many useful rails courses you can take that follow this one.\r\n<h3>6. <a href="http://patmaddox.com/rubysteps/" target="_blank">Ruby Steps</a></h3>\r\nAs great as books and courses are, learning Rails is not always a linear process. As you may know by now, it is so easy to get stuck in Rails and it is important to see the framework from multiple angles to really gain a full understanding and get unstuck. This resource has a multi-discipline approach that focuses on daily practice of essential topics. <a href="http://patmaddox.com/" target="_blank">Pat Maddox</a> will send you 5 lessons per week covering Ruby, Rails, <a href="http://en.wikipedia.org/wiki/Test-driven_development" target="_blank">Test Driven Development (TDD)</a>, <a href="http://en.wikipedia.org/wiki/Object-oriented_programming" target="_blank">Object-Oriented Programming (OOP)</a>, and Refactoring. This is for the beginner or advanced Rails developer who wants to build up their professional programming chops to build amazing software. The mailing list is <a href="http://patmaddox.com/rubysteps/" target="_blank">free</a> to join.', '6 ways to learn Rails', '', 'inherit', 'open', 'open', '', '88-revision-v1', '', '', '2014-08-07 10:23:59', '2014-08-07 15:23:59', '', 88, 'http://dev.dorails.com/88-revision-v1/', 0, 'revision', '', 0) ;
INSERT INTO `wp_posts` ( `ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(92, 1, '2014-08-07 10:25:53', '2014-08-07 15:25:53', 'Want to learn Rails, but don\'t know where to start? Are you stuck before you even started? Everyone says that Rails is easy to learn, but where do you go and how easy is it? Well the Ruby language is more expressive and easier to write and read than any other language, in my opinion. And Rails makes a lot of things way easier. But learning Rails is hard because there are <a href="https://www.codefellows.org/blog/this-is-why-learning-rails-is-hard" target="_blank">so many disciplines</a> you have to cover. Well, here are 6 amazing resources for learning Rails that you\'ve gotta checkout.\r\n<h3>1. <a href="http://guides.rubyonrails.org/" target="_blank">Rails Guides</a></h3>\r\nTired of hearing about Rails from other? Want to get info straight from the source? You can\'t fail with the good ol\' Rails Guides put together by the Rails core team themselves. These online walk-throughs will take you through all the conventions of Rails. It covers installing, creating a new rails project, scaffolding, routes, MVC, database migrations, forms, Active Record, validations, callbacks, associations and a lot more! This path is for the DIY kind of person who wants to explore what Rails is capable of on their own, and this is a great way to become familiar with the language and concepts of Rails.\r\n<h3>2. <a href="http://installrails.com/" target="_blank">Install Rails</a></h3>\r\nWhen you get stuck in Rails you get <em>really</em> stuck. Have you gotten stuck before you even started? What if you could get a walkthrough on installing Rails? Well <a href="installrails.com" target="_blank">Install Rails</a> is an easy step-by-step guide to installing Rails on your computer. This covers installing on Windows, Mac &amp; Linux and has some great troubleshooting forums for each step if you get stuck along the way. This will carry you from install to creating your first shell rails app.\r\n<h3>3. <a href="https://onemonth.com/courses/one-month-rails" target="_blank">One Month Rails</a></h3>\r\nTired of learning concepts and want to build something real? Are you short on spare time and want a quick win? This is an online course created by <a href="https://twitter.com/mattangriffel" target="_blank">Mattan Griffel</a> out of <a href="http://www.ycombinator.com/" target="_blank">YCombinator</a> that helps beginners learn the basics of Rails by spending 30 minutes a day for one month. This course is instant gratification for people that have been spinning their wheels with no traction. In this course you will build a rails app start to finish and covers features and concepts like MVC, user authorization, photo pins, Twitter Bootstrap, CSS/Sass, Git/Github, deploying to Heroku and more. You will basically rebuild a basic version of Pinterest from scratch. This is a great online course if you are just starting out and want a crash course with a quick win. There are also troubleshooting forums for each lesson for when you get stuck. Cost is $100 flat, but here\'s a <a href="http://onemonth.com/signup?discount_code=W9vPoG" target="_blank">25% off</a> link though if you are interested. It does not cover advanced topics like testing, caching, etc but it will get you jump started and excited. It\'s called <em>One Month Rails </em>but if you work fast, this class is more like one week rails.\r\n<h3>4. <a href="http://www.railstutorial.org/book" target="_blank">Michael Hartl RoR Tutorial</a></h3>\r\nDo you want to know what\'s behind the magic of Rails? Want to look under the hood and understand the how &amp; why behind each aspect of Rails? This is a great tutorial for beginners by <a href="http://www.michaelhartl.com/" target="_blank">Michael Hartl</a> for those who want all the dirty details and in-depth knowledge of Rails. This course has a multi-faceted, professional-level approach. It is designed for beginners, but be ready dive deep into Git, routes, MVC, deploying to Heroku, rolling your own user auth system, TDD, Model Testing, Integration Testing, sample data, and a lot more. The course demystifies a lot of the <em>magic</em> that happens in Rails. You will essentially rebuild Twitter from scratch. Depending on your free-time/dedication, this course should take roughly one month to go through, but it\'s worth it. Oh yeah, did I mention it\'s <a href="http://www.railstutorial.org/book" target="_blank">free</a>. But you may want to consider the screencasts for $149 if you want to move faster.\r\n<h3>5. <a href="http://railsforzombies.org/" target="_blank">Rails for Zombies</a></h3>\r\nDon\'t care to go through the install process and deal with error messages, just to get your feet wet? What if you could code right in the browser? This is a fun &amp; compelling online course by <a href="https://www.codeschool.com/" target="_blank">Code School</a> that will help you wrap your brain around the programming concepts, conventions, structure and syntax of Ruby and Ruby on Rails and eventually get you into the nitty gritty trenches where you want to be. In this course you can expect to do most of your coding right in the browser so you don\'t have to deal with installing Rails at the start and can focus on understanding Ruby/Rails programming concepts. The first course is free but as of writing this post, Code School enrollment is $30 a month. There are many useful rails courses you can take that follow this one.\r\n<h3>6. <a href="http://patmaddox.com/rubysteps/" target="_blank">Ruby Steps</a></h3>\r\nAs great as books and courses are, learning Rails is not always a linear process. As you may know by now, it is so easy to get stuck in Rails and it is important to see the framework from multiple angles to really gain a full understanding and get unstuck. This resource has a multi-discipline approach that focuses on daily practice of essential topics. <a href="http://patmaddox.com/" target="_blank">Pat Maddox</a> will send you 5 lessons per week covering Ruby, Rails, <a href="http://en.wikipedia.org/wiki/Test-driven_development" target="_blank">Test Driven Development (TDD)</a>, <a href="http://en.wikipedia.org/wiki/Object-oriented_programming" target="_blank">Object-Oriented Programming (OOP)</a>, and Refactoring. This is for the beginner or advanced Rails developer who wants to build up their professional programming chops to build amazing software. The mailing list is <a href="http://patmaddox.com/rubysteps/" target="_blank">free</a> to join.', '6 ways to learn Rails', '', 'inherit', 'open', 'open', '', '88-revision-v1', '', '', '2014-08-07 10:25:53', '2014-08-07 15:25:53', '', 88, 'http://dev.dorails.com/88-revision-v1/', 0, 'revision', '', 0),
(93, 1, '2014-08-07 10:29:22', '2014-08-07 15:29:22', 'Want to learn Rails, but don\'t know where to start? Are you stuck before you even started? Everyone says that Rails is easy to learn, but where do you go and how easy is it? Well the Ruby language is more expressive and easier to write and read than any other language, in my opinion. And Rails makes a lot of things way easier. But learning Rails is hard because there are <a href="https://www.codefellows.org/blog/this-is-why-learning-rails-is-hard" target="_blank">so many disciplines</a> you have to cover. Well, here are 6 amazing resources for learning Rails that you\'ve gotta checkout.\r\n\r\n<hr />\r\n\r\n&nbsp;\r\n<h3>1. <a href="http://guides.rubyonrails.org/" target="_blank">Rails Guides</a></h3>\r\nTired of hearing about Rails from other? Want to get info straight from the source? You can\'t fail with the good ol\' Rails Guides put together by the Rails core team themselves. These online walk-throughs will take you through all the conventions of Rails. It covers installing, creating a new rails project, scaffolding, routes, MVC, database migrations, forms, Active Record, validations, callbacks, associations and a lot more! This path is for the DIY kind of person who wants to explore what Rails is capable of on their own, and this is a great way to become familiar with the language and concepts of Rails.\r\n<h3>2. <a href="http://installrails.com/" target="_blank">Install Rails</a></h3>\r\nWhen you get stuck in Rails you get <em>really</em> stuck. Have you gotten stuck before you even started? What if you could get a walkthrough on installing Rails? Well <a href="installrails.com" target="_blank">Install Rails</a> is an easy step-by-step guide to installing Rails on your computer. This covers installing on Windows, Mac &amp; Linux and has some great troubleshooting forums for each step if you get stuck along the way. This will carry you from install to creating your first shell rails app.\r\n<h3>3. <a href="https://onemonth.com/courses/one-month-rails" target="_blank">One Month Rails</a></h3>\r\nTired of learning concepts and want to build something real? Are you short on spare time and want a quick win? This is an online course created by <a href="https://twitter.com/mattangriffel" target="_blank">Mattan Griffel</a> out of <a href="http://www.ycombinator.com/" target="_blank">YCombinator</a> that helps beginners learn the basics of Rails by spending 30 minutes a day for one month. This course is instant gratification for people that have been spinning their wheels with no traction. In this course you will build a rails app start to finish and covers features and concepts like MVC, user authorization, photo pins, Twitter Bootstrap, CSS/Sass, Git/Github, deploying to Heroku and more. You will basically rebuild a basic version of Pinterest from scratch. This is a great online course if you are just starting out and want a crash course with a quick win. There are also troubleshooting forums for each lesson for when you get stuck. Cost is $100 flat, but here\'s a <a href="http://onemonth.com/signup?discount_code=W9vPoG" target="_blank">25% off</a> link though if you are interested. It does not cover advanced topics like testing, caching, etc but it will get you jump started and excited. It\'s called <em>One Month Rails </em>but if you work fast, this class is more like one week rails.\r\n<h3>4. <a href="http://www.railstutorial.org/book" target="_blank">Michael Hartl RoR Tutorial</a></h3>\r\nDo you want to know what\'s behind the magic of Rails? Want to look under the hood and understand the how &amp; why behind each aspect of Rails? This is a great tutorial for beginners by <a href="http://www.michaelhartl.com/" target="_blank">Michael Hartl</a> for those who want all the dirty details and in-depth knowledge of Rails. This course has a multi-faceted, professional-level approach. It is designed for beginners, but be ready dive deep into Git, routes, MVC, deploying to Heroku, rolling your own user auth system, TDD, Model Testing, Integration Testing, sample data, and a lot more. The course demystifies a lot of the <em>magic</em> that happens in Rails. You will essentially rebuild Twitter from scratch. Depending on your free-time/dedication, this course should take roughly one month to go through, but it\'s worth it. Oh yeah, did I mention it\'s <a href="http://www.railstutorial.org/book" target="_blank">free</a>. But you may want to consider the screencasts for $149 if you want to move faster.\r\n<h3>5. <a href="http://railsforzombies.org/" target="_blank">Rails for Zombies</a></h3>\r\nDon\'t care to go through the install process and deal with error messages, just to get your feet wet? What if you could code right in the browser? This is a fun &amp; compelling online course by <a href="https://www.codeschool.com/" target="_blank">Code School</a> that will help you wrap your brain around the programming concepts, conventions, structure and syntax of Ruby and Ruby on Rails and eventually get you into the nitty gritty trenches where you want to be. In this course you can expect to do most of your coding right in the browser so you don\'t have to deal with installing Rails at the start and can focus on understanding Ruby/Rails programming concepts. The first course is free but as of writing this post, Code School enrollment is $30 a month. There are many useful rails courses you can take that follow this one.\r\n<h3>6. <a href="http://patmaddox.com/rubysteps/" target="_blank">Ruby Steps</a></h3>\r\nAs great as books and courses are, learning Rails is not always a linear process. As you may know by now, it is so easy to get stuck in Rails and it is important to see the framework from multiple angles to really gain a full understanding and get unstuck. This resource has a multi-discipline approach that focuses on daily practice of essential topics. <a href="http://patmaddox.com/" target="_blank">Pat Maddox</a> will send you 5 lessons per week covering Ruby, Rails, <a href="http://en.wikipedia.org/wiki/Test-driven_development" target="_blank">Test Driven Development (TDD)</a>, <a href="http://en.wikipedia.org/wiki/Object-oriented_programming" target="_blank">Object-Oriented Programming (OOP)</a>, and Refactoring. This is for the beginner or advanced Rails developer who wants to build up their professional programming chops to build amazing software. The mailing list is <a href="http://patmaddox.com/rubysteps/" target="_blank">free</a> to join.\r\n\r\n<hr />\r\n\r\n&nbsp;\r\n\r\nThere they are. Go get \'em tiger! You may even want to consider doing them in that order depending on your personality/preferences. I like this order because you can get familiar with rails, get it installed, build a quick win, a not-so-quick win, learn good programming concepts and then with <a href="http://patmaddox.com/rubysteps/" target="_blank">Ruby Steps</a>, develop a daily discipline for yourself.', '6 ways to learn Rails', '', 'inherit', 'open', 'open', '', '88-revision-v1', '', '', '2014-08-07 10:29:22', '2014-08-07 15:29:22', '', 88, 'http://dev.dorails.com/88-revision-v1/', 0, 'revision', '', 0),
(94, 1, '2014-08-07 10:32:08', '2014-08-07 15:32:08', 'Want to learn Rails, but don\'t know where to start? Are you stuck before you even started? Everyone says that Rails is easy to learn, but where do you go and how easy is it? Well the Ruby language is more expressive and easier to write and read than any other language, in my opinion. And Rails makes a lot of things way easier. But learning Rails is hard because there are <a href="https://www.codefellows.org/blog/this-is-why-learning-rails-is-hard" target="_blank">so many disciplines</a> you have to cover. Well you have no excuse now, here are 6 amazing resources for learning Rails that you\'ve gotta checkout.\r\n<h3>1. <a href="http://guides.rubyonrails.org/" target="_blank">Rails Guides</a></h3>\r\nTired of hearing about Rails from other? Want to get info straight from the source? You can\'t fail with the good ol\' Rails Guides put together by the Rails core team themselves. These online walk-throughs will take you through all the conventions of Rails. It covers installing, creating a new rails project, scaffolding, routes, MVC, database migrations, forms, Active Record, validations, callbacks, associations and a lot more! This path is for the DIY kind of person who wants to explore what Rails is capable of on their own, and this is a great way to become familiar with the language and concepts of Rails.\r\n<h3>2. <a href="http://installrails.com/" target="_blank">Install Rails</a></h3>\r\nWhen you get stuck in Rails you get <em>really</em> stuck. Have you gotten stuck before you even started? What if you could get a walkthrough on installing Rails? Well <a href="installrails.com" target="_blank">Install Rails</a> is an easy step-by-step guide to installing Rails on your computer. This covers installing on Windows, Mac &amp; Linux and has some great troubleshooting forums for each step if you get stuck along the way. This will carry you from install to creating your first shell rails app.\r\n<h3>3. <a href="https://onemonth.com/courses/one-month-rails" target="_blank">One Month Rails</a></h3>\r\nTired of learning concepts and want to build something real? Are you short on spare time and want a quick win? This is an online course created by <a href="https://twitter.com/mattangriffel" target="_blank">Mattan Griffel</a> out of <a href="http://www.ycombinator.com/" target="_blank">YCombinator</a> that helps beginners learn the basics of Rails by spending 30 minutes a day for one month. This course is instant gratification for people that have been spinning their wheels with no traction. In this course you will build a rails app start to finish and covers features and concepts like MVC, user authorization, photo pins, Twitter Bootstrap, CSS/Sass, Git/Github, deploying to Heroku and more. You will basically rebuild a basic version of Pinterest from scratch. This is a great online course if you are just starting out and want a crash course with a quick win. There are also troubleshooting forums for each lesson for when you get stuck. Cost is $100 flat, but here\'s a <a href="http://onemonth.com/signup?discount_code=W9vPoG" target="_blank">25% off</a> link though if you are interested. It does not cover advanced topics like testing, caching, etc but it will get you jump started and excited. It\'s called <em>One Month Rails </em>but if you work fast, this class is more like one week rails.\r\n<h3>4. <a href="http://www.railstutorial.org/book" target="_blank">Michael Hartl RoR Tutorial</a></h3>\r\nDo you want to know what\'s behind the magic of Rails? Want to look under the hood and understand the how &amp; why behind each aspect of Rails? This is a great tutorial for beginners by <a href="http://www.michaelhartl.com/" target="_blank">Michael Hartl</a> for those who want all the dirty details and in-depth knowledge of Rails. This course has a multi-faceted, professional-level approach. It is designed for beginners, but be ready dive deep into Git, routes, MVC, deploying to Heroku, rolling your own user auth system, TDD, Model Testing, Integration Testing, sample data, and a lot more. The course demystifies a lot of the <em>magic</em> that happens in Rails. You will essentially rebuild Twitter from scratch. Depending on your free-time/dedication, this course should take roughly one month to go through, but it\'s worth it. Oh yeah, did I mention it\'s <a href="http://www.railstutorial.org/book" target="_blank">free</a>. But you may want to consider the screencasts for $149 if you want to move faster.\r\n<h3>5. <a href="http://railsforzombies.org/" target="_blank">Rails for Zombies</a></h3>\r\nDon\'t care to go through the install process and deal with error messages, just to get your feet wet? What if you could code right in the browser? This is a fun &amp; compelling online course by <a href="https://www.codeschool.com/" target="_blank">Code School</a> that will help you wrap your brain around the programming concepts, conventions, structure and syntax of Ruby and Ruby on Rails and eventually get you into the nitty gritty trenches where you want to be. In this course you can expect to do most of your coding right in the browser so you don\'t have to deal with installing Rails at the start and can focus on understanding Ruby/Rails programming concepts. The first course is free but as of writing this post, Code School enrollment is $30 a month. There are many useful rails courses you can take that follow this one.\r\n<h3>6. <a href="http://patmaddox.com/rubysteps/" target="_blank">Ruby Steps</a></h3>\r\nAs great as books and courses are, learning Rails is not always a linear process. As you may know by now, it is so easy to get stuck in Rails and it is important to see the framework from multiple angles to really gain a full understanding and get unstuck. This resource has a multi-discipline approach that focuses on daily practice of essential topics. <a href="http://patmaddox.com/" target="_blank">Pat Maddox</a> will send you 5 lessons per week covering Ruby, Rails, <a href="http://en.wikipedia.org/wiki/Test-driven_development" target="_blank">Test Driven Development (TDD)</a>, <a href="http://en.wikipedia.org/wiki/Object-oriented_programming" target="_blank">Object-Oriented Programming (OOP)</a>, and Refactoring. This is for the beginner or advanced Rails developer who wants to build up their professional programming chops to build amazing software. The mailing list is <a href="http://patmaddox.com/rubysteps/" target="_blank">free</a> to join.\r\n\r\n&nbsp;\r\n<h3>JFDI</h3>\r\nThere they are. Go get \'em tiger! You\'ve got no excuses now. You may even want to consider doing these in that order depending on your personality/preferences. I like this order because you can get familiar with rails, get it installed, build a quick win, build a not-so-quick win, learn good programming concepts and then with <a href="http://patmaddox.com/rubysteps/" target="_blank">Ruby Steps</a>, develop a daily discipline for yourself.', '6 ways to learn Rails', '', 'inherit', 'open', 'open', '', '88-revision-v1', '', '', '2014-08-07 10:32:08', '2014-08-07 15:32:08', '', 88, 'http://dev.dorails.com/88-revision-v1/', 0, 'revision', '', 0),
(95, 1, '2014-08-07 10:33:52', '2014-08-07 15:33:52', 'Want to learn Rails, but don\'t know where to start? Are you stuck before you even started? Everyone says that Rails is easy to learn, but where do you go and how easy is it? Well the Ruby language is more expressive and easier to write and read than any other language, in my opinion. And Rails makes a lot of things way easier. But learning Rails is hard because there are <a href="https://www.codefellows.org/blog/this-is-why-learning-rails-is-hard" target="_blank">so many disciplines</a> you have to cover. Well you have no excuse now, here are 6 amazing resources for learning Rails that you\'ve gotta checkout.\r\n<h3>1. <a href="http://guides.rubyonrails.org/" target="_blank">Rails Guides</a></h3>\r\nTired of hearing about Rails from other? Want to get info straight from the source? You can\'t fail with the good ol\' Rails Guides put together by the Rails core team themselves. These online walk-throughs will take you through all the conventions of Rails. It covers installing, creating a new rails project, scaffolding, routes, MVC, database migrations, forms, Active Record, validations, callbacks, associations and a lot more! This path is for the DIY kind of person who wants to explore what Rails is capable of on their own, and this is a great way to become familiar with the language and concepts of Rails.\r\n<h3>2. <a href="http://installrails.com/" target="_blank">Install Rails</a></h3>\r\nWhen you get stuck in Rails you get <em>really</em> stuck. Have you gotten stuck before you even started? What if you could get a walkthrough on installing Rails? Well <a href="installrails.com" target="_blank">Install Rails</a> is an easy step-by-step guide to installing Rails on your computer. This covers installing on Windows, Mac &amp; Linux and has some great troubleshooting forums for each step if you get stuck along the way. This will carry you from install to creating your first shell rails app.\r\n<h3>3. <a href="https://onemonth.com/courses/one-month-rails" target="_blank">One Month Rails</a></h3>\r\nTired of learning concepts and want to build something real? Are you short on spare time and want a quick win? This is an online course created by <a href="https://twitter.com/mattangriffel" target="_blank">Mattan Griffel</a> out of <a href="http://www.ycombinator.com/" target="_blank">YCombinator</a> that helps beginners learn the basics of Rails by spending 30 minutes a day for one month. This course is instant gratification for people that have been spinning their wheels with no traction. In this course you will build a rails app start to finish and covers features and concepts like MVC, user authorization, photo pins, Twitter Bootstrap, CSS/Sass, Git/Github, deploying to Heroku and more. You will basically rebuild a basic version of Pinterest from scratch. This is a great online course if you are just starting out and want a crash course with a quick win. There are also troubleshooting forums for each lesson for when you get stuck. Cost is $100 flat, but here\'s a <a href="http://onemonth.com/signup?discount_code=W9vPoG" target="_blank">25% off</a> link though if you are interested. It does not cover advanced topics like testing, caching, etc but it will get you jump started and excited. It\'s called <em>One Month Rails </em>but if you work fast, this class is more like one week rails.\r\n<h3>4. <a href="http://www.railstutorial.org/book" target="_blank">Michael Hartl RoR Tutorial</a></h3>\r\nDo you want to know what\'s behind the magic of Rails? Want to look under the hood and understand the how &amp; why behind each aspect of Rails? This is a great tutorial for beginners by <a href="http://www.michaelhartl.com/" target="_blank">Michael Hartl</a> for those who want all the dirty details and in-depth knowledge of Rails. This course has a multi-faceted, professional-level approach. It is designed for beginners, but be ready dive deep into Git, routes, MVC, deploying to Heroku, rolling your own user auth system, TDD, Model Testing, Integration Testing, sample data, and a lot more. The course demystifies a lot of the <em>magic</em> that happens in Rails. You will essentially rebuild Twitter from scratch. Depending on your free-time/dedication, this course should take roughly one month to go through, but it\'s worth it. Oh yeah, did I mention it\'s <a href="http://www.railstutorial.org/book" target="_blank">free</a>. But you may want to consider the screencasts for $149 if you want to move faster.\r\n<h3>5. <a href="http://railsforzombies.org/" target="_blank">Rails for Zombies</a></h3>\r\nDon\'t care to go through the install process and deal with error messages, just to get your feet wet? What if you could code right in the browser? This is a fun &amp; compelling online course by <a href="https://www.codeschool.com/" target="_blank">Code School</a> that will help you wrap your brain around the programming concepts, conventions, structure and syntax of Ruby and Ruby on Rails and eventually get you into the nitty gritty trenches where you want to be. In this course you can expect to do most of your coding right in the browser so you don\'t have to deal with installing Rails at the start and can focus on understanding Ruby/Rails programming concepts. The first course is free but as of writing this post, Code School enrollment is $30 a month. There are many useful rails courses you can take that follow this one.\r\n<h3>6. <a href="http://patmaddox.com/rubysteps/" target="_blank">Ruby Steps</a></h3>\r\nAs great as books and courses are, learning Rails is not always a linear process. As you may know by now, it is so easy to get stuck in Rails and it is important to see the framework from multiple angles to really gain a full understanding and get unstuck. This resource has a multi-discipline approach that focuses on daily practice of essential topics. <a href="http://patmaddox.com/" target="_blank">Pat Maddox</a> will send you 5 lessons per week covering Ruby, Rails, <a href="http://en.wikipedia.org/wiki/Test-driven_development" target="_blank">Test Driven Development (TDD)</a>, <a href="http://en.wikipedia.org/wiki/Object-oriented_programming" target="_blank">Object-Oriented Programming (OOP)</a>, and Refactoring. This is for the beginner or advanced Rails developer who wants to build up their professional programming chops to build amazing software. The mailing list is <a href="http://patmaddox.com/rubysteps/" target="_blank">free</a> to join.\r\n\r\n&nbsp;\r\n<h3>JFDI</h3>\r\nThere they are. Go get \'em tiger! You\'ve got no excuses now. You may even want to consider doing these in that order depending on your personality/preferences. I like this order because you can get familiar with rails, get it installed, build a quick win, build a not-so-quick win, learn good programming concepts and then with <a href="http://patmaddox.com/rubysteps/" target="_blank">Ruby Steps</a>, develop a daily discipline for yourself.', 'JFDI – 6 ways to learn Ruby on Rails', '', 'inherit', 'open', 'open', '', '88-revision-v1', '', '', '2014-08-07 10:33:52', '2014-08-07 15:33:52', '', 88, 'http://dev.dorails.com/88-revision-v1/', 0, 'revision', '', 0),
(96, 1, '2014-08-07 10:43:00', '2014-08-07 15:43:00', 'Want to learn Rails, but don\'t know where to start? Are you stuck before you even started? Everyone says that Rails is easy to learn, but where do you go and how easy is it? Well you have no excuse now, time\'s a-wastin\' here are 6 amazing resources for learning Rails that you\'ve gotta checkout. You could learn them in this order or start with the most interesting one.\n<h3>1. <a href="http://guides.rubyonrails.org/" target="_blank">Rails Guides</a></h3>\nTired of hearing about Rails from other? Want to get info straight from the source? You can\'t fail with the good ol\' Rails Guides put together by the Rails core team themselves. These online walk-throughs will take you through all the conventions of Rails. It covers installing, creating a new rails project, scaffolding, routes, MVC, database migrations, forms, Active Record, validations, callbacks, associations and a lot more! This path is for the DIY kind of person who wants to explore what Rails is capable of on their own, and this is a great way to become familiar with the language and concepts of Rails.\n<h3>2. <a href="http://installrails.com/" target="_blank">Install Rails</a></h3>\nWhen you get stuck in Rails you get <em>really</em> stuck. Have you gotten stuck before you even started? What if you could get a walkthrough on installing Rails? Well <a href="installrails.com" target="_blank">Install Rails</a> is an easy step-by-step guide to installing Rails on your computer. This covers installing on Windows, Mac &amp; Linux and has some great troubleshooting forums for each step if you get stuck along the way. This will carry you from install to creating your first shell rails app.\n<h3>3. <a href="https://onemonth.com/courses/one-month-rails" target="_blank">One Month Rails</a></h3>\nTired of learning concepts and want to build something real? Are you short on spare time and want a quick win? This is an online course created by <a href="https://twitter.com/mattangriffel" target="_blank">Mattan Griffel</a> out of <a href="http://www.ycombinator.com/" target="_blank">YCombinator</a> that helps beginners learn the basics of Rails by spending 30 minutes a day for one month. This course is instant gratification for people that have been spinning their wheels with no traction. In this course you will build a rails app start to finish and covers features and concepts like MVC, user authorization, photo pins, Twitter Bootstrap, CSS/Sass, Git/Github, deploying to Heroku and more. You will basically rebuild a basic version of Pinterest from scratch. This is a great online course if you are just starting out and want a crash course with a quick win. There are also troubleshooting forums for each lesson for when you get stuck. Cost is $100 flat, but here\'s a <a href="http://onemonth.com/signup?discount_code=W9vPoG" target="_blank">25% off</a> link though if you are interested. It does not cover advanced topics like testing, caching, etc but it will get you jump started and excited. It\'s called <em>One Month Rails </em>but if you work fast, this class is more like one week rails.\n<h3>4. <a href="http://www.railstutorial.org/book" target="_blank">Michael Hartl RoR Tutorial</a></h3>\nDo you want to know what\'s behind the magic of Rails? Want to look under the hood and understand the how &amp; why behind each aspect of Rails? This is a great tutorial for beginners by <a href="http://www.michaelhartl.com/" target="_blank">Michael Hartl</a> for those who want all the dirty details and in-depth knowledge of Rails. This course has a multi-faceted, professional-level approach. It is designed for beginners, but be ready dive deep into Git, routes, MVC, deploying to Heroku, rolling your own user auth system, TDD, Model Testing, Integration Testing, sample data, and a lot more. The course demystifies a lot of the <em>magic</em> that happens in Rails. You will essentially rebuild Twitter from scratch. Depending on your free-time/dedication, this course should take roughly one month to go through, but it\'s worth it. Oh yeah, did I mention it\'s <a href="http://www.railstutorial.org/book" target="_blank">free</a>. But you may want to consider the screencasts for $149 if you want to move faster.\n<h3>5. <a href="http://railsforzombies.org/" target="_blank">Rails for Zombies</a></h3>\nDon\'t care to go through the install process and deal with error messages, just to get your feet wet? What if you could code right in the browser? This is a fun &amp; compelling online course by <a href="https://www.codeschool.com/" target="_blank">Code School</a> that will help you wrap your brain around the programming concepts, conventions, structure and syntax of Ruby and Ruby on Rails and eventually get you into the nitty gritty trenches where you want to be. In this course you can expect to do most of your coding right in the browser so you don\'t have to deal with installing Rails at the start and can focus on understanding Ruby/Rails programming concepts. The first course is free but as of writing this post, Code School enrollment is $30 a month. There are many useful rails courses you can take that follow this one.\n<h3>6. <a href="http://patmaddox.com/rubysteps/" target="_blank">Ruby Steps</a></h3>\nAs great as books and courses are, learning Rails is not always a linear process. As you may know by now, it is so easy to get stuck in Rails and it is important to see the framework from multiple angles to really gain a full understanding and get unstuck. This resource has a multi-discipline approach that focuses on daily practice of essential topics. <a href="http://patmaddox.com/" target="_blank">Pat Maddox</a> will send you 5 lessons per week covering Ruby, Rails, <a href="http://en.wikipedia.org/wiki/Test-driven_development" target="_blank">Test Driven Development (TDD)</a>, <a href="http://en.wikipedia.org/wiki/Object-oriented_programming" target="_blank">Object-Oriented Programming (OOP)</a>, and Refactoring. This is for the beginner or advanced Rails developer who wants to build up their professional programming chops to build amazing software. The mailing list is <a href="http://patmaddox.com/rubysteps/" target="_blank">free</a> to join.\n<h3>JFDI</h3>\nThere they are. Go get \'em tiger! You\'ve got no excuses now. You may even want to consider doing these in that order depending on your personality/preferences. I like this order because you can get it installed, get familiar with Rails, build a quick win, build a not-so-quick win, learn good programming concepts/syntax and then with <a href="http://patmaddox.com/rubysteps/" target="_blank">Ruby Steps</a> develop a daily discipline for yourself. Don\'t waste any time, just look yourself in the mirror and say <a href="https://www.google.com/webhp?sourceid=chrome-instant&amp;ion=1&amp;espv=2&amp;ie=UTF-8#q=jfdi" target="_blank">jfdi</a>.', '6 ways to learn Ruby on Rails (JFDI)', '', 'inherit', 'open', 'open', '', '88-autosave-v1', '', '', '2014-08-07 10:43:00', '2014-08-07 15:43:00', '', 88, 'http://dev.dorails.com/88-autosave-v1/', 0, 'revision', '', 0),
(97, 1, '2014-08-07 10:43:42', '2014-08-07 15:43:42', 'Want to learn Rails, but don\'t know where to start? Are you stuck before you even started? Everyone says that Rails is easy to learn, but where do you go and how easy is it? Well you have no excuse now, time\'s a-wastin\'. Here are 6 amazing resources for learning Rails that you\'ve gotta checkout. You could learn them in this order or start with the most interesting one.\r\n<h3>1. <a href="http://installrails.com/" target="_blank">Install Rails</a></h3>\r\nWhen you get stuck in Rails you get <em>really</em> stuck. Have you gotten stuck before you even started? What if you could get a walkthrough on installing Rails? Well <a href="installrails.com" target="_blank">Install Rails</a> is an easy step-by-step guide to installing Rails on your computer. This covers installing on Windows, Mac &amp; Linux and has some great troubleshooting forums for each step if you get stuck along the way. This will carry you from install to creating your first shell rails app.\r\n<h3>2. <a href="http://guides.rubyonrails.org/" target="_blank">Rails Guides</a></h3>\r\nTired of hearing about Rails from other? Want to get info straight from the source? You can\'t fail with the good ol\' Rails Guides put together by the Rails core team themselves. These online walk-throughs will take you through all the conventions of Rails. It covers installing, creating a new rails project, scaffolding, routes, MVC, database migrations, forms, Active Record, validations, callbacks, associations and a lot more! This path is for the DIY kind of person who wants to explore what Rails is capable of on their own, and this is a great way to become familiar with the language and concepts of Rails.\r\n<h3>3. <a href="https://onemonth.com/courses/one-month-rails" target="_blank">One Month Rails</a></h3>\r\nTired of learning concepts and want to build something real? Are you short on spare time and want a quick win? This is an online course created by <a href="https://twitter.com/mattangriffel" target="_blank">Mattan Griffel</a> out of <a href="http://www.ycombinator.com/" target="_blank">YCombinator</a> that helps beginners learn the basics of Rails by spending 30 minutes a day for one month. This course is instant gratification for people that have been spinning their wheels with no traction. In this course you will build a rails app start to finish and covers features and concepts like MVC, user authorization, photo pins, Twitter Bootstrap, CSS/Sass, Git/Github, deploying to Heroku and more. You will basically rebuild a basic version of Pinterest from scratch. This is a great online course if you are just starting out and want a crash course with a quick win. There are also troubleshooting forums for each lesson for when you get stuck. Cost is $100 flat, but here\'s a <a href="http://onemonth.com/signup?discount_code=W9vPoG" target="_blank">25% off</a> link though if you are interested. It does not cover advanced topics like testing, caching, etc but it will get you jump started and excited. It\'s called <em>One Month Rails </em>but if you work fast, this class is more like one week rails.\r\n<h3>4. <a href="http://www.railstutorial.org/book" target="_blank">Michael Hartl RoR Tutorial</a></h3>\r\nDo you want to know what\'s behind the magic of Rails? Want to look under the hood and understand the how &amp; why behind each aspect of Rails? This is a great tutorial for beginners by <a href="http://www.michaelhartl.com/" target="_blank">Michael Hartl</a> for those who want all the dirty details and in-depth knowledge of Rails. This course has a multi-faceted, professional-level approach. It is designed for beginners, but be ready dive deep into Git, routes, MVC, deploying to Heroku, rolling your own user auth system, TDD, Model Testing, Integration Testing, sample data, and a lot more. The course demystifies a lot of the <em>magic</em> that happens in Rails. You will essentially rebuild Twitter from scratch. Depending on your free-time/dedication, this course should take roughly one month to go through, but it\'s worth it. Oh yeah, did I mention it\'s <a href="http://www.railstutorial.org/book" target="_blank">free</a>. But you may want to consider the screencasts for $149 if you want to move faster.\r\n<h3>5. <a href="http://railsforzombies.org/" target="_blank">Rails for Zombies</a></h3>\r\nDon\'t care to go through the install process and deal with error messages, just to get your feet wet? What if you could code right in the browser? This is a fun &amp; compelling online course by <a href="https://www.codeschool.com/" target="_blank">Code School</a> that will help you wrap your brain around the programming concepts, conventions, structure and syntax of Ruby and Ruby on Rails and eventually get you into the nitty gritty trenches where you want to be. In this course you can expect to do most of your coding right in the browser so you don\'t have to deal with installing Rails at the start and can focus on understanding Ruby/Rails programming concepts. The first course is free but as of writing this post, Code School enrollment is $30 a month. There are many useful rails courses you can take that follow this one.\r\n<h3>6. <a href="http://patmaddox.com/rubysteps/" target="_blank">Ruby Steps</a></h3>\r\nAs great as books and courses are, learning Rails is not always a linear process. As you may know by now, it is so easy to get stuck in Rails and it is important to see the framework from multiple angles to really gain a full understanding and get unstuck. This resource has a multi-discipline approach that focuses on daily practice of essential topics. <a href="http://patmaddox.com/" target="_blank">Pat Maddox</a> will send you 5 lessons per week covering Ruby, Rails, <a href="http://en.wikipedia.org/wiki/Test-driven_development" target="_blank">Test Driven Development (TDD)</a>, <a href="http://en.wikipedia.org/wiki/Object-oriented_programming" target="_blank">Object-Oriented Programming (OOP)</a>, and Refactoring. This is for the beginner or advanced Rails developer who wants to build up their professional programming chops to build amazing software. The mailing list is <a href="http://patmaddox.com/rubysteps/" target="_blank">free</a> to join.\r\n<h3>JFDI</h3>\r\nThere they are. Go get \'em tiger! You\'ve got no excuses now. You may even want to consider doing these in that order depending on your personality/preferences. I like this order because you can get it installed, get familiar with Rails, build a quick win, build a not-so-quick win, learn good programming concepts/syntax and then with <a href="http://patmaddox.com/rubysteps/" target="_blank">Ruby Steps</a> develop a daily discipline for yourself. Don\'t waste any time, just look yourself in the mirror and say <a href="https://www.google.com/webhp?sourceid=chrome-instant&amp;ion=1&amp;espv=2&amp;ie=UTF-8#q=jfdi" target="_blank">jfdi</a>.', '6 ways to learn Ruby on Rails (JFDI)', '', 'inherit', 'open', 'open', '', '88-revision-v1', '', '', '2014-08-07 10:43:42', '2014-08-07 15:43:42', '', 88, 'http://dev.dorails.com/88-revision-v1/', 0, 'revision', '', 0),
(98, 1, '2014-08-26 10:14:30', '2014-08-26 15:14:30', 'Unsure how to push your app live? Don\'t want to deal with days or weeks of configuring a server? Save the headache of dealing with your own server and get your app live in a matter of minutes with Heroku. Heroku does all the heavy lifting for you. Plus you can launch several apps for free up to a certain scale. Here\'s how you set it up and push your app live.\r\n\r\nAlso keep in mind, a lot of this stuff you will setup once and be done. This walk-through is assuming you have <a title="Get going with Git" href="http://dev.dorails.com/railsvitamins/get-going-with-git/">git installed</a>, and you have some form of a rails app to deploy.\r\n<h3>1. Create a Heroku Account</h3>\r\nFirst things first. Go to the <a href="http://heroku.com" target="_blank">Heroku</a> site and setup an account.\r\n<h3>2. Download Heroku Tool Belt</h3>\r\nNext go to <a href="https://toolbelt.heroku.com/" target="_blank">http://toolbelt.heroku.com</a> and download heroku\'s command-line tools. This will give you everything you need to work with Heroku in terminal.\r\n<h3>3. Login to Heroku</h3>\r\nTo login from the command-line, open up your command-line tool (terminal) and type:\r\n(Note: You will only need to do this once per computer)\r\n<pre>$ heroku login</pre>\r\nThen enter your username and your password.\r\n(Note: Your password will be invisible as you type)\r\n<pre>Email:  you@youremail.com\r\nPassword: # Your password\r\nCould not find an existing public key.\r\nWould you like generate one? [Yn] # Type Y\r\nGenerating new SSH public key.\r\nUploading ssh public key /Users/adam/.ssh/id_rsa.pub</pre>\r\n<h3>4. Create new Heroku URL</h3>\r\nThen we want to create our new app instance &amp; url in Heroku.\r\n<pre>$ cd /path/to/your/app/ # change directory to app you want to deploy\r\n$ git init # create local git repo if you haven\'t already\r\n$ heroku create\r\n</pre>\r\nAt this point you could login to your heroku account and browser and see that a new app has been created in your account by traveling to the "Apps" tab. When you enter <code>heroku create</code> Heroku creates a new url and git repo online for you and automatically adds a <i>Git Remote</i> to your current local git repo on your computer.\r\n\r\nYou can rename your Heroku url from <code>crazy-random-name.herokuapp.com</code> to <code>custom-name.herokuapp.com</code> by entering the command:\r\n<pre>$ heroku rename your-custom-name</pre>\r\n<h3>5. Add Gems &amp; Groups</h3>\r\nNow we want to add a couple gems just for Heroku. This is worth noting. Rails comes with the gem <code>sqlite</code> and works out of the box with that type of database, but Heroku prefers <code>postgres</code> databases. So we are going to paste <code>gem \'sqlite 3\'</code> from our Gemfile and add two groups for now. One group for your development and test environment on your local machine and another group for production environment on Heroku. So open your Gemfile, cut <code>gem \'sqlite 3\' and add the following groups:</code>\r\n<pre>...\r\ngroup :development, :test do\r\n   gem \'sqlite 3\'\r\nend\r\n\r\ngroup :production do\r\n   gem \'pg\'\r\n   gem \'rails_12factor\'\r\nend   \r\n...\r\n</pre>\r\nThen you always run <code>bundle install</code> in command-line after you add to your Gemfile\r\n<h3>6. Add / Commit</h3>\r\nThe last step before deploying is to precompile and then add/commit to our local Git repo before we push to Heroku\r\n<pre>$ rake assets:precompile # probably want to do this everytime you push latest commit to Heroku\r\n$ git add . # add all files\r\n$ git commit -am "Whatever latest changes"\r\n$ git push origin master # optional if you are already setup on Github\r\n$ git push heroku master\r\n</pre>\r\nThis may take a minute to let Heroku do it\'s thing. But once it\'s done, you should be live – Woohoo! The last command pushes your local Git repo to your Heroku remote repository, and specifies to go to the master branch.\r\n<h3>7. Open</h3>\r\nEnter <code>$ heroku open</code> to jump to your live app in a browser. You have pushed to the server but there is a chance you will see default Heroku error message right off the bat. Don\'t panic, it\'s normal.\r\n<h3>8. Migrate</h3>\r\nThere may be a bit of an anti-climax but if you see the default heroku error message screen you probably just need to migrate your database. To do this run this in command-line:\r\n<pre>$ heroku run rake db:migrate</pre>\r\nThis is a lot like migrating a database on your local machine but this command tells Heroku to to run <code>rake db:migrate</code> on your live app. Enter <code>$ heroku open</code> to make sure the error message is gone.\r\n\r\nOnce this is done, your wonderful creation should be on the web for the world to see. It\'s a good idea to do this early and often so you can catch any deployment problems before your app gets more and more complex.\r\n<h3>9. To Debug</h3>\r\nThis should get you up and running on Heroku quickly, but depending on your OS and the configuration of your Rials app you may run into problems. Not to worry though. Use this trusty terminal command to see what is causing the issue.\r\n<pre>$ heroku logs --tail</pre>\r\nIt seems scary at first but I like to make it easier by using <code>cmd+F</code> for Mac or <code>ctrl+F</code> for PC to search the for "error". That jumps me straight to what I want to see. Then you can simply Google the error message and go from there. It seems like half of programming is Googling.\r\n<h3>Huzzah! You\'re deployed.</h3>\r\nHope this helps, please feel free to email or comment in the comments below if you have any issues.', '9 steps for first-time deployment to Heroku', '', 'publish', 'open', 'open', '', '9-steps-for-first-time-deployment-to-heroku', '', '', '2014-08-26 10:48:46', '2014-08-26 15:48:46', '', 0, 'http://dev.dorails.com/?p=98', 0, 'post', '', 0),
(99, 1, '2014-08-08 14:35:30', '2014-08-08 19:35:30', 'P (crispy) - How to deploy your Rails app to Heroku in plain english.\r\n\r\nDeep pain?\r\n\r\nHave no clue how to deploy\r\n\r\n&nbsp;\r\n\r\nD - What if there wer\r\n\r\nF -\r\n\r\nAssumes <a title="Get going with Git" href="http://dev.dorails.com/get-going-with-git/">git is installed</a> and you have <a href="http://heroku.com">created a Heroku account</a>.\r\n\r\n&nbsp;\r\n<h3>Install Heroku Tools</h3>\r\n&nbsp;', 'How to deploy a local Git repo to Heroku', '', 'inherit', 'open', 'open', '', '98-revision-v1', '', '', '2014-08-08 14:35:30', '2014-08-08 19:35:30', '', 98, 'http://dev.dorails.com/98-revision-v1/', 0, 'revision', '', 0) ;
INSERT INTO `wp_posts` ( `ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(101, 1, '2014-08-08 16:30:46', '2014-08-08 21:30:46', 'P (crispy) - How to deploy your Rails app to Heroku for the first time\r\n\r\nP - Trying to deploy your Rails app for the first time. Have no clue how to deploy for the world to see?\r\n\r\nD - What if there wer\r\n\r\nF -\r\n\r\nAssumes <a title="Get going with Git" href="http://dev.dorails.com/get-going-with-git/">git is installed</a> and you have <a href="http://heroku.com">created a Heroku account</a>.\r\n\r\n&nbsp;\r\n<h3>Install Heroku Tools</h3>\r\n<h3>Setup SSH Keys</h3>\r\n<h3>Setup Remote</h3>\r\n<h3>Push Live</h3>\r\n<h3>Migrate</h3>\r\n&nbsp;\r\n\r\n&nbsp;', 'How to deploy your Rails app to Heroku in plain english.', '', 'inherit', 'open', 'open', '', '98-revision-v1', '', '', '2014-08-08 16:30:46', '2014-08-08 21:30:46', '', 98, 'http://dev.dorails.com/98-revision-v1/', 0, 'revision', '', 0),
(102, 1, '2014-08-08 16:36:12', '2014-08-08 21:36:12', 'I used to see web/software development as a lonely, anti-social and disorganized activity. It was incredibly difficult to collaborate and follow along with the progress of a project. Also it was a beat-down to transfer and backup projects to a place where I could always access them from anywhere. That was until I discovered <a href="https://github.com/" target="_blank">Github</a>.\r\n\r\nNow I push all my projects to an online repository. I see a real-time history of all my projects. I easily collaborate and contribute to other\'s projects, and get instant access to my source code whenever I need it. Github also serves as a social network of sorts for developers. In a glance others can see what I\'m working on and I can explore to see what my friends are working on. This is all part of the modern web/software developer\'s repertoire  (especially Rails), along with <a href="http://git-scm.com/" target="_blank">Git</a>.\r\n\r\nKeep in mind that Github and Git are related but different things. Git is a local version control tool for your projects, and Github is online hosting of your project source code.\r\n\r\nSo what\'s the best way to get started with Github? Follow these steps and you\'ll be rolling.\r\n<h3>1. Setup Git</h3>\r\nGit is required to be able to use Github, so if you haven\'t read my post <em><a title="Get going with Git" href="http://dev.dorails.com/get-going-with-git/">Get going with Git</a></em>, go there first and setup Git on your local computer.\r\n<h3>2. Make initial commit</h3>\r\nOnce you\'ve setup Git on your computer. Find an existing project that you want to put on Github or create a new folder for an upcoming project. Then open terminal and enter the following:\r\n<pre>$ cd /path/to/your/project/ # change to the directory of your project\r\n$ git init # create local repository\r\n$ git add . # add all files in the directory\r\n$ git commit -am "Initial Commit" # commit with a message</pre>\r\nYou now have a local repository with your new or existing project. How do we push this to Github? Continue on...\r\n<h3>3. Start Github account</h3>\r\nGo to <a href="http://github.com" target="_blank">github.com</a> and setup your account.\r\n<h3>4. Create SSH Keys</h3>\r\nFollow Github instructions <a href="https://help.github.com/articles/generating-ssh-keys" target="_blank">here</a>.\r\n<h3>5. Create a new repo</h3>\r\nOnce you are setup and logged in:\r\n<ul>\r\n	<li>Click on the <code>+</code> sign in the top right hand corner</li>\r\n	<li>Click <code>New repository</code> from the dropdown</li>\r\n	<li>Give repo a name like <code>my_project</code>, <code>my-project</code>, or <code>MyProject</code> (I like to pick a convention and stick with it).</li>\r\n	<li>Give your project a description</li>\r\n	<li>Choose <code>Public</code> or <code>Private</code>.\r\n<small>Stick with public right now unless you are doing a company/client project (they might not like you publishing their source code for the world to see). Public repos are free. Private repos will cost you a little. I use them myself though.</small></li>\r\n	<li>I usually leave the <code>Initialize this repo with a README</code> unchecked because Rails projects have these by default when you setup a rails project.</li>\r\n	<li>Then click the <code>Create Repository</code> Button</li>\r\n</ul>\r\n<h3>6. Push Local Git Repo to Github Repo</h3>\r\nAfter your Github repo is created you will see a screen with setup instructions. Skip down to the <code>Push an existing repository from the command line</code> section. Type the following into the command line on your local machine:\r\n<pre>git remote add origin git@github.com:MyAccount/my_project.git\r\ngit push -u origin master</pre>\r\nYou have now set your new Github repo as the origin "remote" repository (more on remotes later). And you have set the ability to push your <em>local</em> Git repo to your <em>remote</em> Github repo.\r\n<h3>7. Do the Git Jive</h3>\r\nNow you can work on your project, make changes, and do the Git dance.\r\n<ol>\r\n	<li>Work on stuff</li>\r\n	<li>\r\n<pre>$ git add .</pre>\r\n</li>\r\n	<li>\r\n<pre>$ git commit -am "Create Navbar"</pre>\r\n<small>Note: Best practice for commits is to write in present tense and keep it short</small></li>\r\n	<li>\r\n<pre>$ git push</pre>\r\n<small>Pushes to Github repo</small></li>\r\n	<li>Repeat</li>\r\n</ol>\r\n<h3>8. Bonus</h3>\r\nI was going to save this for another post, but it\'s too much fun. Now that your Github repo is setup for your project you can pull up your project from any computer in a jiffy (as long as it has Git setup on it). You can actually do this with anyone\'s public project on Github. This is called <em>cloning</em>, and it does just that. Just open the directory where you want to drop it on your local machine and clone the repo to download the project instantly. The quickest way to clone a project is to find the project repo on Github and copy the clone code on the righthand side here:\r\n\r\n<a href="http://dev.dorails.com/wp-content/uploads/2014/08/Git-Clone.jpg"><img class="aligncenter wp-image-80" src="http://dev.dorails.com/wp-content/uploads/2014/08/Git-Clone-300x183.jpg" alt="Git Clone" width="500" height="306" /></a>\r\n\r\nThen travel to the directory you want to drop it and type <code>$ git clone</code> and paste the clone text in like so:\r\n<pre>$ cd /path/to/new/project/destination/\r\n$ git clone git@github.com:MyAccount/my_project.git</pre>\r\nFeel free to dig around Github and find other amazing developers with fun projects and clone theirs too to dig through their code.\r\n\r\nThere are a thousand other more advanced techniques I will cover with Git/Github including branches, remotes and deploying your Rails app, but you can hit the ground running now. With this jump start you can keep your code in an online repo, share what you are working on with others, easily collaborate, and interact with other humans. Congrats you\'re now a <em>modern</em> developer living in the 21st century!', 'Hop on the Github bandwagon', '', 'inherit', 'open', 'open', '', '73-revision-v1', '', '', '2014-08-08 16:36:12', '2014-08-08 21:36:12', '', 73, 'http://dev.dorails.com/73-revision-v1/', 0, 'revision', '', 0),
(103, 1, '2014-08-08 17:05:48', '2014-08-08 22:05:48', 'P (crispy) - How to deploy your Rails app to Heroku for the first time\r\n\r\nP - Trying to deploy your Rails app for the first time. Have no clue how to deploy for the world to see?\r\n\r\nD - What if there wer\r\n\r\nF -\r\n\r\nAssumes <a title="Get going with Git" href="http://dev.dorails.com/get-going-with-git/">git is installed</a> and you have <a href="http://heroku.com">created a Heroku account</a>.\r\n<h3>1. Create a Heroku Account</h3>\r\nFirst things first. Go to the <a href="http://heroku.com" target="_blank">Heroku</a> site and setup an account.\r\n<h3>2. Download Heroku Tool Belt</h3>\r\nNext go to <a href="https://toolbelt.heroku.com/" target="_blank">http://toolbelt.heroku.com</a> and download heroku\'s command-line tools. This will give you everything you need to work with Heroku in terminal.\r\n<h3>3. Login to Heroku</h3>\r\nTo login from the command-line, open up your command-line tool (terminal) and type:\r\n(Note: You will only need to do this once per computer)\r\n<pre>$ heroku login</pre>\r\nThen enter your username and your password.\r\n(Note: Your password will be invisible as you type)\r\n<pre>Email:  you@youremail.com</pre>\r\n<pre>Password: (will not be seen)</pre>\r\n<h3>4. Setup Heroku SSH Keys</h3>\r\nWith the command-line still open we will add SSH keys by typing:\r\n<pre>$ heroku add:keys</pre>\r\n(Note: You will only need to do this once per computer)\r\n<h3>5. Create new URL</h3>\r\nThen we want to create our new app instance &amp; url in Heroku.\r\n<pre>$ heroku create</pre>\r\nAt this point you could login to your heroku account and browser and see that a new app has been created in your account by traveling to the "Apps" tab.\r\n<h3>5. Add Gems &amp; Groups</h3>\r\nNow we want add a couple gems just for Heroku\r\n<h3>6. Add / Commit / Push</h3>\r\n<h3>7. Push to Heroku</h3>\r\n<h3>8. Migrate</h3>\r\nif you ha\r\n<h3>9. Open</h3>\r\n<h3>10. To Debug</h3>\r\n<pre style="color: #4d4d4d;"><code class="prettyprint lang-scm prettyprinted" style="color: inherit;"><span class="pln" style="color: #000000;">heroku logs </span><span class="pun" style="color: #666600;">--</span><span class="pln" style="color: #000000;">tail </span></code></pre>\r\n&nbsp;', 'How to deploy your Rails app to Heroku in plain english.', '', 'inherit', 'open', 'open', '', '98-revision-v1', '', '', '2014-08-08 17:05:48', '2014-08-08 22:05:48', '', 98, 'http://dev.dorails.com/98-revision-v1/', 0, 'revision', '', 0),
(105, 1, '2014-08-22 09:48:24', '2014-08-22 14:48:24', 'You’re halfway through your third Ruby on Rails book and you feel like you\'ve hit a wall. It’s 1 o’clock in the morning and your shoulders are feeling heavy. You\'re ready to quit for the night, but for months you\'ve kept telling yourself:\r\n<h3>“If I just finish this last Rails course, <strong>then</strong> I\'ll be ready to start building my Rails app”.</h3>\r\nYou decide to power through and do yet another Ruby exercise on lambda’s and hashes. An hour later, your eyes are glazed over with confusion and exhaustion.\r\n<h4>You feel more like a transcriptionist <em>monkey</em> than a developer.</h4>\r\nYou now have <em>one more</em> refactoring technique swirling around in your brain with no way to use it. You’re officially fried.\r\n\r\nThat’s when you see the next section has an <em>example</em>. "Woohoo!” You can actually <strong>apply</strong> your knowledge!\r\n<h4>But right off the bat you get stuck with another<em> lovely</em> error message.</h4>\r\nUgggh! After an hour and a half of putzing around to get past that, you slam your laptop shut. Now your eyes are wide open and bloodshot. You’re face is turning red. You throw the book across the room into the trash can. Kobe! With teeth clenched you say to yourself,\r\n<h3>"It should <em>not</em> be <strong>THIS</strong> hard!”</h3>\r\nEveryone told you that Rails was <em>easy</em>. But you’ve learned nothing. You’ve accomplished nothing. At this rate you will <strong>never</strong> get your app built.\r\n\r\nYou’re mind is racing as you lay in bed. You’re flailing to find <em>some</em> way to make this work.\r\n<h4>“If I would’ve got that Computer Science degree, I could do this…”</h4>\r\n<h4>“I should\'ve picked the right Rails courses, then I wouldn’t have wasted the last 9 months”</h4>\r\n<h4>"If I wasn’t forced to learn so many concepts at once...”</h4>\r\nOn and on.\r\n\r\nAt this point so many concepts have been thrown at you, but you have <strong>no clue</strong> about how to put them all together.\r\n<h4>You understand HTML &amp; CSS but this is a different monster.</h4>\r\nWhat the hell is MVC? Should you tackle front-end styling first? or back-end database stuff? Should you learn Ruby first before Rails? How do you configure a server for Rails? You can feel your dream slowly being crushed by the load.\r\n\r\nYou click off the light and close your eyes. Now you feel like your sinking into the bed.\r\n<h4>This is not your fault.</h4>\r\nThe learning curve is just too steep. The resources out there are too advanced. Maybe apps are not your thing. Maybe you should just stick to what you know best. You could just go back to making plain \'ol websites and forget all about building apps. So much time and effort would be wasted if you quit now, but maybe it would be best to cut your losses. As dawn breaks, you drift off to sleep.\r\n<h3>But what would it be like if you <em><strong>could</strong></em> build a finished Rails app?</h3>\r\nWhat if you could get it done and live in a matter of <em>days</em>. Seriously, I know it sounds crazy. Imagine there\'s no learning curve. Just you and the code. Doing and learning all at once.\r\n\r\nYou could finally understand the big picture of how it all works together. If you had a clear plan, you could learn each part of Rails in exactly the right order. You could even cut through error messages like they were butter. What if nothing stood in the way of you learning Rails and getting your app shipped?\r\n<h3>Then the dream of building and launching your Rails app could finally come true.</h3>\r\nBut contrary to the hype, Ruby on Rails does have a crazy difficult learning curve. Rails apps take months and months to build.\r\n<h4>What it took me years to figure out:</h4>\r\nLearning Rails <em>doesn\'t</em> have to be <strong>this</strong> hard. You don’t have to have a CS degree. You don’t have to understand every detail about the Ruby language to build a Rails app. Learn by doing! The best way to learn Ruby on Rails more many is to actually build a Rails app one piece at a time. It’s all about stacking up quick wins that work toward the goal of getting a Rails app finished.\r\n<h4>Don\'t learned the hard way</h4>\r\nIt took me a <em>long time</em> to wrap my head around Rails. Let me give you a shortcut so you can save a lot of heartache. If you have a fast track, you will save months (or in my case - years) of wasted time. Not to mention you would avoid a ton of unnecessary pain and heartache.\r\n<h3>With my <em>30-Day Rails</em> course you will build and deploy a live Rails app in 30 days.</h3>\r\nBypass the learning curve altogether! I will walk you through how to build a web app from start to finish. And you will grow all the skills you need to make your own apps moving forward. In four weeks you’ll get experience with all the tools, concepts and skills that you need to – plan, design, develop and (most importantly) ship a web app.\r\n<h4>Learn by doing</h4>\r\nYou will learn <strong>your</strong> way – by <strong>doing</strong>. After all, you decided to learn Rails so you could <em>build</em> an app – so why not learn by <strong>actually building</strong> <strong>one</strong>?\r\n<h4 style="text-align: left;">By following the method of building <strong>AND</strong> learning at the same time you will...</h4>\r\n<ul>\r\n	<li>Understand the big picture <strong>faster</strong></li>\r\n	<li>Pick up complex skills and concepts <strong>faster</strong></li>\r\n	<li>Avoid getting paralyzed by the tiny details</li>\r\n	<li>Avoid the pain of wasting months studying in-depth concepts</li>\r\n	<li>Punch perfectionism <em>in the face</em></li>\r\n</ul>\r\nInstead of spinning your wheels on learning <em>abstract </em>one-off concepts, <em>30-Day Rails</em> will give you:\r\n<h4>a clear <strong>day-by-day plan</strong> for how to build a robust Rails app from <strong>start to finish</strong>.</h4>\r\nEach lesson will include bite-sized video screencasts that will walk you through <strong>exactly</strong> what to do, in plain english. <em>30-Day Rails</em> gives you a solid path of <em>exactly</em> what to learn in <em>exactly</em> the right order. You will quickly move step by step through the process and pick up skills in each lesson until you have a completed (live) web app and the skills you need to dive into even more advanced material.\r\n<h4>As you move through each lesson, you will get a solid foundation of the key concepts and get <strong>first-hand experience</strong> on how they all work <em><strong>together</strong></em>.</h4>\r\nAnd no dull copy/pasting is necessary, you will write code yourself and learn the what, why and how as you go. Plus, everything is based on Rails 4 so you’ll have the latest and greatest training for Rails.\r\n<h4 style="text-align: left;"><em>30-Day Rails</em> will <strong>jump-start</strong> your understanding of key elements like:</h4>\r\n<div class="row">\r\n<ul class="col-md-6">\r\n	<li>Ruby</li>\r\n	<li>Gems</li>\r\n	<li>Ruby on Rails Framework</li>\r\n	<li>Command Line (Terminal)</li>\r\n	<li>MVC pattern (Model View Controller)</li>\r\n	<li>Object-Oriented Programming</li>\r\n	<li>Active Record</li>\r\n	<li>Databases</li>\r\n	<li>HTML &amp; ERB</li>\r\n	<li>CSS and Sass</li>\r\n	<li>Javascript and CoffeeScript</li>\r\n</ul>\r\n<ul class="col-md-6">\r\n	<li>Front-end Frameworks</li>\r\n	<li>Deployment</li>\r\n	<li>Version Control</li>\r\n	<li>Validation</li>\r\n	<li>User Authentication</li>\r\n	<li>UI Design</li>\r\n	<li>UX Design</li>\r\n	<li>Project Management</li>\r\n	<li>and more...</li>\r\n</ul>\r\n</div>\r\n<h3>You can’t build an app without the right tools</h3>\r\nSo you will get hands-on experience with all of the standard tools like the command-line (Terminal), a text editor (like <em>Sublime</em> Text), <em>Git</em>, <em>Github</em>, <em>Heroku</em>, <em>Twitter Bootstrap</em>, <em>Devise</em>, and more. You will learn the ins-and-outs of all the tools you <em>gotta have</em> in your Rails toolbelt.\r\n<h4>With <em>30-Day Rails</em> you will learn <strong>exactly</strong> how to do things like ...</h4>\r\n<ul>\r\n	<li>use the command-line to create a new blank-slate app</li>\r\n	<li>use a single command to create a rails server on your computer</li>\r\n	<li>use <em>Git</em> to manage your source code and push it to an online repo at <em>Github</em></li>\r\n	<li>use the command-line to generate the pages and elements of your app on the fly</li>\r\n	<li>use the command-line to manage your database</li>\r\n	<li>use the command-line to push your app to a live server on <em>Heroku</em></li>\r\n	<li>use <em>Twitter Bootstrap</em> to rapidly style your app - with <strong>no</strong> design experience needed.</li>\r\n	<li>use the <em>Devise</em> gem to create user sign-up and sign-in in a matter of minutes.</li>\r\n	<li>and a lot more</li>\r\n</ul>\r\n<h3>Learn to deal with <strong>error messages</strong>.</h3>\r\nThe<em> 30-Day Rails </em>course will teach you how to <strong>eliminate</strong> "getting stuck" forever. You’ll get <strong>real-world experience</strong> troubleshooting error messages for yourself <em>quickly</em> so you never have to slam on the breaks again. You will master the art of ...\r\n<ul>\r\n	<li>Reading error messages to get clues about what part of your app needs fixing</li>\r\n	<li>Googling and searching online dev communities to get past any error <em>in minutes</em></li>\r\n	<li>checking <em>Rails</em> and <em>Heroku</em> error logs using your trusty command line</li>\r\n</ul>\r\n<h3>By the time you finish <em>30-Day Rails</em> you will have...</h3>\r\n<ul>\r\n	<li>seen how to make a solid plan you can follow</li>\r\n	<li>created all the key features needed for the app</li>\r\n	<li>sketched &amp; styled a beautiful UI on the front-end of the app</li>\r\n	<li>created a solid database back-end for the app</li>\r\n	<li>implemented a user authentication system for users to sign in and sign out</li>\r\n	<li>deployed your app to a live server</li>\r\n	<li>grown a slew of foundational web development skills in the process</li>\r\n</ul>\r\n<h3>You can <em>finally</em> get the <strong>traction</strong> you need</h3>\r\nWhen you complete <em>30-Day Rails</em> you’ll feel confident that you can build apps from start to finish on your own. You’ll be totally certain that you can get past any error or issue. Your excitement won’t diminish because you’ll have a solid plan that moves you to progress. You will be relieved that you don’t have to spend thousands of dollars and months of time to learn Rails. And you can finally feel in control because you will understand what each line of code does.\r\n<h3>So, fast forward 30 days and you have finished with <em>30-Day Rails</em>. <strong>Now what?</strong></h3>\r\nBack to the obscure world of not knowing what’s next? <strong><em>No way</em>.</strong> When you complete the lessons you will definitely want to transition into building your own app idea. So <em>30-Day Rails</em> includes outro lessons that will walk you through how to <strong>create your own plan</strong> for <em>your</em> app. This will leave you with a solid action plan that you can follow from start to finish. If you have unique issues or you need a push in the right direction, I also offer <a href="mailto:me@tyrichards.com">Rails coaching</a>. My goal is to see everyone who goes through <i>30-Day Rails</i> build and launch their own apps and build their business or career with great success and without burning out.\r\n<h2>Join other developers who learn by doing</h2>\r\nWith <i>30-Day Rails</i> you will build a <em>real</em> Rails app from start to finish and get all the skills you need to move forward and build your own app.\r\n\r\nLet my <em>30-Day Rails</em><em> </em>course take away the agony of learning Ruby on Rails.', '30-Day Rails', '', 'publish', 'closed', 'closed', '', '30dayrails', '', '', '2014-09-04 20:26:18', '2014-09-05 01:26:18', '', 0, 'http://dev.dorails.com/?page_id=105', 0, 'page', '', 0),
(106, 1, '2014-08-21 16:36:02', '2014-08-21 21:36:02', '<h1>Level out the learning curve of Ruby on Rails.</h1>\r\nWant to learn to make your own web app with Ruby on Rails? Maybe you’ve tried to learn Rails on your own, but how do you know where to start? Is the learning-curve impossibly steep? Everyone says that learning Rails is sooo easy, but you’ve been banging your head against the desk for months trying to figure it out. Are you drowning in a sea of error messages? As you know by now, they can wash your dream app down the drain and bring months of hard work to a screeching halt.\r\n\r\nDo you learn by doing? Are you tired of studying abstract programming concepts and syntax without actually applying them to a real app?\r\n\r\nHave you burned piles of money and time on books and courses to be left with absolutely nothing? A lot of Rails books &amp; courses take forever to get through and then leave you high and dry with no skills or finished product. Is your brain flat-lining because you are forced to digest too many confusing programming concepts at once? Even the books that say they are for beginners are mind-numbing. And with endless copy &amp; pasting, they end up reducing you to a transcriptionist monkey. You are left in a foggy blur and you don’t retain the material. Plus many of the resources are horribly out-of-date and almost never go picture-perfect like they are written.\r\n\r\nLet’s face it, you need progress to stay motivated and learn Rails. Progress is the fuel that keeps you going. So a lack of it can really beat you down. I know it has for me. Do you wish there was a better way to learn Rails, but fear that there isn’t? It shouldn’t be this difficult.\r\n\r\nPAIN+DREAM SEGUE\r\n\r\nYou are certain that you want to build your idea. You just aren’t sure that you can do it. Maybe it’s a lost cause. Perhaps you should save yourself the trouble and leave it alone.\r\n\r\nDREAM\r\n\r\nImagine you could make and launch your own Ruby on Rails app in a matter of days with little knowledge of coding. I know it sounds crazy, but seriously. What would it be like if Rails’ steep learning curve was suddenly flattened? If nothing stood in the way of you learning Rails and getting your app shipped?\r\n\r\nYou could keep your precious precious sanity, that’s for sure. You would know exactly where to start learning and what was next. And getting stuck with error messages would be a thing of the past. You could soar through building your Rails app and cut through error messages like they were butter.\r\n\r\nYou wouldn’t have to throw away thousands on a Computer Science degree or Code School. And you wouldn’t need to find yourself a technical co-founder or hire that expensive developer. And huzzah, you could push your app live for the world to enjoy, without a hitch.\r\n\r\nYou could finally make REAL traction and get ’er done. If you had a Rails fast track, you could save months (or in my case - years) of wasted time. Not to mention you could avoid a ton of unnecessary pain and heartache.\r\n\r\nThen the dream of making AND shipping your app could finally come true.\r\n\r\nIf Rails was a piece o’ cake to pick up you could just learn by doing. Really doing. You’d build a Rails app and easily absorb the concepts and details one by one as you move along. You’d know exactly what to learn and you would learn it all in exactly the right order. You could eat the elephant one concept at a time, even in the midst of a wall of tasks, languages and syntax. And you’d never wonder if you had up-to-date training.\r\n\r\nEven without being a "Computer Scientist", you’d feel confident as you made a big-picture plan for your new app, wrote code at each step, and understood exactly what each line of code did and why it was there. Hell, at this rate you would actually enjoy coding.\r\n\r\nBy quickly stacking up tiny victories with Rails you could move yourself closer and closer to the big win of building and shipping your app for the world to see. The bottom line is that if Rails was easy-breezy to learn you could make an app AND get solid skills that you can build on – all at once.\r\n\r\nFIX SEGUE:\r\n\r\nThat being said, it is true that Rails does have a crazy learning curve and a Rails app can take months and months to build. But there’s good news. You don’t have to follow that path.\r\n\r\nFIX:\r\n\r\nWith ___________ you can bypass the learning curve altogether and build a live Rails app in 30 days.\r\n\r\nYou will learn how to build a web app from start to finish, and master all the skills you need to make your own apps moving forward. In four weeks, you will become experienced with all of the tools, concepts and skills that you need to plan, design, develop and ship a web app.\r\n\r\nLEARN YOUR WAY\r\n\r\nWith ________ you will learn Rails by osmosis. You will learn your way – by doing. After all, you decided to learn Rails so you could build an app – so why not learn by building one? By following the method of building AND learning at the same time you will...\r\n\r\nUnderstand the big picture faster\r\nPick up complex skills and concepts faster\r\nAvoid getting paralyzed by the tiny details\r\nAvoid the pain of wasting weeks studying in-depth concepts\r\nPunch perfectionism in the face\r\nSTACK THE BRICKS\r\n\r\nInstead of spinning your wheels on learning abstract concepts, ______ will give you a clear day-by-day plan for how to build a robust Rails app from start to finish. Each lesson will include bite-sized walk-throughs, in plain english, that will show you exactly what to do. _______ gives you a solid path of exactly what to learn in exactly the right order. You will quickly move step by step through the process and pick up skills in each lesson until you have a completed (and live) web app.\r\n\r\nBUILD YOUR SKILLS\r\n\r\nAs you move through each lesson, you will get a solid foundation of the key concepts and get first-hand experience on how they all work together. And no dull copy/pasting is necessary, you will simply write code yourself and learn the what, why and how as you go. Plus, everything is based on Rails 4 so you’ll have the latest and greatest training for Rails.\r\n\r\n________ will jump-start your understanding of key elements like...\r\n\r\nRuby\r\nGems\r\nRuby on Rails Framework\r\nCommand Line (Terminal)\r\nMVC pattern (Model View Controller)\r\nObject-Oriented Programming\r\nActive Record\r\nDatabases\r\nHTML\r\nCSS and Sass\r\nJavascript and CoffeeScript\r\nFront-end Frameworks\r\nDeployment\r\nVersion Control\r\nValidation\r\nUser Authentication\r\nUI Design\r\nUX Design\r\nProject Management\r\nand more...\r\nGET EQUIPPED\r\n\r\nYou can’t build an app without the right tools though. So you will get hands-on experience with all of the standard tools like the command-line (Terminal), a text editor (like Sublime Text), Git, Github, Heroku, Twitter Bootstrap, Devise, and more. You will learn the ins-and-outs of all the tools you gotta have in your Rails toolbelt. With _________ you will learn exactly how to do things like ...\r\n\r\nuse the command-line to create a new blank-slate app\r\nuse a single command to create a rails server on your computer\r\nuse Git to manage your source code and push it to an online repo at Github\r\nuse the command-line to generate the pages and elements of your app on the fly\r\nuse the command-line to manage your database\r\nuse the command-line to push your app to a live server on Heroku\r\nuse Twitter Bootstrap to rapidly style your app - with no design experience needed.\r\nuse the Devise gem to create user sign-up and sign-in in a matter of minutes.\r\nand a lot more\r\nGET UNSTUCK\r\n\r\nBut no amount of skills and tools will wipe out the possibility of error messages. So with _______ you will learn how to eliminate "getting stuck" forever. You’ll get real-world experience troubleshooting error messages for yourself quickly so you never have to slam on the breaks again. You will master the art of ...\r\n\r\nReading error messages to get clues about what part of your app needs fixing\r\nGoogling and searching online dev communities to get past any error in minutes\r\nchecking Rails and Heroku error logs using your trusty command line\r\nGET RESULTS\r\n\r\nBy the time you finish ______ you will have...\r\n\r\nseen how to make a solid plan you can follow\r\ncreated all the key features needed for the app\r\nsketched &amp; styled a beautiful UI on the front-end of the app\r\ncreated a solid database back-end for the app\r\nimplemented a user authentication system for users to sign in and sign out\r\ndeployed your app to a live server\r\ngrown a slew of foundational web development skills in the process\r\nGET TRACTION\r\n\r\nWhether you are short on time, cash or have no formal education in programming, you will learn how to move the needle no matter what the circumstances. You will learn to make a production plan for yourself that keeps you moving forward. You will experience what it’s like to go from start to finish with a Rails app.\r\n\r\nFEELINGS\r\n\r\nWhen you complete _________ you’ll feel confident that you can build apps from start to finish on your own. You’ll be totally certain that you can get past any error or issue. Your excitement won’t diminish because you’ll have a solid plan moves you to progress. You will be relieved that you don’t have to spend thousands of dollars and months of time to learn Rails. And you can finally feel in control because you will understand what each line of code does.\r\n\r\nWHAT’S NEXT?\r\n\r\nSo, fast forward 30 days and you are finished with _____. Now what? Back to the obscure world of not knowing what’s next? No way. When you complete the lessons you will definitely want to transition into building your own app idea. So ______ includes outro lessons that will walk you through how to create your own plan for your app. This will leave you with a solid action plan that you can follow from start to finish. If you have unique issues or you need a push in the right direction, I also offer Rails coaching. My goal is to see everyone who goes through ________ build and launch their app with great success and without stalling out on an issue.\r\n\r\nJoin other students who learn by doing\r\n\r\nWith ____________ you will build a real Rails app from start to finish and get all the skills you need to move forward and build your own app.\r\n\r\nLet ________ take away the agony of learning Ruby on Rails.\r\n\r\nFind out the latest on when ______ will be available by signing up below.', 'Do Rails', '', 'inherit', 'open', 'open', '', '105-revision-v1', '', '', '2014-08-21 16:36:02', '2014-08-21 21:36:02', '', 105, 'http://dev.dorails.com/105-revision-v1/', 0, 'revision', '', 0),
(107, 1, '2014-08-21 16:36:52', '2014-08-21 21:36:52', '<h2>Flatten the learning curve of Ruby on Rails</h2>\r\nWant to learn to make your own web app with Ruby on Rails? Maybe you’ve tried to learn Rails on your own, but how do you know where to start? Is the learning-curve impossibly steep? Everyone says that learning Rails is sooo easy, but you’ve been banging your head against the desk for months trying to figure it out. Are you drowning in a sea of error messages? As you know by now, they can wash your dream app down the drain and bring months of hard work to a screeching halt.\r\n\r\nDo you learn by doing? Are you tired of studying abstract programming concepts and syntax without actually applying them to a real app?\r\n\r\nHave you burned piles of money and time on books and courses to be left with absolutely nothing? A lot of Rails books &amp; courses take forever to get through and then leave you high and dry with no skills or finished product. Is your brain flat-lining because you are forced to digest too many confusing programming concepts at once? Even the books that say they are for beginners are mind-numbing. And with endless copy &amp; pasting, they end up reducing you to a transcriptionist monkey. You are left in a foggy blur and you don’t retain the material. Plus many of the resources are horribly out-of-date and almost never go picture-perfect like they are written.\r\n\r\nLet’s face it, you need progress to stay motivated and learn Rails. Progress is the fuel that keeps you going. So a lack of it can really beat you down. I know it has for me. Do you wish there was a better way to learn Rails, but fear that there isn’t? It shouldn’t be this difficult.\r\n\r\nPAIN+DREAM SEGUE\r\n\r\nYou are certain that you want to build your idea. You just aren’t sure that you can do it. Maybe it’s a lost cause. Perhaps you should save yourself the trouble and leave it alone.\r\n\r\nDREAM\r\n\r\nImagine you could make and launch your own Ruby on Rails app in a matter of days with little knowledge of coding. I know it sounds crazy, but seriously. What would it be like if Rails’ steep learning curve was suddenly flattened? If nothing stood in the way of you learning Rails and getting your app shipped?\r\n\r\nYou could keep your precious precious sanity, that’s for sure. You would know exactly where to start learning and what was next. And getting stuck with error messages would be a thing of the past. You could soar through building your Rails app and cut through error messages like they were butter.\r\n\r\nYou wouldn’t have to throw away thousands on a Computer Science degree or Code School. And you wouldn’t need to find yourself a technical co-founder or hire that expensive developer. And huzzah, you could push your app live for the world to enjoy, without a hitch.\r\n\r\nYou could finally make REAL traction and get ’er done. If you had a Rails fast track, you could save months (or in my case - years) of wasted time. Not to mention you could avoid a ton of unnecessary pain and heartache.\r\n\r\nThen the dream of making AND shipping your app could finally come true.\r\n\r\nIf Rails was a piece o’ cake to pick up you could just learn by doing. Really doing. You’d build a Rails app and easily absorb the concepts and details one by one as you move along. You’d know exactly what to learn and you would learn it all in exactly the right order. You could eat the elephant one concept at a time, even in the midst of a wall of tasks, languages and syntax. And you’d never wonder if you had up-to-date training.\r\n\r\nEven without being a "Computer Scientist", you’d feel confident as you made a big-picture plan for your new app, wrote code at each step, and understood exactly what each line of code did and why it was there. Hell, at this rate you would actually enjoy coding.\r\n\r\nBy quickly stacking up tiny victories with Rails you could move yourself closer and closer to the big win of building and shipping your app for the world to see. The bottom line is that if Rails was easy-breezy to learn you could make an app AND get solid skills that you can build on – all at once.\r\n\r\nFIX SEGUE:\r\n\r\nThat being said, it is true that Rails does have a crazy learning curve and a Rails app can take months and months to build. But there’s good news. You don’t have to follow that path.\r\n\r\nFIX:\r\n\r\nWith ___________ you can bypass the learning curve altogether and build a live Rails app in 30 days.\r\n\r\nYou will learn how to build a web app from start to finish, and master all the skills you need to make your own apps moving forward. In four weeks, you will become experienced with all of the tools, concepts and skills that you need to plan, design, develop and ship a web app.\r\n\r\nLEARN YOUR WAY\r\n\r\nWith ________ you will learn Rails by osmosis. You will learn your way – by doing. After all, you decided to learn Rails so you could build an app – so why not learn by building one? By following the method of building AND learning at the same time you will...\r\n\r\nUnderstand the big picture faster\r\nPick up complex skills and concepts faster\r\nAvoid getting paralyzed by the tiny details\r\nAvoid the pain of wasting weeks studying in-depth concepts\r\nPunch perfectionism in the face\r\nSTACK THE BRICKS\r\n\r\nInstead of spinning your wheels on learning abstract concepts, ______ will give you a clear day-by-day plan for how to build a robust Rails app from start to finish. Each lesson will include bite-sized walk-throughs, in plain english, that will show you exactly what to do. _______ gives you a solid path of exactly what to learn in exactly the right order. You will quickly move step by step through the process and pick up skills in each lesson until you have a completed (and live) web app.\r\n\r\nBUILD YOUR SKILLS\r\n\r\nAs you move through each lesson, you will get a solid foundation of the key concepts and get first-hand experience on how they all work together. And no dull copy/pasting is necessary, you will simply write code yourself and learn the what, why and how as you go. Plus, everything is based on Rails 4 so you’ll have the latest and greatest training for Rails.\r\n\r\n________ will jump-start your understanding of key elements like...\r\n\r\nRuby\r\nGems\r\nRuby on Rails Framework\r\nCommand Line (Terminal)\r\nMVC pattern (Model View Controller)\r\nObject-Oriented Programming\r\nActive Record\r\nDatabases\r\nHTML\r\nCSS and Sass\r\nJavascript and CoffeeScript\r\nFront-end Frameworks\r\nDeployment\r\nVersion Control\r\nValidation\r\nUser Authentication\r\nUI Design\r\nUX Design\r\nProject Management\r\nand more...\r\nGET EQUIPPED\r\n\r\nYou can’t build an app without the right tools though. So you will get hands-on experience with all of the standard tools like the command-line (Terminal), a text editor (like Sublime Text), Git, Github, Heroku, Twitter Bootstrap, Devise, and more. You will learn the ins-and-outs of all the tools you gotta have in your Rails toolbelt. With _________ you will learn exactly how to do things like ...\r\n\r\nuse the command-line to create a new blank-slate app\r\nuse a single command to create a rails server on your computer\r\nuse Git to manage your source code and push it to an online repo at Github\r\nuse the command-line to generate the pages and elements of your app on the fly\r\nuse the command-line to manage your database\r\nuse the command-line to push your app to a live server on Heroku\r\nuse Twitter Bootstrap to rapidly style your app - with no design experience needed.\r\nuse the Devise gem to create user sign-up and sign-in in a matter of minutes.\r\nand a lot more\r\nGET UNSTUCK\r\n\r\nBut no amount of skills and tools will wipe out the possibility of error messages. So with _______ you will learn how to eliminate "getting stuck" forever. You’ll get real-world experience troubleshooting error messages for yourself quickly so you never have to slam on the breaks again. You will master the art of ...\r\n\r\nReading error messages to get clues about what part of your app needs fixing\r\nGoogling and searching online dev communities to get past any error in minutes\r\nchecking Rails and Heroku error logs using your trusty command line\r\nGET RESULTS\r\n\r\nBy the time you finish ______ you will have...\r\n\r\nseen how to make a solid plan you can follow\r\ncreated all the key features needed for the app\r\nsketched &amp; styled a beautiful UI on the front-end of the app\r\ncreated a solid database back-end for the app\r\nimplemented a user authentication system for users to sign in and sign out\r\ndeployed your app to a live server\r\ngrown a slew of foundational web development skills in the process\r\nGET TRACTION\r\n\r\nWhether you are short on time, cash or have no formal education in programming, you will learn how to move the needle no matter what the circumstances. You will learn to make a production plan for yourself that keeps you moving forward. You will experience what it’s like to go from start to finish with a Rails app.\r\n\r\nFEELINGS\r\n\r\nWhen you complete _________ you’ll feel confident that you can build apps from start to finish on your own. You’ll be totally certain that you can get past any error or issue. Your excitement won’t diminish because you’ll have a solid plan moves you to progress. You will be relieved that you don’t have to spend thousands of dollars and months of time to learn Rails. And you can finally feel in control because you will understand what each line of code does.\r\n\r\nWHAT’S NEXT?\r\n\r\nSo, fast forward 30 days and you are finished with _____. Now what? Back to the obscure world of not knowing what’s next? No way. When you complete the lessons you will definitely want to transition into building your own app idea. So ______ includes outro lessons that will walk you through how to create your own plan for your app. This will leave you with a solid action plan that you can follow from start to finish. If you have unique issues or you need a push in the right direction, I also offer Rails coaching. My goal is to see everyone who goes through ________ build and launch their app with great success and without stalling out on an issue.\r\n\r\nJoin other students who learn by doing\r\n\r\nWith ____________ you will build a real Rails app from start to finish and get all the skills you need to move forward and build your own app.\r\n\r\nLet ________ take away the agony of learning Ruby on Rails.\r\n\r\nFind out the latest on when ______ will be available by signing up below.', 'Do Rails', '', 'inherit', 'open', 'open', '', '105-revision-v1', '', '', '2014-08-21 16:36:52', '2014-08-21 21:36:52', '', 105, 'http://dev.dorails.com/105-revision-v1/', 0, 'revision', '', 0) ;
INSERT INTO `wp_posts` ( `ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(108, 1, '2014-08-22 09:21:28', '2014-08-22 14:21:28', '<h2>Flatten the learning curve of Ruby on Rails</h2>\r\nWant to learn to make your own web app with Ruby on Rails? Maybe you’ve tried to learn Rails on your own, but how do you know where to start? Is the learning-curve impossibly steep? Everyone says that learning Rails is sooo easy, but you’ve been banging your head against the desk for months trying to figure it out. Are you drowning in a sea of error messages? As you know by now, they can wash your dream app down the drain and bring months of hard work to a screeching halt.\r\n\r\nDo you learn by doing? Are you tired of studying abstract programming concepts and syntax without actually applying them to a real app?\r\n\r\nHave you burned piles of money and time on books and courses to be left with absolutely nothing? A lot of Rails books &amp; courses take forever to get through and then leave you high and dry with no skills or finished product. Is your brain flat-lining because you are forced to digest too many confusing programming concepts at once? Even the books that say they are for beginners are mind-numbing. And with endless copy &amp; pasting, they end up reducing you to a transcriptionist monkey. You are left in a foggy blur and you don’t retain the material. Plus many of the resources are horribly out-of-date and almost never go picture-perfect like they are written.\r\n\r\nLet’s face it, you need progress to stay motivated and learn Rails. Progress is the fuel that keeps you going. So a lack of it can really beat you down. I know it has for me. Do you wish there was a better way to learn Rails, but fear that there isn’t? It shouldn’t be this difficult.\r\n\r\nPAIN+DREAM SEGUE\r\n\r\nYou are certain that you want to build your idea. You just aren’t sure that you can do it. Maybe it’s a lost cause. Perhaps you should save yourself the trouble and leave it alone.\r\n\r\nDREAM\r\n\r\nImagine you could make and launch your own Ruby on Rails app in a matter of days with little knowledge of coding. I know it sounds crazy, but seriously. What would it be like if Rails’ steep learning curve was suddenly flattened? If nothing stood in the way of you learning Rails and getting your app shipped?\r\n\r\nYou could keep your precious precious sanity, that’s for sure. You would know exactly where to start learning and what was next. And getting stuck with error messages would be a thing of the past. You could soar through building your Rails app and cut through error messages like they were butter.\r\n\r\nYou wouldn’t have to throw away thousands on a Computer Science degree or Code School. And you wouldn’t need to find yourself a technical co-founder or hire that expensive developer. And huzzah, you could push your app live for the world to enjoy, without a hitch.\r\n\r\nYou could finally make REAL traction and get ’er done. If you had a Rails fast track, you could save months (or in my case - years) of wasted time. Not to mention you could avoid a ton of unnecessary pain and heartache.\r\n\r\nThen the dream of making AND shipping your app could finally come true.\r\n\r\nIf Rails was a piece o’ cake to pick up you could just learn by doing. Really doing. You’d build a Rails app and easily absorb the concepts and details one by one as you move along. You’d know exactly what to learn and you would learn it all in exactly the right order. You could eat the elephant one concept at a time, even in the midst of a wall of tasks, languages and syntax. And you’d never wonder if you had up-to-date training.\r\n\r\nEven without being a "Computer Scientist", you’d feel confident as you made a big-picture plan for your new app, wrote code at each step, and understood exactly what each line of code did and why it was there. Hell, at this rate you would actually enjoy coding.\r\n\r\nBy quickly stacking up tiny victories with Rails you could move yourself closer and closer to the big win of building and shipping your app for the world to see. The bottom line is that if Rails was easy-breezy to learn you could make an app AND get solid skills that you can build on – all at once.\r\n\r\nFIX SEGUE:\r\n\r\nThat being said, it is true that Rails does have a crazy learning curve and a Rails app can take months and months to build. But there’s good news. You don’t have to follow that path.\r\n\r\nFIX:\r\n\r\nWith ___________ you can bypass the learning curve altogether and build a live Rails app in 30 days.\r\n\r\nYou will learn how to build a web app from start to finish, and master all the skills you need to make your own apps moving forward. In four weeks, you will become experienced with all of the tools, concepts and skills that you need to plan, design, develop and ship a web app.\r\n\r\nLEARN YOUR WAY\r\n\r\nWith ________ you will learn Rails by osmosis. You will learn your way – by doing. After all, you decided to learn Rails so you could build an app – so why not learn by building one? By following the method of building AND learning at the same time you will...\r\n\r\nUnderstand the big picture faster\r\nPick up complex skills and concepts faster\r\nAvoid getting paralyzed by the tiny details\r\nAvoid the pain of wasting weeks studying in-depth concepts\r\nPunch perfectionism in the face\r\nSTACK THE BRICKS\r\n\r\nInstead of spinning your wheels on learning abstract concepts, ______ will give you a clear day-by-day plan for how to build a robust Rails app from start to finish. Each lesson will include bite-sized walk-throughs, in plain english, that will show you exactly what to do. _______ gives you a solid path of exactly what to learn in exactly the right order. You will quickly move step by step through the process and pick up skills in each lesson until you have a completed (and live) web app.\r\n\r\nBUILD YOUR SKILLS\r\n\r\nAs you move through each lesson, you will get a solid foundation of the key concepts and get first-hand experience on how they all work together. And no dull copy/pasting is necessary, you will simply write code yourself and learn the what, why and how as you go. Plus, everything is based on Rails 4 so you’ll have the latest and greatest training for Rails.\r\n\r\n________ will jump-start your understanding of key elements like...\r\n\r\nRuby\r\nGems\r\nRuby on Rails Framework\r\nCommand Line (Terminal)\r\nMVC pattern (Model View Controller)\r\nObject-Oriented Programming\r\nActive Record\r\nDatabases\r\nHTML\r\nCSS and Sass\r\nJavascript and CoffeeScript\r\nFront-end Frameworks\r\nDeployment\r\nVersion Control\r\nValidation\r\nUser Authentication\r\nUI Design\r\nUX Design\r\nProject Management\r\nand more...\r\nGET EQUIPPED\r\n\r\nYou can’t build an app without the right tools though. So you will get hands-on experience with all of the standard tools like the command-line (Terminal), a text editor (like Sublime Text), Git, Github, Heroku, Twitter Bootstrap, Devise, and more. You will learn the ins-and-outs of all the tools you gotta have in your Rails toolbelt. With _________ you will learn exactly how to do things like ...\r\n\r\nuse the command-line to create a new blank-slate app\r\nuse a single command to create a rails server on your computer\r\nuse Git to manage your source code and push it to an online repo at Github\r\nuse the command-line to generate the pages and elements of your app on the fly\r\nuse the command-line to manage your database\r\nuse the command-line to push your app to a live server on Heroku\r\nuse Twitter Bootstrap to rapidly style your app - with no design experience needed.\r\nuse the Devise gem to create user sign-up and sign-in in a matter of minutes.\r\nand a lot more\r\nGET UNSTUCK\r\n\r\nBut no amount of skills and tools will wipe out the possibility of error messages. So with _______ you will learn how to eliminate "getting stuck" forever. You’ll get real-world experience troubleshooting error messages for yourself quickly so you never have to slam on the breaks again. You will master the art of ...\r\n\r\nReading error messages to get clues about what part of your app needs fixing\r\nGoogling and searching online dev communities to get past any error in minutes\r\nchecking Rails and Heroku error logs using your trusty command line\r\nGET RESULTS\r\n\r\nBy the time you finish ______ you will have...\r\n\r\nseen how to make a solid plan you can follow\r\ncreated all the key features needed for the app\r\nsketched &amp; styled a beautiful UI on the front-end of the app\r\ncreated a solid database back-end for the app\r\nimplemented a user authentication system for users to sign in and sign out\r\ndeployed your app to a live server\r\ngrown a slew of foundational web development skills in the process\r\nGET TRACTION\r\n\r\nWhether you are short on time, cash or have no formal education in programming, you will learn how to move the needle no matter what the circumstances. You will learn to make a production plan for yourself that keeps you moving forward. You will experience what it’s like to go from start to finish with a Rails app.\r\n\r\nFEELINGS\r\n\r\nWhen you complete _________ you’ll feel confident that you can build apps from start to finish on your own. You’ll be totally certain that you can get past any error or issue. Your excitement won’t diminish because you’ll have a solid plan moves you to progress. You will be relieved that you don’t have to spend thousands of dollars and months of time to learn Rails. And you can finally feel in control because you will understand what each line of code does.\r\n\r\nWHAT’S NEXT?\r\n\r\nSo, fast forward 30 days and you are finished with _____. Now what? Back to the obscure world of not knowing what’s next? No way. When you complete the lessons you will definitely want to transition into building your own app idea. So ______ includes outro lessons that will walk you through how to create your own plan for your app. This will leave you with a solid action plan that you can follow from start to finish. If you have unique issues or you need a push in the right direction, I also offer Rails coaching. My goal is to see everyone who goes through ________ build and launch their app with great success and without stalling out on an issue.\r\n\r\nJoin other students who learn by doing\r\n\r\nWith ____________ you will build a real Rails app from start to finish and get all the skills you need to move forward and build your own app.\r\n\r\nLet ________ take away the agony of learning Ruby on Rails.\r\n\r\nFind out the latest on when ______ will be available by signing up below.', 'RailsCurve', '', 'inherit', 'open', 'open', '', '105-revision-v1', '', '', '2014-08-22 09:21:28', '2014-08-22 14:21:28', '', 105, 'http://dev.dorails.com/105-revision-v1/', 0, 'revision', '', 0),
(109, 1, '2014-08-22 09:48:14', '2014-08-22 14:48:14', 'hello', 'Home', '', 'publish', 'closed', 'closed', '', 'home', '', '', '2014-08-22 21:59:08', '2014-08-23 02:59:08', '', 0, 'http://dev.dorails.com/?page_id=109', 0, 'page', '', 0),
(110, 1, '2014-08-22 09:48:14', '2014-08-22 14:48:14', 'hello', 'Home', '', 'inherit', 'open', 'open', '', '109-revision-v1', '', '', '2014-08-22 09:48:14', '2014-08-22 14:48:14', '', 109, 'http://dev.dorails.com/109-revision-v1/', 0, 'revision', '', 0),
(111, 1, '2014-08-22 09:52:01', '2014-08-22 14:52:01', '', 'Rails Vitamins', '', 'publish', 'open', 'closed', '', 'railsvitamins', '', '', '2014-09-04 20:32:06', '2014-09-05 01:32:06', '', 0, 'http://dev.dorails.com/?page_id=111', 0, 'page', '', 0),
(112, 1, '2014-08-22 09:52:01', '2014-08-22 14:52:01', '', 'Blog', '', 'inherit', 'open', 'open', '', '111-revision-v1', '', '', '2014-08-22 09:52:01', '2014-08-22 14:52:01', '', 111, 'http://dev.dorails.com/111-revision-v1/', 0, 'revision', '', 0),
(113, 1, '2014-08-22 09:52:42', '2014-08-22 14:52:42', '', 'Blog', '', 'inherit', 'open', 'open', '', '111-autosave-v1', '', '', '2014-08-22 09:52:42', '2014-08-22 14:52:42', '', 111, 'http://dev.dorails.com/111-autosave-v1/', 0, 'revision', '', 0),
(114, 1, '2014-08-22 09:55:01', '2014-08-22 14:55:01', ' ', '', '', 'publish', 'open', 'open', '', 'rails-vitamins', '', '', '2014-09-01 21:22:01', '2014-09-02 02:22:01', '', 0, 'http://dev.dorails.com/?p=114', 3, 'nav_menu_item', '', 0),
(115, 1, '2014-08-22 09:55:01', '2014-08-22 14:55:01', ' ', '', '', 'publish', 'open', 'open', '', 'rails-curve', '', '', '2014-09-01 21:22:01', '2014-09-02 02:22:01', '', 0, 'http://dev.dorails.com/?p=115', 2, 'nav_menu_item', '', 0),
(116, 1, '2014-08-22 09:54:04', '0000-00-00 00:00:00', '', 'More', '', 'draft', 'open', 'open', '', '', '', '', '2014-08-22 09:54:04', '0000-00-00 00:00:00', '', 0, 'http://dev.dorails.com/?p=116', 1, 'nav_menu_item', '', 0),
(117, 1, '2014-08-22 10:06:21', '2014-08-22 15:06:21', '', 'Rials Vitamins', '', 'inherit', 'open', 'open', '', '111-revision-v1', '', '', '2014-08-22 10:06:21', '2014-08-22 15:06:21', '', 111, 'http://dev.dorails.com/111-revision-v1/', 0, 'revision', '', 0),
(118, 1, '2014-08-22 10:18:04', '2014-08-22 15:18:04', '', 'Rails Vitamins', '', 'inherit', 'open', 'open', '', '111-revision-v1', '', '', '2014-08-22 10:18:04', '2014-08-22 15:18:04', '', 111, 'http://dev.dorails.com/111-revision-v1/', 0, 'revision', '', 0),
(119, 1, '2014-08-22 11:52:58', '2014-08-22 16:52:58', '<h2>Flatten the learning curve of Ruby on Rails</h2>\r\nWant to learn to make your own web app with Ruby on Rails? Maybe you’ve tried to learn Rails on your own, but how do you know where to start? Is the learning-curve impossibly steep? Everyone says that learning Rails is sooo easy, but you’ve been banging your head against the desk for months trying to figure it out. Are you drowning in a sea of error messages? As you know by now, they can wash your dream app down the drain and bring months of hard work to a screeching halt.\r\n\r\nDo you learn by doing? Are you tired of studying abstract programming concepts and syntax without actually applying them to a real app?\r\n\r\nHave you burned piles of money and time on books and courses to be left with absolutely nothing? A lot of Rails books &amp; courses take forever to get through and then leave you high and dry with no skills or finished product. Is your brain flat-lining because you are forced to digest too many confusing programming concepts at once? Even the books that say they are for beginners are mind-numbing. And with endless copy &amp; pasting, they end up reducing you to a transcriptionist monkey. You are left in a foggy blur and you don’t retain the material. Plus many of the resources are horribly out-of-date and almost never go picture-perfect like they are written.\r\n\r\nLet’s face it, you need progress to stay motivated and learn Rails. Progress is the fuel that keeps you going. So a lack of it can really beat you down. I know it has for me. Do you wish there was a better way to learn Rails, but fear that there isn’t? It shouldn’t be this difficult.\r\n\r\nPAIN+DREAM SEGUE\r\n\r\nYou are certain that you want to build your idea. You just aren’t sure that you can do it. Maybe it’s a lost cause. Perhaps you should save yourself the trouble and leave it alone.\r\n\r\nDREAM\r\n\r\nImagine you could make and launch your own Ruby on Rails app in a matter of days with little knowledge of coding. I know it sounds crazy, but seriously. What would it be like if Rails’ steep learning curve was suddenly flattened? If nothing stood in the way of you learning Rails and getting your app shipped?\r\n\r\nYou could keep your precious precious sanity, that’s for sure. You would know exactly where to start learning and what was next. And getting stuck with error messages would be a thing of the past. You could soar through building your Rails app and cut through error messages like they were butter.\r\n\r\nYou wouldn’t have to throw away thousands on a Computer Science degree or Code School. And you wouldn’t need to find yourself a technical co-founder or hire that expensive developer. And huzzah, you could push your app live for the world to enjoy, without a hitch.\r\n\r\nYou could finally make REAL traction and get ’er done. If you had a Rails fast track, you could save months (or in my case - years) of wasted time. Not to mention you could avoid a ton of unnecessary pain and heartache.\r\n\r\nThen the dream of making AND shipping your app could finally come true.\r\n\r\nIf Rails was a piece o’ cake to pick up you could just learn by doing. Really doing. You’d build a Rails app and easily absorb the concepts and details one by one as you move along. You’d know exactly what to learn and you would learn it all in exactly the right order. You could eat the elephant one concept at a time, even in the midst of a wall of tasks, languages and syntax. And you’d never wonder if you had up-to-date training.\r\n\r\nEven without being a "Computer Scientist", you’d feel confident as you made a big-picture plan for your new app, wrote code at each step, and understood exactly what each line of code did and why it was there. Hell, at this rate you would actually enjoy coding.\r\n\r\nBy quickly stacking up tiny victories with Rails you could move yourself closer and closer to the big win of building and shipping your app for the world to see. The bottom line is that if Rails was easy-breezy to learn you could make an app AND get solid skills that you can build on – all at once.\r\n\r\nFIX SEGUE:\r\n\r\nThat being said, it is true that Rails does have a crazy learning curve and a Rails app can take months and months to build. But there’s good news. You don’t have to follow that path.\r\n\r\nFIX:\r\n\r\nWith ___________ you can bypass the learning curve altogether and build a live Rails app in 30 days.\r\n\r\nYou will learn how to build a web app from start to finish, and master all the skills you need to make your own apps moving forward. In four weeks, you will become experienced with all of the tools, concepts and skills that you need to plan, design, develop and ship a web app.\r\n\r\nLEARN YOUR WAY\r\n\r\nWith ________ you will learn Rails by osmosis. You will learn your way – by doing. After all, you decided to learn Rails so you could build an app – so why not learn by building one? By following the method of building AND learning at the same time you will...\r\n\r\nUnderstand the big picture faster\r\nPick up complex skills and concepts faster\r\nAvoid getting paralyzed by the tiny details\r\nAvoid the pain of wasting weeks studying in-depth concepts\r\nPunch perfectionism in the face\r\nSTACK THE BRICKS\r\n\r\nInstead of spinning your wheels on learning abstract concepts, ______ will give you a clear day-by-day plan for how to build a robust Rails app from start to finish. Each lesson will include bite-sized walk-throughs, in plain english, that will show you exactly what to do. _______ gives you a solid path of exactly what to learn in exactly the right order. You will quickly move step by step through the process and pick up skills in each lesson until you have a completed (and live) web app.\r\n\r\nBUILD YOUR SKILLS\r\n\r\nAs you move through each lesson, you will get a solid foundation of the key concepts and get first-hand experience on how they all work together. And no dull copy/pasting is necessary, you will simply write code yourself and learn the what, why and how as you go. Plus, everything is based on Rails 4 so you’ll have the latest and greatest training for Rails.\r\n\r\n________ will jump-start your understanding of key elements like...\r\n\r\nRuby\r\nGems\r\nRuby on Rails Framework\r\nCommand Line (Terminal)\r\nMVC pattern (Model View Controller)\r\nObject-Oriented Programming\r\nActive Record\r\nDatabases\r\nHTML\r\nCSS and Sass\r\nJavascript and CoffeeScript\r\nFront-end Frameworks\r\nDeployment\r\nVersion Control\r\nValidation\r\nUser Authentication\r\nUI Design\r\nUX Design\r\nProject Management\r\nand more...\r\nGET EQUIPPED\r\n\r\nYou can’t build an app without the right tools though. So you will get hands-on experience with all of the standard tools like the command-line (Terminal), a text editor (like Sublime Text), Git, Github, Heroku, Twitter Bootstrap, Devise, and more. You will learn the ins-and-outs of all the tools you gotta have in your Rails toolbelt. With _________ you will learn exactly how to do things like ...\r\n\r\nuse the command-line to create a new blank-slate app\r\nuse a single command to create a rails server on your computer\r\nuse Git to manage your source code and push it to an online repo at Github\r\nuse the command-line to generate the pages and elements of your app on the fly\r\nuse the command-line to manage your database\r\nuse the command-line to push your app to a live server on Heroku\r\nuse Twitter Bootstrap to rapidly style your app - with no design experience needed.\r\nuse the Devise gem to create user sign-up and sign-in in a matter of minutes.\r\nand a lot more\r\nGET UNSTUCK\r\n\r\nBut no amount of skills and tools will wipe out the possibility of error messages. So with _______ you will learn how to eliminate "getting stuck" forever. You’ll get real-world experience troubleshooting error messages for yourself quickly so you never have to slam on the breaks again. You will master the art of ...\r\n\r\nReading error messages to get clues about what part of your app needs fixing\r\nGoogling and searching online dev communities to get past any error in minutes\r\nchecking Rails and Heroku error logs using your trusty command line\r\nGET RESULTS\r\n\r\nBy the time you finish ______ you will have...\r\n\r\nseen how to make a solid plan you can follow\r\ncreated all the key features needed for the app\r\nsketched &amp; styled a beautiful UI on the front-end of the app\r\ncreated a solid database back-end for the app\r\nimplemented a user authentication system for users to sign in and sign out\r\ndeployed your app to a live server\r\ngrown a slew of foundational web development skills in the process\r\nGET TRACTION\r\n\r\nWhether you are short on time, cash or have no formal education in programming, you will learn how to move the needle no matter what the circumstances. You will learn to make a production plan for yourself that keeps you moving forward. You will experience what it’s like to go from start to finish with a Rails app.\r\n\r\nFEELINGS\r\n\r\nWhen you complete _________ you’ll feel confident that you can build apps from start to finish on your own. You’ll be totally certain that you can get past any error or issue. Your excitement won’t diminish because you’ll have a solid plan moves you to progress. You will be relieved that you don’t have to spend thousands of dollars and months of time to learn Rails. And you can finally feel in control because you will understand what each line of code does.\r\n\r\nWHAT’S NEXT?\r\n\r\nSo, fast forward 30 days and you are finished with _____. Now what? Back to the obscure world of not knowing what’s next? No way. When you complete the lessons you will definitely want to transition into building your own app idea. So ______ includes outro lessons that will walk you through how to create your own plan for your app. This will leave you with a solid action plan that you can follow from start to finish. If you have unique issues or you need a push in the right direction, I also offer Rails coaching. My goal is to see everyone who goes through ________ build and launch their app with great success and without stalling out on an issue.\r\n\r\nJoin other students who learn by doing\r\n\r\nWith ____________ you will build a real Rails app from start to finish and get all the skills you need to move forward and build your own app.\r\n\r\nLet ________ take away the agony of learning Ruby on Rails.\r\n\r\nFind out the latest on when ______ will be available by signing up below.', 'Rails Curve', '', 'inherit', 'open', 'open', '', '105-revision-v1', '', '', '2014-08-22 11:52:58', '2014-08-22 16:52:58', '', 105, 'http://dev.dorails.com/105-revision-v1/', 0, 'revision', '', 0),
(120, 1, '2014-08-22 11:56:41', '2014-08-22 16:56:41', '<h1>Flatten the learning curve of Ruby on Rails</h1>\r\nWant to learn to make your own web app with Ruby on Rails? Maybe you’ve tried to learn Rails on your own, but how do you know where to start? Is the learning-curve impossibly steep? Everyone says that learning Rails is sooo easy, but you’ve been banging your head against the desk for months trying to figure it out. Are you drowning in a sea of error messages? As you know by now, they can wash your dream app down the drain and bring months of hard work to a screeching halt.\r\n\r\nDo you learn by doing? Are you tired of studying abstract programming concepts and syntax without actually applying them to a real app?\r\n\r\nHave you burned piles of money and time on books and courses to be left with absolutely nothing? A lot of Rails books &amp; courses take forever to get through and then leave you high and dry with no skills or finished product. Is your brain flat-lining because you are forced to digest too many confusing programming concepts at once? Even the books that say they are for beginners are mind-numbing. And with endless copy &amp; pasting, they end up reducing you to a transcriptionist monkey. You are left in a foggy blur and you don’t retain the material. Plus many of the resources are horribly out-of-date and almost never go picture-perfect like they are written.\r\n\r\nLet’s face it, you need progress to stay motivated and learn Rails. Progress is the fuel that keeps you going. So a lack of it can really beat you down. I know it has for me. Do you wish there was a better way to learn Rails, but fear that there isn’t? It shouldn’t be this difficult.\r\n\r\nPAIN+DREAM SEGUE\r\n\r\nYou are certain that you want to build your idea. You just aren’t sure that you can do it. Maybe it’s a lost cause. Perhaps you should save yourself the trouble and leave it alone.\r\n\r\nDREAM\r\n\r\nImagine you could make and launch your own Ruby on Rails app in a matter of days with little knowledge of coding. I know it sounds crazy, but seriously. What would it be like if Rails’ steep learning curve was suddenly flattened? If nothing stood in the way of you learning Rails and getting your app shipped?\r\n\r\nYou could keep your precious precious sanity, that’s for sure. You would know exactly where to start learning and what was next. And getting stuck with error messages would be a thing of the past. You could soar through building your Rails app and cut through error messages like they were butter.\r\n\r\nYou wouldn’t have to throw away thousands on a Computer Science degree or Code School. And you wouldn’t need to find yourself a technical co-founder or hire that expensive developer. And huzzah, you could push your app live for the world to enjoy, without a hitch.\r\n\r\nYou could finally make REAL traction and get ’er done. If you had a Rails fast track, you could save months (or in my case - years) of wasted time. Not to mention you could avoid a ton of unnecessary pain and heartache.\r\n\r\nThen the dream of making AND shipping your app could finally come true.\r\n\r\nIf Rails was a piece o’ cake to pick up you could just learn by doing. Really doing. You’d build a Rails app and easily absorb the concepts and details one by one as you move along. You’d know exactly what to learn and you would learn it all in exactly the right order. You could eat the elephant one concept at a time, even in the midst of a wall of tasks, languages and syntax. And you’d never wonder if you had up-to-date training.\r\n\r\nEven without being a "Computer Scientist", you’d feel confident as you made a big-picture plan for your new app, wrote code at each step, and understood exactly what each line of code did and why it was there. Hell, at this rate you would actually enjoy coding.\r\n\r\nBy quickly stacking up tiny victories with Rails you could move yourself closer and closer to the big win of building and shipping your app for the world to see. The bottom line is that if Rails was easy-breezy to learn you could make an app AND get solid skills that you can build on – all at once.\r\n\r\nFIX SEGUE:\r\n\r\nThat being said, it is true that Rails does have a crazy learning curve and a Rails app can take months and months to build. But there’s good news. You don’t have to follow that path.\r\n\r\nFIX:\r\n\r\nWith ___________ you can bypass the learning curve altogether and build a live Rails app in 30 days.\r\n\r\nYou will learn how to build a web app from start to finish, and master all the skills you need to make your own apps moving forward. In four weeks, you will become experienced with all of the tools, concepts and skills that you need to plan, design, develop and ship a web app.\r\n\r\nLEARN YOUR WAY\r\n\r\nWith ________ you will learn Rails by osmosis. You will learn your way – by doing. After all, you decided to learn Rails so you could build an app – so why not learn by building one? By following the method of building AND learning at the same time you will...\r\n\r\nUnderstand the big picture faster\r\nPick up complex skills and concepts faster\r\nAvoid getting paralyzed by the tiny details\r\nAvoid the pain of wasting weeks studying in-depth concepts\r\nPunch perfectionism in the face\r\nSTACK THE BRICKS\r\n\r\nInstead of spinning your wheels on learning abstract concepts, ______ will give you a clear day-by-day plan for how to build a robust Rails app from start to finish. Each lesson will include bite-sized walk-throughs, in plain english, that will show you exactly what to do. _______ gives you a solid path of exactly what to learn in exactly the right order. You will quickly move step by step through the process and pick up skills in each lesson until you have a completed (and live) web app.\r\n\r\nBUILD YOUR SKILLS\r\n\r\nAs you move through each lesson, you will get a solid foundation of the key concepts and get first-hand experience on how they all work together. And no dull copy/pasting is necessary, you will simply write code yourself and learn the what, why and how as you go. Plus, everything is based on Rails 4 so you’ll have the latest and greatest training for Rails.\r\n\r\n________ will jump-start your understanding of key elements like...\r\n\r\nRuby\r\nGems\r\nRuby on Rails Framework\r\nCommand Line (Terminal)\r\nMVC pattern (Model View Controller)\r\nObject-Oriented Programming\r\nActive Record\r\nDatabases\r\nHTML\r\nCSS and Sass\r\nJavascript and CoffeeScript\r\nFront-end Frameworks\r\nDeployment\r\nVersion Control\r\nValidation\r\nUser Authentication\r\nUI Design\r\nUX Design\r\nProject Management\r\nand more...\r\nGET EQUIPPED\r\n\r\nYou can’t build an app without the right tools though. So you will get hands-on experience with all of the standard tools like the command-line (Terminal), a text editor (like Sublime Text), Git, Github, Heroku, Twitter Bootstrap, Devise, and more. You will learn the ins-and-outs of all the tools you gotta have in your Rails toolbelt. With _________ you will learn exactly how to do things like ...\r\n\r\nuse the command-line to create a new blank-slate app\r\nuse a single command to create a rails server on your computer\r\nuse Git to manage your source code and push it to an online repo at Github\r\nuse the command-line to generate the pages and elements of your app on the fly\r\nuse the command-line to manage your database\r\nuse the command-line to push your app to a live server on Heroku\r\nuse Twitter Bootstrap to rapidly style your app - with no design experience needed.\r\nuse the Devise gem to create user sign-up and sign-in in a matter of minutes.\r\nand a lot more\r\nGET UNSTUCK\r\n\r\nBut no amount of skills and tools will wipe out the possibility of error messages. So with _______ you will learn how to eliminate "getting stuck" forever. You’ll get real-world experience troubleshooting error messages for yourself quickly so you never have to slam on the breaks again. You will master the art of ...\r\n\r\nReading error messages to get clues about what part of your app needs fixing\r\nGoogling and searching online dev communities to get past any error in minutes\r\nchecking Rails and Heroku error logs using your trusty command line\r\nGET RESULTS\r\n\r\nBy the time you finish ______ you will have...\r\n\r\nseen how to make a solid plan you can follow\r\ncreated all the key features needed for the app\r\nsketched &amp; styled a beautiful UI on the front-end of the app\r\ncreated a solid database back-end for the app\r\nimplemented a user authentication system for users to sign in and sign out\r\ndeployed your app to a live server\r\ngrown a slew of foundational web development skills in the process\r\nGET TRACTION\r\n\r\nWhether you are short on time, cash or have no formal education in programming, you will learn how to move the needle no matter what the circumstances. You will learn to make a production plan for yourself that keeps you moving forward. You will experience what it’s like to go from start to finish with a Rails app.\r\n\r\nFEELINGS\r\n\r\nWhen you complete _________ you’ll feel confident that you can build apps from start to finish on your own. You’ll be totally certain that you can get past any error or issue. Your excitement won’t diminish because you’ll have a solid plan moves you to progress. You will be relieved that you don’t have to spend thousands of dollars and months of time to learn Rails. And you can finally feel in control because you will understand what each line of code does.\r\n\r\nWHAT’S NEXT?\r\n\r\nSo, fast forward 30 days and you are finished with _____. Now what? Back to the obscure world of not knowing what’s next? No way. When you complete the lessons you will definitely want to transition into building your own app idea. So ______ includes outro lessons that will walk you through how to create your own plan for your app. This will leave you with a solid action plan that you can follow from start to finish. If you have unique issues or you need a push in the right direction, I also offer Rails coaching. My goal is to see everyone who goes through ________ build and launch their app with great success and without stalling out on an issue.\r\n\r\nJoin other students who learn by doing\r\n\r\nWith ____________ you will build a real Rails app from start to finish and get all the skills you need to move forward and build your own app.\r\n\r\nLet ________ take away the agony of learning Ruby on Rails.\r\n\r\nFind out the latest on when ______ will be available by signing up below.', 'Rails Curve', '', 'inherit', 'open', 'open', '', '105-revision-v1', '', '', '2014-08-22 11:56:41', '2014-08-22 16:56:41', '', 105, 'http://dev.dorails.com/105-revision-v1/', 0, 'revision', '', 0),
(121, 1, '2014-08-22 12:15:25', '2014-08-22 17:15:25', 'Want to learn to make your own web app with Ruby on Rails? Maybe you’ve tried to learn Rails on your own, but how do you know where to start? Is the learning-curve impossibly steep? Everyone says that learning Rails is sooo easy, but you’ve been banging your head against the desk for months trying to figure it out. Are you drowning in a sea of error messages? As you know by now, they can wash your dream app down the drain and bring months of hard work to a screeching halt.\r\n\r\nDo you learn by doing? Are you tired of studying abstract programming concepts and syntax without actually applying them to a real app?\r\n\r\nHave you burned piles of money and time on books and courses to be left with absolutely nothing? A lot of Rails books &amp; courses take forever to get through and then leave you high and dry with no skills or finished product. Is your brain flat-lining because you are forced to digest too many confusing programming concepts at once? Even the books that say they are for beginners are mind-numbing. And with endless copy &amp; pasting, they end up reducing you to a transcriptionist monkey. You are left in a foggy blur and you don’t retain the material. Plus many of the resources are horribly out-of-date and almost never go picture-perfect like they are written.\r\n\r\nLet’s face it, you need progress to stay motivated and learn Rails. Progress is the fuel that keeps you going. So a lack of it can really beat you down. I know it has for me. Do you wish there was a better way to learn Rails, but fear that there isn’t? It shouldn’t be this difficult.\r\n\r\nPAIN+DREAM SEGUE\r\n\r\nYou are certain that you want to build your idea. You just aren’t sure that you can do it. Maybe it’s a lost cause. Perhaps you should save yourself the trouble and leave it alone.\r\n\r\nDREAM\r\n\r\nImagine you could make and launch your own Ruby on Rails app in a matter of days with little knowledge of coding. I know it sounds crazy, but seriously. What would it be like if Rails’ steep learning curve was suddenly flattened? If nothing stood in the way of you learning Rails and getting your app shipped?\r\n\r\nYou could keep your precious precious sanity, that’s for sure. You would know exactly where to start learning and what was next. And getting stuck with error messages would be a thing of the past. You could soar through building your Rails app and cut through error messages like they were butter.\r\n\r\nYou wouldn’t have to throw away thousands on a Computer Science degree or Code School. And you wouldn’t need to find yourself a technical co-founder or hire that expensive developer. And huzzah, you could push your app live for the world to enjoy, without a hitch.\r\n\r\nYou could finally make REAL traction and get ’er done. If you had a Rails fast track, you could save months (or in my case - years) of wasted time. Not to mention you could avoid a ton of unnecessary pain and heartache.\r\n\r\nThen the dream of making AND shipping your app could finally come true.\r\n\r\nIf Rails was a piece o’ cake to pick up you could just learn by doing. Really doing. You’d build a Rails app and easily absorb the concepts and details one by one as you move along. You’d know exactly what to learn and you would learn it all in exactly the right order. You could eat the elephant one concept at a time, even in the midst of a wall of tasks, languages and syntax. And you’d never wonder if you had up-to-date training.\r\n\r\nEven without being a "Computer Scientist", you’d feel confident as you made a big-picture plan for your new app, wrote code at each step, and understood exactly what each line of code did and why it was there. Hell, at this rate you would actually enjoy coding.\r\n\r\nBy quickly stacking up tiny victories with Rails you could move yourself closer and closer to the big win of building and shipping your app for the world to see. The bottom line is that if Rails was easy-breezy to learn you could make an app AND get solid skills that you can build on – all at once.\r\n\r\nFIX SEGUE:\r\n\r\nThat being said, it is true that Rails does have a crazy learning curve and a Rails app can take months and months to build. But there’s good news. You don’t have to follow that path.\r\n\r\nFIX:\r\n\r\nWith ___________ you can bypass the learning curve altogether and build a live Rails app in 30 days.\r\n\r\nYou will learn how to build a web app from start to finish, and master all the skills you need to make your own apps moving forward. In four weeks, you will become experienced with all of the tools, concepts and skills that you need to plan, design, develop and ship a web app.\r\n\r\nLEARN YOUR WAY\r\n\r\nWith ________ you will learn Rails by osmosis. You will learn your way – by doing. After all, you decided to learn Rails so you could build an app – so why not learn by building one? By following the method of building AND learning at the same time you will...\r\n\r\nUnderstand the big picture faster\r\nPick up complex skills and concepts faster\r\nAvoid getting paralyzed by the tiny details\r\nAvoid the pain of wasting weeks studying in-depth concepts\r\nPunch perfectionism in the face\r\nSTACK THE BRICKS\r\n\r\nInstead of spinning your wheels on learning abstract concepts, ______ will give you a clear day-by-day plan for how to build a robust Rails app from start to finish. Each lesson will include bite-sized walk-throughs, in plain english, that will show you exactly what to do. _______ gives you a solid path of exactly what to learn in exactly the right order. You will quickly move step by step through the process and pick up skills in each lesson until you have a completed (and live) web app.\r\n\r\nBUILD YOUR SKILLS\r\n\r\nAs you move through each lesson, you will get a solid foundation of the key concepts and get first-hand experience on how they all work together. And no dull copy/pasting is necessary, you will simply write code yourself and learn the what, why and how as you go. Plus, everything is based on Rails 4 so you’ll have the latest and greatest training for Rails.\r\n\r\n________ will jump-start your understanding of key elements like...\r\n\r\nRuby\r\nGems\r\nRuby on Rails Framework\r\nCommand Line (Terminal)\r\nMVC pattern (Model View Controller)\r\nObject-Oriented Programming\r\nActive Record\r\nDatabases\r\nHTML\r\nCSS and Sass\r\nJavascript and CoffeeScript\r\nFront-end Frameworks\r\nDeployment\r\nVersion Control\r\nValidation\r\nUser Authentication\r\nUI Design\r\nUX Design\r\nProject Management\r\nand more...\r\nGET EQUIPPED\r\n\r\nYou can’t build an app without the right tools though. So you will get hands-on experience with all of the standard tools like the command-line (Terminal), a text editor (like Sublime Text), Git, Github, Heroku, Twitter Bootstrap, Devise, and more. You will learn the ins-and-outs of all the tools you gotta have in your Rails toolbelt. With _________ you will learn exactly how to do things like ...\r\n\r\nuse the command-line to create a new blank-slate app\r\nuse a single command to create a rails server on your computer\r\nuse Git to manage your source code and push it to an online repo at Github\r\nuse the command-line to generate the pages and elements of your app on the fly\r\nuse the command-line to manage your database\r\nuse the command-line to push your app to a live server on Heroku\r\nuse Twitter Bootstrap to rapidly style your app - with no design experience needed.\r\nuse the Devise gem to create user sign-up and sign-in in a matter of minutes.\r\nand a lot more\r\nGET UNSTUCK\r\n\r\nBut no amount of skills and tools will wipe out the possibility of error messages. So with _______ you will learn how to eliminate "getting stuck" forever. You’ll get real-world experience troubleshooting error messages for yourself quickly so you never have to slam on the breaks again. You will master the art of ...\r\n\r\nReading error messages to get clues about what part of your app needs fixing\r\nGoogling and searching online dev communities to get past any error in minutes\r\nchecking Rails and Heroku error logs using your trusty command line\r\nGET RESULTS\r\n\r\nBy the time you finish ______ you will have...\r\n\r\nseen how to make a solid plan you can follow\r\ncreated all the key features needed for the app\r\nsketched &amp; styled a beautiful UI on the front-end of the app\r\ncreated a solid database back-end for the app\r\nimplemented a user authentication system for users to sign in and sign out\r\ndeployed your app to a live server\r\ngrown a slew of foundational web development skills in the process\r\nGET TRACTION\r\n\r\nWhether you are short on time, cash or have no formal education in programming, you will learn how to move the needle no matter what the circumstances. You will learn to make a production plan for yourself that keeps you moving forward. You will experience what it’s like to go from start to finish with a Rails app.\r\n\r\nFEELINGS\r\n\r\nWhen you complete _________ you’ll feel confident that you can build apps from start to finish on your own. You’ll be totally certain that you can get past any error or issue. Your excitement won’t diminish because you’ll have a solid plan moves you to progress. You will be relieved that you don’t have to spend thousands of dollars and months of time to learn Rails. And you can finally feel in control because you will understand what each line of code does.\r\n\r\nWHAT’S NEXT?\r\n\r\nSo, fast forward 30 days and you are finished with _____. Now what? Back to the obscure world of not knowing what’s next? No way. When you complete the lessons you will definitely want to transition into building your own app idea. So ______ includes outro lessons that will walk you through how to create your own plan for your app. This will leave you with a solid action plan that you can follow from start to finish. If you have unique issues or you need a push in the right direction, I also offer Rails coaching. My goal is to see everyone who goes through ________ build and launch their app with great success and without stalling out on an issue.\r\n\r\nJoin other students who learn by doing\r\n\r\nWith ____________ you will build a real Rails app from start to finish and get all the skills you need to move forward and build your own app.\r\n\r\nLet ________ take away the agony of learning Ruby on Rails.\r\n\r\nFind out the latest on when ______ will be available by signing up below.', 'Rails Curve', '', 'inherit', 'open', 'open', '', '105-revision-v1', '', '', '2014-08-22 12:15:25', '2014-08-22 17:15:25', '', 105, 'http://dev.dorails.com/105-revision-v1/', 0, 'revision', '', 0) ;
INSERT INTO `wp_posts` ( `ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(123, 1, '2014-08-22 12:42:34', '2014-08-22 17:42:34', 'Want to learn to make your own web app with Ruby on Rails? Maybe you’ve tried to learn Rails on your own, but how do you know where to start? Is the learning-curve impossibly steep? Everyone says that learning Rails is sooo easy, but you’ve been banging your head against the desk for months trying to figure it out. Are you drowning in a sea of error messages? As you know by now, they can wash your dream app down the drain and bring months of hard work to a screeching halt.\r\n\r\n<p class="lead">Do you learn by doing? Are you tired of studying abstract programming concepts and syntax without actually applying them to a real app?</p>\r\n\r\nHave you burned piles of money and time on books and courses to be left with absolutely nothing? A lot of Rails books &amp; courses take forever to get through and then leave you high and dry with no skills or finished product. Is your brain flat-lining because you are forced to digest too many confusing programming concepts at once? Even the books that say they are for beginners are mind-numbing. And with endless copy &amp; pasting, they end up reducing you to a transcriptionist monkey. You are left in a foggy blur and you don’t retain the material. Plus many of the resources are horribly out-of-date and almost never go picture-perfect like they are written.\r\n\r\nLet’s face it, you need progress to stay motivated and learn Rails. Progress is the fuel that keeps you going. So a lack of it can really beat you down. I know it has for me. Do you wish there was a better way to learn Rails, but fear that there isn’t? It shouldn’t be this difficult.\r\n\r\nPAIN+DREAM SEGUE\r\n\r\nYou are certain that you want to build your idea. You just aren’t sure that you can do it. Maybe it’s a lost cause. Perhaps you should save yourself the trouble and leave it alone.\r\n\r\nDREAM\r\n\r\nImagine you could make and launch your own Ruby on Rails app in a matter of days with little knowledge of coding. I know it sounds crazy, but seriously. What would it be like if Rails’ steep learning curve was suddenly flattened? If nothing stood in the way of you learning Rails and getting your app shipped?\r\n\r\nYou could keep your precious precious sanity, that’s for sure. You would know exactly where to start learning and what was next. And getting stuck with error messages would be a thing of the past. You could soar through building your Rails app and cut through error messages like they were butter.\r\n\r\nYou wouldn’t have to throw away thousands on a Computer Science degree or Code School. And you wouldn’t need to find yourself a technical co-founder or hire that expensive developer. And huzzah, you could push your app live for the world to enjoy, without a hitch.\r\n\r\nYou could finally make REAL traction and get ’er done. If you had a Rails fast track, you could save months (or in my case - years) of wasted time. Not to mention you could avoid a ton of unnecessary pain and heartache.\r\n\r\nThen the dream of making AND shipping your app could finally come true.\r\n\r\nIf Rails was a piece o’ cake to pick up you could just learn by doing. Really doing. You’d build a Rails app and easily absorb the concepts and details one by one as you move along. You’d know exactly what to learn and you would learn it all in exactly the right order. You could eat the elephant one concept at a time, even in the midst of a wall of tasks, languages and syntax. And you’d never wonder if you had up-to-date training.\r\n\r\nEven without being a "Computer Scientist", you’d feel confident as you made a big-picture plan for your new app, wrote code at each step, and understood exactly what each line of code did and why it was there. Hell, at this rate you would actually enjoy coding.\r\n\r\nBy quickly stacking up tiny victories with Rails you could move yourself closer and closer to the big win of building and shipping your app for the world to see. The bottom line is that if Rails was easy-breezy to learn you could make an app AND get solid skills that you can build on – all at once.\r\n\r\nFIX SEGUE:\r\n\r\nThat being said, it is true that Rails does have a crazy learning curve and a Rails app can take months and months to build. But there’s good news. You don’t have to follow that path.\r\n\r\nFIX:\r\n\r\nWith ___________ you can bypass the learning curve altogether and build a live Rails app in 30 days.\r\n\r\nYou will learn how to build a web app from start to finish, and master all the skills you need to make your own apps moving forward. In four weeks, you will become experienced with all of the tools, concepts and skills that you need to plan, design, develop and ship a web app.\r\n\r\nLEARN YOUR WAY\r\n\r\nWith ________ you will learn Rails by osmosis. You will learn your way – by doing. After all, you decided to learn Rails so you could build an app – so why not learn by building one? By following the method of building AND learning at the same time you will...\r\n\r\nUnderstand the big picture faster\r\nPick up complex skills and concepts faster\r\nAvoid getting paralyzed by the tiny details\r\nAvoid the pain of wasting weeks studying in-depth concepts\r\nPunch perfectionism in the face\r\nSTACK THE BRICKS\r\n\r\nInstead of spinning your wheels on learning abstract concepts, ______ will give you a clear day-by-day plan for how to build a robust Rails app from start to finish. Each lesson will include bite-sized walk-throughs, in plain english, that will show you exactly what to do. _______ gives you a solid path of exactly what to learn in exactly the right order. You will quickly move step by step through the process and pick up skills in each lesson until you have a completed (and live) web app.\r\n\r\nBUILD YOUR SKILLS\r\n\r\nAs you move through each lesson, you will get a solid foundation of the key concepts and get first-hand experience on how they all work together. And no dull copy/pasting is necessary, you will simply write code yourself and learn the what, why and how as you go. Plus, everything is based on Rails 4 so you’ll have the latest and greatest training for Rails.\r\n\r\n________ will jump-start your understanding of key elements like...\r\n\r\nRuby\r\nGems\r\nRuby on Rails Framework\r\nCommand Line (Terminal)\r\nMVC pattern (Model View Controller)\r\nObject-Oriented Programming\r\nActive Record\r\nDatabases\r\nHTML\r\nCSS and Sass\r\nJavascript and CoffeeScript\r\nFront-end Frameworks\r\nDeployment\r\nVersion Control\r\nValidation\r\nUser Authentication\r\nUI Design\r\nUX Design\r\nProject Management\r\nand more...\r\nGET EQUIPPED\r\n\r\nYou can’t build an app without the right tools though. So you will get hands-on experience with all of the standard tools like the command-line (Terminal), a text editor (like Sublime Text), Git, Github, Heroku, Twitter Bootstrap, Devise, and more. You will learn the ins-and-outs of all the tools you gotta have in your Rails toolbelt. With _________ you will learn exactly how to do things like ...\r\n\r\nuse the command-line to create a new blank-slate app\r\nuse a single command to create a rails server on your computer\r\nuse Git to manage your source code and push it to an online repo at Github\r\nuse the command-line to generate the pages and elements of your app on the fly\r\nuse the command-line to manage your database\r\nuse the command-line to push your app to a live server on Heroku\r\nuse Twitter Bootstrap to rapidly style your app - with no design experience needed.\r\nuse the Devise gem to create user sign-up and sign-in in a matter of minutes.\r\nand a lot more\r\nGET UNSTUCK\r\n\r\nBut no amount of skills and tools will wipe out the possibility of error messages. So with _______ you will learn how to eliminate "getting stuck" forever. You’ll get real-world experience troubleshooting error messages for yourself quickly so you never have to slam on the breaks again. You will master the art of ...\r\n\r\nReading error messages to get clues about what part of your app needs fixing\r\nGoogling and searching online dev communities to get past any error in minutes\r\nchecking Rails and Heroku error logs using your trusty command line\r\nGET RESULTS\r\n\r\nBy the time you finish ______ you will have...\r\n\r\nseen how to make a solid plan you can follow\r\ncreated all the key features needed for the app\r\nsketched &amp; styled a beautiful UI on the front-end of the app\r\ncreated a solid database back-end for the app\r\nimplemented a user authentication system for users to sign in and sign out\r\ndeployed your app to a live server\r\ngrown a slew of foundational web development skills in the process\r\nGET TRACTION\r\n\r\nWhether you are short on time, cash or have no formal education in programming, you will learn how to move the needle no matter what the circumstances. You will learn to make a production plan for yourself that keeps you moving forward. You will experience what it’s like to go from start to finish with a Rails app.\r\n\r\nFEELINGS\r\n\r\nWhen you complete _________ you’ll feel confident that you can build apps from start to finish on your own. You’ll be totally certain that you can get past any error or issue. Your excitement won’t diminish because you’ll have a solid plan moves you to progress. You will be relieved that you don’t have to spend thousands of dollars and months of time to learn Rails. And you can finally feel in control because you will understand what each line of code does.\r\n\r\nWHAT’S NEXT?\r\n\r\nSo, fast forward 30 days and you are finished with _____. Now what? Back to the obscure world of not knowing what’s next? No way. When you complete the lessons you will definitely want to transition into building your own app idea. So ______ includes outro lessons that will walk you through how to create your own plan for your app. This will leave you with a solid action plan that you can follow from start to finish. If you have unique issues or you need a push in the right direction, I also offer Rails coaching. My goal is to see everyone who goes through ________ build and launch their app with great success and without stalling out on an issue.\r\n\r\nJoin other students who learn by doing\r\n\r\nWith ____________ you will build a real Rails app from start to finish and get all the skills you need to move forward and build your own app.\r\n\r\nLet ________ take away the agony of learning Ruby on Rails.\r\n\r\nFind out the latest on when ______ will be available by signing up below.', 'Rails Curve', '', 'inherit', 'open', 'open', '', '105-revision-v1', '', '', '2014-08-22 12:42:34', '2014-08-22 17:42:34', '', 105, 'http://dev.dorails.com/105-revision-v1/', 0, 'revision', '', 0),
(124, 1, '2014-08-22 12:57:57', '2014-08-22 17:57:57', 'Want to learn to make your own web app with Ruby on Rails? Maybe you’ve tried to learn Rails on your own, but how do you know where to start? Is the learning-curve impossibly steep? Everyone says that learning Rails is sooo easy, but you’ve been banging your head against the desk for months trying to figure it out. Are you drowning in a sea of error messages? As you know by now, they can wash your dream app down the drain and bring months of hard work to a screeching halt.\r\n<h3>Do you learn by doing?</h3>\r\nAre you tired of studying abstract programming concepts and syntax without actually applying them to a real app?\r\n\r\nHave you burned piles of money and time on books and courses to be left with absolutely nothing? A lot of Rails books &amp; courses take forever to get through and then leave you high and dry with no skills or finished product. Is your brain flat-lining because you are forced to digest too many confusing programming concepts at once? Even the books that say they are for beginners are mind-numbing. And with endless copy &amp; pasting, they end up reducing you to a transcriptionist monkey. You are left in a foggy blur and you don’t retain the material. Plus many of the resources are horribly out-of-date and almost never go picture-perfect like they are written.\r\n\r\nLet’s face it, you need progress to stay motivated and learn Rails. Progress is the fuel that keeps you going. So a lack of it can really beat you down. I know it has for me. Do you wish there was a better way to learn Rails, but fear that there isn’t? It shouldn’t be this difficult.\r\n\r\nYou are certain that you want to build your idea. You just aren’t sure that you can do it. Maybe it’s a lost cause. Perhaps you should save yourself the trouble and leave it alone.\r\n<h3>Imagine you could make and launch your own Ruby on Rails app in a matter of days with little knowledge of coding.</h3>\r\nI know it sounds crazy, but seriously. What would it be like if Rails’ steep learning curve was suddenly flattened? If nothing stood in the way of you learning Rails and getting your app shipped?\r\n\r\nYou could keep your precious precious sanity, that’s for sure. You would know exactly where to start learning and what was next. And getting stuck with error messages would be a thing of the past. You could soar through building your Rails app and cut through error messages like they were butter.\r\n\r\nYou wouldn’t have to throw away thousands on a Computer Science degree or Code School. And you wouldn’t need to find yourself a technical co-founder or hire that expensive developer. And huzzah, you could push your app live for the world to enjoy, without a hitch.\r\n\r\nYou could finally make REAL traction and get ’er done. If you had a Rails fast track, you could save months (or in my case - years) of wasted time. Not to mention you could avoid a ton of unnecessary pain and heartache.\r\n<h3>Then the dream of making AND shipping your app could finally come true.</h3>\r\nIf Rails was a piece o’ cake to pick up you could just learn by doing. Really doing. You’d build a Rails app and easily absorb the concepts and details one by one as you move along. You’d know exactly what to learn and you would learn it all in exactly the right order. You could eat the elephant one concept at a time, even in the midst of a wall of tasks, languages and syntax. And you’d never wonder if you had up-to-date training.\r\n\r\nEven without being a "Computer Scientist", you’d feel confident as you made a big-picture plan for your new app, wrote code at each step, and understood exactly what each line of code did and why it was there. Hell, at this rate you would actually enjoy coding.\r\n\r\nBy quickly stacking up tiny victories with Rails you could move yourself closer and closer to the big win of building and shipping your app for the world to see. The bottom line is that if Rails was easy-breezy to learn you could make an app AND get solid skills that you can build on – <em>all at once</em>.\r\n\r\nThat being said, it is true that Rails does have a crazy learning curve and a Rails app can take months and months to build. But there’s good news. You don’t have to follow that path.\r\n<h3>With <em>Rails Curve</em> you can bypass the learning curve altogether and build a live Rails app in 30 days</h3>\r\nYou will learn how to build a web app from start to finish, and master all the skills you need to make your own apps moving forward. In four weeks, you will become experienced with all of the tools, concepts and skills that you need to plan, design, develop and ship a web app.\r\n<h4>With <em>Rails Curve</em> you will learn Rails by osmosis</h4>\r\nYou will learn your way – by <em>doing</em>. After all, you decided to learn Rails so you could build an app – so why not learn by actually building one?\r\n\r\nBy following the method of building AND learning at the same time you will...\r\n<ul>\r\n	<li>Understand the big picture faster</li>\r\n	<li>Pick up complex skills and concepts faster</li>\r\n	<li>Avoid getting paralyzed by the tiny details</li>\r\n	<li>Avoid the pain of wasting weeks studying in-depth concepts</li>\r\n	<li>Punch perfectionism in the face</li>\r\n</ul>\r\n<h3>Stack the bricks</h3>\r\nInstead of spinning your wheels on learning abstract concepts, <em>Rails Curve</em> will give you a clear day-by-day plan for how to build a robust Rails app from start to finish. Each lesson will include bite-sized walk-throughs, in plain english, that will show you exactly what to do. <em>Rails Curve</em> gives you a solid path of exactly what to learn in exactly the right order. You will quickly move step by step through the process and pick up skills in each lesson until you have a completed (and live) web app.\r\n<h3>Build your skills</h3>\r\nAs you move through each lesson, you will get a solid foundation of the key concepts and get first-hand experience on how they all work together. And no dull copy/pasting is necessary, you will simply write code yourself and learn the what, why and how as you go. Plus, everything is based on Rails 4 so you’ll have the latest and greatest training for Rails.\r\n\r\n________ will jump-start your understanding of key elements like...\r\n<div class="row">\r\n<ul class="col-md-6">\r\n	<li>Ruby</li>\r\n	<li>Gems</li>\r\n	<li>Ruby on Rails Framework</li>\r\n	<li>Command Line (Terminal)</li>\r\n	<li>MVC pattern (Model View Controller)</li>\r\n	<li>Object-Oriented Programming</li>\r\n	<li>Active Record</li>\r\n	<li>Databases</li>\r\n	<li>HTML</li>\r\n	<li>CSS and Sass</li>\r\n	<li>Javascript and CoffeeScript</li>\r\n</ul>\r\n<ul class="col-md-6">\r\n	<li>Front-end Frameworks</li>\r\n	<li>Deployment</li>\r\n	<li>Version Control</li>\r\n	<li>Validation</li>\r\n	<li>User Authentication</li>\r\n	<li>UI Design</li>\r\n	<li>UX Design</li>\r\n	<li>Project Management</li>\r\n	<li>and more...</li>\r\n</ul>\r\n</div>\r\nGET EQUIPPED\r\n\r\nYou can’t build an app without the right tools though. So you will get hands-on experience with all of the standard tools like the command-line (Terminal), a text editor (like Sublime Text), Git, Github, Heroku, Twitter Bootstrap, Devise, and more. You will learn the ins-and-outs of all the tools you gotta have in your Rails toolbelt. With _________ you will learn exactly how to do things like ...\r\n\r\nuse the command-line to create a new blank-slate app\r\nuse a single command to create a rails server on your computer\r\nuse Git to manage your source code and push it to an online repo at Github\r\nuse the command-line to generate the pages and elements of your app on the fly\r\nuse the command-line to manage your database\r\nuse the command-line to push your app to a live server on Heroku\r\nuse Twitter Bootstrap to rapidly style your app - with no design experience needed.\r\nuse the Devise gem to create user sign-up and sign-in in a matter of minutes.\r\nand a lot more\r\nGET UNSTUCK\r\n\r\nBut no amount of skills and tools will wipe out the possibility of error messages. So with _______ you will learn how to eliminate "getting stuck" forever. You’ll get real-world experience troubleshooting error messages for yourself quickly so you never have to slam on the breaks again. You will master the art of ...\r\n\r\nReading error messages to get clues about what part of your app needs fixing\r\nGoogling and searching online dev communities to get past any error in minutes\r\nchecking Rails and Heroku error logs using your trusty command line\r\nGET RESULTS\r\n\r\nBy the time you finish ______ you will have...\r\n\r\nseen how to make a solid plan you can follow\r\ncreated all the key features needed for the app\r\nsketched &amp; styled a beautiful UI on the front-end of the app\r\ncreated a solid database back-end for the app\r\nimplemented a user authentication system for users to sign in and sign out\r\ndeployed your app to a live server\r\ngrown a slew of foundational web development skills in the process\r\nGET TRACTION\r\n\r\nWhether you are short on time, cash or have no formal education in programming, you will learn how to move the needle no matter what the circumstances. You will learn to make a production plan for yourself that keeps you moving forward. You will experience what it’s like to go from start to finish with a Rails app.\r\n\r\nFEELINGS\r\n\r\nWhen you complete _________ you’ll feel confident that you can build apps from start to finish on your own. You’ll be totally certain that you can get past any error or issue. Your excitement won’t diminish because you’ll have a solid plan moves you to progress. You will be relieved that you don’t have to spend thousands of dollars and months of time to learn Rails. And you can finally feel in control because you will understand what each line of code does.\r\n\r\nWHAT’S NEXT?\r\n\r\nSo, fast forward 30 days and you are finished with _____. Now what? Back to the obscure world of not knowing what’s next? No way. When you complete the lessons you will definitely want to transition into building your own app idea. So ______ includes outro lessons that will walk you through how to create your own plan for your app. This will leave you with a solid action plan that you can follow from start to finish. If you have unique issues or you need a push in the right direction, I also offer Rails coaching. My goal is to see everyone who goes through ________ build and launch their app with great success and without stalling out on an issue.\r\n\r\nJoin other students who learn by doing\r\n\r\nWith ____________ you will build a real Rails app from start to finish and get all the skills you need to move forward and build your own app.\r\n\r\nLet ________ take away the agony of learning Ruby on Rails.\r\n\r\nFind out the latest on when ______ will be available by signing up below.', 'Rails Curve', '', 'inherit', 'open', 'open', '', '105-revision-v1', '', '', '2014-08-22 12:57:57', '2014-08-22 17:57:57', '', 105, 'http://dev.dorails.com/105-revision-v1/', 0, 'revision', '', 0),
(125, 1, '2014-08-22 13:10:14', '2014-08-22 18:10:14', 'Want to learn to make your own web app with Ruby on Rails? Maybe you’ve tried to learn Rails on your own, but how do you know where to start? Is the learning-curve impossibly steep? Everyone says that learning Rails is sooo easy, but you’ve been banging your head against the desk for months trying to figure it out. Are you drowning in a sea of error messages? As you know by now, they can wash your dream app down the drain and bring months of hard work to a screeching halt.\r\n<h3>Do you learn by doing?</h3>\r\nAre you tired of studying abstract programming concepts and syntax without actually applying them to a real app?\r\n\r\nHave you burned piles of money and time on books and courses to be left with absolutely nothing? A lot of Rails books &amp; courses take forever to get through and then leave you high and dry with no skills or finished product. Is your brain flat-lining because you are forced to digest too many confusing programming concepts at once? Even the books that say they are for beginners are mind-numbing. And with endless copy &amp; pasting, they end up reducing you to a transcriptionist monkey. You are left in a foggy blur and you don’t retain the material. Plus many of the resources are horribly out-of-date and almost never go picture-perfect like they are written.\r\n\r\nLet’s face it, you need progress to stay motivated and learn Rails. Progress is the fuel that keeps you going. So a lack of it can really beat you down. I know it has for me. Do you wish there was a better way to learn Rails, but fear that there isn’t? It shouldn’t be this difficult.\r\n\r\nYou are certain that you want to build your idea. You just aren’t sure that you can do it. Maybe it’s a lost cause. Perhaps you should save yourself the trouble and leave it alone.\r\n<h3>Imagine you could make and launch your own Ruby on Rails app in a matter of days with little knowledge of coding.</h3>\r\nI know it sounds crazy, but seriously. What would it be like if Rails’ steep learning curve was suddenly flattened? If nothing stood in the way of you learning Rails and getting your app shipped?\r\n\r\nYou could keep your precious precious sanity, that’s for sure. You would know exactly where to start learning and what was next. And getting stuck with error messages would be a thing of the past. You could soar through building your Rails app and cut through error messages like they were butter.\r\n\r\nYou wouldn’t have to throw away thousands on a Computer Science degree or Code School. And you wouldn’t need to find yourself a technical co-founder or hire that expensive developer. And huzzah, you could push your app live for the world to enjoy, without a hitch.\r\n\r\nYou could finally make REAL traction and get ’er done. If you had a Rails fast track, you could save months (or in my case - years) of wasted time. Not to mention you could avoid a ton of unnecessary pain and heartache.\r\n<h3>Then the dream of making AND shipping your app could finally come true.</h3>\r\nIf Rails was a piece o’ cake to pick up you could just learn by doing. Really doing. You’d build a Rails app and easily absorb the concepts and details one by one as you move along. You’d know exactly what to learn and you would learn it all in exactly the right order. You could eat the elephant one concept at a time, even in the midst of a wall of tasks, languages and syntax. And you’d never wonder if you had up-to-date training.\r\n\r\nEven without being a "Computer Scientist", you’d feel confident as you made a big-picture plan for your new app, wrote code at each step, and understood exactly what each line of code did and why it was there. Hell, at this rate you would actually enjoy coding.\r\n\r\nBy quickly stacking up tiny victories with Rails you could move yourself closer and closer to the big win of building and shipping your app for the world to see. The bottom line is that if Rails was easy-breezy to learn you could make an app AND get solid skills that you can build on – <em>all at once</em>.\r\n\r\nThat being said, it is true that Rails does have a crazy learning curve and a Rails app can take months and months to build. But there’s good news. You don’t have to follow that path.\r\n<h3>With <em>Rails Curve</em> you can bypass the learning curve altogether and build a live Rails app in 30 days</h3>\r\nYou will learn how to build a web app from start to finish, and master all the skills you need to make your own apps moving forward. In four weeks, you will become experienced with all of the tools, concepts and skills that you need to plan, design, develop and ship a web app.\r\n<h4>With <em>Rails Curve</em> you will learn Rails by osmosis</h4>\r\nYou will learn your way – by <em>doing</em>. After all, you decided to learn Rails so you could build an app – so why not learn by actually building one?\r\n\r\nBy following the method of building AND learning at the same time you will...\r\n<ul>\r\n	<li>Understand the big picture faster</li>\r\n	<li>Pick up complex skills and concepts faster</li>\r\n	<li>Avoid getting paralyzed by the tiny details</li>\r\n	<li>Avoid the pain of wasting weeks studying in-depth concepts</li>\r\n	<li>Punch perfectionism in the face</li>\r\n</ul>\r\n<h3>Stack the bricks</h3>\r\nInstead of spinning your wheels on learning abstract concepts, <em>Rails Curve</em> will give you a clear day-by-day plan for how to build a robust Rails app from start to finish. Each lesson will include bite-sized walk-throughs, in plain english, that will show you exactly what to do. <em>Rails Curve</em> gives you a solid path of exactly what to learn in exactly the right order. You will quickly move step by step through the process and pick up skills in each lesson until you have a completed (and live) web app.\r\n<h3>Build your skills</h3>\r\nAs you move through each lesson, you will get a solid foundation of the key concepts and get first-hand experience on how they all work together. And no dull copy/pasting is necessary, you will simply write code yourself and learn the what, why and how as you go. Plus, everything is based on Rails 4 so you’ll have the latest and greatest training for Rails.\r\n<h4><em>Rails Curve</em> will jump-start your understanding of key elements like...</h4>\r\n<div class="row">\r\n<ul class="col-md-6">\r\n	<li>Ruby</li>\r\n	<li>Gems</li>\r\n	<li>Ruby on Rails Framework</li>\r\n	<li>Command Line (Terminal)</li>\r\n	<li>MVC pattern (Model View Controller)</li>\r\n	<li>Object-Oriented Programming</li>\r\n	<li>Active Record</li>\r\n	<li>Databases</li>\r\n	<li>HTML</li>\r\n	<li>CSS and Sass</li>\r\n	<li>Javascript and CoffeeScript</li>\r\n</ul>\r\n<ul class="col-md-6">\r\n	<li>Front-end Frameworks</li>\r\n	<li>Deployment</li>\r\n	<li>Version Control</li>\r\n	<li>Validation</li>\r\n	<li>User Authentication</li>\r\n	<li>UI Design</li>\r\n	<li>UX Design</li>\r\n	<li>Project Management</li>\r\n	<li>and more...</li>\r\n</ul>\r\n</div>\r\n<h3>You can’t build an app without the right tools though</h3>\r\nSo you will get hands-on experience with all of the standard tools like the command-line (Terminal), a text editor (like Sublime Text), Git, Github, Heroku, Twitter Bootstrap, Devise, and more. You will learn the ins-and-outs of all the tools you gotta have in your Rails toolbelt.\r\n<h4>With <em>Rails Curve</em> you will learn exactly how to do things like ...</h4>\r\n<ul>\r\n	<li>use the command-line to create a new blank-slate app</li>\r\n	<li>use a single command to create a rails server on your computer</li>\r\n	<li>use Git to manage your source code and push it to an online repo at Github</li>\r\n	<li>use the command-line to generate the pages and elements of your app on the fly</li>\r\n	<li>use the command-line to manage your database</li>\r\n	<li>use the command-line to push your app to a live server on Heroku</li>\r\n	<li>use Twitter Bootstrap to rapidly style your app - with no design experience needed.</li>\r\n	<li>use the Devise gem to create user sign-up and sign-in in a matter of minutes.</li>\r\n	<li>and a lot more</li>\r\n</ul>\r\n<h3>But no amount of skills or tools will wipe out the possibility of error messages.</h3>\r\nSo with <em>Rails Curve</em> will teach you how to eliminate "getting stuck" forever. You’ll get real-world experience troubleshooting error messages for yourself quickly so you never have to slam on the breaks again. You will master the art of ...\r\n<ul>\r\n	<li>Reading error messages to get clues about what part of your app needs fixing</li>\r\n	<li>Googling and searching online dev communities to get past any error in minutes</li>\r\n	<li>checking Rails and Heroku error logs using your trusty command line</li>\r\n</ul>\r\n<h3>By the time you finish ______ you will have...</h3>\r\n<ul>\r\n	<li>seen how to make a solid plan you can follow</li>\r\n	<li>created all the key features needed for the app</li>\r\n	<li>sketched &amp; styled a beautiful UI on the front-end of the app</li>\r\n	<li>created a solid database back-end for the app</li>\r\n	<li>implemented a user authentication system for users to sign in and sign out</li>\r\n	<li>deployed your app to a live server</li>\r\n	<li>grown a slew of foundational web development skills in the process</li>\r\n</ul>\r\n<h3>You can finally get the traction you need</h3>\r\nWhether you are short on time, cash or have no formal education in programming, you will learn how to move the needle no matter what the circumstances. You will learn to make a production plan for yourself that keeps you moving forward. You will experience what it’s like to go from start to finish with a Rails app.\r\n\r\nWhen you complete <em>Rails Curve</em> you’ll feel confident that you can build apps from start to finish on your own. You’ll be totally certain that you can get past any error or issue. Your excitement won’t diminish because you’ll have a solid plan moves you to progress. You will be relieved that you don’t have to spend thousands of dollars and months of time to learn Rails. And you can finally feel in control because you will understand what each line of code does.\r\n<h3>So, fast forward 30 days and you are finished with <em>Rails Curve</em>. Now what?</h3>\r\nBack to the obscure world of not knowing what’s next? <em>No way</em>. When you complete the lessons you will definitely want to transition into building your own app idea. So <em>Rails Curve</em> includes outro lessons that will walk you through how to create <em>your own plan</em> for your app. This will leave you with a solid action plan that you can follow from start to finish. If you have unique issues or you need a push in the right direction, I also offer <a href="mailto:me@tyrichards.com">Rails coaching</a>. My goal is to see everyone who goes through <em>Rails Curve</em> build and launch their own app with great success and without stalling out on a problem.\r\n<h2>Join other students who learn by doing</h2>\r\nWith <em>Rails Curve</em> you will build a <em>real</em> Rails app from start to finish and get all the skills you need to move forward and build your own app.\r\n\r\nLet <em>Rails Curve</em> take away the agony of learning Ruby on Rails.\r\n\r\nFind out the latest on when <em>Rails Curve</em> will be available by signing up below.', 'Rails Curve', '', 'inherit', 'open', 'open', '', '105-revision-v1', '', '', '2014-08-22 13:10:14', '2014-08-22 18:10:14', '', 105, 'http://dev.dorails.com/105-revision-v1/', 0, 'revision', '', 0),
(126, 1, '2014-08-22 13:31:05', '2014-08-22 18:31:05', 'Want to learn to make your own web app with Ruby on Rails? Maybe you’ve tried to learn Rails on your own, but how do you know where to start? Is the learning-curve impossibly steep? Everyone says that learning Rails is <em>sooo</em> easy, but you’ve been banging your head against the desk for months trying to figure it out.\r\n\r\nAre you drowning in a sea of error messages? As you know by now, they can wash your dream app down the drain and bring months of hard work to a screeching halt.\r\n<h3>Do you learn by doing?</h3>\r\nAre you tired of studying <em>abstract</em> programming concepts and syntax without actually applying them to a <strong>real</strong> app?\r\n\r\nHave you burned piles of money and time on books and courses to be left with absolutely <em>nothing</em>? A lot of Rails books &amp; courses take <em>forever</em> to get through and then leave you high and dry with no skills or finished product.\r\n<h4>Is your brain flat-lining because you are forced to digest too many confusing programming concepts at once?</h4>\r\nEven the books that say they are for beginners are mind-numbing. And with endless copy &amp; pasting, they end up reducing you to a transcriptionist monkey. You are left in a foggy blur and you don’t retain the material. Plus many of the resources are horribly out-of-date and almost never go picture-perfect like they are written.\r\n<h4>Let’s face it, you need <em>progress</em> to stay motivated and learn Rails.</h4>\r\nProgress is the fuel that keeps you going. So a lack of it can really beat you down. I know it has for me. Do you wish there was a <em>better way</em> to learn Rails, but fear that there isn’t? It shouldn’t be <em>this</em> difficult.\r\n\r\nYou are <strong>certain</strong> that you want to build your app idea. You just aren’t sure that you can do it. Maybe it’s a lost cause. Perhaps you should save yourself the trouble and leave it alone.\r\n<h3>Imagine you could make and launch your own Ruby on Rails app in a <em>matter of days</em> with little knowledge of coding.</h3>\r\nI know it sounds crazy, but seriously. What would it be like if Rails’ steep learning curve was suddenly flattened? If nothing stood in the way of you learning Rails and getting your app shipped?\r\n\r\nYou could keep your precious precious sanity, that’s for sure. You would know exactly where to start learning and what was next. And getting stuck with error messages would be a thing of the past. You could soar through building your Rails app and cut through error messages like they were butter.\r\n\r\nYou wouldn’t have to throw away thousands on a Computer Science degree or Code School. And you wouldn’t need to find yourself a technical co-founder or hire that expensive developer. And huzzah, you could push your app live for the world to enjoy, without a hitch.\r\n<h4>You could finally make REAL traction and get ’er done.</h4>\r\nIf you had a Rails fast track, you could save months (or in my case - years) of wasted time. Not to mention you could avoid a ton of unnecessary pain and heartache.\r\n<h3>Then the dream of making AND shipping your app could finally come true.</h3>\r\nIf Rails was a piece o’ cake to pick up you could just learn by doing. Really <em>doing</em>. You’d <em>build</em> a Rails app and easily absorb the concepts and details one by one as you went along. You’d know <strong>exactly</strong> what to learn and you would learn it all in<strong> exactly</strong> the right order. You could eat the elephant one concept at a time, even in the midst of a wall of tasks, languages and syntax. And you’d never wonder if you had up-to-date training.\r\n\r\nEven without being a "Computer Scientist", you’d feel <strong>confident</strong> as you made a big-picture plan for your new app, wrote code at each step, and understood exactly what each line of code did and why it was there.\r\n<h4>Hell, at this rate you would actually <strong>enjoy </strong>coding.</h4>\r\nBy quickly stacking up tiny victories with Rails you could move yourself closer and closer to the big win of building <strong>and</strong> shipping your app for the world to see. The bottom line is that if Rails was easy-breezy to learn you could make an app <em>AND</em> get solid skills that you can build on – <strong>all at once</strong>.\r\n\r\nThat being said, it is true that Rails does have a crazy difficult learning curve and a Rails app can take months and months to build. But there’s good news. You don’t have to follow that path.\r\n<h3>With <em>Rails Curve</em> you can bypass the learning curve altogether and build a live Rails app in 30 days</h3>\r\nYou will learn how to build a web app from start to finish, and grow all the skills you need to make your own apps moving forward. In <em>four weeks</em>, you will become experienced with all of the tools, concepts and skills that you need to plan, design, develop and ship a web app.\r\n<h4>With <em>Rails Curve</em> you will learn Rails by <em>osmosis</em></h4>\r\nYou will learn <strong>your</strong> way – by <strong>doing</strong>. After all, you decided to learn Rails so you could build an app – so why not learn by <em>actually building one</em>?\r\n<h4>By following the method of building AND learning at the same time you will...</h4>\r\n<ul>\r\n	<li>Understand the big picture faster</li>\r\n	<li>Pick up complex skills and concepts faster</li>\r\n	<li>Avoid getting paralyzed by the tiny details</li>\r\n	<li>Avoid the pain of wasting weeks studying in-depth concepts</li>\r\n	<li>Punch perfectionism in the face</li>\r\n</ul>\r\n<h3>Stack the bricks</h3>\r\nInstead of spinning your wheels on learning <em>abstract</em> concepts, <em>Rails Curve</em> will give you a clear day-by-day plan for how to build a robust Rails app from start to finish. Each lesson will include bite-sized video screencasts that will walk you through <strong>exactly</strong> what to do, in plain english. <em>Rails Curve</em> gives you a solid path of <em>exactly</em> what to learn in <em>exactly</em> the right order. You will quickly move step by step through the process and pick up skills in each lesson until you have a completed (and live) web app.\r\n<h3>Build your skills</h3>\r\nAs you move through each lesson, you will get a solid foundation of the key concepts and get first-hand experience on how they all work together. And no dull copy/pasting is necessary, you will simply write code yourself and learn the what, why and how as you go. Plus, everything is based on Rails 4 so you’ll have the latest and greatest training for Rails.\r\n<h4><em>Rails Curve</em> will jump-start your understanding of key elements like...</h4>\r\n<div class="row">\r\n<ul class="col-md-6">\r\n	<li>Ruby</li>\r\n	<li>Gems</li>\r\n	<li>Ruby on Rails Framework</li>\r\n	<li>Command Line (Terminal)</li>\r\n	<li>MVC pattern (Model View Controller)</li>\r\n	<li>Object-Oriented Programming</li>\r\n	<li>Active Record</li>\r\n	<li>Databases</li>\r\n	<li>HTML</li>\r\n	<li>CSS and Sass</li>\r\n	<li>Javascript and CoffeeScript</li>\r\n</ul>\r\n<ul class="col-md-6">\r\n	<li>Front-end Frameworks</li>\r\n	<li>Deployment</li>\r\n	<li>Version Control</li>\r\n	<li>Validation</li>\r\n	<li>User Authentication</li>\r\n	<li>UI Design</li>\r\n	<li>UX Design</li>\r\n	<li>Project Management</li>\r\n	<li>and more...</li>\r\n</ul>\r\n</div>\r\n<h3>You can’t build an app without the right tools</h3>\r\nSo you will get hands-on experience with all of the standard tools like the command-line (Terminal), a text editor (like <em>Sublime</em> Text), <em>Git</em>, <em>Github</em>, <em>Heroku</em>, <em>Twitter Bootstrap</em>, <em>Devise</em>, and more. You will learn the ins-and-outs of all the tools you gotta have in your Rails toolbelt.\r\n<h4>With <em>Rails Curve</em> you will learn exactly how to do things like ...</h4>\r\n<ul>\r\n	<li>use the command-line to create a new blank-slate app</li>\r\n	<li>use a single command to create a rails server on your computer</li>\r\n	<li>use <em>Git</em> to manage your source code and push it to an online repo at <em>Github</em></li>\r\n	<li>use the command-line to generate the pages and elements of your app on the fly</li>\r\n	<li>use the command-line to manage your database</li>\r\n	<li>use the command-line to push your app to a live server on <em>Heroku</em></li>\r\n	<li>use <em>Twitter Bootstrap</em> to rapidly style your app - with no design experience needed.</li>\r\n	<li>use the <em>Devise</em> gem to create user sign-up and sign-in in a matter of minutes.</li>\r\n	<li>and a lot more</li>\r\n</ul>\r\n<h3>But no amount of skills or tools will wipe out the possibility of error messages.</h3>\r\nSo with <em>Rails Curve</em> will teach you how to eliminate "getting stuck" forever. You’ll get <strong>real-world experience</strong> troubleshooting error messages for yourself quickly so you never have to slam on the breaks again. You will master the art of ...\r\n<ul>\r\n	<li>Reading error messages to get clues about what part of your app needs fixing</li>\r\n	<li>Googling and searching online dev communities to get past any error in minutes</li>\r\n	<li>checking <em>Rails</em> and <em>Heroku</em> error logs using your trusty command line</li>\r\n</ul>\r\n<h3>By the time you finish ______ you will have...</h3>\r\n<ul>\r\n	<li>seen how to make a solid plan you can follow</li>\r\n	<li>created all the key features needed for the app</li>\r\n	<li>sketched &amp; styled a beautiful UI on the front-end of the app</li>\r\n	<li>created a solid database back-end for the app</li>\r\n	<li>implemented a user authentication system for users to sign in and sign out</li>\r\n	<li>deployed your app to a live server</li>\r\n	<li>grown a slew of foundational web development skills in the process</li>\r\n</ul>\r\n<h3>You can finally get the traction you need</h3>\r\nWhether you are short on time, cash or have no formal education in programming, you will learn how to move the needle no matter what the circumstances. You will learn to make a production plan for yourself that keeps you moving forward. You will experience what it’s like to go from start to finish with a Rails app.\r\n\r\nWhen you complete <em>Rails Curve</em> you’ll feel confident that you can build apps from start to finish on your own. You’ll be totally certain that you can get past any error or issue. Your excitement won’t diminish because you’ll have a solid plan moves you to progress. You will be relieved that you don’t have to spend thousands of dollars and months of time to learn Rails. And you can finally feel in control because you will understand what each line of code does.\r\n<h3>So, fast forward 30 days and you are finished with <em>Rails Curve</em>. Now what?</h3>\r\nBack to the obscure world of not knowing what’s next? <em>No way</em>. When you complete the lessons you will definitely want to transition into building your own app idea. So <em>Rails Curve</em> includes outro lessons that will walk you through how to create <em>your own plan</em> for your app. This will leave you with a solid action plan that you can follow from start to finish. If you have unique issues or you need a push in the right direction, I also offer <a href="mailto:me@tyrichards.com">Rails coaching</a>. My goal is to see everyone who goes through <em>Rails Curve</em> build and launch their own app with great success and without stalling out on a problem.\r\n<h2>Join other students who learn by doing</h2>\r\nWith <em>Rails Curve</em> you will build a <em>real</em> Rails app from start to finish and get all the skills you need to move forward and build your own app.\r\n\r\nLet <em>Rails Curve</em> take away the agony of learning Ruby on Rails.\r\n\r\nFind out the latest on when <em>Rails Curve</em> will be available by signing up below.\r\n\r\n[gravityform id="1" name="Don\'t miss out on my next post." title="false" description="false" ajax="true"]', 'Rails Curve', '', 'inherit', 'open', 'open', '', '105-revision-v1', '', '', '2014-08-22 13:31:05', '2014-08-22 18:31:05', '', 105, 'http://dev.dorails.com/105-revision-v1/', 0, 'revision', '', 0) ;
INSERT INTO `wp_posts` ( `ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(127, 1, '2014-08-22 13:37:25', '2014-08-22 18:37:25', 'Want to learn to make your own web app with Ruby on Rails? Maybe you’ve tried to learn Rails on your own, but how do you know where to start? Is the learning-curve impossibly steep? Everyone says that learning Rails is <em>sooo</em> easy, but you’ve been banging your head against the desk for months trying to figure it out.\r\n\r\nAre you drowning in a sea of error messages? As you know by now, they can wash your dream app down the drain and bring months of hard work to a screeching halt.\r\n<h3>Do you learn by doing?</h3>\r\nAre you tired of studying <em>abstract</em> programming concepts and syntax without actually applying them to a <strong>real</strong> app?\r\n\r\nHave you burned piles of money and time on books and courses to be left with absolutely <em>nothing</em>? A lot of Rails books &amp; courses take <em>forever</em> to get through and then leave you high and dry with no skills or finished product.\r\n<h4>Is your brain<strong> flat-lining</strong> because you are forced to digest too many confusing programming concepts at once?</h4>\r\nEven the books that say they are for beginners are mind-numbing. And with endless copy &amp; pasting, they end up reducing you to a transcriptionist monkey. You are left in a foggy blur and you don’t retain the material. Plus many of the resources are horribly out-of-date and almost never go picture-perfect like they are written.\r\n<h4>Let’s face it, you need <em>progress</em> to stay motivated and learn Rails.</h4>\r\nProgress is the fuel that keeps you going. So a lack of it can really beat you down. I know it has for me. Do you wish there was a <em>better way</em> to learn Rails, but fear that there isn’t? It shouldn’t be <em>this</em> difficult.\r\n\r\nYou are <strong>certain</strong> that you want to build your app idea. You just aren’t sure that you can do it. Maybe it’s a lost cause. Perhaps you should save yourself the trouble and leave it alone.\r\n<h3>Imagine you could make and launch your own Ruby on Rails app in a <em>matter of days</em> with little knowledge of coding.</h3>\r\nI know it sounds crazy, but seriously. What would it be like if Rails’ steep learning curve was suddenly flattened? If nothing stood in the way of you learning Rails and getting your app shipped?\r\n\r\nYou could keep your precious precious sanity, that’s for sure. You would know exactly where to start learning and what was next. And getting stuck with error messages would be a thing of the past. You could soar through building your Rails app and cut through error messages like they were butter.\r\n\r\nYou wouldn’t have to throw away thousands on a Computer Science degree or Code School. And you wouldn’t need to find yourself a technical co-founder or hire that expensive developer. And huzzah, you could push your app live for the world to enjoy, without a hitch.\r\n<h4>You could finally make REAL traction and get ’er done.</h4>\r\nIf you had a Rails fast track, you could save months (or in my case - years) of wasted time. Not to mention you could avoid a ton of unnecessary pain and heartache.\r\n<h3>Then the dream of making AND shipping your app could finally come true.</h3>\r\nIf Rails was a piece o’ cake to pick up you could just learn by doing. Really <em>doing</em>. You’d <em>build</em> a Rails app and easily absorb the concepts and details one by one as you went along. You’d know <strong>exactly</strong> what to learn and you would learn it all in<strong> exactly</strong> the right order. You could eat the elephant one concept at a time, even in the midst of a wall of tasks, languages and syntax. And you’d never wonder if you had up-to-date training.\r\n\r\nEven without being a "Computer Scientist", you’d feel <strong>confident</strong> as you made a big-picture plan for your new app, wrote code at each step, and understood exactly what each line of code did and why it was there.\r\n<h4>Hell, at this rate you would actually <strong>enjoy </strong>coding.</h4>\r\nBy quickly stacking up tiny victories with Rails you could move yourself closer and closer to the big win of building <strong>and</strong> shipping your app for the world to see. The bottom line is that if Rails was easy-breezy to learn you could make an app <em>AND</em> get solid skills that you can build on – <strong>all at once</strong>.\r\n\r\nThat being said, it is true that Rails does have a crazy difficult learning curve and a Rails app can take months and months to build. But there’s good news. You don’t have to follow that path.\r\n<h3>With <em>Rails Curve</em> you can bypass the learning curve altogether and build a live Rails app in 30 days</h3>\r\nYou will learn how to build a web app from start to finish, and grow all the skills you need to make your own apps moving forward. In <em>four weeks</em>, you will become experienced with all of the tools, concepts and skills that you need to plan, design, develop and ship a web app.\r\n<h4>With <em>Rails Curve</em> you will learn Rails by <em>osmosis</em></h4>\r\nYou will learn <strong>your</strong> way – by <strong>doing</strong>. After all, you decided to learn Rails so you could build an app – so why not learn by <em>actually building one</em>?\r\n<h4>By following the method of building AND learning at the same time you will...</h4>\r\n<ul>\r\n	<li>Understand the big picture faster</li>\r\n	<li>Pick up complex skills and concepts faster</li>\r\n	<li>Avoid getting paralyzed by the tiny details</li>\r\n	<li>Avoid the pain of wasting weeks studying in-depth concepts</li>\r\n	<li>Punch perfectionism in the face</li>\r\n</ul>\r\n<h3>Stack the bricks</h3>\r\nInstead of spinning your wheels on learning <em>abstract</em> concepts, <em>Rails Curve</em> will give you a clear day-by-day plan for how to build a robust Rails app from start to finish. Each lesson will include bite-sized video screencasts that will walk you through <strong>exactly</strong> what to do, in plain english. <em>Rails Curve</em> gives you a solid path of <em>exactly</em> what to learn in <em>exactly</em> the right order. You will quickly move step by step through the process and pick up skills in each lesson until you have a completed (and live) web app.\r\n<h3>Build your skills</h3>\r\nAs you move through each lesson, you will get a solid foundation of the key concepts and get first-hand experience on how they all work together. And no dull copy/pasting is necessary, you will simply write code yourself and learn the what, why and how as you go. Plus, everything is based on Rails 4 so you’ll have the latest and greatest training for Rails.\r\n<h4><em>Rails Curve</em> will jump-start your understanding of key elements like...</h4>\r\n<div class="row">\r\n<ul class="col-md-6">\r\n	<li>Ruby</li>\r\n	<li>Gems</li>\r\n	<li>Ruby on Rails Framework</li>\r\n	<li>Command Line (Terminal)</li>\r\n	<li>MVC pattern (Model View Controller)</li>\r\n	<li>Object-Oriented Programming</li>\r\n	<li>Active Record</li>\r\n	<li>Databases</li>\r\n	<li>HTML</li>\r\n	<li>CSS and Sass</li>\r\n	<li>Javascript and CoffeeScript</li>\r\n</ul>\r\n<ul class="col-md-6">\r\n	<li>Front-end Frameworks</li>\r\n	<li>Deployment</li>\r\n	<li>Version Control</li>\r\n	<li>Validation</li>\r\n	<li>User Authentication</li>\r\n	<li>UI Design</li>\r\n	<li>UX Design</li>\r\n	<li>Project Management</li>\r\n	<li>and more...</li>\r\n</ul>\r\n</div>\r\n<h3>You can’t build an app without the right tools</h3>\r\nSo you will get hands-on experience with all of the standard tools like the command-line (Terminal), a text editor (like <em>Sublime</em> Text), <em>Git</em>, <em>Github</em>, <em>Heroku</em>, <em>Twitter Bootstrap</em>, <em>Devise</em>, and more. You will learn the ins-and-outs of all the tools you gotta have in your Rails toolbelt.\r\n<h4>With <em>Rails Curve</em> you will learn exactly how to do things like ...</h4>\r\n<ul>\r\n	<li>use the command-line to create a new blank-slate app</li>\r\n	<li>use a single command to create a rails server on your computer</li>\r\n	<li>use <em>Git</em> to manage your source code and push it to an online repo at <em>Github</em></li>\r\n	<li>use the command-line to generate the pages and elements of your app on the fly</li>\r\n	<li>use the command-line to manage your database</li>\r\n	<li>use the command-line to push your app to a live server on <em>Heroku</em></li>\r\n	<li>use <em>Twitter Bootstrap</em> to rapidly style your app - with no design experience needed.</li>\r\n	<li>use the <em>Devise</em> gem to create user sign-up and sign-in in a matter of minutes.</li>\r\n	<li>and a lot more</li>\r\n</ul>\r\n<h3>But no amount of skills or tools will wipe out the possibility of error messages.</h3>\r\nSo with <em>Rails Curve</em> will teach you how to eliminate "getting stuck" forever. You’ll get <strong>real-world experience</strong> troubleshooting error messages for yourself quickly so you never have to slam on the breaks again. You will master the art of ...\r\n<ul>\r\n	<li>Reading error messages to get clues about what part of your app needs fixing</li>\r\n	<li>Googling and searching online dev communities to get past any error in minutes</li>\r\n	<li>checking <em>Rails</em> and <em>Heroku</em> error logs using your trusty command line</li>\r\n</ul>\r\n<h3>By the time you finish ______ you will have...</h3>\r\n<ul>\r\n	<li>seen how to make a solid plan you can follow</li>\r\n	<li>created all the key features needed for the app</li>\r\n	<li>sketched &amp; styled a beautiful UI on the front-end of the app</li>\r\n	<li>created a solid database back-end for the app</li>\r\n	<li>implemented a user authentication system for users to sign in and sign out</li>\r\n	<li>deployed your app to a live server</li>\r\n	<li>grown a slew of foundational web development skills in the process</li>\r\n</ul>\r\n<h3>You can finally get the traction you need</h3>\r\nWhether you are short on time, cash or have no formal education in programming, you will learn how to move the needle no matter what the circumstances. You will learn to make a production plan for yourself that keeps you moving forward. You will experience what it’s like to go from start to finish with a Rails app.\r\n\r\nWhen you complete <em>Rails Curve</em> you’ll feel confident that you can build apps from start to finish on your own. You’ll be totally certain that you can get past any error or issue. Your excitement won’t diminish because you’ll have a solid plan moves you to progress. You will be relieved that you don’t have to spend thousands of dollars and months of time to learn Rails. And you can finally feel in control because you will understand what each line of code does.\r\n<h3>So, fast forward 30 days and you are finished with <em>Rails Curve</em>. Now what?</h3>\r\nBack to the obscure world of not knowing what’s next? <em>No way</em>. When you complete the lessons you will definitely want to transition into building your own app idea. So <em>Rails Curve</em> includes outro lessons that will walk you through how to create <em>your own plan</em> for your app. This will leave you with a solid action plan that you can follow from start to finish. If you have unique issues or you need a push in the right direction, I also offer <a href="mailto:me@tyrichards.com">Rails coaching</a>. My goal is to see everyone who goes through <em>Rails Curve</em> build and launch their own app with great success and without stalling out on a problem.\r\n<h2>Join other students who learn by doing</h2>\r\nWith <em>Rails Curve</em> you will build a <em>real</em> Rails app from start to finish and get all the skills you need to move forward and build your own app.\r\n\r\nLet <em>Rails Curve</em> take away the agony of learning Ruby on Rails.\r\n\r\nFind out the latest on when <em>Rails Curve</em> will be available by signing up below.\r\n\r\n[gravityform id="1" name="Don\'t miss out on my next post." title="false" description="false" ajax="true"]', 'Rails Curve', '', 'inherit', 'open', 'open', '', '105-revision-v1', '', '', '2014-08-22 13:37:25', '2014-08-22 18:37:25', '', 105, 'http://dev.dorails.com/105-revision-v1/', 0, 'revision', '', 0),
(128, 1, '2014-08-22 13:38:16', '2014-08-22 18:38:16', 'Want to learn to make your own web app with Ruby on Rails? Maybe you’ve tried to learn Rails on your own, but how do you know where to start? Is the learning-curve impossibly steep? Everyone says that learning Rails is <em>sooo</em> easy, but you’ve been banging your head against the desk for months trying to figure it out.\r\n\r\nAre you drowning in a sea of error messages? As you know by now, they can wash your dream app down the drain and bring months of hard work to a screeching halt.\r\n<h3>Do you learn by <strong>doing</strong>?</h3>\r\nAre you tired of studying <em>abstract</em> programming concepts and syntax without actually applying them to a <strong>real</strong> app?\r\n\r\nHave you burned piles of money and time on books and courses to be left with absolutely <em>nothing</em>? A lot of Rails books &amp; courses take <em>forever</em> to get through and then leave you high and dry with no skills or finished product.\r\n<h4>Is your brain<strong> flat-lining</strong> because you are forced to digest too many confusing programming concepts at once?</h4>\r\nEven the books that say they are for beginners are mind-numbing. And with endless copy &amp; pasting, they end up reducing you to a transcriptionist monkey. You are left in a foggy blur and you don’t retain the material. Plus many of the resources are horribly out-of-date and almost never go picture-perfect like they are written.\r\n<h4>Let’s face it, you need <strong>progress</strong> to stay motivated and learn Rails.</h4>\r\nProgress is the fuel that keeps you going. So a lack of it can really beat you down. I know it has for me. Do you wish there was a <em>better way</em> to learn Rails, but fear that there isn’t? It shouldn’t be <em>this</em> difficult.\r\n\r\nYou are <strong>certain</strong> that you want to build your app idea. You just aren’t sure that you can do it. Maybe it’s a lost cause. Perhaps you should save yourself the trouble and leave it alone.\r\n\r\n<div class="well">\r\n<h3>Imagine you <strong>could</strong> make and launch your own Ruby on Rails app in a <em>matter of days</em> with little knowledge of coding.</h3>\r\n</div>\r\n\r\nI know it sounds crazy, but seriously. What would it be like if Rails’ steep learning curve was suddenly flattened? If nothing stood in the way of you learning Rails and getting your app shipped?\r\n\r\nYou could keep your precious precious sanity, that’s for sure. You would know exactly where to start learning and what was next. And getting stuck with error messages would be a thing of the past. You could soar through building your Rails app and cut through error messages like they were butter.\r\n\r\nYou wouldn’t have to throw away thousands on a Computer Science degree or Code School. And you wouldn’t need to find yourself a technical co-founder or hire that expensive developer. And huzzah, you could push your app live for the world to enjoy, without a hitch.\r\n<h4>You could finally make REAL traction and get ’er done.</h4>\r\nIf you had a Rails fast track, you could save months (or in my case - years) of wasted time. Not to mention you could avoid a ton of unnecessary pain and heartache.\r\n<h3>Then the dream of making AND shipping your app could finally come true.</h3>\r\nIf Rails was a piece o’ cake to pick up you could just learn by doing. Really <em>doing</em>. You’d <em>build</em> a Rails app and easily absorb the concepts and details one by one as you went along. You’d know <strong>exactly</strong> what to learn and you would learn it all in<strong> exactly</strong> the right order. You could eat the elephant one concept at a time, even in the midst of a wall of tasks, languages and syntax. And you’d never wonder if you had up-to-date training.\r\n\r\nEven without being a "Computer Scientist", you’d feel <strong>confident</strong> as you made a big-picture plan for your new app, wrote code at each step, and understood exactly what each line of code did and why it was there.\r\n<h4>Hell, at this rate you would actually <strong>enjoy </strong>coding.</h4>\r\nBy quickly stacking up tiny victories with Rails you could move yourself closer and closer to the big win of building <strong>and</strong> shipping your app for the world to see. The bottom line is that if Rails was easy-breezy to learn you could make an app <em>AND</em> get solid skills that you can build on – <strong>all at once</strong>.\r\n\r\nThat being said, it is true that Rails does have a crazy difficult learning curve and a Rails app can take months and months to build. But there’s good news. You don’t have to follow that path.\r\n<h3>With <em>Rails Curve</em> you can bypass the learning curve altogether and build a live Rails app in 30 days</h3>\r\nYou will learn how to build a web app from start to finish, and grow all the skills you need to make your own apps moving forward. In <em>four weeks</em>, you will become experienced with all of the tools, concepts and skills that you need to plan, design, develop and ship a web app.\r\n<h4>With <em>Rails Curve</em> you will learn Rails by <em>osmosis</em></h4>\r\nYou will learn <strong>your</strong> way – by <strong>doing</strong>. After all, you decided to learn Rails so you could build an app – so why not learn by <em>actually building one</em>?\r\n<h4>By following the method of building AND learning at the same time you will...</h4>\r\n<ul>\r\n	<li>Understand the big picture faster</li>\r\n	<li>Pick up complex skills and concepts faster</li>\r\n	<li>Avoid getting paralyzed by the tiny details</li>\r\n	<li>Avoid the pain of wasting weeks studying in-depth concepts</li>\r\n	<li>Punch perfectionism in the face</li>\r\n</ul>\r\n<h3>Stack the bricks</h3>\r\nInstead of spinning your wheels on learning <em>abstract</em> concepts, <em>Rails Curve</em> will give you a clear day-by-day plan for how to build a robust Rails app from start to finish. Each lesson will include bite-sized video screencasts that will walk you through <strong>exactly</strong> what to do, in plain english. <em>Rails Curve</em> gives you a solid path of <em>exactly</em> what to learn in <em>exactly</em> the right order. You will quickly move step by step through the process and pick up skills in each lesson until you have a completed (and live) web app.\r\n<h3>Build your skills</h3>\r\nAs you move through each lesson, you will get a solid foundation of the key concepts and get first-hand experience on how they all work together. And no dull copy/pasting is necessary, you will simply write code yourself and learn the what, why and how as you go. Plus, everything is based on Rails 4 so you’ll have the latest and greatest training for Rails.\r\n<h4><em>Rails Curve</em> will jump-start your understanding of key elements like...</h4>\r\n<div class="row">\r\n<ul class="col-md-6">\r\n	<li>Ruby</li>\r\n	<li>Gems</li>\r\n	<li>Ruby on Rails Framework</li>\r\n	<li>Command Line (Terminal)</li>\r\n	<li>MVC pattern (Model View Controller)</li>\r\n	<li>Object-Oriented Programming</li>\r\n	<li>Active Record</li>\r\n	<li>Databases</li>\r\n	<li>HTML</li>\r\n	<li>CSS and Sass</li>\r\n	<li>Javascript and CoffeeScript</li>\r\n</ul>\r\n<ul class="col-md-6">\r\n	<li>Front-end Frameworks</li>\r\n	<li>Deployment</li>\r\n	<li>Version Control</li>\r\n	<li>Validation</li>\r\n	<li>User Authentication</li>\r\n	<li>UI Design</li>\r\n	<li>UX Design</li>\r\n	<li>Project Management</li>\r\n	<li>and more...</li>\r\n</ul>\r\n</div>\r\n<h3>You can’t build an app without the right tools</h3>\r\nSo you will get hands-on experience with all of the standard tools like the command-line (Terminal), a text editor (like <em>Sublime</em> Text), <em>Git</em>, <em>Github</em>, <em>Heroku</em>, <em>Twitter Bootstrap</em>, <em>Devise</em>, and more. You will learn the ins-and-outs of all the tools you gotta have in your Rails toolbelt.\r\n<h4>With <em>Rails Curve</em> you will learn exactly how to do things like ...</h4>\r\n<ul>\r\n	<li>use the command-line to create a new blank-slate app</li>\r\n	<li>use a single command to create a rails server on your computer</li>\r\n	<li>use <em>Git</em> to manage your source code and push it to an online repo at <em>Github</em></li>\r\n	<li>use the command-line to generate the pages and elements of your app on the fly</li>\r\n	<li>use the command-line to manage your database</li>\r\n	<li>use the command-line to push your app to a live server on <em>Heroku</em></li>\r\n	<li>use <em>Twitter Bootstrap</em> to rapidly style your app - with no design experience needed.</li>\r\n	<li>use the <em>Devise</em> gem to create user sign-up and sign-in in a matter of minutes.</li>\r\n	<li>and a lot more</li>\r\n</ul>\r\n<h3>But no amount of skills or tools will wipe out the possibility of error messages.</h3>\r\nSo with <em>Rails Curve</em> will teach you how to eliminate "getting stuck" forever. You’ll get <strong>real-world experience</strong> troubleshooting error messages for yourself quickly so you never have to slam on the breaks again. You will master the art of ...\r\n<ul>\r\n	<li>Reading error messages to get clues about what part of your app needs fixing</li>\r\n	<li>Googling and searching online dev communities to get past any error in minutes</li>\r\n	<li>checking <em>Rails</em> and <em>Heroku</em> error logs using your trusty command line</li>\r\n</ul>\r\n<h3>By the time you finish ______ you will have...</h3>\r\n<ul>\r\n	<li>seen how to make a solid plan you can follow</li>\r\n	<li>created all the key features needed for the app</li>\r\n	<li>sketched &amp; styled a beautiful UI on the front-end of the app</li>\r\n	<li>created a solid database back-end for the app</li>\r\n	<li>implemented a user authentication system for users to sign in and sign out</li>\r\n	<li>deployed your app to a live server</li>\r\n	<li>grown a slew of foundational web development skills in the process</li>\r\n</ul>\r\n<h3>You can finally get the traction you need</h3>\r\nWhether you are short on time, cash or have no formal education in programming, you will learn how to move the needle no matter what the circumstances. You will learn to make a production plan for yourself that keeps you moving forward. You will experience what it’s like to go from start to finish with a Rails app.\r\n\r\nWhen you complete <em>Rails Curve</em> you’ll feel confident that you can build apps from start to finish on your own. You’ll be totally certain that you can get past any error or issue. Your excitement won’t diminish because you’ll have a solid plan moves you to progress. You will be relieved that you don’t have to spend thousands of dollars and months of time to learn Rails. And you can finally feel in control because you will understand what each line of code does.\r\n<h3>So, fast forward 30 days and you are finished with <em>Rails Curve</em>. Now what?</h3>\r\nBack to the obscure world of not knowing what’s next? <em>No way</em>. When you complete the lessons you will definitely want to transition into building your own app idea. So <em>Rails Curve</em> includes outro lessons that will walk you through how to create <em>your own plan</em> for your app. This will leave you with a solid action plan that you can follow from start to finish. If you have unique issues or you need a push in the right direction, I also offer <a href="mailto:me@tyrichards.com">Rails coaching</a>. My goal is to see everyone who goes through <em>Rails Curve</em> build and launch their own app with great success and without stalling out on a problem.\r\n<h2>Join other students who learn by doing</h2>\r\nWith <em>Rails Curve</em> you will build a <em>real</em> Rails app from start to finish and get all the skills you need to move forward and build your own app.\r\n\r\nLet <em>Rails Curve</em> take away the agony of learning Ruby on Rails.\r\n\r\nFind out the latest on when <em>Rails Curve</em> will be available by signing up below.\r\n\r\n[gravityform id="1" name="Don\'t miss out on my next post." title="false" description="false" ajax="true"]', 'Rails Curve', '', 'inherit', 'open', 'open', '', '105-revision-v1', '', '', '2014-08-22 13:38:16', '2014-08-22 18:38:16', '', 105, 'http://dev.dorails.com/105-revision-v1/', 0, 'revision', '', 0) ;
INSERT INTO `wp_posts` ( `ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(129, 1, '2014-08-22 13:56:52', '2014-08-22 18:56:52', 'Want to learn to make your own web app with Ruby on Rails? Maybe you’ve tried to learn Rails on your own, but how do you know where to start? Is the learning-curve impossibly steep? Everyone says that learning Rails is <em>sooo</em> easy, but you’ve been banging your head against the desk for months trying to figure it out.\r\n\r\nAre you drowning in a sea of error messages? As you know by now, they can wash your dream app down the drain and bring months of hard work to a screeching halt.\r\n<h3>Do you learn by <strong>doing</strong>?</h3>\r\nAre you tired of studying <em>abstract</em> programming concepts and syntax without actually applying them to a <strong>real</strong> app?\r\n\r\nHave you burned piles of money and time on books and courses to be left with absolutely <em>nothing</em>? A lot of Rails books &amp; courses take <em>forever</em> to get through and then leave you high and dry with no skills or finished product.\r\n<h4>Is your brain<strong> flat-lining</strong> because you are forced to digest too many confusing programming concepts at once?</h4>\r\nEven the books that say they are for beginners are mind-numbing. And with endless copy &amp; pasting, they end up reducing you to a transcriptionist monkey. You are left in a foggy blur and you don’t retain the material. Plus many of the resources are horribly out-of-date and almost never go picture-perfect like they are written.\r\n<h4>Let’s face it, you need <strong>progress</strong> to stay motivated and learn Rails.</h4>\r\nProgress is the fuel that keeps you going. So a lack of it can really beat you down. I know it has for me. Do you wish there was a <em>better way</em> to learn Rails, but fear that there isn’t? It shouldn’t be <em>this</em> difficult.\r\n\r\nYou are <strong>certain</strong> that you want to build your app idea. You just aren’t sure that you can do it. Maybe it’s a lost cause. Perhaps you should save yourself the trouble and leave it alone.\r\n<div class="well">\r\n<h3>Imagine you <strong>could</strong> make and launch your own Ruby on Rails app in a <em>matter of days</em> with little knowledge of coding.</h3>\r\n</div>\r\nI know it sounds crazy, but seriously. What would it be like if Rails’ steep learning curve was suddenly flattened? If nothing stood in the way of you learning Rails and getting your app shipped?\r\n\r\nYou could keep your precious precious sanity, that’s for sure.\r\n<h4>You would know <strong>exactly</strong> where to start learning and what was next.</h4>\r\nAnd getting stuck with error messages would be a thing of the past. You could soar through building your Rails app and cut through error messages like they were butter.\r\n\r\nYou wouldn’t have to throw away thousands on a Computer Science degree or Code School. And you wouldn’t need to find yourself a technical co-founder or hire that expensive developer. And huzzah, you could push your app live for the world to enjoy, without a hitch.\r\n<h4>You could finally make <strong>REAL</strong> traction and get ’er done.</h4>\r\nIf you had a Rails fast track, you could save months (or in my case - years) of wasted time. Not to mention you could avoid a ton of unnecessary pain and heartache.\r\n<h3>Then the dream of making AND shipping your app could <strong>finally</strong> come true.</h3>\r\nIf Rails was a piece o’ cake to pick up you could just learn by doing. Really <em>doing</em>. You’d <em>build</em> a Rails app and easily absorb the concepts and details one by one as you went along. You’d know <strong>exactly</strong> what to learn and you would learn it all in<strong> exactly</strong> the right order. You could eat the elephant one concept at a time, even in the midst of a wall of tasks, languages and syntax. And you’d never wonder if you had up-to-date training.\r\n\r\nEven without being a "Computer Scientist", you’d feel <strong>confident</strong> as you made a big-picture plan for your new app, wrote code at each step, and understood exactly what each line of code did and why it was there.\r\n<h4>Hell, at this rate you would actually <strong>enjoy </strong>coding.</h4>\r\nBy quickly stacking up tiny victories with Rails you could move yourself closer and closer to the big win of building <strong>and</strong> shipping your app for the world to see. The bottom line is that if Rails was easy-breezy to learn you could make an app <em>AND</em> get solid skills that you can build on – <strong>all at once</strong>.\r\n\r\nThat being said, it is true that Rails does have a crazy difficult learning curve and a Rails app can take months and months to build. But there’s good news. You don’t have to follow that path.\r\n<h3>With <em>Rails Curve</em> you can bypass the learning curve altogether and build a live Rails app in <strong>30 days.</strong></h3>\r\nYou will learn how to build a web app from start to finish, and grow all the skills you need to make your own apps moving forward. In <em>four weeks</em>, you will become experienced with all of the tools, concepts and skills that you need to plan, design, develop and ship a web app.\r\n<h4>With <em>Rails Curve</em> you will learn Rails by <strong>osmosis</strong></h4>\r\nYou will learn <strong>your</strong> way – by <strong>doing</strong>. After all, you decided to learn Rails so you could <em>build</em> an app – so why not learn by <strong>actually building</strong><em> one</em>?\r\n<h4 style="text-align: left;">By following the method of building <strong>AND</strong> learning at the same time you will...</h4>\r\n<ul>\r\n	<li>Understand the big picture <strong>faster</strong></li>\r\n	<li>Pick up complex skills and concepts <strong>faster</strong></li>\r\n	<li>Avoid getting paralyzed by the tiny details</li>\r\n	<li>Avoid the pain of wasting months studying in-depth concepts</li>\r\n	<li>Punch perfectionism <em>in the face</em></li>\r\n</ul>\r\nInstead of spinning your wheels on learning <em>abstract</em> concepts, <em>Rails Curve</em> will give you:\r\n<h4>a clear <strong>day-by-day plan</strong> for how to build a robust Rails app from <strong>start to finish</strong>.</h4>\r\nEach lesson will include bite-sized video screencasts that will walk you through <strong>exactly</strong> what to do, in plain english. <em>Rails Curve</em> gives you a solid path of <em>exactly</em> what to learn in <em>exactly</em> the right order. You will quickly move step by step through the process and pick up skills in each lesson until you have a completed (live) web app and the skills you need to dive into even more advanced material.\r\n<h4>As you move through each lesson, you will get a solid foundation of the key concepts and get <strong>first-hand experience</strong> on how they all work <strong>together</strong>.</h4>\r\nAnd no dull copy/pasting is necessary, you will simply write code yourself and learn the what, why and how as you go. Plus, everything is based on Rails 4 so you’ll have the latest and greatest training for Rails.\r\n<h4 style="text-align: left;"><em>Rails Curve</em> will <strong>jump-start</strong> your understanding of key elements like...</h4>\r\n<div class="row">\r\n<ul class="col-md-6">\r\n	<li>Ruby</li>\r\n	<li>Gems</li>\r\n	<li>Ruby on Rails Framework</li>\r\n	<li>Command Line (Terminal)</li>\r\n	<li>MVC pattern (Model View Controller)</li>\r\n	<li>Object-Oriented Programming</li>\r\n	<li>Active Record</li>\r\n	<li>Databases</li>\r\n	<li>HTML</li>\r\n	<li>CSS and Sass</li>\r\n	<li>Javascript and CoffeeScript</li>\r\n</ul>\r\n<ul class="col-md-6">\r\n	<li>Front-end Frameworks</li>\r\n	<li>Deployment</li>\r\n	<li>Version Control</li>\r\n	<li>Validation</li>\r\n	<li>User Authentication</li>\r\n	<li>UI Design</li>\r\n	<li>UX Design</li>\r\n	<li>Project Management</li>\r\n	<li>and more...</li>\r\n</ul>\r\n</div>\r\n<h3>You can’t build an app without the right tools</h3>\r\nSo you will get hands-on experience with all of the standard tools like the command-line (Terminal), a text editor (like <em>Sublime</em> Text), <em>Git</em>, <em>Github</em>, <em>Heroku</em>, <em>Twitter Bootstrap</em>, <em>Devise</em>, and more. You will learn the ins-and-outs of all the tools you <em>gotta have</em> in your Rails toolbelt.\r\n<h4>With <em>Rails Curve</em> you will learn <strong>exactly</strong> how to do things like ...</h4>\r\n<ul>\r\n	<li>use the command-line to create a new blank-slate app</li>\r\n	<li>use a single command to create a rails server on your computer</li>\r\n	<li>use <em>Git</em> to manage your source code and push it to an online repo at <em>Github</em></li>\r\n	<li>use the command-line to generate the pages and elements of your app on the fly</li>\r\n	<li>use the command-line to manage your database</li>\r\n	<li>use the command-line to push your app to a live server on <em>Heroku</em></li>\r\n	<li>use <em>Twitter Bootstrap</em> to rapidly style your app - with <strong>no</strong> design experience needed.</li>\r\n	<li>use the <em>Devise</em> gem to create user sign-up and sign-in in a matter of minutes.</li>\r\n	<li>and a lot more</li>\r\n</ul>\r\n<h3>But no amount of skills or tools will wipe out the possibility of <strong>error messages</strong>.</h3>\r\nSo with <em>Rails Curve</em> will teach you how to <strong>eliminate</strong> "getting stuck" forever. You’ll get <strong>real-world experience</strong> troubleshooting error messages for yourself <em>quickly</em> so you never have to slam on the breaks again. You will master the art of ...\r\n<ul>\r\n	<li>Reading error messages to get clues about what part of your app needs fixing</li>\r\n	<li>Googling and searching online dev communities to get past any error <em>in minutes</em></li>\r\n	<li>checking <em>Rails</em> and <em>Heroku</em> error logs using your trusty command line</li>\r\n</ul>\r\n<h3>By the time you finish <em>Rails Curve</em> you will have...</h3>\r\n<ul>\r\n	<li>seen how to make a solid plan you can follow</li>\r\n	<li>created all the key features needed for the app</li>\r\n	<li>sketched &amp; styled a beautiful UI on the front-end of the app</li>\r\n	<li>created a solid database back-end for the app</li>\r\n	<li>implemented a user authentication system for users to sign in and sign out</li>\r\n	<li>deployed your app to a live server</li>\r\n	<li>grown a slew of foundational web development skills in the process</li>\r\n</ul>\r\n<h3>You can <em>finally</em> get the <strong>traction</strong> you need</h3>\r\nWhether you are short on time, cash or have no formal education in programming, you will learn how to move the needle no matter what the circumstances. You will learn to make a production plan for yourself that keeps you moving forward. You will experience what it’s like to go from start to finish with a Rails app.\r\n\r\nWhen you complete <em>Rails Curve</em> you’ll feel confident that you can build apps from start to finish on your own. You’ll be totally certain that you can get past any error or issue. Your excitement won’t diminish because you’ll have a solid plan moves you to progress. You will be relieved that you don’t have to spend thousands of dollars and months of time to learn Rails. And you can finally feel in control because you will understand what each line of code does.\r\n<h3>So, fast forward 30 days and you have finished with <em>Rails Curve</em>. <strong>Now what?</strong></h3>\r\nBack to the obscure world of not knowing what’s next? <strong><em>No way</em>.</strong> When you complete the lessons you will definitely want to transition into building your own app idea. So <em>Rails Curve</em> includes outro lessons that will walk you through how to <strong>create your own plan</strong> for <em>your</em> app. This will leave you with a solid action plan that you can follow from start to finish. If you have unique issues or you need a push in the right direction, I also offer <a href="mailto:me@tyrichards.com">Rails coaching</a>. My goal is to see everyone who goes through <em>Rails Curve</em> build and launch their own app and build their career with great success and without stalling out.\r\n<h2>Join other makers who learn by doing</h2>\r\nWith <em>Rails Curve</em> you will build a <em>real</em> Rails app from start to finish and get all the skills you need to move forward and build your own app.\r\n\r\nLet <em>Rails Curve</em> take away the agony of learning Ruby on Rails.\r\n\r\nFind out the latest on when <em>Rails Curve</em> will be available by signing up below.\r\n\r\n[gravityform id="1" name="Don\'t miss out on my next post." title="false" description="false" ajax="true"]', 'Rails Curve', '', 'inherit', 'open', 'open', '', '105-revision-v1', '', '', '2014-08-22 13:56:52', '2014-08-22 18:56:52', '', 105, 'http://dev.dorails.com/105-revision-v1/', 0, 'revision', '', 0),
(130, 1, '2014-08-22 14:01:47', '2014-08-22 19:01:47', 'Want to learn to make your own web app with Ruby on Rails? Maybe you’ve tried to learn Rails on your own, but how do you know where to start? Is the learning-curve impossibly steep? Everyone says that learning Rails is <em>sooo</em> easy, but you’ve been banging your head against the desk for months trying to figure it out.\r\n\r\nAre you drowning in a sea of error messages? As you know by now, they can wash your dream app down the drain and bring months of hard work to a screeching halt.\r\n<h3>Do you learn by <strong>doing</strong>?</h3>\r\nAre you tired of studying <em>abstract</em> programming concepts and syntax without actually applying them to a <strong>real</strong> app?\r\n\r\nHave you burned piles of money and time on books and courses to be left with absolutely <em>nothing</em>? A lot of Rails books &amp; courses take <em>forever</em> to get through and then leave you high and dry with no skills or finished product.\r\n<h4>Is your brain<strong> flat-lining</strong> because you are forced to digest too many confusing programming concepts at once?</h4>\r\nEven the books that say they are for beginners are mind-numbing. And with endless copy &amp; pasting, they end up reducing you to a transcriptionist monkey. You are left in a foggy blur and you don’t retain the material. Plus many of the resources are horribly out-of-date and almost never go picture-perfect like they are written.\r\n<h4>Let’s face it, you need <strong>progress</strong> to stay motivated and learn Rails.</h4>\r\nProgress is the fuel that keeps you going. So a lack of it can really beat you down. I know it has for me. Do you wish there was a <em>better way</em> to learn Rails, but fear that there isn’t? It shouldn’t be <em>this</em> difficult.\r\n\r\nYou are <strong>certain</strong> that you want to build your app idea. You just aren’t sure that you can do it. Maybe it’s a lost cause. Perhaps you should save yourself the trouble and leave it alone.\r\n<div class="well">\r\n<h3>Well, imagine you <strong>could</strong> make and launch your own Ruby on Rails app in a <strong>matter of days</strong> with little knowledge of coding.</h3>\r\n</div>\r\nI know it sounds crazy, but seriously. What would it be like if Rails’ steep learning curve was suddenly flattened? If nothing stood in the way of you learning Rails and getting your app shipped?\r\n\r\nYou could keep your precious precious sanity, that’s for sure.\r\n<h4>You would know <strong>exactly</strong> where to start learning and what was next.</h4>\r\nAnd getting stuck with error messages would be a thing of the past. You could soar through building your Rails app and cut through error messages like they were butter.\r\n\r\nYou wouldn’t have to throw away thousands on a Computer Science degree or Code School. And you wouldn’t need to find yourself a technical co-founder or hire that expensive developer. And huzzah, you could push your app live for the world to enjoy, without a hitch.\r\n<h4>You could finally make <strong>REAL</strong> traction and get ’er done.</h4>\r\nIf you had a Rails fast track, you could save months (or in my case - years) of wasted time. Not to mention you could avoid a ton of unnecessary pain and heartache.\r\n<h3>Then the dream of making AND shipping your app could <strong>finally</strong> come true.</h3>\r\nIf Rails was a piece o’ cake to pick up you could just learn by doing. Really <em>doing</em>. You’d <em>build</em> a Rails app and easily absorb the concepts and details one by one as you went along. You’d know <strong>exactly</strong> what to learn and you would learn it all in<strong> exactly</strong> the right order. You could eat the elephant one concept at a time, even in the midst of a wall of tasks, languages and syntax. And you’d never wonder if you had up-to-date training.\r\n\r\nEven without being a "Computer Scientist", you’d feel <strong>confident</strong> as you made a big-picture plan for your new app, wrote code at each step, and understood exactly what each line of code did and why it was there.\r\n<h4>Hell, at this rate you would actually <strong>enjoy </strong>coding.</h4>\r\nBy quickly stacking up tiny victories with Rails you could move yourself closer and closer to the big win of building <strong>and</strong> shipping your app for the world to see. The bottom line is that if Rails was easy-breezy to learn you could make an app <em>AND</em> get solid skills that you can build on – <strong>all at once</strong>.\r\n\r\nThat being said, it is true that Rails does have a crazy difficult learning curve and a Rails app can take months and months to build. But there’s good news. You don’t have to follow that path.\r\n<h3>With <em>Rails Curve</em> you can bypass the learning curve altogether and build a live Rails app in <strong>30 days.</strong></h3>\r\nYou will learn how to build a web app from start to finish, and grow all the skills you need to make your own apps moving forward. In <em>four weeks</em>, you will become experienced with all of the tools, concepts and skills that you need to plan, design, develop and ship a web app.\r\n<h4>With <em>Rails Curve</em> you will learn Rails by <strong>osmosis</strong></h4>\r\nYou will learn <strong>your</strong> way – by <strong>doing</strong>. After all, you decided to learn Rails so you could <em>build</em> an app – so why not learn by <strong>actually building</strong><em> one</em>?\r\n<h4 style="text-align: left;">By following the method of building <strong>AND</strong> learning at the same time you will...</h4>\r\n<ul>\r\n	<li>Understand the big picture <strong>faster</strong></li>\r\n	<li>Pick up complex skills and concepts <strong>faster</strong></li>\r\n	<li>Avoid getting paralyzed by the tiny details</li>\r\n	<li>Avoid the pain of wasting months studying in-depth concepts</li>\r\n	<li>Punch perfectionism <em>in the face</em></li>\r\n</ul>\r\nInstead of spinning your wheels on learning <em>abstract</em> concepts, <em>Rails Curve</em> will give you:\r\n<h4>a clear <strong>day-by-day plan</strong> for how to build a robust Rails app from <strong>start to finish</strong>.</h4>\r\nEach lesson will include bite-sized video screencasts that will walk you through <strong>exactly</strong> what to do, in plain english. <em>Rails Curve</em> gives you a solid path of <em>exactly</em> what to learn in <em>exactly</em> the right order. You will quickly move step by step through the process and pick up skills in each lesson until you have a completed (live) web app and the skills you need to dive into even more advanced material.\r\n<h4>As you move through each lesson, you will get a solid foundation of the key concepts and get <strong>first-hand experience</strong> on how they all work <strong>together</strong>.</h4>\r\nAnd no dull copy/pasting is necessary, you will simply write code yourself and learn the what, why and how as you go. Plus, everything is based on Rails 4 so you’ll have the latest and greatest training for Rails.\r\n<h4 style="text-align: left;"><em>Rails Curve</em> will <strong>jump-start</strong> your understanding of key elements like...</h4>\r\n<div class="row">\r\n<ul class="col-md-6">\r\n	<li>Ruby</li>\r\n	<li>Gems</li>\r\n	<li>Ruby on Rails Framework</li>\r\n	<li>Command Line (Terminal)</li>\r\n	<li>MVC pattern (Model View Controller)</li>\r\n	<li>Object-Oriented Programming</li>\r\n	<li>Active Record</li>\r\n	<li>Databases</li>\r\n	<li>HTML</li>\r\n	<li>CSS and Sass</li>\r\n	<li>Javascript and CoffeeScript</li>\r\n</ul>\r\n<ul class="col-md-6">\r\n	<li>Front-end Frameworks</li>\r\n	<li>Deployment</li>\r\n	<li>Version Control</li>\r\n	<li>Validation</li>\r\n	<li>User Authentication</li>\r\n	<li>UI Design</li>\r\n	<li>UX Design</li>\r\n	<li>Project Management</li>\r\n	<li>and more...</li>\r\n</ul>\r\n</div>\r\n<h3>You can’t build an app without the right tools</h3>\r\nSo you will get hands-on experience with all of the standard tools like the command-line (Terminal), a text editor (like <em>Sublime</em> Text), <em>Git</em>, <em>Github</em>, <em>Heroku</em>, <em>Twitter Bootstrap</em>, <em>Devise</em>, and more. You will learn the ins-and-outs of all the tools you <em>gotta have</em> in your Rails toolbelt.\r\n<h4>With <em>Rails Curve</em> you will learn <strong>exactly</strong> how to do things like ...</h4>\r\n<ul>\r\n	<li>use the command-line to create a new blank-slate app</li>\r\n	<li>use a single command to create a rails server on your computer</li>\r\n	<li>use <em>Git</em> to manage your source code and push it to an online repo at <em>Github</em></li>\r\n	<li>use the command-line to generate the pages and elements of your app on the fly</li>\r\n	<li>use the command-line to manage your database</li>\r\n	<li>use the command-line to push your app to a live server on <em>Heroku</em></li>\r\n	<li>use <em>Twitter Bootstrap</em> to rapidly style your app - with <strong>no</strong> design experience needed.</li>\r\n	<li>use the <em>Devise</em> gem to create user sign-up and sign-in in a matter of minutes.</li>\r\n	<li>and a lot more</li>\r\n</ul>\r\n<h3>But no amount of skills or tools will wipe out the possibility of <strong>error messages</strong>.</h3>\r\nSo with <em>Rails Curve</em> will teach you how to <strong>eliminate</strong> "getting stuck" forever. You’ll get <strong>real-world experience</strong> troubleshooting error messages for yourself <em>quickly</em> so you never have to slam on the breaks again. You will master the art of ...\r\n<ul>\r\n	<li>Reading error messages to get clues about what part of your app needs fixing</li>\r\n	<li>Googling and searching online dev communities to get past any error <em>in minutes</em></li>\r\n	<li>checking <em>Rails</em> and <em>Heroku</em> error logs using your trusty command line</li>\r\n</ul>\r\n<h3>By the time you finish <em>Rails Curve</em> you will have...</h3>\r\n<ul>\r\n	<li>seen how to make a solid plan you can follow</li>\r\n	<li>created all the key features needed for the app</li>\r\n	<li>sketched &amp; styled a beautiful UI on the front-end of the app</li>\r\n	<li>created a solid database back-end for the app</li>\r\n	<li>implemented a user authentication system for users to sign in and sign out</li>\r\n	<li>deployed your app to a live server</li>\r\n	<li>grown a slew of foundational web development skills in the process</li>\r\n</ul>\r\n<h3>You can <em>finally</em> get the <strong>traction</strong> you need</h3>\r\nWhether you are short on time, cash or have no formal education in programming, you will learn how to move the needle no matter what the circumstances. You will learn to make a production plan for yourself that keeps you moving forward. You will experience what it’s like to go from start to finish with a Rails app.\r\n\r\nWhen you complete <em>Rails Curve</em> you’ll feel confident that you can build apps from start to finish on your own. You’ll be totally certain that you can get past any error or issue. Your excitement won’t diminish because you’ll have a solid plan moves you to progress. You will be relieved that you don’t have to spend thousands of dollars and months of time to learn Rails. And you can finally feel in control because you will understand what each line of code does.\r\n<h3>So, fast forward 30 days and you have finished with <em>Rails Curve</em>. <strong>Now what?</strong></h3>\r\nBack to the obscure world of not knowing what’s next? <strong><em>No way</em>.</strong> When you complete the lessons you will definitely want to transition into building your own app idea. So <em>Rails Curve</em> includes outro lessons that will walk you through how to <strong>create your own plan</strong> for <em>your</em> app. This will leave you with a solid action plan that you can follow from start to finish. If you have unique issues or you need a push in the right direction, I also offer <a href="mailto:me@tyrichards.com">Rails coaching</a>. My goal is to see everyone who goes through <em>Rails Curve</em> build and launch their own app and build their career with great success and without stalling out.\r\n<h2>Join other makers who learn by doing</h2>\r\nWith <em>Rails Curve</em> you will build a <em>real</em> Rails app from start to finish and get all the skills you need to move forward and build your own app.\r\n\r\nLet <em>Rails Curve</em> take away the agony of learning Ruby on Rails.\r\n\r\nFind out the latest on when <em>Rails Curve</em> will be available by signing up below.\r\n\r\n[gravityform id="1" name="Don\'t miss out on my next post." title="false" description="false" ajax="true"]', 'Rails Curve', '', 'inherit', 'open', 'open', '', '105-revision-v1', '', '', '2014-08-22 14:01:47', '2014-08-22 19:01:47', '', 105, 'http://dev.dorails.com/105-revision-v1/', 0, 'revision', '', 0),
(131, 1, '2014-08-22 14:08:35', '2014-08-22 19:08:35', '[gravityform id="2" name="Contact Us" ajax="true"]', 'Contact Us', '', 'inherit', 'open', 'open', '', '15-revision-v1', '', '', '2014-08-22 14:08:35', '2014-08-22 19:08:35', '', 15, 'http://dev.dorails.com/15-revision-v1/', 0, 'revision', '', 0),
(132, 1, '2014-08-22 14:23:30', '2014-08-22 19:23:30', 'Want to learn to make your own web app with Ruby on Rails? Maybe you’ve tried to learn Rails on your own, but how do you know where to start? Is the learning-curve impossibly steep? Everyone says that learning Rails is <em>sooo</em> easy, but you’ve been banging your head against the desk for months trying to figure it out.\r\n\r\nAre you drowning in a sea of error messages? As you know by now, they can wash your dream app down the drain and bring months of hard work to a screeching halt.\r\n<h3>Do you learn by <strong>doing</strong>?</h3>\r\nAre you tired of studying <em>abstract</em> programming concepts and syntax without actually applying them to a <strong>real</strong> app?\r\n\r\nHave you burned piles of money and time on books and courses to be left with absolutely <em>nothing</em>? A lot of Rails books &amp; courses take <em>forever</em> to get through and then leave you high and dry with no skills or finished product.\r\n<h4>Is your brain<strong> flat-lining</strong> because you are forced to digest too many confusing programming concepts at once?</h4>\r\nEven the books that say they are for beginners are mind-numbing. And with endless copy &amp; pasting, they end up reducing you to a transcriptionist monkey. You are left in a foggy blur and you don’t retain the material. Plus many of the resources are horribly out-of-date and almost never go picture-perfect like they are written.\r\n<h4>Let’s face it, you need <strong>progress</strong> to stay motivated and learn Rails.</h4>\r\nProgress is the fuel that keeps you going. So a lack of it can really beat you down. I know it has for me. Do you wish there was a <em>better way</em> to learn Rails, but fear that there isn’t? It shouldn’t be <em>this</em> difficult.\r\n\r\nYou are <strong>certain</strong> that you want to build your app idea. You just aren’t sure that you can do it. Maybe it’s a lost cause. Perhaps you should save yourself the trouble and leave it alone.\r\n<div class="well">\r\n<h3>Well, imagine you <strong>could</strong> make and launch your own Ruby on Rails app in a <strong>matter of days</strong> with little knowledge of coding.</h3>\r\n</div>\r\nI know it sounds crazy, but seriously. What would it be like if Rails’ steep learning curve was suddenly flattened? If nothing stood in the way of you learning Rails and getting your app shipped?\r\n\r\nYou could keep your precious precious sanity, that’s for sure.\r\n<h4>You would know <strong>exactly</strong> where to start learning and what was next.</h4>\r\nAnd getting stuck with error messages would be a thing of the past. You could soar through building your Rails app and cut through error messages like they were butter.\r\n\r\nYou wouldn’t have to throw away thousands on a Computer Science degree or Code School. And you wouldn’t need to find yourself a technical co-founder or hire that expensive developer. And huzzah, you could push your app live for the world to enjoy, without a hitch.\r\n<h4>You could finally make <strong>REAL</strong> traction and get ’er done.</h4>\r\nIf you had a Rails fast track, you could save months (or in my case - years) of wasted time. Not to mention you could avoid a ton of unnecessary pain and heartache.\r\n<h3>Then the dream of making AND shipping your app could <strong>finally</strong> come true.</h3>\r\nIf Rails was a piece o’ cake to pick up you could just learn by doing. Really <em>doing</em>. You’d <em>build</em> a Rails app and easily absorb the concepts and details one by one as you went along. You’d know <strong>exactly</strong> what to learn and you would learn it all in<strong> exactly</strong> the right order. You could eat the elephant one concept at a time, even in the midst of a wall of tasks, languages and syntax. And you’d never wonder if you had up-to-date training.\r\n\r\nEven without being a "Computer Scientist", you’d feel <strong>confident</strong> as you made a big-picture plan for your new app, wrote code at each step, and understood exactly what each line of code did and why it was there.\r\n<h4>Hell, at this rate you would actually <strong>enjoy </strong>coding.</h4>\r\nBy quickly stacking up tiny victories with Rails you could move yourself closer and closer to the big win of building <strong>and</strong> shipping your app for the world to see. The bottom line is that if Rails was easy-breezy to learn you could make an app <em>AND</em> get solid skills that you can build on – <strong>all at once</strong>.\r\n\r\nThat being said, it is true that Rails does have a crazy difficult learning curve and a Rails app can take months and months to build. But there’s good news. You don’t have to follow that path.\r\n<h3>With <em>Rails Curve</em> you can bypass the learning curve altogether and build a live Rails app in <strong>30 days.</strong></h3>\r\nYou will learn how to build a web app from start to finish, and grow all the skills you need to make your own apps moving forward. In <em>four weeks</em>, you will become experienced with all of the tools, concepts and skills that you need to plan, design, develop and ship a web app.\r\n<h4>With <em>Rails Curve</em> you will learn Rails by <strong>osmosis</strong></h4>\r\nYou will learn <strong>your</strong> way – by <strong>doing</strong>. After all, you decided to learn Rails so you could <em>build</em> an app – so why not learn by <strong>actually building</strong><em> one</em>?\r\n<h4 style="text-align: left;">By following the method of building <strong>AND</strong> learning at the same time you will...</h4>\r\n<ul>\r\n	<li>Understand the big picture <strong>faster</strong></li>\r\n	<li>Pick up complex skills and concepts <strong>faster</strong></li>\r\n	<li>Avoid getting paralyzed by the tiny details</li>\r\n	<li>Avoid the pain of wasting months studying in-depth concepts</li>\r\n	<li>Punch perfectionism <em>in the face</em></li>\r\n</ul>\r\nInstead of spinning your wheels on learning <em>abstract</em> concepts, <em>Rails Curve</em> will give you:\r\n<h4>a clear <strong>day-by-day plan</strong> for how to build a robust Rails app from <strong>start to finish</strong>.</h4>\r\nEach lesson will include bite-sized video screencasts that will walk you through <strong>exactly</strong> what to do, in plain english. <em>Rails Curve</em> gives you a solid path of <em>exactly</em> what to learn in <em>exactly</em> the right order. You will quickly move step by step through the process and pick up skills in each lesson until you have a completed (live) web app and the skills you need to dive into even more advanced material.\r\n<h4>As you move through each lesson, you will get a solid foundation of the key concepts and get <strong>first-hand experience</strong> on how they all work <strong>together</strong>.</h4>\r\nAnd no dull copy/pasting is necessary, you will simply write code yourself and learn the what, why and how as you go. Plus, everything is based on Rails 4 so you’ll have the latest and greatest training for Rails.\r\n<h4 style="text-align: left;"><em>Rails Curve</em> will <strong>jump-start</strong> your understanding of key elements like...</h4>\r\n<div class="row">\r\n<ul class="col-md-6">\r\n	<li>Ruby</li>\r\n	<li>Gems</li>\r\n	<li>Ruby on Rails Framework</li>\r\n	<li>Command Line (Terminal)</li>\r\n	<li>MVC pattern (Model View Controller)</li>\r\n	<li>Object-Oriented Programming</li>\r\n	<li>Active Record</li>\r\n	<li>Databases</li>\r\n	<li>HTML</li>\r\n	<li>CSS and Sass</li>\r\n	<li>Javascript and CoffeeScript</li>\r\n</ul>\r\n<ul class="col-md-6">\r\n	<li>Front-end Frameworks</li>\r\n	<li>Deployment</li>\r\n	<li>Version Control</li>\r\n	<li>Validation</li>\r\n	<li>User Authentication</li>\r\n	<li>UI Design</li>\r\n	<li>UX Design</li>\r\n	<li>Project Management</li>\r\n	<li>and more...</li>\r\n</ul>\r\n</div>\r\n<h3>You can’t build an app without the right tools</h3>\r\nSo you will get hands-on experience with all of the standard tools like the command-line (Terminal), a text editor (like <em>Sublime</em> Text), <em>Git</em>, <em>Github</em>, <em>Heroku</em>, <em>Twitter Bootstrap</em>, <em>Devise</em>, and more. You will learn the ins-and-outs of all the tools you <em>gotta have</em> in your Rails toolbelt.\r\n<h4>With <em>Rails Curve</em> you will learn <strong>exactly</strong> how to do things like ...</h4>\r\n<ul>\r\n	<li>use the command-line to create a new blank-slate app</li>\r\n	<li>use a single command to create a rails server on your computer</li>\r\n	<li>use <em>Git</em> to manage your source code and push it to an online repo at <em>Github</em></li>\r\n	<li>use the command-line to generate the pages and elements of your app on the fly</li>\r\n	<li>use the command-line to manage your database</li>\r\n	<li>use the command-line to push your app to a live server on <em>Heroku</em></li>\r\n	<li>use <em>Twitter Bootstrap</em> to rapidly style your app - with <strong>no</strong> design experience needed.</li>\r\n	<li>use the <em>Devise</em> gem to create user sign-up and sign-in in a matter of minutes.</li>\r\n	<li>and a lot more</li>\r\n</ul>\r\n<h3>But no amount of skills or tools will wipe out the possibility of <strong>error messages</strong>.</h3>\r\nSo with <em>Rails Curve</em> will teach you how to <strong>eliminate</strong> "getting stuck" forever. You’ll get <strong>real-world experience</strong> troubleshooting error messages for yourself <em>quickly</em> so you never have to slam on the breaks again. You will master the art of ...\r\n<ul>\r\n	<li>Reading error messages to get clues about what part of your app needs fixing</li>\r\n	<li>Googling and searching online dev communities to get past any error <em>in minutes</em></li>\r\n	<li>checking <em>Rails</em> and <em>Heroku</em> error logs using your trusty command line</li>\r\n</ul>\r\n<h3>By the time you finish <em>Rails Curve</em> you will have...</h3>\r\n<ul>\r\n	<li>seen how to make a solid plan you can follow</li>\r\n	<li>created all the key features needed for the app</li>\r\n	<li>sketched &amp; styled a beautiful UI on the front-end of the app</li>\r\n	<li>created a solid database back-end for the app</li>\r\n	<li>implemented a user authentication system for users to sign in and sign out</li>\r\n	<li>deployed your app to a live server</li>\r\n	<li>grown a slew of foundational web development skills in the process</li>\r\n</ul>\r\n<h3>You can <em>finally</em> get the <strong>traction</strong> you need</h3>\r\nWhether you are short on time, cash or have no formal education in programming, you will learn how to move the needle no matter what the circumstances. You will learn to make a production plan for yourself that keeps you moving forward. You will experience what it’s like to go from start to finish with a Rails app.\r\n\r\nWhen you complete <em>Rails Curve</em> you’ll feel confident that you can build apps from start to finish on your own. You’ll be totally certain that you can get past any error or issue. Your excitement won’t diminish because you’ll have a solid plan moves you to progress. You will be relieved that you don’t have to spend thousands of dollars and months of time to learn Rails. And you can finally feel in control because you will understand what each line of code does.\r\n<h3>So, fast forward 30 days and you have finished with <em>Rails Curve</em>. <strong>Now what?</strong></h3>\r\nBack to the obscure world of not knowing what’s next? <strong><em>No way</em>.</strong> When you complete the lessons you will definitely want to transition into building your own app idea. So <em>Rails Curve</em> includes outro lessons that will walk you through how to <strong>create your own plan</strong> for <em>your</em> app. This will leave you with a solid action plan that you can follow from start to finish. If you have unique issues or you need a push in the right direction, I also offer <a href="mailto:me@tyrichards.com">Rails coaching</a>. My goal is to see everyone who goes through <em>Rails Curve</em> build and launch their own app and build their career with great success and without stalling out.\r\n<h2>Join other makers who learn by doing</h2>\r\nWith <em>Rails Curve</em> you will build a <em>real</em> Rails app from start to finish and get all the skills you need to move forward and build your own app.\r\n\r\nLet <em>Rails Curve</em> take away the agony of learning Ruby on Rails.\r\n\r\nFind out the latest on when <em>Rails Curve</em> will be available by signing up below.\r\n\r\n[gravityform id="1" name="Don\'t miss out on my next post." title="false" description="false" ajax="true"]\r\n\r\n<!-- Begin MailChimp Signup Form -->\r\n<link href="//cdn-images.mailchimp.com/embedcode/classic-081711.css" rel="stylesheet" type="text/css">\r\n<style type="text/css">\r\n	#mc_embed_signup{background:#fff; clear:left; font:14px Helvetica,Arial,sans-serif; }\r\n	/* Add your own MailChimp form style overrides in your site stylesheet or in this style block.\r\n	   We recommend moving this block and the preceding CSS link to the HEAD of your HTML file. */\r\n</style>\r\n<div id="mc_embed_signup">\r\n<form action="//railsvitamins.us8.list-manage.com/subscribe/post?u=40e20a404b24c24893118c9f7&amp;id=10300bb940" method="post" id="mc-embedded-subscribe-form" name="mc-embedded-subscribe-form" class="validate" target="_blank" novalidate>\r\n	<h2>Sign Up to be the first to use Rails Curve</h2>\r\n<div class="indicates-required"><span class="asterisk">*</span> indicates required</div>\r\n<div class="mc-field-group">\r\n	<label for="mce-EMAIL">Email Address  <span class="asterisk">*</span>\r\n</label>\r\n	<input type="email" value="" name="EMAIL" class="required email" id="mce-EMAIL">\r\n</div>\r\n<div class="mc-field-group">\r\n	<label for="mce-FNAME">First Name </label>\r\n	<input type="text" value="" name="FNAME" class="" id="mce-FNAME">\r\n</div>\r\n<div class="mc-field-group">\r\n	<label for="mce-LNAME">Last Name </label>\r\n	<input type="text" value="" name="LNAME" class="" id="mce-LNAME">\r\n</div>\r\n	<div id="mce-responses" class="clear">\r\n		<div class="response" id="mce-error-response" style="display:none"></div>\r\n		<div class="response" id="mce-success-response" style="display:none"></div>\r\n	</div>    <!-- real people should not fill this in and expect good things - do not remove this or risk form bot signups-->\r\n    <div style="position: absolute; left: -5000px;"><input type="text" name="b_40e20a404b24c24893118c9f7_10300bb940" tabindex="-1" value=""></div>\r\n    <div class="clear"><input type="submit" value="Subscribe" name="subscribe" id="mc-embedded-subscribe" class="button"></div>\r\n</form>\r\n</div>\r\n<script type=\'text/javascript\' src=\'//s3.amazonaws.com/downloads.mailchimp.com/js/mc-validate.js\'></script><script type=\'text/javascript\'>(function($) {window.fnames = new Array(); window.ftypes = new Array();fnames[0]=\'EMAIL\';ftypes[0]=\'email\';fnames[1]=\'FNAME\';ftypes[1]=\'text\';fnames[2]=\'LNAME\';ftypes[2]=\'text\';}(jQuery));var $mcj = jQuery.noConflict(true);</script>\r\n<!--End mc_embed_signup-->', 'Rails Curve', '', 'inherit', 'open', 'open', '', '105-revision-v1', '', '', '2014-08-22 14:23:30', '2014-08-22 19:23:30', '', 105, 'http://dev.dorails.com/105-revision-v1/', 0, 'revision', '', 0) ;
INSERT INTO `wp_posts` ( `ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(133, 1, '2014-08-22 14:40:57', '2014-08-22 19:40:57', 'Are you looking to launch your career? Or are you just trying to launch your app idea? Maybe you’ve tried to learn Rails on your own, but how do you know where to start? Is the learning-curve impossibly steep? Everyone says that learning Rails is <em>sooo</em> easy, but you’ve been banging your head against the desk for months trying to figure it out.\r\n\r\nAre you drowning in a sea of error messages? As you know by now, they can wash your dream app down the drain and bring months of hard work to a screeching halt.\r\n<h3>Do you learn by <strong>doing</strong>?</h3>\r\nAre you tired of studying <em>abstract</em> programming concepts and syntax without actually applying them to a <strong>real</strong> app?\r\n\r\nHave you burned piles of money and time on books and courses to be left with absolutely <em>nothing</em>? A lot of Rails books &amp; courses take <em>forever</em> to get through and then leave you high and dry with no skills or finished product.\r\n<h4>Is your brain<strong> flat-lining</strong> because you are forced to digest too many confusing programming concepts at once?</h4>\r\nEven the books that say they are for beginners are mind-numbing. And with endless copy &amp; pasting, they end up reducing you to a transcriptionist monkey. You are left in a foggy blur and you don’t retain the material. Plus many of the resources are horribly out-of-date and almost never go picture-perfect like they are written.\r\n<h4>Let’s face it, you need <strong>progress</strong> to stay motivated and learn Rails.</h4>\r\nProgress is the fuel that keeps you going. So a lack of it can really beat you down. I know it has for me. Do you wish there was a <em>better way</em> to learn Rails, but fear that there isn’t? It shouldn’t be <em>this</em> difficult.\r\n\r\nYou are <strong>certain</strong> that you want to build your app idea. You just aren’t sure that you can do it. Maybe it’s a lost cause. Perhaps you should save yourself the trouble and leave it alone.\r\n<div class="well">\r\n<h3>Well, imagine you <strong>could</strong> make and launch your own Ruby on Rails app in a <strong>matter of days</strong> with little knowledge of coding.</h3>\r\n</div>\r\nI know it sounds crazy, but seriously. What would it be like if Rails’ steep learning curve was suddenly flattened? If nothing stood in the way of you learning Rails and getting your app shipped?\r\n\r\nYou could keep your precious precious sanity, that’s for sure.\r\n<h4>You would know <strong>exactly</strong> where to start learning and what was next.</h4>\r\nAnd getting stuck with error messages would be a thing of the past. You could soar through building your Rails app and cut through error messages like they were butter.\r\n\r\nYou wouldn’t have to throw away thousands on a Computer Science degree or Code School. And you wouldn’t need to find yourself a technical co-founder or hire that expensive developer. And huzzah, you could push your app live for the world to enjoy, without a hitch.\r\n<h4>You could finally make <strong>REAL</strong> traction and get ’er done.</h4>\r\nIf you had a Rails fast track, you could save months (or in my case - years) of wasted time. Not to mention you could avoid a ton of unnecessary pain and heartache.\r\n<h3>Then the dream of making AND shipping your app could <strong>finally</strong> come true.</h3>\r\nIf Rails was a piece o’ cake to pick up you could just learn by doing. Really <em>doing</em>. You’d <em>build</em> a Rails app and easily absorb the concepts and details one by one as you went along. You’d know <strong>exactly</strong> what to learn and you would learn it all in<strong> exactly</strong> the right order. You could eat the elephant one concept at a time, even in the midst of a wall of tasks, languages and syntax. And you’d never wonder if you had up-to-date training.\r\n\r\nEven without being a "Computer Scientist", you’d feel <strong>confident</strong> as you made a big-picture plan for your new app, wrote code at each step, and understood exactly what each line of code did and why it was there.\r\n<h4>Hell, at this rate you would actually <strong>enjoy </strong>coding.</h4>\r\nBy quickly stacking up tiny victories with Rails you could move yourself closer and closer to the big win of building <strong>and</strong> shipping your app for the world to see. The bottom line is that if Rails was easy-breezy to learn you could make an app <em>AND</em> get solid skills that you can build on – <strong>all at once</strong>.\r\n\r\nThat being said, it is true that Rails does have a crazy difficult learning curve and a Rails app can take months and months to build. But there’s good news. You don’t have to follow that path.\r\n<h3>With <em>Rails Curve</em> you can bypass the learning curve altogether and build a live Rails app in <strong>30 days.</strong></h3>\r\nYou will learn how to build a web app from start to finish, and grow all the skills you need to make your own apps moving forward. In <em>four weeks</em>, you will become experienced with all of the tools, concepts and skills that you need to plan, design, develop and ship a web app.\r\n<h4>With <em>Rails Curve</em> you will learn Rails by <strong>osmosis</strong></h4>\r\nYou will learn <strong>your</strong> way – by <strong>doing</strong>. After all, you decided to learn Rails so you could <em>build</em> an app – so why not learn by <strong>actually building</strong><em> one</em>?\r\n<h4 style="text-align: left;">By following the method of building <strong>AND</strong> learning at the same time you will...</h4>\r\n<ul>\r\n	<li>Understand the big picture <strong>faster</strong></li>\r\n	<li>Pick up complex skills and concepts <strong>faster</strong></li>\r\n	<li>Avoid getting paralyzed by the tiny details</li>\r\n	<li>Avoid the pain of wasting months studying in-depth concepts</li>\r\n	<li>Punch perfectionism <em>in the face</em></li>\r\n</ul>\r\nInstead of spinning your wheels on learning <em>abstract</em> concepts, <em>Rails Curve</em> will give you:\r\n<h4>a clear <strong>day-by-day plan</strong> for how to build a robust Rails app from <strong>start to finish</strong>.</h4>\r\nEach lesson will include bite-sized video screencasts that will walk you through <strong>exactly</strong> what to do, in plain english. <em>Rails Curve</em> gives you a solid path of <em>exactly</em> what to learn in <em>exactly</em> the right order. You will quickly move step by step through the process and pick up skills in each lesson until you have a completed (live) web app and the skills you need to dive into even more advanced material.\r\n<h4>As you move through each lesson, you will get a solid foundation of the key concepts and get <strong>first-hand experience</strong> on how they all work <strong>together</strong>.</h4>\r\nAnd no dull copy/pasting is necessary, you will simply write code yourself and learn the what, why and how as you go. Plus, everything is based on Rails 4 so you’ll have the latest and greatest training for Rails.\r\n<h4 style="text-align: left;"><em>Rails Curve</em> will <strong>jump-start</strong> your understanding of key elements like...</h4>\r\n<div class="row">\r\n<ul class="col-md-6">\r\n	<li>Ruby</li>\r\n	<li>Gems</li>\r\n	<li>Ruby on Rails Framework</li>\r\n	<li>Command Line (Terminal)</li>\r\n	<li>MVC pattern (Model View Controller)</li>\r\n	<li>Object-Oriented Programming</li>\r\n	<li>Active Record</li>\r\n	<li>Databases</li>\r\n	<li>HTML</li>\r\n	<li>CSS and Sass</li>\r\n	<li>Javascript and CoffeeScript</li>\r\n</ul>\r\n<ul class="col-md-6">\r\n	<li>Front-end Frameworks</li>\r\n	<li>Deployment</li>\r\n	<li>Version Control</li>\r\n	<li>Validation</li>\r\n	<li>User Authentication</li>\r\n	<li>UI Design</li>\r\n	<li>UX Design</li>\r\n	<li>Project Management</li>\r\n	<li>and more...</li>\r\n</ul>\r\n</div>\r\n<h3>You can’t build an app without the right tools</h3>\r\nSo you will get hands-on experience with all of the standard tools like the command-line (Terminal), a text editor (like <em>Sublime</em> Text), <em>Git</em>, <em>Github</em>, <em>Heroku</em>, <em>Twitter Bootstrap</em>, <em>Devise</em>, and more. You will learn the ins-and-outs of all the tools you <em>gotta have</em> in your Rails toolbelt.\r\n<h4>With <em>Rails Curve</em> you will learn <strong>exactly</strong> how to do things like ...</h4>\r\n<ul>\r\n	<li>use the command-line to create a new blank-slate app</li>\r\n	<li>use a single command to create a rails server on your computer</li>\r\n	<li>use <em>Git</em> to manage your source code and push it to an online repo at <em>Github</em></li>\r\n	<li>use the command-line to generate the pages and elements of your app on the fly</li>\r\n	<li>use the command-line to manage your database</li>\r\n	<li>use the command-line to push your app to a live server on <em>Heroku</em></li>\r\n	<li>use <em>Twitter Bootstrap</em> to rapidly style your app - with <strong>no</strong> design experience needed.</li>\r\n	<li>use the <em>Devise</em> gem to create user sign-up and sign-in in a matter of minutes.</li>\r\n	<li>and a lot more</li>\r\n</ul>\r\n<h3>But no amount of skills or tools will wipe out the possibility of <strong>error messages</strong>.</h3>\r\nSo with <em>Rails Curve</em> will teach you how to <strong>eliminate</strong> "getting stuck" forever. You’ll get <strong>real-world experience</strong> troubleshooting error messages for yourself <em>quickly</em> so you never have to slam on the breaks again. You will master the art of ...\r\n<ul>\r\n	<li>Reading error messages to get clues about what part of your app needs fixing</li>\r\n	<li>Googling and searching online dev communities to get past any error <em>in minutes</em></li>\r\n	<li>checking <em>Rails</em> and <em>Heroku</em> error logs using your trusty command line</li>\r\n</ul>\r\n<h3>By the time you finish <em>Rails Curve</em> you will have...</h3>\r\n<ul>\r\n	<li>seen how to make a solid plan you can follow</li>\r\n	<li>created all the key features needed for the app</li>\r\n	<li>sketched &amp; styled a beautiful UI on the front-end of the app</li>\r\n	<li>created a solid database back-end for the app</li>\r\n	<li>implemented a user authentication system for users to sign in and sign out</li>\r\n	<li>deployed your app to a live server</li>\r\n	<li>grown a slew of foundational web development skills in the process</li>\r\n</ul>\r\n<h3>You can <em>finally</em> get the <strong>traction</strong> you need</h3>\r\nWhether you are short on time, cash or have no formal education in programming, you will learn how to move the needle no matter what the circumstances. You will learn to make a production plan for yourself that keeps you moving forward. You will experience what it’s like to go from start to finish with a Rails app.\r\n\r\nWhen you complete <em>Rails Curve</em> you’ll feel confident that you can build apps from start to finish on your own. You’ll be totally certain that you can get past any error or issue. Your excitement won’t diminish because you’ll have a solid plan moves you to progress. You will be relieved that you don’t have to spend thousands of dollars and months of time to learn Rails. And you can finally feel in control because you will understand what each line of code does.\r\n<h3>So, fast forward 30 days and you have finished with <em>Rails Curve</em>. <strong>Now what?</strong></h3>\r\nBack to the obscure world of not knowing what’s next? <strong><em>No way</em>.</strong> When you complete the lessons you will definitely want to transition into building your own app idea. So <em>Rails Curve</em> includes outro lessons that will walk you through how to <strong>create your own plan</strong> for <em>your</em> app. This will leave you with a solid action plan that you can follow from start to finish. If you have unique issues or you need a push in the right direction, I also offer <a href="mailto:me@tyrichards.com">Rails coaching</a>. My goal is to see everyone who goes through <em>Rails Curve</em> build and launch their own app and build their career with great success and without stalling out.\r\n<h2>Join other makers who learn by doing</h2>\r\nWith <em>Rails Curve</em> you will build a <em>real</em> Rails app from start to finish and get all the skills you need to move forward and build your own app.\r\n\r\nLet <em>Rails Curve</em> take away the agony of learning Ruby on Rails.\r\n\r\nFind out the latest on when <em>Rails Curve</em> will be available by signing up below.\r\n\r\n[gravityform id="1" name="Don\'t miss out on my next post." title="false" description="false" ajax="true"]\r\n\r\n<!-- Begin MailChimp Signup Form -->\r\n<div id="mc_embed_signup"><form id="mc-embedded-subscribe-form" class="validate" action="//railsvitamins.us8.list-manage.com/subscribe/post?u=40e20a404b24c24893118c9f7&amp;id=10300bb940" method="post" name="mc-embedded-subscribe-form" novalidate="" target="_blank">\r\n<h2>Sign Up to be the first to use Rails Curve</h2>\r\n<div class="indicates-required"><span class="asterisk">*</span> indicates required</div>\r\n<div class="mc-field-group"><label for="mce-EMAIL">Email Address <span class="asterisk">*</span>\r\n</label>\r\n<input id="mce-EMAIL" class="required email" name="EMAIL" type="email" value="" /></div>\r\n<div class="mc-field-group"><label for="mce-FNAME">First Name </label>\r\n<input id="mce-FNAME" name="FNAME" type="text" value="" /></div>\r\n<div class="mc-field-group"><label for="mce-LNAME">Last Name </label>\r\n<input id="mce-LNAME" name="LNAME" type="text" value="" /></div>\r\n<div id="mce-responses" class="clear"></div>\r\n<!-- real people should not fill this in and expect good things - do not remove this or risk form bot signups-->\r\n<div style="position: absolute; left: -5000px;"><input tabindex="-1" name="b_40e20a404b24c24893118c9f7_10300bb940" type="text" value="" /></div>\r\n<div class="clear"><input id="mc-embedded-subscribe" class="button" name="subscribe" type="submit" value="Subscribe" /></div>\r\n</form></div>\r\n<script src="//s3.amazonaws.com/downloads.mailchimp.com/js/mc-validate.js"></script><script>// <![CDATA[\r\n(function($) {window.fnames = new Array(); window.ftypes = new Array();fnames[0]=\'EMAIL\';ftypes[0]=\'email\';fnames[1]=\'FNAME\';ftypes[1]=\'text\';fnames[2]=\'LNAME\';ftypes[2]=\'text\';}(jQuery));var $mcj = jQuery.noConflict(true);\r\n// ]]></script>\r\n<!--End mc_embed_signup-->', 'Rails Curve', '', 'inherit', 'open', 'open', '', '105-revision-v1', '', '', '2014-08-22 14:40:57', '2014-08-22 19:40:57', '', 105, 'http://dev.dorails.com/105-revision-v1/', 0, 'revision', '', 0),
(134, 1, '2014-08-22 14:42:19', '2014-08-22 19:42:19', 'Are you trying to launch your app idea? Or are you looking to get your career off the ground? Maybe you’ve tried to learn Rails on your own, but how do you know where to start? Is the learning-curve impossibly steep? Everyone says that learning Rails is <em>sooo</em> easy, but you’ve been banging your head against the desk for months trying to figure it out.\r\n\r\nAre you drowning in a sea of error messages? As you know by now, they can wash your dream app down the drain and bring months of hard work to a screeching halt.\r\n<h3>Do you learn by <strong>doing</strong>?</h3>\r\nAre you tired of studying <em>abstract</em> programming concepts and syntax without actually applying them to a <strong>real</strong> app?\r\n\r\nHave you burned piles of money and time on books and courses to be left with absolutely <em>nothing</em>? A lot of Rails books &amp; courses take <em>forever</em> to get through and then leave you high and dry with no skills or finished product.\r\n<h4>Is your brain<strong> flat-lining</strong> because you are forced to digest too many confusing programming concepts at once?</h4>\r\nEven the books that say they are for beginners are mind-numbing. And with endless copy &amp; pasting, they end up reducing you to a transcriptionist monkey. You are left in a foggy blur and you don’t retain the material. Plus many of the resources are horribly out-of-date and almost never go picture-perfect like they are written.\r\n<h4>Let’s face it, you need <strong>progress</strong> to stay motivated and learn Rails.</h4>\r\nProgress is the fuel that keeps you going. So a lack of it can really beat you down. I know it has for me. Do you wish there was a <em>better way</em> to learn Rails, but fear that there isn’t? It shouldn’t be <em>this</em> difficult.\r\n\r\nYou are <strong>certain</strong> that you want to build your app idea. You just aren’t sure that you can do it. Maybe it’s a lost cause. Perhaps you should save yourself the trouble and leave it alone.\r\n<div class="well">\r\n<h3>Well, imagine you <strong>could</strong> make and launch your own Ruby on Rails app in a <strong>matter of days</strong> with little knowledge of coding.</h3>\r\n</div>\r\nI know it sounds crazy, but seriously. What would it be like if Rails’ steep learning curve was suddenly flattened? If nothing stood in the way of you learning Rails and getting your app shipped?\r\n\r\nYou could keep your precious precious sanity, that’s for sure.\r\n<h4>You would know <strong>exactly</strong> where to start learning and what was next.</h4>\r\nAnd getting stuck with error messages would be a thing of the past. You could soar through building your Rails app and cut through error messages like they were butter.\r\n\r\nYou wouldn’t have to throw away thousands on a Computer Science degree or Code School. And you wouldn’t need to find yourself a technical co-founder or hire that expensive developer. And huzzah, you could push your app live for the world to enjoy, without a hitch.\r\n<h4>You could finally make <strong>REAL</strong> traction and get ’er done.</h4>\r\nIf you had a Rails fast track, you could save months (or in my case - years) of wasted time. Not to mention you could avoid a ton of unnecessary pain and heartache.\r\n<h3>Then the dream of making AND shipping your app could <strong>finally</strong> come true.</h3>\r\nIf Rails was a piece o’ cake to pick up you could just learn by doing. Really <em>doing</em>. You’d <em>build</em> a Rails app and easily absorb the concepts and details one by one as you went along. You’d know <strong>exactly</strong> what to learn and you would learn it all in<strong> exactly</strong> the right order. You could eat the elephant one concept at a time, even in the midst of a wall of tasks, languages and syntax. And you’d never wonder if you had up-to-date training.\r\n\r\nEven without being a "Computer Scientist", you’d feel <strong>confident</strong> as you made a big-picture plan for your new app, wrote code at each step, and understood exactly what each line of code did and why it was there.\r\n<h4>Hell, at this rate you would actually <strong>enjoy </strong>coding.</h4>\r\nBy quickly stacking up tiny victories with Rails you could move yourself closer and closer to the big win of building <strong>and</strong> shipping your app for the world to see. The bottom line is that if Rails was easy-breezy to learn you could make an app <em>AND</em> get solid skills that you can build on – <strong>all at once</strong>.\r\n\r\nThat being said, it is true that Rails does have a crazy difficult learning curve and a Rails app can take months and months to build. But there’s good news. You don’t have to follow that path.\r\n<h3>With <em>Rails Curve</em> you can bypass the learning curve altogether and build a live Rails app in <strong>30 days.</strong></h3>\r\nYou will learn how to build a web app from start to finish, and grow all the skills you need to make your own apps moving forward. In <em>four weeks</em>, you will become experienced with all of the tools, concepts and skills that you need to plan, design, develop and ship a web app.\r\n<h4>With <em>Rails Curve</em> you will learn Rails by <strong>osmosis</strong></h4>\r\nYou will learn <strong>your</strong> way – by <strong>doing</strong>. After all, you decided to learn Rails so you could <em>build</em> an app – so why not learn by <strong>actually building</strong><em> one</em>?\r\n<h4 style="text-align: left;">By following the method of building <strong>AND</strong> learning at the same time you will...</h4>\r\n<ul>\r\n	<li>Understand the big picture <strong>faster</strong></li>\r\n	<li>Pick up complex skills and concepts <strong>faster</strong></li>\r\n	<li>Avoid getting paralyzed by the tiny details</li>\r\n	<li>Avoid the pain of wasting months studying in-depth concepts</li>\r\n	<li>Punch perfectionism <em>in the face</em></li>\r\n</ul>\r\nInstead of spinning your wheels on learning <em>abstract</em> concepts, <em>Rails Curve</em> will give you:\r\n<h4>a clear <strong>day-by-day plan</strong> for how to build a robust Rails app from <strong>start to finish</strong>.</h4>\r\nEach lesson will include bite-sized video screencasts that will walk you through <strong>exactly</strong> what to do, in plain english. <em>Rails Curve</em> gives you a solid path of <em>exactly</em> what to learn in <em>exactly</em> the right order. You will quickly move step by step through the process and pick up skills in each lesson until you have a completed (live) web app and the skills you need to dive into even more advanced material.\r\n<h4>As you move through each lesson, you will get a solid foundation of the key concepts and get <strong>first-hand experience</strong> on how they all work <strong>together</strong>.</h4>\r\nAnd no dull copy/pasting is necessary, you will simply write code yourself and learn the what, why and how as you go. Plus, everything is based on Rails 4 so you’ll have the latest and greatest training for Rails.\r\n<h4 style="text-align: left;"><em>Rails Curve</em> will <strong>jump-start</strong> your understanding of key elements like...</h4>\r\n<div class="row">\r\n<ul class="col-md-6">\r\n	<li>Ruby</li>\r\n	<li>Gems</li>\r\n	<li>Ruby on Rails Framework</li>\r\n	<li>Command Line (Terminal)</li>\r\n	<li>MVC pattern (Model View Controller)</li>\r\n	<li>Object-Oriented Programming</li>\r\n	<li>Active Record</li>\r\n	<li>Databases</li>\r\n	<li>HTML</li>\r\n	<li>CSS and Sass</li>\r\n	<li>Javascript and CoffeeScript</li>\r\n</ul>\r\n<ul class="col-md-6">\r\n	<li>Front-end Frameworks</li>\r\n	<li>Deployment</li>\r\n	<li>Version Control</li>\r\n	<li>Validation</li>\r\n	<li>User Authentication</li>\r\n	<li>UI Design</li>\r\n	<li>UX Design</li>\r\n	<li>Project Management</li>\r\n	<li>and more...</li>\r\n</ul>\r\n</div>\r\n<h3>You can’t build an app without the right tools</h3>\r\nSo you will get hands-on experience with all of the standard tools like the command-line (Terminal), a text editor (like <em>Sublime</em> Text), <em>Git</em>, <em>Github</em>, <em>Heroku</em>, <em>Twitter Bootstrap</em>, <em>Devise</em>, and more. You will learn the ins-and-outs of all the tools you <em>gotta have</em> in your Rails toolbelt.\r\n<h4>With <em>Rails Curve</em> you will learn <strong>exactly</strong> how to do things like ...</h4>\r\n<ul>\r\n	<li>use the command-line to create a new blank-slate app</li>\r\n	<li>use a single command to create a rails server on your computer</li>\r\n	<li>use <em>Git</em> to manage your source code and push it to an online repo at <em>Github</em></li>\r\n	<li>use the command-line to generate the pages and elements of your app on the fly</li>\r\n	<li>use the command-line to manage your database</li>\r\n	<li>use the command-line to push your app to a live server on <em>Heroku</em></li>\r\n	<li>use <em>Twitter Bootstrap</em> to rapidly style your app - with <strong>no</strong> design experience needed.</li>\r\n	<li>use the <em>Devise</em> gem to create user sign-up and sign-in in a matter of minutes.</li>\r\n	<li>and a lot more</li>\r\n</ul>\r\n<h3>But no amount of skills or tools will wipe out the possibility of <strong>error messages</strong>.</h3>\r\nSo with <em>Rails Curve</em> will teach you how to <strong>eliminate</strong> "getting stuck" forever. You’ll get <strong>real-world experience</strong> troubleshooting error messages for yourself <em>quickly</em> so you never have to slam on the breaks again. You will master the art of ...\r\n<ul>\r\n	<li>Reading error messages to get clues about what part of your app needs fixing</li>\r\n	<li>Googling and searching online dev communities to get past any error <em>in minutes</em></li>\r\n	<li>checking <em>Rails</em> and <em>Heroku</em> error logs using your trusty command line</li>\r\n</ul>\r\n<h3>By the time you finish <em>Rails Curve</em> you will have...</h3>\r\n<ul>\r\n	<li>seen how to make a solid plan you can follow</li>\r\n	<li>created all the key features needed for the app</li>\r\n	<li>sketched &amp; styled a beautiful UI on the front-end of the app</li>\r\n	<li>created a solid database back-end for the app</li>\r\n	<li>implemented a user authentication system for users to sign in and sign out</li>\r\n	<li>deployed your app to a live server</li>\r\n	<li>grown a slew of foundational web development skills in the process</li>\r\n</ul>\r\n<h3>You can <em>finally</em> get the <strong>traction</strong> you need</h3>\r\nWhether you are short on time, cash or have no formal education in programming, you will learn how to move the needle no matter what the circumstances. You will learn to make a production plan for yourself that keeps you moving forward. You will experience what it’s like to go from start to finish with a Rails app.\r\n\r\nWhen you complete <em>Rails Curve</em> you’ll feel confident that you can build apps from start to finish on your own. You’ll be totally certain that you can get past any error or issue. Your excitement won’t diminish because you’ll have a solid plan moves you to progress. You will be relieved that you don’t have to spend thousands of dollars and months of time to learn Rails. And you can finally feel in control because you will understand what each line of code does.\r\n<h3>So, fast forward 30 days and you have finished with <em>Rails Curve</em>. <strong>Now what?</strong></h3>\r\nBack to the obscure world of not knowing what’s next? <strong><em>No way</em>.</strong> When you complete the lessons you will definitely want to transition into building your own app idea. So <em>Rails Curve</em> includes outro lessons that will walk you through how to <strong>create your own plan</strong> for <em>your</em> app. This will leave you with a solid action plan that you can follow from start to finish. If you have unique issues or you need a push in the right direction, I also offer <a href="mailto:me@tyrichards.com">Rails coaching</a>. My goal is to see everyone who goes through <em>Rails Curve</em> build and launch their own app and build their career with great success and without stalling out.\r\n<h2>Join other makers who learn by doing</h2>\r\nWith <em>Rails Curve</em> you will build a <em>real</em> Rails app from start to finish and get all the skills you need to move forward and build your own app.\r\n\r\nLet <em>Rails Curve</em> take away the agony of learning Ruby on Rails.\r\n\r\nFind out the latest on when <em>Rails Curve</em> will be available by signing up below.\r\n\r\n[gravityform id="1" name="Don\'t miss out on my next post." title="false" description="false" ajax="true"]\r\n\r\n<!-- Begin MailChimp Signup Form -->\r\n<div id="mc_embed_signup"><form id="mc-embedded-subscribe-form" class="validate" action="//railsvitamins.us8.list-manage.com/subscribe/post?u=40e20a404b24c24893118c9f7&amp;id=10300bb940" method="post" name="mc-embedded-subscribe-form" novalidate="" target="_blank">\r\n<h2>Sign Up to be the first to use Rails Curve</h2>\r\n<div class="indicates-required"><span class="asterisk">*</span> indicates required</div>\r\n<div class="mc-field-group"><label for="mce-EMAIL">Email Address <span class="asterisk">*</span>\r\n</label>\r\n<input id="mce-EMAIL" class="required email" name="EMAIL" type="email" value="" /></div>\r\n<div class="mc-field-group"><label for="mce-FNAME">First Name </label>\r\n<input id="mce-FNAME" name="FNAME" type="text" value="" /></div>\r\n<div class="mc-field-group"><label for="mce-LNAME">Last Name </label>\r\n<input id="mce-LNAME" name="LNAME" type="text" value="" /></div>\r\n<div id="mce-responses" class="clear"></div>\r\n<!-- real people should not fill this in and expect good things - do not remove this or risk form bot signups-->\r\n<div style="position: absolute; left: -5000px;"><input tabindex="-1" name="b_40e20a404b24c24893118c9f7_10300bb940" type="text" value="" /></div>\r\n<div class="clear"><input id="mc-embedded-subscribe" class="button" name="subscribe" type="submit" value="Subscribe" /></div>\r\n</form></div>\r\n<script src="//s3.amazonaws.com/downloads.mailchimp.com/js/mc-validate.js"></script><script>// <![CDATA[\r\n(function($) {window.fnames = new Array(); window.ftypes = new Array();fnames[0]=\'EMAIL\';ftypes[0]=\'email\';fnames[1]=\'FNAME\';ftypes[1]=\'text\';fnames[2]=\'LNAME\';ftypes[2]=\'text\';}(jQuery));var $mcj = jQuery.noConflict(true);\r\n// ]]></script>\r\n<!--End mc_embed_signup-->', 'Rails Curve', '', 'inherit', 'open', 'open', '', '105-revision-v1', '', '', '2014-08-22 14:42:19', '2014-08-22 19:42:19', '', 105, 'http://dev.dorails.com/105-revision-v1/', 0, 'revision', '', 0),
(135, 1, '2014-08-22 14:55:00', '2014-08-22 19:55:00', 'Are you trying to launch your app idea? Or are you looking to get your career off the ground? Maybe you’ve tried to learn Rails on your own, but how do you know where to start? Is the learning-curve impossibly steep? Everyone says that learning Rails is <em>sooo</em> easy, but you’ve been banging your head against the desk for months trying to figure it out.\r\n\r\nAre you drowning in a sea of error messages? As you know by now, they can wash your dream app down the drain and bring months of hard work to a screeching halt.\r\n<h3>Do you learn by <strong>doing</strong>?</h3>\r\nAre you tired of studying <em>abstract</em> programming concepts and syntax without actually applying them to a <strong>real</strong> app?\r\n\r\nHave you burned piles of money and time on books and courses to be left with absolutely <em>nothing</em>? A lot of Rails books &amp; courses take <em>forever</em> to get through and then leave you high and dry with no skills or finished product.\r\n<h4>Is your brain<strong> flat-lining</strong> because you are forced to digest too many confusing programming concepts at once?</h4>\r\nEven the books that say they are for beginners are mind-numbing. And with endless copy &amp; pasting, they end up reducing you to a transcriptionist monkey. You are left in a foggy blur and you don’t retain the material. Plus many of the resources are horribly out-of-date and almost never go picture-perfect like they are written.\r\n<h4>Let’s face it, you need <strong>progress</strong> to stay motivated and learn Rails.</h4>\r\nProgress is the fuel that keeps you going. So a lack of it can really beat you down. I know it has for me. Do you wish there was a <em>better way</em> to learn Rails, but fear that there isn’t? It shouldn’t be <em>this</em> difficult.\r\n\r\nYou are <strong>certain</strong> that you want to build your app idea. You just aren’t sure that you can do it. Maybe it’s a lost cause. Perhaps you should save yourself the trouble and leave it alone.\r\n<div class="well">\r\n<h3>Well, imagine you <strong>could</strong> make and launch your own Ruby on Rails app in a <strong>matter of days</strong> with little knowledge of coding.</h3>\r\n</div>\r\nI know it sounds crazy, but seriously. What would it be like if Rails’ steep learning curve was suddenly flattened? If nothing stood in the way of you learning Rails and getting your app shipped?\r\n\r\nYou could keep your precious precious sanity, that’s for sure.\r\n<h4>You would know <strong>exactly</strong> where to start learning and what was next.</h4>\r\nAnd getting stuck with error messages would be a thing of the past. You could soar through building your Rails app and cut through error messages like they were butter.\r\n\r\nYou wouldn’t have to throw away thousands on a Computer Science degree or Code School. And you wouldn’t need to find yourself a technical co-founder or hire that expensive developer. And huzzah, you could push your app live for the world to enjoy, without a hitch.\r\n<h4>You could finally make <strong>REAL</strong> traction and get ’er done.</h4>\r\nIf you had a Rails fast track, you could save months (or in my case - years) of wasted time. Not to mention you could avoid a ton of unnecessary pain and heartache.\r\n<h3>Then the dream of making AND shipping your app could <strong>finally</strong> come true.</h3>\r\nIf Rails was a piece o’ cake to pick up you could just learn by doing. Really <em>doing</em>. You’d <em>build</em> a Rails app and easily absorb the concepts and details one by one as you went along. You’d know <strong>exactly</strong> what to learn and you would learn it all in<strong> exactly</strong> the right order. You could eat the elephant one concept at a time, even in the midst of a wall of tasks, languages and syntax. And you’d never wonder if you had up-to-date training.\r\n\r\nEven without being a "Computer Scientist", you’d feel <strong>confident</strong> as you made a big-picture plan for your new app, wrote code at each step, and understood exactly what each line of code did and why it was there.\r\n<h4>Hell, at this rate you would actually <strong>enjoy </strong>coding.</h4>\r\nBy quickly stacking up tiny victories with Rails you could move yourself closer and closer to the big win of building <strong>and</strong> shipping your app for the world to see. The bottom line is that if Rails was easy-breezy to learn you could make an app <em>AND</em> get solid skills that you can build on – <strong>all at once</strong>.\r\n\r\nThat being said, it is true that Rails does have a crazy difficult learning curve and a Rails app can take months and months to build. But there’s good news. You don’t have to follow that path.\r\n<h3>With <em>Rails Curve</em> you can bypass the learning curve altogether and build a live Rails app in <strong>30 days.</strong></h3>\r\nYou will learn how to build a web app from start to finish, and grow all the skills you need to make your own apps moving forward. In <em>four weeks</em>, you will become experienced with all of the tools, concepts and skills that you need to plan, design, develop and ship a web app.\r\n<h4>With <em>Rails Curve</em> you will learn Rails by <strong>osmosis</strong></h4>\r\nYou will learn <strong>your</strong> way – by <strong>doing</strong>. After all, you decided to learn Rails so you could <em>build</em> an app – so why not learn by <strong>actually building</strong><em> one</em>?\r\n<h4 style="text-align: left;">By following the method of building <strong>AND</strong> learning at the same time you will...</h4>\r\n<ul>\r\n	<li>Understand the big picture <strong>faster</strong></li>\r\n	<li>Pick up complex skills and concepts <strong>faster</strong></li>\r\n	<li>Avoid getting paralyzed by the tiny details</li>\r\n	<li>Avoid the pain of wasting months studying in-depth concepts</li>\r\n	<li>Punch perfectionism <em>in the face</em></li>\r\n</ul>\r\nInstead of spinning your wheels on learning <em>abstract</em> concepts, <em>Rails Curve</em> will give you:\r\n<h4>a clear <strong>day-by-day plan</strong> for how to build a robust Rails app from <strong>start to finish</strong>.</h4>\r\nEach lesson will include bite-sized video screencasts that will walk you through <strong>exactly</strong> what to do, in plain english. <em>Rails Curve</em> gives you a solid path of <em>exactly</em> what to learn in <em>exactly</em> the right order. You will quickly move step by step through the process and pick up skills in each lesson until you have a completed (live) web app and the skills you need to dive into even more advanced material.\r\n<h4>As you move through each lesson, you will get a solid foundation of the key concepts and get <strong>first-hand experience</strong> on how they all work <strong>together</strong>.</h4>\r\nAnd no dull copy/pasting is necessary, you will simply write code yourself and learn the what, why and how as you go. Plus, everything is based on Rails 4 so you’ll have the latest and greatest training for Rails.\r\n<h4 style="text-align: left;"><em>Rails Curve</em> will <strong>jump-start</strong> your understanding of key elements like...</h4>\r\n<div class="row">\r\n<ul class="col-md-6">\r\n	<li>Ruby</li>\r\n	<li>Gems</li>\r\n	<li>Ruby on Rails Framework</li>\r\n	<li>Command Line (Terminal)</li>\r\n	<li>MVC pattern (Model View Controller)</li>\r\n	<li>Object-Oriented Programming</li>\r\n	<li>Active Record</li>\r\n	<li>Databases</li>\r\n	<li>HTML</li>\r\n	<li>CSS and Sass</li>\r\n	<li>Javascript and CoffeeScript</li>\r\n</ul>\r\n<ul class="col-md-6">\r\n	<li>Front-end Frameworks</li>\r\n	<li>Deployment</li>\r\n	<li>Version Control</li>\r\n	<li>Validation</li>\r\n	<li>User Authentication</li>\r\n	<li>UI Design</li>\r\n	<li>UX Design</li>\r\n	<li>Project Management</li>\r\n	<li>and more...</li>\r\n</ul>\r\n</div>\r\n<h3>You can’t build an app without the right tools</h3>\r\nSo you will get hands-on experience with all of the standard tools like the command-line (Terminal), a text editor (like <em>Sublime</em> Text), <em>Git</em>, <em>Github</em>, <em>Heroku</em>, <em>Twitter Bootstrap</em>, <em>Devise</em>, and more. You will learn the ins-and-outs of all the tools you <em>gotta have</em> in your Rails toolbelt.\r\n<h4>With <em>Rails Curve</em> you will learn <strong>exactly</strong> how to do things like ...</h4>\r\n<ul>\r\n	<li>use the command-line to create a new blank-slate app</li>\r\n	<li>use a single command to create a rails server on your computer</li>\r\n	<li>use <em>Git</em> to manage your source code and push it to an online repo at <em>Github</em></li>\r\n	<li>use the command-line to generate the pages and elements of your app on the fly</li>\r\n	<li>use the command-line to manage your database</li>\r\n	<li>use the command-line to push your app to a live server on <em>Heroku</em></li>\r\n	<li>use <em>Twitter Bootstrap</em> to rapidly style your app - with <strong>no</strong> design experience needed.</li>\r\n	<li>use the <em>Devise</em> gem to create user sign-up and sign-in in a matter of minutes.</li>\r\n	<li>and a lot more</li>\r\n</ul>\r\n<h3>But no amount of skills or tools will wipe out the possibility of <strong>error messages</strong>.</h3>\r\nSo with <em>Rails Curve</em> will teach you how to <strong>eliminate</strong> "getting stuck" forever. You’ll get <strong>real-world experience</strong> troubleshooting error messages for yourself <em>quickly</em> so you never have to slam on the breaks again. You will master the art of ...\r\n<ul>\r\n	<li>Reading error messages to get clues about what part of your app needs fixing</li>\r\n	<li>Googling and searching online dev communities to get past any error <em>in minutes</em></li>\r\n	<li>checking <em>Rails</em> and <em>Heroku</em> error logs using your trusty command line</li>\r\n</ul>\r\n<h3>By the time you finish <em>Rails Curve</em> you will have...</h3>\r\n<ul>\r\n	<li>seen how to make a solid plan you can follow</li>\r\n	<li>created all the key features needed for the app</li>\r\n	<li>sketched &amp; styled a beautiful UI on the front-end of the app</li>\r\n	<li>created a solid database back-end for the app</li>\r\n	<li>implemented a user authentication system for users to sign in and sign out</li>\r\n	<li>deployed your app to a live server</li>\r\n	<li>grown a slew of foundational web development skills in the process</li>\r\n</ul>\r\n<h3>You can <em>finally</em> get the <strong>traction</strong> you need</h3>\r\nWhether you are short on time, cash or have no formal education in programming, you will learn how to move the needle no matter what the circumstances. You will learn to make a production plan for yourself that keeps you moving forward. You will experience what it’s like to go from start to finish with a Rails app.\r\n\r\nWhen you complete <em>Rails Curve</em> you’ll feel confident that you can build apps from start to finish on your own. You’ll be totally certain that you can get past any error or issue. Your excitement won’t diminish because you’ll have a solid plan moves you to progress. You will be relieved that you don’t have to spend thousands of dollars and months of time to learn Rails. And you can finally feel in control because you will understand what each line of code does.\r\n<h3>So, fast forward 30 days and you have finished with <em>Rails Curve</em>. <strong>Now what?</strong></h3>\r\nBack to the obscure world of not knowing what’s next? <strong><em>No way</em>.</strong> When you complete the lessons you will definitely want to transition into building your own app idea. So <em>Rails Curve</em> includes outro lessons that will walk you through how to <strong>create your own plan</strong> for <em>your</em> app. This will leave you with a solid action plan that you can follow from start to finish. If you have unique issues or you need a push in the right direction, I also offer <a href="mailto:me@tyrichards.com">Rails coaching</a>. My goal is to see everyone who goes through <em>Rails Curve</em> build and launch their own app and build their career with great success and without stalling out.\r\n<h2>Join other makers who learn by doing</h2>\r\nWith <em>Rails Curve</em> you will build a <em>real</em> Rails app from start to finish and get all the skills you need to move forward and build your own app.\r\n\r\nLet <em>Rails Curve</em> take away the agony of learning Ruby on Rails.\r\n\r\nFind out the latest on when <em>Rails Curve</em> will be available by signing up below.\r\n\r\n[gravityform id="1" name="Don\'t miss out on my next post." title="false" description="false" ajax="true"]', 'Rails Curve', '', 'inherit', 'open', 'open', '', '105-revision-v1', '', '', '2014-08-22 14:55:00', '2014-08-22 19:55:00', '', 105, 'http://dev.dorails.com/105-revision-v1/', 0, 'revision', '', 0) ;
INSERT INTO `wp_posts` ( `ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(136, 1, '2014-08-22 20:14:26', '2014-08-23 01:14:26', 'Are you trying to launch your app idea? Or are you looking to get your career off the ground? Maybe you’ve tried to learn Rails on your own, but how do you know where to start? Is the learning-curve impossibly steep? Everyone says that learning Rails is <em>sooo</em> easy, but you’ve been banging your head against the desk for months trying to figure it out.\r\n\r\nAre you drowning in a sea of error messages? As you know by now, they can wash your dream app down the drain and bring months of hard work to a screeching halt.\r\n<h3>Do you learn by <strong>doing</strong>?</h3>\r\nAre you tired of studying <em>abstract</em> programming concepts and syntax without actually applying them to a <strong>real</strong> app?\r\n\r\nHave you burned piles of money and time on books and courses to be left with absolutely <em>nothing</em>? A lot of Rails books &amp; courses take <em>forever</em> to get through and then leave you high and dry with no skills or finished product.\r\n<h4>Is your brain<strong> flat-lining</strong> because you are forced to digest too many confusing programming concepts at once?</h4>\r\nEven the books that say they are for beginners are mind-numbing. And with endless copy &amp; pasting, they end up reducing you to a transcriptionist monkey. You are left in a foggy blur and you don’t retain the material. Plus many of the resources are horribly out-of-date and almost never go picture-perfect like they are written.\r\n<h4>Let’s face it, you need <strong>progress</strong> to stay motivated and learn Rails.</h4>\r\nProgress is the fuel that keeps you going. So a lack of it can really beat you down. I know it has for me. Do you wish there was a <em>better way</em> to learn Rails, but fear that there isn’t? It shouldn’t be <em>this</em> difficult.\r\n\r\nYou are <strong>certain</strong> that you want to build your app idea. You just aren’t sure that you can do it. Maybe it’s a lost cause. Perhaps you should save yourself the trouble and leave it alone.\r\n<div class="well">\r\n<h3>Well, imagine you <strong>could</strong> make and launch your own Ruby on Rails app in a <strong>matter of days</strong> with little knowledge of coding.</h3>\r\n</div>\r\nI know it sounds crazy, but seriously. What would it be like if you could fast-forward through Rails’ steep learning curve? If nothing stood in the way of you learning Rails and getting your app shipped? If nothing kept you from starting your own business or landing your dream job? \r\n\r\nYou could keep your precious precious sanity, that’s for sure.\r\n<h4>You would know <strong>exactly</strong> where to start learning and what was next.</h4>\r\nAnd getting stuck with error messages would be a thing of the past. You could soar through building your Rails app and cut through error messages like they were butter.\r\n\r\nYou wouldn’t have to throw away thousands on a Computer Science degree or Code School. And you wouldn’t need to find yourself a technical co-founder or hire that expensive developer. And huzzah, you could push your app live for the world to enjoy, without a hitch.\r\n<h4>You could finally make <strong>REAL</strong> traction and get ’er done.</h4>\r\nIf you had a Rails fast track, you could save months (or in my case - years) of wasted time. Not to mention you could avoid a ton of unnecessary pain and heartache.\r\n<h3>Then the dream of making AND shipping your app could <strong>finally</strong> come true.</h3>\r\nIf Rails was a piece o’ cake to pick up you could just learn by doing. Really <em>doing</em>. You’d <em>build</em> a Rails app and easily absorb the concepts and details one by one as you went along. You’d know <strong>exactly</strong> what to learn and you would learn it all in<strong> exactly</strong> the right order. You could eat the elephant one concept at a time, even in the midst of a wall of tasks, languages and syntax. And you’d never wonder if you had up-to-date training.\r\n\r\nEven without being a "Computer Scientist", you’d feel <strong>confident</strong> as you made a big-picture plan for your new app, wrote code at each step, and understood exactly what each line of code did and why it was there.\r\n<h4>Hell, at this rate you would actually <strong>enjoy </strong>coding.</h4>\r\nBy quickly stacking up tiny victories with Rails you could move yourself closer and closer to the big win of building <strong>and</strong> shipping your app for the world to see. The bottom line is that if Rails was easy-breezy to learn you could make an app <em>AND</em> get solid skills that you can build on – <strong>all at once</strong>.\r\n\r\nThat being said, it is true that Rails does have a crazy difficult learning curve and a Rails app can take months and months to build. But there’s good news. You don’t have to follow that path.\r\n<h3>With <em>Rails Curve</em> you can bypass the learning curve altogether and build a live Rails app in <strong>30 days.</strong></h3>\r\nYou will learn how to build a web app from start to finish, and grow all the skills you need to make your own apps moving forward. In <em>four weeks</em>, you will become experienced with all of the tools, concepts and skills that you need to plan, design, develop and ship a web app.\r\n<h4>With <em>Rails Curve</em> you will learn Rails by <strong>osmosis</strong></h4>\r\nYou will learn <strong>your</strong> way – by <strong>doing</strong>. After all, you decided to learn Rails so you could <em>build</em> an app – so why not learn by <strong>actually building</strong><em> one</em>?\r\n<h4 style="text-align: left;">By following the method of building <strong>AND</strong> learning at the same time you will...</h4>\r\n<ul>\r\n	<li>Understand the big picture <strong>faster</strong></li>\r\n	<li>Pick up complex skills and concepts <strong>faster</strong></li>\r\n	<li>Avoid getting paralyzed by the tiny details</li>\r\n	<li>Avoid the pain of wasting months studying in-depth concepts</li>\r\n	<li>Punch perfectionism <em>in the face</em></li>\r\n</ul>\r\nInstead of spinning your wheels on learning <em>abstract</em> concepts, <em>Rails Curve</em> will give you:\r\n<h4>a clear <strong>day-by-day plan</strong> for how to build a robust Rails app from <strong>start to finish</strong>.</h4>\r\nEach lesson will include bite-sized video screencasts that will walk you through <strong>exactly</strong> what to do, in plain english. <em>Rails Curve</em> gives you a solid path of <em>exactly</em> what to learn in <em>exactly</em> the right order. You will quickly move step by step through the process and pick up skills in each lesson until you have a completed (live) web app and the skills you need to dive into even more advanced material.\r\n<h4>As you move through each lesson, you will get a solid foundation of the key concepts and get <strong>first-hand experience</strong> on how they all work <strong>together</strong>.</h4>\r\nAnd no dull copy/pasting is necessary, you will simply write code yourself and learn the what, why and how as you go. Plus, everything is based on Rails 4 so you’ll have the latest and greatest training for Rails.\r\n<h4 style="text-align: left;"><em>Rails Curve</em> will <strong>jump-start</strong> your understanding of key elements like...</h4>\r\n<div class="row">\r\n<ul class="col-md-6">\r\n	<li>Ruby</li>\r\n	<li>Gems</li>\r\n	<li>Ruby on Rails Framework</li>\r\n	<li>Command Line (Terminal)</li>\r\n	<li>MVC pattern (Model View Controller)</li>\r\n	<li>Object-Oriented Programming</li>\r\n	<li>Active Record</li>\r\n	<li>Databases</li>\r\n	<li>HTML</li>\r\n	<li>CSS and Sass</li>\r\n	<li>Javascript and CoffeeScript</li>\r\n</ul>\r\n<ul class="col-md-6">\r\n	<li>Front-end Frameworks</li>\r\n	<li>Deployment</li>\r\n	<li>Version Control</li>\r\n	<li>Validation</li>\r\n	<li>User Authentication</li>\r\n	<li>UI Design</li>\r\n	<li>UX Design</li>\r\n	<li>Project Management</li>\r\n	<li>and more...</li>\r\n</ul>\r\n</div>\r\n<h3>You can’t build an app without the right tools</h3>\r\nSo you will get hands-on experience with all of the standard tools like the command-line (Terminal), a text editor (like <em>Sublime</em> Text), <em>Git</em>, <em>Github</em>, <em>Heroku</em>, <em>Twitter Bootstrap</em>, <em>Devise</em>, and more. You will learn the ins-and-outs of all the tools you <em>gotta have</em> in your Rails toolbelt.\r\n<h4>With <em>Rails Curve</em> you will learn <strong>exactly</strong> how to do things like ...</h4>\r\n<ul>\r\n	<li>use the command-line to create a new blank-slate app</li>\r\n	<li>use a single command to create a rails server on your computer</li>\r\n	<li>use <em>Git</em> to manage your source code and push it to an online repo at <em>Github</em></li>\r\n	<li>use the command-line to generate the pages and elements of your app on the fly</li>\r\n	<li>use the command-line to manage your database</li>\r\n	<li>use the command-line to push your app to a live server on <em>Heroku</em></li>\r\n	<li>use <em>Twitter Bootstrap</em> to rapidly style your app - with <strong>no</strong> design experience needed.</li>\r\n	<li>use the <em>Devise</em> gem to create user sign-up and sign-in in a matter of minutes.</li>\r\n	<li>and a lot more</li>\r\n</ul>\r\n<h3>But no amount of skills or tools will wipe out the possibility of <strong>error messages</strong>.</h3>\r\nSo with <em>Rails Curve</em> will teach you how to <strong>eliminate</strong> "getting stuck" forever. You’ll get <strong>real-world experience</strong> troubleshooting error messages for yourself <em>quickly</em> so you never have to slam on the breaks again. You will master the art of ...\r\n<ul>\r\n	<li>Reading error messages to get clues about what part of your app needs fixing</li>\r\n	<li>Googling and searching online dev communities to get past any error <em>in minutes</em></li>\r\n	<li>checking <em>Rails</em> and <em>Heroku</em> error logs using your trusty command line</li>\r\n</ul>\r\n<h3>By the time you finish <em>Rails Curve</em> you will have...</h3>\r\n<ul>\r\n	<li>seen how to make a solid plan you can follow</li>\r\n	<li>created all the key features needed for the app</li>\r\n	<li>sketched &amp; styled a beautiful UI on the front-end of the app</li>\r\n	<li>created a solid database back-end for the app</li>\r\n	<li>implemented a user authentication system for users to sign in and sign out</li>\r\n	<li>deployed your app to a live server</li>\r\n	<li>grown a slew of foundational web development skills in the process</li>\r\n</ul>\r\n<h3>You can <em>finally</em> get the <strong>traction</strong> you need</h3>\r\nWhether you are short on time, cash or have no formal education in programming, you will learn how to move the needle no matter what the circumstances. You will learn to make a production plan for yourself that keeps you moving forward. You will experience what it’s like to go from start to finish with a Rails app.\r\n\r\nWhen you complete <em>Rails Curve</em> you’ll feel confident that you can build apps from start to finish on your own. You’ll be totally certain that you can get past any error or issue. Your excitement won’t diminish because you’ll have a solid plan moves you to progress. You will be relieved that you don’t have to spend thousands of dollars and months of time to learn Rails. And you can finally feel in control because you will understand what each line of code does.\r\n<h3>So, fast forward 30 days and you have finished with <em>Rails Curve</em>. <strong>Now what?</strong></h3>\r\nBack to the obscure world of not knowing what’s next? <strong><em>No way</em>.</strong> When you complete the lessons you will definitely want to transition into building your own app idea. So <em>Rails Curve</em> includes outro lessons that will walk you through how to <strong>create your own plan</strong> for <em>your</em> app. This will leave you with a solid action plan that you can follow from start to finish. If you have unique issues or you need a push in the right direction, I also offer <a href="mailto:me@tyrichards.com">Rails coaching</a>. My goal is to see everyone who goes through <em>Rails Curve</em> build and launch their own app and build their career with great success and without stalling out.\r\n<h2>Join other makers who learn by doing</h2>\r\nWith <em>Rails Curve</em> you will build a <em>real</em> Rails app from start to finish and get all the skills you need to move forward and build your own app.\r\n\r\nLet <em>Rails Curve</em> take away the agony of learning Ruby on Rails.\r\n\r\nFind out the latest on when <em>Rails Curve</em> will be available by signing up below.\r\n\r\n[gravityform id="1" name="Don\'t miss out on my next post." title="false" description="false" ajax="true"]', 'Rails Curve', '', 'inherit', 'open', 'open', '', '105-revision-v1', '', '', '2014-08-22 20:14:26', '2014-08-23 01:14:26', '', 105, 'http://dev.dorails.com/105-revision-v1/', 0, 'revision', '', 0),
(137, 1, '2014-08-23 15:11:03', '2014-08-23 20:11:03', 'Are you spinning your wheels with Rails? Buried in error messages? Wasting a load of time trying to figure out the essentials of Ruby on Rails? Do you learn by doing? Well imagine you could get all of the key Rails skills and <strong>build</strong> an app at the same time.\r\n\r\nMy <a title="30-Day Rails" href="http://dev.dorails.com/30dayrails/" target="_blank">upcoming course</a> can give you the foundational skills you need to build <b>AND </b>ship Rails apps. Whether it\'s to level up your career or start your own business, I think it can help you get launched. I\'d go on but I\'ve already said it <a title="30-Day Rails" href="http://dev.dorails.com/30dayrails/" target="_blank">here</a>. If you\'re stuck and need a leg up with Ruby on Rails, check it out by clicking below.\r\n\r\n<a class="btn btn-primary" title="30-Day Rails" href="http://dev.dorails.com/30dayrails/">Learn more</a>', 'Speed up the learning curve for Ruby on Rails', '', 'publish', 'open', 'open', '', 'speed-up-the-learning-curve-for-ruby-on-rails', '', '', '2014-09-04 13:27:20', '2014-09-04 18:27:20', '', 0, 'http://dev.dorails.com/?p=137', 0, 'post', '', 0),
(138, 1, '2014-08-23 15:06:27', '2014-08-23 20:06:27', 'Are you spinning your wheels with Rails? Wasting a load of time trying to figure out the essentials of Ruby on Rails? Do you learn by doing? Well imagine you get all of the key Rails skills and build an app at the same time. I\'d go on but I\'ve already said it <a title="Rails Curve" href="http://dev.dorails.com/railscurve/">here</a>. My upcoming product <a title="Rails Curve" href="http://dev.dorails.com/railscurve/">Rails Curve</a> can give you the foundational skills you need to build <b>AND </b>ship Rails apps. Whether it\'s to level up your career or start your own business, <a title="Rails Curve" href="http://dev.dorails.com/railscurve/">Rails Curve</a> will help you launch.\r\n\r\n<a title="Rails Curve" class="btn btn-primary" href="http://dev.dorails.com/railscurve/">Learn more about <em>Rails Curve</em></a>', 'Speed up the learning curve for Ruby on Rails', '', 'inherit', 'open', 'open', '', '137-revision-v1', '', '', '2014-08-23 15:06:27', '2014-08-23 20:06:27', '', 137, 'http://dev.dorails.com/railsvitamins/137-revision-v1/', 0, 'revision', '', 0),
(139, 1, '2014-08-23 15:09:22', '2014-08-23 20:09:22', 'Are you spinning your wheels with Rails? Buried in error messages? Wasting a load of time trying to figure out the essentials of Ruby on Rails? Do you learn by doing? Well imagine you get all of the key Rails skills and <strong>build</strong> an app at the same time. My upcoming product <a title="Rails Curve" href="http://dev.dorails.com/railscurve/">Rails Curve</a> can give you the foundational skills you need to build <b>AND </b>ship Rails apps. Whether it\'s to level up your career or start your own business, <a title="Rails Curve" href="http://dev.dorails.com/railscurve/">Rails Curve</a> will help you launch. I\'d go on but I\'ve already said it <a title="Rails Curve" href="http://dev.dorails.com/railscurve/">here</a>. If you\'re stuck with Ruby on Rails and need a leg up, check it out.\r\n\r\n<a class="btn btn-primary" title="Rails Curve" href="http://dev.dorails.com/railscurve/">Learn more about <em>Rails Curve</em></a>', 'Speed up the learning curve for Ruby on Rails', '', 'inherit', 'open', 'open', '', '137-revision-v1', '', '', '2014-08-23 15:09:22', '2014-08-23 20:09:22', '', 137, 'http://dev.dorails.com/railsvitamins/137-revision-v1/', 0, 'revision', '', 0),
(140, 1, '2014-08-23 15:09:56', '2014-08-23 20:09:56', 'Are you spinning your wheels with Rails? Buried in error messages? Wasting a load of time trying to figure out the essentials of Ruby on Rails? Do you learn by doing? Well imagine you get all of the key Rails skills and <strong>build</strong> an app at the same time.\r\n\r\nMy upcoming product <a title="Rails Curve" href="http://dev.dorails.com/railscurve/">Rails Curve</a> can give you the foundational skills you need to build <b>AND </b>ship Rails apps. Whether it\'s to level up your career or start your own business, <a title="Rails Curve" href="http://dev.dorails.com/railscurve/">Rails Curve</a> will help you launch. I\'d go on but I\'ve already said it <a title="Rails Curve" href="http://dev.dorails.com/railscurve/">here</a>. If you\'re stuck with Ruby on Rails and need a leg up, check it out.\r\n\r\n<a class="btn btn-primary" title="Rails Curve" href="http://dev.dorails.com/railscurve/">Learn more about <em>Rails Curve</em></a>', 'Speed up the learning curve for Ruby on Rails', '', 'inherit', 'open', 'open', '', '137-revision-v1', '', '', '2014-08-23 15:09:56', '2014-08-23 20:09:56', '', 137, 'http://dev.dorails.com/railsvitamins/137-revision-v1/', 0, 'revision', '', 0),
(141, 1, '2014-08-23 15:11:03', '2014-08-23 20:11:03', 'Are you spinning your wheels with Rails? Buried in error messages? Wasting a load of time trying to figure out the essentials of Ruby on Rails? Do you learn by doing? Well imagine you get all of the key Rails skills and <strong>build</strong> an app at the same time.\r\n\r\nMy upcoming product <a title="Rails Curve" href="http://dev.dorails.com/railscurve/">Rails Curve</a> can give you the foundational skills you need to build <b>AND </b>ship Rails apps. Whether it\'s to level up your career or start your own business, <a title="Rails Curve" href="http://dev.dorails.com/railscurve/">Rails Curve</a> will help you launch. I\'d go on but I\'ve already said it <a title="Rails Curve" href="http://dev.dorails.com/railscurve/">here</a>. If you\'re stuck and need a leg up with Ruby on Rails, check it out by clicking below.\r\n\r\n<a class="btn btn-primary" title="Rails Curve" href="http://dev.dorails.com/railscurve/">Learn more about <em>Rails Curve</em></a>', 'Speed up the learning curve for Ruby on Rails', '', 'inherit', 'open', 'open', '', '137-revision-v1', '', '', '2014-08-23 15:11:03', '2014-08-23 20:11:03', '', 137, 'http://dev.dorails.com/railsvitamins/137-revision-v1/', 0, 'revision', '', 0),
(142, 1, '2014-08-23 15:42:41', '2014-08-23 20:42:41', 'Are you trying to launch your app idea? Or are you looking to get your career off the ground? Maybe you’ve tried to learn Rails on your own, but how do you know where to start? Is the learning-curve impossibly steep? Everyone says that learning Rails is <em>sooo</em> easy, but you’ve been banging your head against the desk for months trying to figure it out.\r\n\r\nAre you drowning in a sea of error messages? As you know by now, they can wash your dream app down the drain and bring months of hard work to a screeching halt.\r\n<h3>Do you learn by <strong>doing</strong>?</h3>\r\nAre you tired of studying <em>abstract</em> programming concepts and syntax without actually applying them to a <strong>real</strong> app?\r\n\r\nHave you burned piles of money and time on books and courses to be left with absolutely <em>nothing</em>? A lot of Rails books &amp; courses take <em>forever</em> to get through and then leave you high and dry with no skills or finished product.\r\n<h4>Is your brain<strong> flat-lining</strong> because you are forced to digest too many confusing programming concepts at once?</h4>\r\nEven the books that say they are for beginners are mind-numbing. And with endless copy &amp; pasting, they end up reducing you to a transcriptionist monkey. You are left in a foggy blur and you don’t retain the material. Plus many of the resources are horribly out-of-date and almost never go picture-perfect like they are written.\r\n<h4>Let’s face it, you need <strong>progress</strong> to stay motivated and learn Rails.</h4>\r\nProgress is the fuel that keeps you going. So a lack of it can really beat you down. I know it has for me. Do you wish there was a <em>better way</em> to learn Rails, but fear that there isn’t? It shouldn’t be <em>this</em> difficult.\r\n\r\nYou are <strong>certain</strong> that you want to build your app idea. You just aren’t sure that you can do it. Maybe it’s a lost cause. Perhaps you should save yourself the trouble and leave it alone.\r\n<div class="well">\r\n<h3>Well, imagine you <strong>could</strong> make and launch your own Ruby on Rails app in a <strong>matter of days</strong> with little knowledge of coding.</h3>\r\n</div>\r\nI know it sounds crazy, but seriously. What would it be like if you could fast-forward through Rails’ steep learning curve? If nothing stood in the way of you learning Rails and getting your app shipped? If nothing kept you from starting your own business or landing your dream job?\r\n\r\nYou could keep your precious precious sanity, that’s for sure.\r\n<h4>You would know <strong>exactly</strong> where to start learning and what was next.</h4>\r\nAnd getting stuck with error messages would be a thing of the past. You could soar through building your Rails app and cut through error messages like they were butter.\r\n\r\nYou wouldn’t have to throw away thousands on a Computer Science degree or Code School. And you wouldn’t need to find yourself a technical co-founder or hire that expensive developer. And huzzah, you could push your app live for the world to enjoy, without a hitch.\r\n<h4>You could finally make <strong>REAL</strong> traction and get ’er done.</h4>\r\nIf you had a Rails fast track, you could save months (or in my case - years) of wasted time. Not to mention you could avoid a ton of unnecessary pain and heartache.\r\n<h3>Then the dream of making AND shipping your app could <strong>finally</strong> come true.</h3>\r\nIf Rails was a piece o’ cake to pick up you could just learn by doing. Really <em>doing</em>. You’d <em>build</em> a Rails app and easily absorb the concepts and details one by one as you went along. You’d know <strong>exactly</strong> what to learn and you would learn it all in<strong> exactly</strong> the right order. You could eat the elephant one concept at a time, even in the midst of a wall of tasks, languages and syntax. And you’d never wonder if you had up-to-date training.\r\n\r\nEven without being a "Computer Scientist", you’d feel <strong>confident</strong> as you made a big-picture plan for your new app, wrote code at each step, and understood exactly what each line of code did and why it was there.\r\n<h4>Hell, at this rate you would actually <strong>enjoy </strong>coding.</h4>\r\nBy quickly stacking up tiny victories with Rails you could move yourself closer and closer to the big win of building <strong>and</strong> shipping your app for the world to see. The bottom line is that if Rails was easy-breezy to learn you could make an app <em>AND</em> get solid skills that you can build on – <strong>all at once</strong>.\r\n\r\nThat being said, it is true that Rails does have a crazy difficult learning curve and a Rails app can take months and months to build. But there’s good news. You don’t have to follow that path.\r\n<h3>With <em>Rails Curve</em> you can bypass the learning curve altogether and build a live Rails app in <strong>30 days.</strong></h3>\r\nYou will learn how to build a web app from start to finish, and grow all the skills you need to make your own apps moving forward. In <em>four weeks</em>, you will become experienced with all of the tools, concepts and skills that you need to plan, design, develop and ship a web app.\r\n<h4>With <em>Rails Curve</em> you will learn Rails by <strong>osmosis</strong></h4>\r\nYou will learn <strong>your</strong> way – by <strong>doing</strong>. After all, you decided to learn Rails so you could <em>build</em> an app – so why not learn by <strong>actually building</strong><em> one</em>?\r\n<h4 style="text-align: left;">By following the method of building <strong>AND</strong> learning at the same time you will...</h4>\r\n<ul>\r\n	<li>Understand the big picture <strong>faster</strong></li>\r\n	<li>Pick up complex skills and concepts <strong>faster</strong></li>\r\n	<li>Avoid getting paralyzed by the tiny details</li>\r\n	<li>Avoid the pain of wasting months studying in-depth concepts</li>\r\n	<li>Punch perfectionism <em>in the face</em></li>\r\n</ul>\r\nInstead of spinning your wheels on learning <em>abstract</em> concepts, <em>Rails Curve</em> will give you:\r\n<h4>a clear <strong>day-by-day plan</strong> for how to build a robust Rails app from <strong>start to finish</strong>.</h4>\r\nEach lesson will include bite-sized video screencasts that will walk you through <strong>exactly</strong> what to do, in plain english. <em>Rails Curve</em> gives you a solid path of <em>exactly</em> what to learn in <em>exactly</em> the right order. You will quickly move step by step through the process and pick up skills in each lesson until you have a completed (live) web app and the skills you need to dive into even more advanced material.\r\n<h4>As you move through each lesson, you will get a solid foundation of the key concepts and get <strong>first-hand experience</strong> on how they all work <strong>together</strong>.</h4>\r\nAnd no dull copy/pasting is necessary, you will simply write code yourself and learn the what, why and how as you go. Plus, everything is based on Rails 4 so you’ll have the latest and greatest training for Rails.\r\n<h4 style="text-align: left;"><em>Rails Curve</em> will <strong>jump-start</strong> your understanding of key elements like...</h4>\r\n<div class="row">\r\n<ul class="col-md-6">\r\n	<li>Ruby</li>\r\n	<li>Gems</li>\r\n	<li>Ruby on Rails Framework</li>\r\n	<li>Command Line (Terminal)</li>\r\n	<li>MVC pattern (Model View Controller)</li>\r\n	<li>Object-Oriented Programming</li>\r\n	<li>Active Record</li>\r\n	<li>Databases</li>\r\n	<li>HTML</li>\r\n	<li>CSS and Sass</li>\r\n	<li>Javascript and CoffeeScript</li>\r\n</ul>\r\n<ul class="col-md-6">\r\n	<li>Front-end Frameworks</li>\r\n	<li>Deployment</li>\r\n	<li>Version Control</li>\r\n	<li>Validation</li>\r\n	<li>User Authentication</li>\r\n	<li>UI Design</li>\r\n	<li>UX Design</li>\r\n	<li>Project Management</li>\r\n	<li>and more...</li>\r\n</ul>\r\n</div>\r\n<h3>You can’t build an app without the right tools</h3>\r\nSo you will get hands-on experience with all of the standard tools like the command-line (Terminal), a text editor (like <em>Sublime</em> Text), <em>Git</em>, <em>Github</em>, <em>Heroku</em>, <em>Twitter Bootstrap</em>, <em>Devise</em>, and more. You will learn the ins-and-outs of all the tools you <em>gotta have</em> in your Rails toolbelt.\r\n<h4>With <em>Rails Curve</em> you will learn <strong>exactly</strong> how to do things like ...</h4>\r\n<ul>\r\n	<li>use the command-line to create a new blank-slate app</li>\r\n	<li>use a single command to create a rails server on your computer</li>\r\n	<li>use <em>Git</em> to manage your source code and push it to an online repo at <em>Github</em></li>\r\n	<li>use the command-line to generate the pages and elements of your app on the fly</li>\r\n	<li>use the command-line to manage your database</li>\r\n	<li>use the command-line to push your app to a live server on <em>Heroku</em></li>\r\n	<li>use <em>Twitter Bootstrap</em> to rapidly style your app - with <strong>no</strong> design experience needed.</li>\r\n	<li>use the <em>Devise</em> gem to create user sign-up and sign-in in a matter of minutes.</li>\r\n	<li>and a lot more</li>\r\n</ul>\r\n<h3>But no amount of skills or tools will wipe out the possibility of <strong>error messages</strong>.</h3>\r\nSo with <em>Rails Curve</em> will teach you how to <strong>eliminate</strong> "getting stuck" forever. You’ll get <strong>real-world experience</strong> troubleshooting error messages for yourself <em>quickly</em> so you never have to slam on the breaks again. You will master the art of ...\r\n<ul>\r\n	<li>Reading error messages to get clues about what part of your app needs fixing</li>\r\n	<li>Googling and searching online dev communities to get past any error <em>in minutes</em></li>\r\n	<li>checking <em>Rails</em> and <em>Heroku</em> error logs using your trusty command line</li>\r\n</ul>\r\n<h3>By the time you finish <em>Rails Curve</em> you will have...</h3>\r\n<ul>\r\n	<li>seen how to make a solid plan you can follow</li>\r\n	<li>created all the key features needed for the app</li>\r\n	<li>sketched &amp; styled a beautiful UI on the front-end of the app</li>\r\n	<li>created a solid database back-end for the app</li>\r\n	<li>implemented a user authentication system for users to sign in and sign out</li>\r\n	<li>deployed your app to a live server</li>\r\n	<li>grown a slew of foundational web development skills in the process</li>\r\n</ul>\r\n<h3>You can <em>finally</em> get the <strong>traction</strong> you need</h3>\r\nWhether you are short on time, cash or have no formal education in programming, you will learn how to move the needle no matter what the circumstances. You will learn to make a production plan for yourself that keeps you moving forward. You will experience what it’s like to go from start to finish with a Rails app.\r\n\r\nWhen you complete <em>Rails Curve</em> you’ll feel confident that you can build apps from start to finish on your own. You’ll be totally certain that you can get past any error or issue. Your excitement won’t diminish because you’ll have a solid plan moves you to progress. You will be relieved that you don’t have to spend thousands of dollars and months of time to learn Rails. And you can finally feel in control because you will understand what each line of code does.\r\n<h3>So, fast forward 30 days and you have finished with <em>Rails Curve</em>. <strong>Now what?</strong></h3>\r\nBack to the obscure world of not knowing what’s next? <strong><em>No way</em>.</strong> When you complete the lessons you will definitely want to transition into building your own app idea. So <em>Rails Curve</em> includes outro lessons that will walk you through how to <strong>create your own plan</strong> for <em>your</em> app. This will leave you with a solid action plan that you can follow from start to finish. If you have unique issues or you need a push in the right direction, I also offer <a href="mailto:me@tyrichards.com">Rails coaching</a>. My goal is to see everyone who goes through <em>Rails Curve</em> build and launch their own app and build their career with great success and without stalling out.\r\n<h2>Join other makers who learn by doing</h2>\r\nWith <em>Rails Curve</em> you will build a <em>real</em> Rails app from start to finish and get all the skills you need to move forward and build your own app.\r\n\r\nLet <em>Rails Curve</em> take away the agony of learning Ruby on Rails.\r\n<h3>Find out the latest on when <em>Rails Curve</em> will be available by signing up below.</h3>', 'Rails Curve', '', 'inherit', 'open', 'open', '', '105-revision-v1', '', '', '2014-08-23 15:42:41', '2014-08-23 20:42:41', '', 105, 'http://dev.dorails.com/railsvitamins/105-revision-v1/', 0, 'revision', '', 0),
(143, 1, '2014-08-23 15:46:05', '2014-08-23 20:46:05', 'Are you trying to launch your app idea? Or are you looking to get your career off the ground? Maybe you’ve tried to learn Rails on your own, but how do you know where to start? Is the learning-curve impossibly steep? Everyone says that learning Rails is <em>sooo</em> easy, but you’ve been banging your head against the desk for months trying to figure it out.\r\n\r\nAre you drowning in a sea of error messages? As you know by now, they can wash your dream app down the drain and bring months of hard work to a screeching halt.\r\n<h3>Do you learn by <strong>doing</strong>?</h3>\r\nAre you tired of studying <em>abstract</em> programming concepts and syntax without actually applying them to a <strong>real</strong> app?\r\n\r\nHave you burned piles of money and time on books and courses to be left with absolutely <em>nothing</em>? A lot of Rails books &amp; courses take <em>forever</em> to get through and then leave you high and dry with no skills or finished product.\r\n<h4>Is your brain<strong> flat-lining</strong> because you are forced to digest too many confusing programming concepts at once?</h4>\r\nEven the books that say they are for beginners are mind-numbing. And with endless copy &amp; pasting, they end up reducing you to a transcriptionist monkey. You are left in a foggy blur and you don’t retain the material. Plus many of the resources are horribly out-of-date and almost never go picture-perfect like they are written.\r\n<h4>Let’s face it, you need <strong>progress</strong> to stay motivated and learn Rails.</h4>\r\nProgress is the fuel that keeps you going. So a lack of it can really beat you down. I know it has for me. Do you wish there was a <em>better way</em> to learn Rails, but fear that there isn’t? It shouldn’t be <em>this</em> difficult.\r\n\r\nYou are <strong>certain</strong> that you want to build your app idea. You just aren’t sure that you can do it. Maybe it’s a lost cause. Perhaps you should save yourself the trouble and leave it alone.\r\n<div class="well">\r\n<h3>Well, imagine you <strong>could</strong> make and launch your own Ruby on Rails app in a <strong>matter of days</strong> with little knowledge of coding.</h3>\r\n</div>\r\nI know it sounds crazy, but seriously. What would it be like if you could fast-forward through Rails’ steep learning curve? If nothing stood in the way of you learning Rails and getting your app shipped? If nothing kept you from starting your own business or landing your dream job?\r\n\r\nYou could keep your precious precious sanity, that’s for sure.\r\n<h4>You would know <strong>exactly</strong> where to start learning and what was next.</h4>\r\nAnd getting stuck with error messages would be a thing of the past. You could soar through building your Rails app and cut through error messages like they were butter.\r\n\r\nYou wouldn’t have to throw away thousands on a Computer Science degree or Code School. And you wouldn’t need to find yourself a technical co-founder or hire that expensive developer. And huzzah, you could push your app live for the world to enjoy, without a hitch.\r\n<h4>You could finally make <strong>REAL</strong> traction and get ’er done.</h4>\r\nIf you had a Rails fast track, you could save months (or in my case - years) of wasted time. Not to mention you could avoid a ton of unnecessary pain and heartache.\r\n<h3>Then the dream of making AND shipping your app could <strong>finally</strong> come true.</h3>\r\nIf Rails was a piece o’ cake to pick up you could just learn by doing. Really <em>doing</em>. You’d <em>build</em> a Rails app and easily absorb the concepts and details one by one as you went along. You’d know <strong>exactly</strong> what to learn and you would learn it all in<strong> exactly</strong> the right order. You could eat the elephant one concept at a time, even in the midst of a wall of tasks, languages and syntax. And you’d never wonder if you had up-to-date training.\r\n\r\nEven without being a "Computer Scientist", you’d feel <strong>confident</strong> as you made a big-picture plan for your new app, wrote code at each step, and understood exactly what each line of code did and why it was there.\r\n<h4>Hell, at this rate you would actually <strong>enjoy </strong>coding.</h4>\r\nBy quickly stacking up tiny victories with Rails you could move yourself closer and closer to the big win of building <strong>and</strong> shipping your app for the world to see. The bottom line is that if Rails was easy-breezy to learn you could make an app <em>AND</em> get solid skills that you can build on – <strong>all at once</strong>.\r\n\r\nThat being said, it is true that Rails does have a crazy difficult learning curve and a Rails app can take months and months to build. But there’s good news. You don’t have to follow that path.\r\n<h3>With <em>Rails Curve</em> you can bypass the learning curve altogether and build a live Rails app in <strong>30 days.</strong></h3>\r\nYou will learn how to build a web app from start to finish, and grow all the skills you need to make your own apps moving forward. In <em>four weeks</em>, you will become experienced with all of the tools, concepts and skills that you need to plan, design, develop and ship a web app.\r\n<h4>With <em>Rails Curve</em> you will learn Rails by <strong>osmosis</strong></h4>\r\nYou will learn <strong>your</strong> way – by <strong>doing</strong>. After all, you decided to learn Rails so you could <em>build</em> an app – so why not learn by <strong>actually building</strong><em> one</em>?\r\n<h4 style="text-align: left;">By following the method of building <strong>AND</strong> learning at the same time you will...</h4>\r\n<ul>\r\n	<li>Understand the big picture <strong>faster</strong></li>\r\n	<li>Pick up complex skills and concepts <strong>faster</strong></li>\r\n	<li>Avoid getting paralyzed by the tiny details</li>\r\n	<li>Avoid the pain of wasting months studying in-depth concepts</li>\r\n	<li>Punch perfectionism <em>in the face</em></li>\r\n</ul>\r\nInstead of spinning your wheels on learning <em>abstract</em> concepts, <em>Rails Curve</em> will give you:\r\n<h4>a clear <strong>day-by-day plan</strong> for how to build a robust Rails app from <strong>start to finish</strong>.</h4>\r\nEach lesson will include bite-sized video screencasts that will walk you through <strong>exactly</strong> what to do, in plain english. <em>Rails Curve</em> gives you a solid path of <em>exactly</em> what to learn in <em>exactly</em> the right order. You will quickly move step by step through the process and pick up skills in each lesson until you have a completed (live) web app and the skills you need to dive into even more advanced material.\r\n<h4>As you move through each lesson, you will get a solid foundation of the key concepts and get <strong>first-hand experience</strong> on how they all work <strong>together</strong>.</h4>\r\nAnd no dull copy/pasting is necessary, you will simply write code yourself and learn the what, why and how as you go. Plus, everything is based on Rails 4 so you’ll have the latest and greatest training for Rails.\r\n<h4 style="text-align: left;"><em>Rails Curve</em> will <strong>jump-start</strong> your understanding of key elements like...</h4>\r\n<div class="row">\r\n<ul class="col-md-6">\r\n	<li>Ruby</li>\r\n	<li>Gems</li>\r\n	<li>Ruby on Rails Framework</li>\r\n	<li>Command Line (Terminal)</li>\r\n	<li>MVC pattern (Model View Controller)</li>\r\n	<li>Object-Oriented Programming</li>\r\n	<li>Active Record</li>\r\n	<li>Databases</li>\r\n	<li>HTML</li>\r\n	<li>CSS and Sass</li>\r\n	<li>Javascript and CoffeeScript</li>\r\n</ul>\r\n<ul class="col-md-6">\r\n	<li>Front-end Frameworks</li>\r\n	<li>Deployment</li>\r\n	<li>Version Control</li>\r\n	<li>Validation</li>\r\n	<li>User Authentication</li>\r\n	<li>UI Design</li>\r\n	<li>UX Design</li>\r\n	<li>Project Management</li>\r\n	<li>and more...</li>\r\n</ul>\r\n</div>\r\n<h3>You can’t build an app without the right tools</h3>\r\nSo you will get hands-on experience with all of the standard tools like the command-line (Terminal), a text editor (like <em>Sublime</em> Text), <em>Git</em>, <em>Github</em>, <em>Heroku</em>, <em>Twitter Bootstrap</em>, <em>Devise</em>, and more. You will learn the ins-and-outs of all the tools you <em>gotta have</em> in your Rails toolbelt.\r\n<h4>With <em>Rails Curve</em> you will learn <strong>exactly</strong> how to do things like ...</h4>\r\n<ul>\r\n	<li>use the command-line to create a new blank-slate app</li>\r\n	<li>use a single command to create a rails server on your computer</li>\r\n	<li>use <em>Git</em> to manage your source code and push it to an online repo at <em>Github</em></li>\r\n	<li>use the command-line to generate the pages and elements of your app on the fly</li>\r\n	<li>use the command-line to manage your database</li>\r\n	<li>use the command-line to push your app to a live server on <em>Heroku</em></li>\r\n	<li>use <em>Twitter Bootstrap</em> to rapidly style your app - with <strong>no</strong> design experience needed.</li>\r\n	<li>use the <em>Devise</em> gem to create user sign-up and sign-in in a matter of minutes.</li>\r\n	<li>and a lot more</li>\r\n</ul>\r\n<h3>But no amount of skills or tools will wipe out the possibility of <strong>error messages</strong>.</h3>\r\nSo with <em>Rails Curve</em> will teach you how to <strong>eliminate</strong> "getting stuck" forever. You’ll get <strong>real-world experience</strong> troubleshooting error messages for yourself <em>quickly</em> so you never have to slam on the breaks again. You will master the art of ...\r\n<ul>\r\n	<li>Reading error messages to get clues about what part of your app needs fixing</li>\r\n	<li>Googling and searching online dev communities to get past any error <em>in minutes</em></li>\r\n	<li>checking <em>Rails</em> and <em>Heroku</em> error logs using your trusty command line</li>\r\n</ul>\r\n<h3>By the time you finish <em>Rails Curve</em> you will have...</h3>\r\n<ul>\r\n	<li>seen how to make a solid plan you can follow</li>\r\n	<li>created all the key features needed for the app</li>\r\n	<li>sketched &amp; styled a beautiful UI on the front-end of the app</li>\r\n	<li>created a solid database back-end for the app</li>\r\n	<li>implemented a user authentication system for users to sign in and sign out</li>\r\n	<li>deployed your app to a live server</li>\r\n	<li>grown a slew of foundational web development skills in the process</li>\r\n</ul>\r\n<h3>You can <em>finally</em> get the <strong>traction</strong> you need</h3>\r\nWhether you are short on time, cash or have no formal education in programming, you will learn how to move the needle no matter what the circumstances. You will learn to make a production plan for yourself that keeps you moving forward. You will experience what it’s like to go from start to finish with a Rails app.\r\n\r\nWhen you complete <em>Rails Curve</em> you’ll feel confident that you can build apps from start to finish on your own. You’ll be totally certain that you can get past any error or issue. Your excitement won’t diminish because you’ll have a solid plan moves you to progress. You will be relieved that you don’t have to spend thousands of dollars and months of time to learn Rails. And you can finally feel in control because you will understand what each line of code does.\r\n<h3>So, fast forward 30 days and you have finished with <em>Rails Curve</em>. <strong>Now what?</strong></h3>\r\nBack to the obscure world of not knowing what’s next? <strong><em>No way</em>.</strong> When you complete the lessons you will definitely want to transition into building your own app idea. So <em>Rails Curve</em> includes outro lessons that will walk you through how to <strong>create your own plan</strong> for <em>your</em> app. This will leave you with a solid action plan that you can follow from start to finish. If you have unique issues or you need a push in the right direction, I also offer <a href="mailto:me@tyrichards.com">Rails coaching</a>. My goal is to see everyone who goes through <em>Rails Curve</em> build and launch their own app and build their career with great success and without stalling out.\r\n<h2>Join other makers who learn by doing</h2>\r\nWith <em>Rails Curve</em> you will build a <em>real</em> Rails app from start to finish and get all the skills you need to move forward and build your own app.\r\n\r\nLet <em>Rails Curve</em> take away the agony of learning Ruby on Rails.', 'Rails Curve', '', 'inherit', 'open', 'open', '', '105-revision-v1', '', '', '2014-08-23 15:46:05', '2014-08-23 20:46:05', '', 105, 'http://dev.dorails.com/railsvitamins/105-revision-v1/', 0, 'revision', '', 0) ;
INSERT INTO `wp_posts` ( `ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(144, 1, '2014-09-04 13:19:20', '2014-09-04 18:19:20', 'You’re halfway through your third Ruby on Rails book and you feel like you\'ve hit a wall. It’s 1 o’clock in the morning and your shoulders are feeling heavy. You\'re ready to quit for the night, but for months you\'ve kept telling yourself:\n<h3>“If I just finish this last Rails course, <strong>then</strong> I\'ll be ready to start building my Rails app”.</h3>\nYou decide to power through and do yet another Ruby exercise on lambda’s and hashes. An hour later, your eyes are glazed over with confusion and exhaustion.\n<h4>You feel more like a transcriptionist <em>monkey</em> than a developer.</h4>\nYou now have <em>one more</em> refactoring technique swirling around in your brain with no way to use it. You’re officially fried.\n\nThat’s when you see the next section has an <em>example</em>. "Woohoo!” You can actually <strong>apply</strong> your knowledge!\n<h4>But right off the bat you get stuck with another<em> lovely</em> error message.</h4>\nUgggh! After an hour and a half of putzing around to get past that, you slam your laptop shut. Now your eyes are wide open and bloodshot. You’re face is turning red. You throw the book across the room into the trash can. Kobe! With teeth clenched you say to yourself,\n<h3>"It should <em>not</em> be <strong>THIS</strong> hard!”</h3>\nEveryone told you that Rails was <em>easy</em>. But you’ve learned nothing. You’ve accomplished nothing. At this rate you will <strong>never</strong> get your app built.\n\nYou’re mind is racing as you lay in bed. You’re flailing to find <em>some</em> way to make this work.\n<h4>“If I would’ve got that Computer Science degree, I could do this…”</h4>\n<h4>“I should\'ve picked the right Rails courses, then I wouldn’t have wasted the last 9 months”</h4>\n<h4>"If I wasn’t forced to learn so many concepts at once...”</h4>\nOn and on.\n\nAt this point so many concepts have been thrown at you, but you have <strong>no clue</strong> about how to put them all together.\n<h4>You understand HTML &amp; CSS but this is a different monster.</h4>\nWhat the hell is MVC? Should you tackle front-end styling first? or back-end database stuff? Should you learn Ruby first before Rails? How do you configure a server for Rails? You can feel your dream slowly being crushed by the load.\n\nYou click off the light and close your eyes. Now you feel like your sinking into the bed.\n<h4>This is not your fault.</h4>\nThe learning curve is just too steep. The resources out there are too advanced. Maybe apps are not your thing. Maybe you should just stick to what you know best. You could just go back to making plain \'ol websites and forget all about building apps. So much time and effort would be wasted if you quit now, but maybe it would be best to cut your losses. As dawn breaks, you drift off to sleep.\n<h3>But what would it be like if you <em><strong>could</strong></em> build a finished Rails app?</h3>\nWhat if you could get it done and live in a matter of <em>days</em>. Seriously, I know it sounds crazy. Imagine there\'s no learning curve. Just you and the code. Doing and learning all at once.\n\nYou could finally understand the big picture of how it all works together. If you had a clear plan, you could learn each part of Rails in exactly the right order. You could even cut through error messages like they were butter. What if nothing stood in the way of you learning Rails and getting your app shipped?\n<h3>Then the dream of building and launching your Rails app could finally come true.</h3>\nBut contrary to the hype, Ruby on Rails does have a crazy difficult learning curve. Rails apps take months and months to build.\n<h4>What it took me years to figure out:</h4>\nLearning Rails <em>doesn\'t</em> have to be <strong>this</strong> hard. You don’t have to have a CS degree. You don’t have to understand every detail about the Ruby language to build a Rails app. Learn by doing! The best way to learn Ruby on Rails more many is to actually build a Rails app one piece at a time. It’s all about stacking up quick wins that work toward the goal of getting a Rails app finished.\n<h4>Don\'t learned the hard way</h4>\nIt took me a <em>long time</em> to wrap my head around Rails. Let me give you a shortcut so you can save a lot of heartache. If you have a fast track, you will save months (or in my case - years) of wasted time. Not to mention you would avoid a ton of unnecessary pain and heartache.\n<h3>With my <em>30-Day Rails</em> course you will build and deploy a live Rails app in 30 days.</h3>\nBypass the learning curve altogether! I will walk you through how to build a web app from start to finish. And you will grow all the skills you need to make your own apps moving forward. In four weeks you’ll get experience with all the tools, concepts and skills that you need to – plan, design, develop and (most importantly) ship a web app.\n<h4>Learn by doing</h4>\nYou will learn <strong>your</strong> way – by <strong>doing</strong>. After all, you decided to learn Rails so you could <em>build</em> an app – so why not learn by <strong>actually building</strong> <strong>one</strong>?\n<h4 style="text-align: left;">By following the method of building <strong>AND</strong> learning at the same time you will...</h4>\n<ul>\n	<li>Understand the big picture <strong>faster</strong></li>\n	<li>Pick up complex skills and concepts <strong>faster</strong></li>\n	<li>Avoid getting paralyzed by the tiny details</li>\n	<li>Avoid the pain of wasting months studying in-depth concepts</li>\n	<li>Punch perfectionism <em>in the face</em></li>\n</ul>\nInstead of spinning your wheels on learning <em>abstract </em>one-off concepts, <em>30-Day Rails</em> will give you:\n<h4>a clear <strong>day-by-day plan</strong> for how to build a robust Rails app from <strong>start to finish</strong>.</h4>\nEach lesson will include bite-sized video screencasts that will walk you through <strong>exactly</strong> what to do, in plain english. <em>30-Day Rails</em> gives you a solid path of <em>exactly</em> what to learn in <em>exactly</em> the right order. You will quickly move step by step through the process and pick up skills in each lesson until you have a completed (live) web app and the skills you need to dive into even more advanced material.\n<h4>As you move through each lesson, you will get a solid foundation of the key concepts and get <strong>first-hand experience</strong> on how they all work <em><strong>together</strong></em>.</h4>\nAnd no dull copy/pasting is necessary, you will write code yourself and learn the what, why and how as you go. Plus, everything is based on Rails 4 so you’ll have the latest and greatest training for Rails.\n<h4 style="text-align: left;"><em>30-Day Rails</em> will <strong>jump-start</strong> your understanding of key elements like:</h4>\n<div class="row">\n<ul class="col-md-6">\n	<li>Ruby</li>\n	<li>Gems</li>\n	<li>Ruby on Rails Framework</li>\n	<li>Command Line (Terminal)</li>\n	<li>MVC pattern (Model View Controller)</li>\n	<li>Object-Oriented Programming</li>\n	<li>Active Record</li>\n	<li>Databases</li>\n	<li>HTML &amp; ERB</li>\n	<li>CSS and Sass</li>\n	<li>Javascript and CoffeeScript</li>\n</ul>\n<ul class="col-md-6">\n	<li>Front-end Frameworks</li>\n	<li>Deployment</li>\n	<li>Version Control</li>\n	<li>Validation</li>\n	<li>User Authentication</li>\n	<li>UI Design</li>\n	<li>UX Design</li>\n	<li>Project Management</li>\n	<li>and more...</li>\n</ul>\n</div>\n<h3>You can’t build an app without the right tools</h3>\nSo you will get hands-on experience with all of the standard tools like the command-line (Terminal), a text editor (like <em>Sublime</em> Text), <em>Git</em>, <em>Github</em>, <em>Heroku</em>, <em>Twitter Bootstrap</em>, <em>Devise</em>, and more. You will learn the ins-and-outs of all the tools you <em>gotta have</em> in your Rails toolbelt.\n<h4>With 30-Day Rails you will learn <strong>exactly</strong> how to do things like ...</h4>\n<ul>\n	<li>use the command-line to create a new blank-slate app</li>\n	<li>use a single command to create a rails server on your computer</li>\n	<li>use <em>Git</em> to manage your source code and push it to an online repo at <em>Github</em></li>\n	<li>use the command-line to generate the pages and elements of your app on the fly</li>\n	<li>use the command-line to manage your database</li>\n	<li>use the command-line to push your app to a live server on <em>Heroku</em></li>\n	<li>use <em>Twitter Bootstrap</em> to rapidly style your app - with <strong>no</strong> design experience needed.</li>\n	<li>use the <em>Devise</em> gem to create user sign-up and sign-in in a matter of minutes.</li>\n	<li>and a lot more</li>\n</ul>\n<h3>Learn to deal with <strong>error messages</strong>.</h3>\nThe<em> Rails Curve </em>course will teach you how to <strong>eliminate</strong> "getting stuck" forever. You’ll get <strong>real-world experience</strong> troubleshooting error messages for yourself <em>quickly</em> so you never have to slam on the breaks again. You will master the art of ...\n<ul>\n	<li>Reading error messages to get clues about what part of your app needs fixing</li>\n	<li>Googling and searching online dev communities to get past any error <em>in minutes</em></li>\n	<li>checking <em>Rails</em> and <em>Heroku</em> error logs using your trusty command line</li>\n</ul>\n<h3>By the time you finish <em>Rails Curve</em> you will have...</h3>\n<ul>\n	<li>seen how to make a solid plan you can follow</li>\n	<li>created all the key features needed for the app</li>\n	<li>sketched &amp; styled a beautiful UI on the front-end of the app</li>\n	<li>created a solid database back-end for the app</li>\n	<li>implemented a user authentication system for users to sign in and sign out</li>\n	<li>deployed your app to a live server</li>\n	<li>grown a slew of foundational web development skills in the process</li>\n</ul>\n<h3>You can <em>finally</em> get the <strong>traction</strong> you need</h3>\nWhen you complete <em>Rails Curve</em> you’ll feel confident that you can build apps from start to finish on your own. You’ll be totally certain that you can get past any error or issue. Your excitement won’t diminish because you’ll have a solid plan that moves you to progress. You will be relieved that you don’t have to spend thousands of dollars and months of time to learn Rails. And you can finally feel in control because you will understand what each line of code does.\n<h3>So, fast forward 30 days and you have finished with <em>Rails Curve</em>. <strong>Now what?</strong></h3>\nBack to the obscure world of not knowing what’s next? <strong><em>No way</em>.</strong> When you complete the lessons you will definitely want to transition into building your own app idea. So <em>Rails Curve</em> includes outro lessons that will walk you through how to <strong>create your own plan</strong> for <em>your</em> app. This will leave you with a solid action plan that you can follow from start to finish. If you have unique issues or you need a push in the right direction, I also offer <a href="mailto:me@tyrichards.com">Rails coaching</a>. My goal is to see everyone who goes through <em>Rails Curve</em> build and launch their own apps and build their business or career with great success and without burning out.\n<h2>Join other developers who learn by doing</h2>\nWith <em>Rails Curve</em> you will build a <em>real</em> Rails app from start to finish and get all the skills you need to move forward and build your own app.\n\nLet my <em>Rails Curve </em>course take away the agony of learning Ruby on Rails.', '30-Day Rails', '', 'inherit', 'open', 'open', '', '105-autosave-v1', '', '', '2014-09-04 13:19:20', '2014-09-04 18:19:20', '', 105, 'http://dev.dorails.com/railsvitamins/105-autosave-v1/', 0, 'revision', '', 0),
(145, 1, '2014-08-24 03:57:21', '2014-08-24 08:57:21', 'Are you trying to launch your app idea? Or are you looking to get your career off the ground? Maybe you’ve tried to learn Rails on your own, but how do you know where to start? Is the learning-curve impossibly steep? Everyone says that learning Rails is <em>sooo</em> easy, but you’ve been banging your head against the desk for months trying to figure it out.\r\n\r\nAre you drowning in a sea of error messages? As you know by now, they can wash your dream app down the drain and bring months of hard work to a screeching halt.\r\n<h3>Do you learn by <strong>doing</strong>?</h3>\r\nAre you tired of studying <em>abstract</em> programming concepts and syntax without actually applying them to a <strong>real</strong> app?\r\n\r\nHave you burned piles of money and time on books and courses to be left with absolutely <em>nothing</em>? A lot of Rails books &amp; courses take <em>forever</em> to get through and then leave you high and dry with no skills or finished product.\r\n<h4>Is your brain<strong> flat-lining</strong> because you are forced to digest too many confusing programming concepts at once?</h4>\r\nEven the books that say they are for beginners are mind-numbing. And with endless copy &amp; pasting, they end up reducing you to a transcriptionist monkey. You are left in a foggy blur and you don’t retain the material. Plus many of the resources are horribly out-of-date and almost never go picture-perfect like they are written.\r\n<h4>It shouldn’t be <strong>this</strong> difficult.</h4>\r\nLet’s face it, you need <strong>progress</strong> to stay motivated and learn Rails. Progress is the fuel that keeps you going. So a lack of it can really beat you down. I know it has for me. Do you wish there was a <em>better way</em> to learn Rails, but fear that there isn’t?\r\n\r\nYou are <strong>certain</strong> that you want to build your app idea. You just aren’t sure that you can do it. Maybe it’s a lost cause. Perhaps you should save yourself the trouble and leave it alone.\r\n<div class="well">\r\n<h3>Well, imagine you <strong>could</strong> make and launch your own Ruby on Rails app in a <strong>matter of days</strong> with little knowledge of coding.</h3>\r\n</div>\r\nI know it sounds crazy, but seriously. What would it be like if you could fast-forward through Rails’ steep learning curve? If nothing stood in the way of you learning Rails and getting your app shipped? If nothing kept you from starting your own business or landing your dream job?\r\n\r\nYou could keep your precious precious sanity, that’s for sure.\r\n<h4>You would know <strong>exactly</strong> where to start learning and what was next.</h4>\r\nAnd getting stuck with error messages would be a thing of the past. You could soar through building your Rails app and cut through error messages like they were butter.\r\n\r\nYou wouldn’t have to throw away thousands on a Computer Science degree or Code School. And you wouldn’t need to find yourself a technical co-founder or hire that expensive developer. And huzzah, you could push your app live for the world to enjoy, without a hitch.\r\n<h4>You could finally make <strong>REAL</strong> traction and get ’er done.</h4>\r\nIf you had a Rails fast track, you could save months (or in my case - years) of wasted time. Not to mention you could avoid a ton of unnecessary pain and heartache.\r\n<h3>Then the dream of making AND shipping your app could <strong>finally</strong> come true.</h3>\r\nIf Rails was a piece o’ cake to pick up you could just learn by doing. Really <em>doing</em>. You’d <em>build</em> a Rails app and easily absorb the concepts and details one by one as you went along. You’d know <strong>exactly</strong> what to learn and you would learn it all in<strong> exactly</strong> the right order. You could eat the elephant one concept at a time, even in the midst of a wall of tasks, languages and syntax. And you’d never wonder if you had up-to-date training.\r\n\r\nEven without being a "Computer Scientist", you’d feel <strong>confident</strong> as you made a big-picture plan for your new app, wrote code at each step, and understood exactly what each line of code did and why it was there.\r\n<h4>Hell, at this rate you would actually <strong>enjoy </strong>coding.</h4>\r\nBy quickly stacking up tiny victories with Rails you could move yourself closer and closer to the big win of building <strong>and</strong> shipping your app for the world to see. The bottom line is that if Rails was easy-breezy to learn you could make an app <em>AND</em> get solid skills that you can build on – <strong>all at once</strong>.\r\n\r\nThat being said, it is true that Rails does have a crazy difficult learning curve and a Rails app can take months and months to build. But there’s good news. You don’t have to follow that path.\r\n<h3>With <em>Rails Curve</em> you can bypass the learning curve altogether and build a live Rails app in <strong>30 days.</strong></h3>\r\nYou will learn how to build a web app from start to finish, and grow all the skills you need to make your own apps moving forward. In <em>four weeks</em>, you will become experienced with all of the tools, concepts and skills that you need to plan, design, develop and ship a web app.\r\n<h4>With <em>Rails Curve</em> you will learn Rails by <strong>osmosis</strong></h4>\r\nYou will learn <strong>your</strong> way – by <strong>doing</strong>. After all, you decided to learn Rails so you could <em>build</em> an app – so why not learn by <strong>actually building</strong><em> one</em>?\r\n<h4 style="text-align: left;">By following the method of building <strong>AND</strong> learning at the same time you will...</h4>\r\n<ul>\r\n	<li>Understand the big picture <strong>faster</strong></li>\r\n	<li>Pick up complex skills and concepts <strong>faster</strong></li>\r\n	<li>Avoid getting paralyzed by the tiny details</li>\r\n	<li>Avoid the pain of wasting months studying in-depth concepts</li>\r\n	<li>Punch perfectionism <em>in the face</em></li>\r\n</ul>\r\nInstead of spinning your wheels on learning <em>abstract</em> concepts, <em>Rails Curve</em> will give you:\r\n<h4>a clear <strong>day-by-day plan</strong> for how to build a robust Rails app from <strong>start to finish</strong>.</h4>\r\nEach lesson will include bite-sized video screencasts that will walk you through <strong>exactly</strong> what to do, in plain english. <em>Rails Curve</em> gives you a solid path of <em>exactly</em> what to learn in <em>exactly</em> the right order. You will quickly move step by step through the process and pick up skills in each lesson until you have a completed (live) web app and the skills you need to dive into even more advanced material.\r\n<h4>As you move through each lesson, you will get a solid foundation of the key concepts and get <strong>first-hand experience</strong> on how they all work <strong>together</strong>.</h4>\r\nAnd no dull copy/pasting is necessary, you will simply write code yourself and learn the what, why and how as you go. Plus, everything is based on Rails 4 so you’ll have the latest and greatest training for Rails.\r\n<h4 style="text-align: left;"><em>Rails Curve</em> will <strong>jump-start</strong> your understanding of key elements like...</h4>\r\n<div class="row">\r\n<ul class="col-md-6">\r\n	<li>Ruby</li>\r\n	<li>Gems</li>\r\n	<li>Ruby on Rails Framework</li>\r\n	<li>Command Line (Terminal)</li>\r\n	<li>MVC pattern (Model View Controller)</li>\r\n	<li>Object-Oriented Programming</li>\r\n	<li>Active Record</li>\r\n	<li>Databases</li>\r\n	<li>HTML</li>\r\n	<li>CSS and Sass</li>\r\n	<li>Javascript and CoffeeScript</li>\r\n</ul>\r\n<ul class="col-md-6">\r\n	<li>Front-end Frameworks</li>\r\n	<li>Deployment</li>\r\n	<li>Version Control</li>\r\n	<li>Validation</li>\r\n	<li>User Authentication</li>\r\n	<li>UI Design</li>\r\n	<li>UX Design</li>\r\n	<li>Project Management</li>\r\n	<li>and more...</li>\r\n</ul>\r\n</div>\r\n<h3>You can’t build an app without the right tools</h3>\r\nSo you will get hands-on experience with all of the standard tools like the command-line (Terminal), a text editor (like <em>Sublime</em> Text), <em>Git</em>, <em>Github</em>, <em>Heroku</em>, <em>Twitter Bootstrap</em>, <em>Devise</em>, and more. You will learn the ins-and-outs of all the tools you <em>gotta have</em> in your Rails toolbelt.\r\n<h4>With <em>Rails Curve</em> you will learn <strong>exactly</strong> how to do things like ...</h4>\r\n<ul>\r\n	<li>use the command-line to create a new blank-slate app</li>\r\n	<li>use a single command to create a rails server on your computer</li>\r\n	<li>use <em>Git</em> to manage your source code and push it to an online repo at <em>Github</em></li>\r\n	<li>use the command-line to generate the pages and elements of your app on the fly</li>\r\n	<li>use the command-line to manage your database</li>\r\n	<li>use the command-line to push your app to a live server on <em>Heroku</em></li>\r\n	<li>use <em>Twitter Bootstrap</em> to rapidly style your app - with <strong>no</strong> design experience needed.</li>\r\n	<li>use the <em>Devise</em> gem to create user sign-up and sign-in in a matter of minutes.</li>\r\n	<li>and a lot more</li>\r\n</ul>\r\n<h3>But no amount of skills or tools will wipe out the possibility of <strong>error messages</strong>.</h3>\r\nSo with <em>Rails Curve</em> will teach you how to <strong>eliminate</strong> "getting stuck" forever. You’ll get <strong>real-world experience</strong> troubleshooting error messages for yourself <em>quickly</em> so you never have to slam on the breaks again. You will master the art of ...\r\n<ul>\r\n	<li>Reading error messages to get clues about what part of your app needs fixing</li>\r\n	<li>Googling and searching online dev communities to get past any error <em>in minutes</em></li>\r\n	<li>checking <em>Rails</em> and <em>Heroku</em> error logs using your trusty command line</li>\r\n</ul>\r\n<h3>By the time you finish <em>Rails Curve</em> you will have...</h3>\r\n<ul>\r\n	<li>seen how to make a solid plan you can follow</li>\r\n	<li>created all the key features needed for the app</li>\r\n	<li>sketched &amp; styled a beautiful UI on the front-end of the app</li>\r\n	<li>created a solid database back-end for the app</li>\r\n	<li>implemented a user authentication system for users to sign in and sign out</li>\r\n	<li>deployed your app to a live server</li>\r\n	<li>grown a slew of foundational web development skills in the process</li>\r\n</ul>\r\n<h3>You can <em>finally</em> get the <strong>traction</strong> you need</h3>\r\nWhether you are short on time, cash or have no formal education in programming, you will learn how to move the needle no matter what the circumstances. You will learn to make a production plan for yourself that keeps you moving forward. You will experience what it’s like to go from start to finish with a Rails app.\r\n\r\nWhen you complete <em>Rails Curve</em> you’ll feel confident that you can build apps from start to finish on your own. You’ll be totally certain that you can get past any error or issue. Your excitement won’t diminish because you’ll have a solid plan moves you to progress. You will be relieved that you don’t have to spend thousands of dollars and months of time to learn Rails. And you can finally feel in control because you will understand what each line of code does.\r\n<h3>So, fast forward 30 days and you have finished with <em>Rails Curve</em>. <strong>Now what?</strong></h3>\r\nBack to the obscure world of not knowing what’s next? <strong><em>No way</em>.</strong> When you complete the lessons you will definitely want to transition into building your own app idea. So <em>Rails Curve</em> includes outro lessons that will walk you through how to <strong>create your own plan</strong> for <em>your</em> app. This will leave you with a solid action plan that you can follow from start to finish. If you have unique issues or you need a push in the right direction, I also offer <a href="mailto:me@tyrichards.com">Rails coaching</a>. My goal is to see everyone who goes through <em>Rails Curve</em> build and launch their own app and build their career with great success and without stalling out.\r\n<h2>Join other makers who learn by doing</h2>\r\nWith <em>Rails Curve</em> you will build a <em>real</em> Rails app from start to finish and get all the skills you need to move forward and build your own app.\r\n\r\nLet <em>Rails Curve</em> take away the agony of learning Ruby on Rails.', 'Rails Curve', '', 'inherit', 'open', 'open', '', '105-revision-v1', '', '', '2014-08-24 03:57:21', '2014-08-24 08:57:21', '', 105, 'http://dev.dorails.com/railsvitamins/105-revision-v1/', 0, 'revision', '', 0),
(146, 1, '2014-08-24 03:58:42', '2014-08-24 08:58:42', 'Are you trying to launch your app idea? Or are you looking to get your career off the ground? Maybe you’ve tried to learn Rails on your own, but how do you know where to start? Is the learning-curve impossibly steep? Everyone says that learning Rails is <em>sooo</em> easy, but you’ve been banging your head against the desk for months trying to figure it out.\r\n\r\nAre you drowning in a sea of error messages? As you know by now, they can wash your dream app down the drain and bring months of hard work to a screeching halt.\r\n<h3>Do you learn by <strong>doing</strong>?</h3>\r\nAre you tired of studying <em>abstract</em> programming concepts and syntax without actually applying them to a <strong>real</strong> app?\r\n\r\nHave you burned piles of money and time on books and courses to be left with absolutely <em>nothing</em>? A lot of Rails books &amp; courses take <em>forever</em> to get through and then leave you high and dry with no skills or finished product.\r\n<h4>Is your brain<strong> flat-lining</strong> because you are forced to digest too many confusing programming concepts at once?</h4>\r\nEven the books that say they are for beginners are mind-numbing. And with endless copy &amp; pasting, they end up reducing you to a transcriptionist monkey. You are left in a foggy blur and you don’t retain the material. Plus many of the resources are horribly out-of-date and almost never go picture-perfect like they are written.\r\n<h4>It shouldn’t be <strong>this</strong> difficult.</h4>\r\nLet’s face it, you need <strong>progress</strong> to stay motivated and learn Rails. Progress is the fuel that keeps you going. So a lack of it can really beat you down. I know it has for me. Do you wish there was a <em>better way</em> to learn Rails, but fear that there isn’t?\r\n\r\nYou are <strong>certain</strong> that you want to build your app idea. You just aren’t sure that you can do it. Maybe it’s a lost cause. Perhaps you should save yourself the trouble and leave it alone.\r\n<div class="well">\r\n<h3>Well, imagine you <strong>could</strong> make and launch your own Ruby on Rails app in a <strong>matter of days</strong> with little knowledge of coding.</h3>\r\n</div>\r\nI know it sounds crazy, but seriously. What would it be like if you could fast-forward through Rails’ steep learning curve? If nothing stood in the way of you learning Rails and getting your app shipped? If nothing kept you from starting your own business or landing your dream job?\r\n<h4>You would know <strong>exactly</strong> where to start learning and what was next.</h4>\r\nAnd getting stuck with error messages would be a thing of the past. You could soar through building your Rails app and cut through error messages like they were butter.\r\n\r\nYou wouldn’t have to throw away thousands on a Computer Science degree or Code School. And you wouldn’t need to find yourself a technical co-founder or hire that expensive developer. And huzzah, you could push your app live for the world to enjoy, without a hitch.\r\n<h4>You could finally make <strong>REAL</strong> traction and get ’er done.</h4>\r\nIf you had a Rails fast track, you could save months (or in my case - years) of wasted time. Not to mention you could avoid a ton of unnecessary pain and heartache.\r\n<h3>Then the dream of making AND shipping your app could <strong>finally</strong> come true.</h3>\r\nIf Rails was a piece o’ cake to pick up you could just learn by doing. Really <em>doing</em>. You’d <em>build</em> a Rails app and easily absorb the concepts and details one by one as you went along. You’d know <strong>exactly</strong> what to learn and you would learn it all in<strong> exactly</strong> the right order. You could eat the elephant one concept at a time, even in the midst of a wall of tasks, languages and syntax. And you’d never wonder if you had up-to-date training.\r\n\r\nEven without being a "Computer Scientist", you’d feel <strong>confident</strong> as you made a big-picture plan for your new app, wrote code at each step, and understood exactly what each line of code did and why it was there.\r\n<h4>Hell, at this rate you would actually <strong>enjoy </strong>coding.</h4>\r\nBy quickly stacking up tiny victories with Rails you could move yourself closer and closer to the big win of building <strong>and</strong> shipping your app for the world to see. The bottom line is that if Rails was easy-breezy to learn you could make an app <em>AND</em> get solid skills that you can build on – <strong>all at once</strong>.\r\n\r\nThat being said, it is true that Rails does have a crazy difficult learning curve and a Rails app can take months and months to build. But there’s good news. You don’t have to follow that path.\r\n<h3>With <em>Rails Curve</em> you can bypass the learning curve altogether and build a live Rails app in <strong>30 days.</strong></h3>\r\nYou will learn how to build a web app from start to finish, and grow all the skills you need to make your own apps moving forward. In <em>four weeks</em>, you will become experienced with all of the tools, concepts and skills that you need to plan, design, develop and ship a web app.\r\n<h4>With <em>Rails Curve</em> you will learn Rails by <strong>osmosis</strong></h4>\r\nYou will learn <strong>your</strong> way – by <strong>doing</strong>. After all, you decided to learn Rails so you could <em>build</em> an app – so why not learn by <strong>actually building</strong><em> one</em>?\r\n<h4 style="text-align: left;">By following the method of building <strong>AND</strong> learning at the same time you will...</h4>\r\n<ul>\r\n	<li>Understand the big picture <strong>faster</strong></li>\r\n	<li>Pick up complex skills and concepts <strong>faster</strong></li>\r\n	<li>Avoid getting paralyzed by the tiny details</li>\r\n	<li>Avoid the pain of wasting months studying in-depth concepts</li>\r\n	<li>Punch perfectionism <em>in the face</em></li>\r\n</ul>\r\nInstead of spinning your wheels on learning <em>abstract</em> concepts, <em>Rails Curve</em> will give you:\r\n<h4>a clear <strong>day-by-day plan</strong> for how to build a robust Rails app from <strong>start to finish</strong>.</h4>\r\nEach lesson will include bite-sized video screencasts that will walk you through <strong>exactly</strong> what to do, in plain english. <em>Rails Curve</em> gives you a solid path of <em>exactly</em> what to learn in <em>exactly</em> the right order. You will quickly move step by step through the process and pick up skills in each lesson until you have a completed (live) web app and the skills you need to dive into even more advanced material.\r\n<h4>As you move through each lesson, you will get a solid foundation of the key concepts and get <strong>first-hand experience</strong> on how they all work <strong>together</strong>.</h4>\r\nAnd no dull copy/pasting is necessary, you will simply write code yourself and learn the what, why and how as you go. Plus, everything is based on Rails 4 so you’ll have the latest and greatest training for Rails.\r\n<h4 style="text-align: left;"><em>Rails Curve</em> will <strong>jump-start</strong> your understanding of key elements like...</h4>\r\n<div class="row">\r\n<ul class="col-md-6">\r\n	<li>Ruby</li>\r\n	<li>Gems</li>\r\n	<li>Ruby on Rails Framework</li>\r\n	<li>Command Line (Terminal)</li>\r\n	<li>MVC pattern (Model View Controller)</li>\r\n	<li>Object-Oriented Programming</li>\r\n	<li>Active Record</li>\r\n	<li>Databases</li>\r\n	<li>HTML</li>\r\n	<li>CSS and Sass</li>\r\n	<li>Javascript and CoffeeScript</li>\r\n</ul>\r\n<ul class="col-md-6">\r\n	<li>Front-end Frameworks</li>\r\n	<li>Deployment</li>\r\n	<li>Version Control</li>\r\n	<li>Validation</li>\r\n	<li>User Authentication</li>\r\n	<li>UI Design</li>\r\n	<li>UX Design</li>\r\n	<li>Project Management</li>\r\n	<li>and more...</li>\r\n</ul>\r\n</div>\r\n<h3>You can’t build an app without the right tools</h3>\r\nSo you will get hands-on experience with all of the standard tools like the command-line (Terminal), a text editor (like <em>Sublime</em> Text), <em>Git</em>, <em>Github</em>, <em>Heroku</em>, <em>Twitter Bootstrap</em>, <em>Devise</em>, and more. You will learn the ins-and-outs of all the tools you <em>gotta have</em> in your Rails toolbelt.\r\n<h4>With <em>Rails Curve</em> you will learn <strong>exactly</strong> how to do things like ...</h4>\r\n<ul>\r\n	<li>use the command-line to create a new blank-slate app</li>\r\n	<li>use a single command to create a rails server on your computer</li>\r\n	<li>use <em>Git</em> to manage your source code and push it to an online repo at <em>Github</em></li>\r\n	<li>use the command-line to generate the pages and elements of your app on the fly</li>\r\n	<li>use the command-line to manage your database</li>\r\n	<li>use the command-line to push your app to a live server on <em>Heroku</em></li>\r\n	<li>use <em>Twitter Bootstrap</em> to rapidly style your app - with <strong>no</strong> design experience needed.</li>\r\n	<li>use the <em>Devise</em> gem to create user sign-up and sign-in in a matter of minutes.</li>\r\n	<li>and a lot more</li>\r\n</ul>\r\n<h3>But no amount of skills or tools will wipe out the possibility of <strong>error messages</strong>.</h3>\r\nSo with <em>Rails Curve</em> will teach you how to <strong>eliminate</strong> "getting stuck" forever. You’ll get <strong>real-world experience</strong> troubleshooting error messages for yourself <em>quickly</em> so you never have to slam on the breaks again. You will master the art of ...\r\n<ul>\r\n	<li>Reading error messages to get clues about what part of your app needs fixing</li>\r\n	<li>Googling and searching online dev communities to get past any error <em>in minutes</em></li>\r\n	<li>checking <em>Rails</em> and <em>Heroku</em> error logs using your trusty command line</li>\r\n</ul>\r\n<h3>By the time you finish <em>Rails Curve</em> you will have...</h3>\r\n<ul>\r\n	<li>seen how to make a solid plan you can follow</li>\r\n	<li>created all the key features needed for the app</li>\r\n	<li>sketched &amp; styled a beautiful UI on the front-end of the app</li>\r\n	<li>created a solid database back-end for the app</li>\r\n	<li>implemented a user authentication system for users to sign in and sign out</li>\r\n	<li>deployed your app to a live server</li>\r\n	<li>grown a slew of foundational web development skills in the process</li>\r\n</ul>\r\n<h3>You can <em>finally</em> get the <strong>traction</strong> you need</h3>\r\nWhether you are short on time, cash or have no formal education in programming, you will learn how to move the needle no matter what the circumstances. You will learn to make a production plan for yourself that keeps you moving forward. You will experience what it’s like to go from start to finish with a Rails app.\r\n\r\nWhen you complete <em>Rails Curve</em> you’ll feel confident that you can build apps from start to finish on your own. You’ll be totally certain that you can get past any error or issue. Your excitement won’t diminish because you’ll have a solid plan moves you to progress. You will be relieved that you don’t have to spend thousands of dollars and months of time to learn Rails. And you can finally feel in control because you will understand what each line of code does.\r\n<h3>So, fast forward 30 days and you have finished with <em>Rails Curve</em>. <strong>Now what?</strong></h3>\r\nBack to the obscure world of not knowing what’s next? <strong><em>No way</em>.</strong> When you complete the lessons you will definitely want to transition into building your own app idea. So <em>Rails Curve</em> includes outro lessons that will walk you through how to <strong>create your own plan</strong> for <em>your</em> app. This will leave you with a solid action plan that you can follow from start to finish. If you have unique issues or you need a push in the right direction, I also offer <a href="mailto:me@tyrichards.com">Rails coaching</a>. My goal is to see everyone who goes through <em>Rails Curve</em> build and launch their own app and build their career with great success and without stalling out.\r\n<h2>Join other makers who learn by doing</h2>\r\nWith <em>Rails Curve</em> you will build a <em>real</em> Rails app from start to finish and get all the skills you need to move forward and build your own app.\r\n\r\nLet <em>Rails Curve</em> take away the agony of learning Ruby on Rails.', 'Rails Curve', '', 'inherit', 'open', 'open', '', '105-revision-v1', '', '', '2014-08-24 03:58:42', '2014-08-24 08:58:42', '', 105, 'http://dev.dorails.com/railsvitamins/105-revision-v1/', 0, 'revision', '', 0),
(147, 1, '2014-08-24 04:40:26', '2014-08-24 09:40:26', '<h2 style="text-align: center;">Complete your pre-order billing info below by clicking the button</h2>\r\n<p style="text-align: center;">Pre-order your  <i>Rails Curve</i> yearly access for only <del>$99</del> <strong>$49</strong></p>\r\n\r\n<div class="text-center"><form action="" method="POST"><script class="stripe-button" src="http://checkout.stripe.com/checkout.js" data-key="pk_test_4aTlVzE71bqN2QqMZiTKXkM8" data-amount="4900" data-name="Rails Curve" data-description="30-Day Course | Pre-sale Price ($49)" data-image="/wp-content/themes/Paradox/assets/images/stripe-logo.jpg">// <![CDATA[\r\n\r\n\r\n// ]]></script></form></div>', 'Billing Info', '', 'draft', 'closed', 'closed', '', 'pre-order', '', '', '2014-08-26 12:50:01', '2014-08-26 17:50:01', '', 105, 'http://dev.dorails.com/?page_id=147', 0, 'page', '', 0),
(148, 1, '2014-08-24 04:40:26', '2014-08-24 09:40:26', '', 'pre-order', '', 'inherit', 'open', 'open', '', '147-revision-v1', '', '', '2014-08-24 04:40:26', '2014-08-24 09:40:26', '', 147, 'http://dev.dorails.com/railsvitamins/147-revision-v1/', 0, 'revision', '', 0),
(150, 1, '2014-08-24 04:49:30', '2014-08-24 09:49:30', '<h2>Pre-order <i>Rails Curve</i> yearly access for only <del>$99</del> $49</h2>\r\nSave $99 by joining early. You will get a life-time rate of $49 per year and your cost will never go up for the yearly membership. This only lasts until the official launch of the product in a few weeks. Plus if you pre-order <em>Rails Curve</em>, I can make the initial course that much better.\r\n\r\n<form action="" method="POST"><script class="stripe-button" src="http://checkout.stripe.com/checkout.js" data-key="pk_test_4aTlVzE71bqN2QqMZiTKXkM8" data-amount="4900" data-name="Rails Curve" data-description="30-Day Course | Pre-sale Price ($49)" data-image="&lt;?php echo get_template_directory_uri(); ?&gt;/assets/images/stripe-logo.jpg">// <![CDATA[\r\n\r\n// ]]></script></form>', 'pre-order', '', 'inherit', 'open', 'open', '', '147-revision-v1', '', '', '2014-08-24 04:49:30', '2014-08-24 09:49:30', '', 147, 'http://dev.dorails.com/railsvitamins/147-revision-v1/', 0, 'revision', '', 0),
(151, 1, '2014-08-24 04:50:02', '2014-08-24 09:50:02', '<h2>Pre-order <i>Rails Curve</i> yearly access for only <del>$99</del> $49</h2>\r\nSave $99 by joining early. You will get a life-time rate of $49 per year and your cost will never go up for the yearly membership. This only lasts until the official launch of the product in a few weeks. Plus if you pre-order <em>Rails Curve</em>, I can make the initial course that much better.\r\n\r\n<form action="" method="POST"><script class="stripe-button" src="http://checkout.stripe.com/checkout.js" data-key="pk_test_4aTlVzE71bqN2QqMZiTKXkM8" data-amount="4900" data-name="Rails Curve" data-description="30-Day Course | Pre-sale Price ($49)" data-image="&lt;?php echo get_template_directory_uri(); ?&gt;/assets/images/stripe-logo.jpg">// <![CDATA[\r\n\r\n\r\n// ]]></script></form>', 'Pre-order Rails Curve', '', 'inherit', 'open', 'open', '', '147-revision-v1', '', '', '2014-08-24 04:50:02', '2014-08-24 09:50:02', '', 147, 'http://dev.dorails.com/railsvitamins/147-revision-v1/', 0, 'revision', '', 0),
(152, 1, '2014-08-24 04:52:26', '2014-08-24 09:52:26', '<h2>Pre-order <i>Rails Curve</i> yearly access for only <del>$99</del> <strong>$49</strong></h2>\r\nSave $49 by joining early. You will get a life-time rate of $49 per year and your cost will never go up for the yearly membership. This only lasts until the official launch of the product in a few weeks. Plus if you pre-order <em>Rails Curve</em>, I can make the initial course that much better.\r\n\r\n<div class="text-center">\r\n<p>Click below to pre-order:</p>\r\n<form action="" method="POST"><script class="stripe-button" src="http://checkout.stripe.com/checkout.js" data-key="pk_test_4aTlVzE71bqN2QqMZiTKXkM8" data-amount="4900" data-name="Rails Curve" data-description="30-Day Course | Pre-sale Price ($49)" data-image="&lt;?php echo get_template_directory_uri(); ?&gt;/assets/images/stripe-logo.jpg">// <![CDATA[\r\n\r\n\r\n// ]]></script></form>\r\n</div>', 'Pre-order Rails Curve', '', 'inherit', 'open', 'open', '', '147-revision-v1', '', '', '2014-08-24 04:52:26', '2014-08-24 09:52:26', '', 147, 'http://dev.dorails.com/railsvitamins/147-revision-v1/', 0, 'revision', '', 0),
(153, 1, '2014-08-24 05:10:00', '2014-08-24 10:10:00', '<h2>Complete your pre-order below</h2>\r\n<h2>Pre-order <i>Rails Curve</i> yearly access for only <del>$99</del> <strong>$49</strong></h2>\r\nSave $49 by joining early. You will get a life-time rate of $49 per year and your cost will never go up for the yearly membership. This only lasts until the official launch of the product in a few weeks. Plus if you pre-order <em>Rails Curve</em>, I can make the initial course that much better.\r\n<div class="text-center">\r\n\r\nClick below to pre-order:\r\n\r\n<form action="" method="POST"><script class="stripe-button" src="http://checkout.stripe.com/checkout.js" data-key="pk_test_4aTlVzE71bqN2QqMZiTKXkM8" data-amount="4900" data-name="Rails Curve" data-description="30-Day Course | Pre-sale Price ($49)" data-image="&lt;?php echo get_template_directory_uri(); ?&gt;/assets/images/stripe-logo.jpg">// <![CDATA[\r\n\r\n\r\n// ]]></script></form></div>', 'Pre-order Rails Curve', '', 'inherit', 'open', 'open', '', '147-revision-v1', '', '', '2014-08-24 05:10:00', '2014-08-24 10:10:00', '', 147, 'http://dev.dorails.com/railsvitamins/147-revision-v1/', 0, 'revision', '', 0) ;
INSERT INTO `wp_posts` ( `ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(154, 1, '2014-08-24 05:12:40', '2014-08-24 10:12:40', 'Are you trying to launch your app idea? Or are you looking to get your career off the ground? Maybe you’ve tried to learn Rails on your own, but how do you know where to start? Is the learning-curve impossibly steep? Everyone says that learning Rails is <em>sooo</em> easy, but you’ve been banging your head against the desk for months trying to figure it out.\r\n\r\nAre you drowning in a sea of error messages? As you know by now, they can wash your dream app down the drain and bring months of hard work to a screeching halt.\r\n<h3>Do you learn by <strong>doing</strong>?</h3>\r\nAre you tired of studying <em>abstract</em> programming concepts and syntax without actually applying them to a <strong>real</strong> app?\r\n\r\nHave you burned piles of money and time on books and courses to be left with absolutely <em>nothing</em>? A lot of Rails books &amp; courses take <em>forever</em> to get through and then leave you high and dry with no skills or finished product.\r\n<h4>Is your brain<strong> flat-lining</strong> because you are forced to digest too many confusing programming concepts at once?</h4>\r\nEven the books that say they are for beginners are mind-numbing. And with endless copy &amp; pasting, they end up reducing you to a transcriptionist monkey. You are left in a foggy blur and you don’t retain the material. Plus many of the resources are horribly out-of-date and almost never go picture-perfect like they are written.\r\n<h4>It shouldn’t be <strong>this</strong> difficult.</h4>\r\nLet’s face it, you need <strong>progress</strong> to stay motivated and learn Rails. Progress is the fuel that keeps you going. So a lack of it can really beat you down. I know it has for me. Do you wish there was a <em>better way</em> to learn Rails, but fear that there isn’t?\r\n\r\nYou are <strong>certain</strong> that you want to build your app idea. You just aren’t sure that you can do it. Maybe it’s a lost cause. Perhaps you should save yourself the trouble and leave it alone.\r\n<div class="well">\r\n<h3>Well, imagine you <strong>could</strong> make and launch your own Ruby on Rails app in a <strong>matter of days</strong> with little knowledge of coding.</h3>\r\n</div>\r\nI know it sounds crazy, but seriously. What would it be like if you could fast-forward through Rails’ steep learning curve? If nothing stood in the way of you learning Rails and getting your app shipped? If nothing kept you from starting your own business or landing your dream job?\r\n<h4>You would know <strong>exactly</strong> where to start learning and what was next.</h4>\r\nAnd getting stuck with error messages would be a thing of the past. You could soar through building your Rails app and cut through error messages like they were butter.\r\n\r\nYou wouldn’t have to throw away thousands on a Computer Science degree or Code School. And you wouldn’t need to find yourself a technical co-founder or hire that expensive developer. And huzzah, you could push your app live for the world to enjoy, without a hitch.\r\n<h4>You could finally make <strong>REAL</strong> traction and get ’er done.</h4>\r\nIf you had a Rails fast track, you could save months (or in my case - years) of wasted time. Not to mention you could avoid a ton of unnecessary pain and heartache.\r\n<h3>Then the dream of making AND shipping your app could <strong>finally</strong> come true.</h3>\r\nIf Rails was a piece o’ cake to pick up you could just learn by doing. Really <em>doing</em>. You’d <em>build</em> a Rails app and easily absorb the concepts and details one by one as you went along. You’d know <strong>exactly</strong> what to learn and you would learn it all in<strong> exactly</strong> the right order. You could eat the elephant one concept at a time, even in the midst of a wall of tasks, languages and syntax. And you’d never wonder if you had up-to-date training.\r\n\r\nEven without being a "Computer Scientist", you’d feel <strong>confident</strong> as you made a big-picture plan for your new app, wrote code at each step, and understood exactly what each line of code did and why it was there.\r\n<h4>Hell, at this rate you would actually <strong>enjoy </strong>coding.</h4>\r\nBy quickly stacking up tiny victories with Rails you could move yourself closer and closer to the big win of building <strong>and</strong> shipping your app for the world to see. The bottom line is that if Rails was easy-breezy to learn you could make an app <em>AND</em> get solid skills that you can build on – <strong>all at once</strong>.\r\n\r\nThat being said, it is true that Rails does have a crazy difficult learning curve and a Rails app can take months and months to build. But there’s good news. You don’t have to follow that path.\r\n<h3>With <em>Rails Curve</em> you can bypass the learning curve altogether and build a live Rails app in <strong>30 days.</strong></h3>\r\nYou will learn how to build a web app from start to finish, and grow all the skills you need to make your own apps moving forward. In <em>four weeks</em>, you will become experienced with all of the tools, concepts and skills that you need to plan, design, develop and ship a web app.\r\n<h4>With <em>Rails Curve</em> you will learn Rails by <strong>osmosis</strong></h4>\r\nYou will learn <strong>your</strong> way – by <strong>doing</strong>. After all, you decided to learn Rails so you could <em>build</em> an app – so why not learn by <strong>actually building</strong><em> one</em>?\r\n<h4 style="text-align: left;">By following the method of building <strong>AND</strong> learning at the same time you will...</h4>\r\n<ul>\r\n	<li>Understand the big picture <strong>faster</strong></li>\r\n	<li>Pick up complex skills and concepts <strong>faster</strong></li>\r\n	<li>Avoid getting paralyzed by the tiny details</li>\r\n	<li>Avoid the pain of wasting months studying in-depth concepts</li>\r\n	<li>Punch perfectionism <em>in the face</em></li>\r\n</ul>\r\nInstead of spinning your wheels on learning <em>abstract</em> concepts, <em>Rails Curve</em> will give you:\r\n<h4>a clear <strong>day-by-day plan</strong> for how to build a robust Rails app from <strong>start to finish</strong>.</h4>\r\nEach lesson will include bite-sized video screencasts that will walk you through <strong>exactly</strong> what to do, in plain english. <em>Rails Curve</em> gives you a solid path of <em>exactly</em> what to learn in <em>exactly</em> the right order. You will quickly move step by step through the process and pick up skills in each lesson until you have a completed (live) web app and the skills you need to dive into even more advanced material.\r\n<h4>As you move through each lesson, you will get a solid foundation of the key concepts and get <strong>first-hand experience</strong> on how they all work <strong>together</strong>.</h4>\r\nAnd no dull copy/pasting is necessary, you will simply write code yourself and learn the what, why and how as you go. Plus, everything is based on Rails 4 so you’ll have the latest and greatest training for Rails.\r\n<h4 style="text-align: left;"><em>Rails Curve</em> will <strong>jump-start</strong> your understanding of key elements like...</h4>\r\n<div class="row">\r\n<ul class="col-md-6">\r\n	<li>Ruby</li>\r\n	<li>Gems</li>\r\n	<li>Ruby on Rails Framework</li>\r\n	<li>Command Line (Terminal)</li>\r\n	<li>MVC pattern (Model View Controller)</li>\r\n	<li>Object-Oriented Programming</li>\r\n	<li>Active Record</li>\r\n	<li>Databases</li>\r\n	<li>HTML</li>\r\n	<li>CSS and Sass</li>\r\n	<li>Javascript and CoffeeScript</li>\r\n</ul>\r\n<ul class="col-md-6">\r\n	<li>Front-end Frameworks</li>\r\n	<li>Deployment</li>\r\n	<li>Version Control</li>\r\n	<li>Validation</li>\r\n	<li>User Authentication</li>\r\n	<li>UI Design</li>\r\n	<li>UX Design</li>\r\n	<li>Project Management</li>\r\n	<li>and more...</li>\r\n</ul>\r\n</div>\r\n<h3>You can’t build an app without the right tools</h3>\r\nSo you will get hands-on experience with all of the standard tools like the command-line (Terminal), a text editor (like <em>Sublime</em> Text), <em>Git</em>, <em>Github</em>, <em>Heroku</em>, <em>Twitter Bootstrap</em>, <em>Devise</em>, and more. You will learn the ins-and-outs of all the tools you <em>gotta have</em> in your Rails toolbelt.\r\n<h4>With <em>Rails Curve</em> you will learn <strong>exactly</strong> how to do things like ...</h4>\r\n<ul>\r\n	<li>use the command-line to create a new blank-slate app</li>\r\n	<li>use a single command to create a rails server on your computer</li>\r\n	<li>use <em>Git</em> to manage your source code and push it to an online repo at <em>Github</em></li>\r\n	<li>use the command-line to generate the pages and elements of your app on the fly</li>\r\n	<li>use the command-line to manage your database</li>\r\n	<li>use the command-line to push your app to a live server on <em>Heroku</em></li>\r\n	<li>use <em>Twitter Bootstrap</em> to rapidly style your app - with <strong>no</strong> design experience needed.</li>\r\n	<li>use the <em>Devise</em> gem to create user sign-up and sign-in in a matter of minutes.</li>\r\n	<li>and a lot more</li>\r\n</ul>\r\n<h3>But no amount of skills or tools will wipe out the possibility of <strong>error messages</strong>.</h3>\r\nSo with <em>Rails Curve</em> will teach you how to <strong>eliminate</strong> "getting stuck" forever. You’ll get <strong>real-world experience</strong> troubleshooting error messages for yourself <em>quickly</em> so you never have to slam on the breaks again. You will master the art of ...\r\n<ul>\r\n	<li>Reading error messages to get clues about what part of your app needs fixing</li>\r\n	<li>Googling and searching online dev communities to get past any error <em>in minutes</em></li>\r\n	<li>checking <em>Rails</em> and <em>Heroku</em> error logs using your trusty command line</li>\r\n</ul>\r\n<h3>By the time you finish <em>Rails Curve</em> you will have...</h3>\r\n<ul>\r\n	<li>seen how to make a solid plan you can follow</li>\r\n	<li>created all the key features needed for the app</li>\r\n	<li>sketched &amp; styled a beautiful UI on the front-end of the app</li>\r\n	<li>created a solid database back-end for the app</li>\r\n	<li>implemented a user authentication system for users to sign in and sign out</li>\r\n	<li>deployed your app to a live server</li>\r\n	<li>grown a slew of foundational web development skills in the process</li>\r\n</ul>\r\n<h3>You can <em>finally</em> get the <strong>traction</strong> you need</h3>\r\nWhether you are short on time, cash or have no formal education in programming, you will learn how to move the needle no matter what the circumstances. You will learn to make a production plan for yourself that keeps you moving forward. You will experience what it’s like to go from start to finish with a Rails app.\r\n\r\nWhen you complete <em>Rails Curve</em> you’ll feel confident that you can build apps from start to finish on your own. You’ll be totally certain that you can get past any error or issue. Your excitement won’t diminish because you’ll have a solid plan moves you to progress. You will be relieved that you don’t have to spend thousands of dollars and months of time to learn Rails. And you can finally feel in control because you will understand what each line of code does.\r\n<h3>So, fast forward 30 days and you have finished with <em>Rails Curve</em>. <strong>Now what?</strong></h3>\r\nBack to the obscure world of not knowing what’s next? <strong><em>No way</em>.</strong> When you complete the lessons you will definitely want to transition into building your own app idea. So <em>Rails Curve</em> includes outro lessons that will walk you through how to <strong>create your own plan</strong> for <em>your</em> app. This will leave you with a solid action plan that you can follow from start to finish. If you have unique issues or you need a push in the right direction, I also offer <a href="mailto:me@tyrichards.com">Rails coaching</a>. My goal is to see everyone who goes through <em>Rails Curve</em> build and launch their own app and build their career with great success and without stalling out.\r\n<h2>Join other makers who learn by doing</h2>\r\nWith <em>Rails Curve</em> you will build a <em>real</em> Rails app from start to finish and get all the skills you need to move forward and build your own app.\r\n\r\nLet <em>Rails Curve</em> take away the agony of learning Ruby on Rails.\r\n<h2>Pre-order <i>Rails Curve</i> yearly access for only <del>$99</del> <strong>$49</strong></h2>\r\nSave $49 by joining early. You will get a life-time rate of $49 per year and your cost will never go up. This only lasts until the official launch of the product in a matter of weeks. Plus if you pre-order <em>Rails Curve</em>, I can make the initial course that much better.\r\n<div class="text-center">\r\n\r\nSign up below to pre-order <em>Rails Curve</em>\r\n\r\n[gravityform id="4" name="Pre-order Rails Curve yearly access for only <del>$99</del> $49" ajax="true"]\r\n\r\n</div>', 'Rails Curve', '', 'inherit', 'open', 'open', '', '105-revision-v1', '', '', '2014-08-24 05:12:40', '2014-08-24 10:12:40', '', 105, 'http://dev.dorails.com/railsvitamins/105-revision-v1/', 0, 'revision', '', 0),
(155, 1, '2014-08-24 05:15:57', '2014-08-24 10:15:57', 'Are you trying to launch your app idea? Or are you looking to get your career off the ground? Maybe you’ve tried to learn Rails on your own, but how do you know where to start? Is the learning-curve impossibly steep? Everyone says that learning Rails is <em>sooo</em> easy, but you’ve been banging your head against the desk for months trying to figure it out.\r\n\r\nAre you drowning in a sea of error messages? As you know by now, they can wash your dream app down the drain and bring months of hard work to a screeching halt.\r\n<h3>Do you learn by <strong>doing</strong>?</h3>\r\nAre you tired of studying <em>abstract</em> programming concepts and syntax without actually applying them to a <strong>real</strong> app?\r\n\r\nHave you burned piles of money and time on books and courses to be left with absolutely <em>nothing</em>? A lot of Rails books &amp; courses take <em>forever</em> to get through and then leave you high and dry with no skills or finished product.\r\n<h4>Is your brain<strong> flat-lining</strong> because you are forced to digest too many confusing programming concepts at once?</h4>\r\nEven the books that say they are for beginners are mind-numbing. And with endless copy &amp; pasting, they end up reducing you to a transcriptionist monkey. You are left in a foggy blur and you don’t retain the material. Plus many of the resources are horribly out-of-date and almost never go picture-perfect like they are written.\r\n<h4>It shouldn’t be <strong>this</strong> difficult.</h4>\r\nLet’s face it, you need <strong>progress</strong> to stay motivated and learn Rails. Progress is the fuel that keeps you going. So a lack of it can really beat you down. I know it has for me. Do you wish there was a <em>better way</em> to learn Rails, but fear that there isn’t?\r\n\r\nYou are <strong>certain</strong> that you want to build your app idea. You just aren’t sure that you can do it. Maybe it’s a lost cause. Perhaps you should save yourself the trouble and leave it alone.\r\n<div class="well">\r\n<h3>Well, imagine you <strong>could</strong> make and launch your own Ruby on Rails app in a <strong>matter of days</strong> with little knowledge of coding.</h3>\r\n</div>\r\nI know it sounds crazy, but seriously. What would it be like if you could fast-forward through Rails’ steep learning curve? If nothing stood in the way of you learning Rails and getting your app shipped? If nothing kept you from starting your own business or landing your dream job?\r\n<h4>You would know <strong>exactly</strong> where to start learning and what was next.</h4>\r\nAnd getting stuck with error messages would be a thing of the past. You could soar through building your Rails app and cut through error messages like they were butter.\r\n\r\nYou wouldn’t have to throw away thousands on a Computer Science degree or Code School. And you wouldn’t need to find yourself a technical co-founder or hire that expensive developer. And huzzah, you could push your app live for the world to enjoy, without a hitch.\r\n<h4>You could finally make <strong>REAL</strong> traction and get ’er done.</h4>\r\nIf you had a Rails fast track, you could save months (or in my case - years) of wasted time. Not to mention you could avoid a ton of unnecessary pain and heartache.\r\n<h3>Then the dream of making AND shipping your app could <strong>finally</strong> come true.</h3>\r\nIf Rails was a piece o’ cake to pick up you could just learn by doing. Really <em>doing</em>. You’d <em>build</em> a Rails app and easily absorb the concepts and details one by one as you went along. You’d know <strong>exactly</strong> what to learn and you would learn it all in<strong> exactly</strong> the right order. You could eat the elephant one concept at a time, even in the midst of a wall of tasks, languages and syntax. And you’d never wonder if you had up-to-date training.\r\n\r\nEven without being a "Computer Scientist", you’d feel <strong>confident</strong> as you made a big-picture plan for your new app, wrote code at each step, and understood exactly what each line of code did and why it was there.\r\n<h4>Hell, at this rate you would actually <strong>enjoy </strong>coding.</h4>\r\nBy quickly stacking up tiny victories with Rails you could move yourself closer and closer to the big win of building <strong>and</strong> shipping your app for the world to see. The bottom line is that if Rails was easy-breezy to learn you could make an app <em>AND</em> get solid skills that you can build on – <strong>all at once</strong>.\r\n\r\nThat being said, it is true that Rails does have a crazy difficult learning curve and a Rails app can take months and months to build. But there’s good news. You don’t have to follow that path.\r\n<h3>With <em>Rails Curve</em> you can bypass the learning curve altogether and build a live Rails app in <strong>30 days.</strong></h3>\r\nYou will learn how to build a web app from start to finish, and grow all the skills you need to make your own apps moving forward. In <em>four weeks</em>, you will become experienced with all of the tools, concepts and skills that you need to plan, design, develop and ship a web app.\r\n<h4>With <em>Rails Curve</em> you will learn Rails by <strong>osmosis</strong></h4>\r\nYou will learn <strong>your</strong> way – by <strong>doing</strong>. After all, you decided to learn Rails so you could <em>build</em> an app – so why not learn by <strong>actually building</strong><em> one</em>?\r\n<h4 style="text-align: left;">By following the method of building <strong>AND</strong> learning at the same time you will...</h4>\r\n<ul>\r\n	<li>Understand the big picture <strong>faster</strong></li>\r\n	<li>Pick up complex skills and concepts <strong>faster</strong></li>\r\n	<li>Avoid getting paralyzed by the tiny details</li>\r\n	<li>Avoid the pain of wasting months studying in-depth concepts</li>\r\n	<li>Punch perfectionism <em>in the face</em></li>\r\n</ul>\r\nInstead of spinning your wheels on learning <em>abstract</em> concepts, <em>Rails Curve</em> will give you:\r\n<h4>a clear <strong>day-by-day plan</strong> for how to build a robust Rails app from <strong>start to finish</strong>.</h4>\r\nEach lesson will include bite-sized video screencasts that will walk you through <strong>exactly</strong> what to do, in plain english. <em>Rails Curve</em> gives you a solid path of <em>exactly</em> what to learn in <em>exactly</em> the right order. You will quickly move step by step through the process and pick up skills in each lesson until you have a completed (live) web app and the skills you need to dive into even more advanced material.\r\n<h4>As you move through each lesson, you will get a solid foundation of the key concepts and get <strong>first-hand experience</strong> on how they all work <strong>together</strong>.</h4>\r\nAnd no dull copy/pasting is necessary, you will simply write code yourself and learn the what, why and how as you go. Plus, everything is based on Rails 4 so you’ll have the latest and greatest training for Rails.\r\n<h4 style="text-align: left;"><em>Rails Curve</em> will <strong>jump-start</strong> your understanding of key elements like...</h4>\r\n<div class="row">\r\n<ul class="col-md-6">\r\n	<li>Ruby</li>\r\n	<li>Gems</li>\r\n	<li>Ruby on Rails Framework</li>\r\n	<li>Command Line (Terminal)</li>\r\n	<li>MVC pattern (Model View Controller)</li>\r\n	<li>Object-Oriented Programming</li>\r\n	<li>Active Record</li>\r\n	<li>Databases</li>\r\n	<li>HTML</li>\r\n	<li>CSS and Sass</li>\r\n	<li>Javascript and CoffeeScript</li>\r\n</ul>\r\n<ul class="col-md-6">\r\n	<li>Front-end Frameworks</li>\r\n	<li>Deployment</li>\r\n	<li>Version Control</li>\r\n	<li>Validation</li>\r\n	<li>User Authentication</li>\r\n	<li>UI Design</li>\r\n	<li>UX Design</li>\r\n	<li>Project Management</li>\r\n	<li>and more...</li>\r\n</ul>\r\n</div>\r\n<h3>You can’t build an app without the right tools</h3>\r\nSo you will get hands-on experience with all of the standard tools like the command-line (Terminal), a text editor (like <em>Sublime</em> Text), <em>Git</em>, <em>Github</em>, <em>Heroku</em>, <em>Twitter Bootstrap</em>, <em>Devise</em>, and more. You will learn the ins-and-outs of all the tools you <em>gotta have</em> in your Rails toolbelt.\r\n<h4>With <em>Rails Curve</em> you will learn <strong>exactly</strong> how to do things like ...</h4>\r\n<ul>\r\n	<li>use the command-line to create a new blank-slate app</li>\r\n	<li>use a single command to create a rails server on your computer</li>\r\n	<li>use <em>Git</em> to manage your source code and push it to an online repo at <em>Github</em></li>\r\n	<li>use the command-line to generate the pages and elements of your app on the fly</li>\r\n	<li>use the command-line to manage your database</li>\r\n	<li>use the command-line to push your app to a live server on <em>Heroku</em></li>\r\n	<li>use <em>Twitter Bootstrap</em> to rapidly style your app - with <strong>no</strong> design experience needed.</li>\r\n	<li>use the <em>Devise</em> gem to create user sign-up and sign-in in a matter of minutes.</li>\r\n	<li>and a lot more</li>\r\n</ul>\r\n<h3>But no amount of skills or tools will wipe out the possibility of <strong>error messages</strong>.</h3>\r\nSo with <em>Rails Curve</em> will teach you how to <strong>eliminate</strong> "getting stuck" forever. You’ll get <strong>real-world experience</strong> troubleshooting error messages for yourself <em>quickly</em> so you never have to slam on the breaks again. You will master the art of ...\r\n<ul>\r\n	<li>Reading error messages to get clues about what part of your app needs fixing</li>\r\n	<li>Googling and searching online dev communities to get past any error <em>in minutes</em></li>\r\n	<li>checking <em>Rails</em> and <em>Heroku</em> error logs using your trusty command line</li>\r\n</ul>\r\n<h3>By the time you finish <em>Rails Curve</em> you will have...</h3>\r\n<ul>\r\n	<li>seen how to make a solid plan you can follow</li>\r\n	<li>created all the key features needed for the app</li>\r\n	<li>sketched &amp; styled a beautiful UI on the front-end of the app</li>\r\n	<li>created a solid database back-end for the app</li>\r\n	<li>implemented a user authentication system for users to sign in and sign out</li>\r\n	<li>deployed your app to a live server</li>\r\n	<li>grown a slew of foundational web development skills in the process</li>\r\n</ul>\r\n<h3>You can <em>finally</em> get the <strong>traction</strong> you need</h3>\r\nWhether you are short on time, cash or have no formal education in programming, you will learn how to move the needle no matter what the circumstances. You will learn to make a production plan for yourself that keeps you moving forward. You will experience what it’s like to go from start to finish with a Rails app.\r\n\r\nWhen you complete <em>Rails Curve</em> you’ll feel confident that you can build apps from start to finish on your own. You’ll be totally certain that you can get past any error or issue. Your excitement won’t diminish because you’ll have a solid plan moves you to progress. You will be relieved that you don’t have to spend thousands of dollars and months of time to learn Rails. And you can finally feel in control because you will understand what each line of code does.\r\n<h3>So, fast forward 30 days and you have finished with <em>Rails Curve</em>. <strong>Now what?</strong></h3>\r\nBack to the obscure world of not knowing what’s next? <strong><em>No way</em>.</strong> When you complete the lessons you will definitely want to transition into building your own app idea. So <em>Rails Curve</em> includes outro lessons that will walk you through how to <strong>create your own plan</strong> for <em>your</em> app. This will leave you with a solid action plan that you can follow from start to finish. If you have unique issues or you need a push in the right direction, I also offer <a href="mailto:me@tyrichards.com">Rails coaching</a>. My goal is to see everyone who goes through <em>Rails Curve</em> build and launch their own app and build their career with great success and without stalling out.\r\n<h2>Join other makers who learn by doing</h2>\r\nWith <em>Rails Curve</em> you will build a <em>real</em> Rails app from start to finish and get all the skills you need to move forward and build your own app.\r\n\r\nLet <em>Rails Curve</em> take away the agony of learning Ruby on Rails.\r\n\r\n<div class="well">\r\n<h2>Pre-order <i>Rails Curve</i> yearly access for only <del>$99</del> <strong>$49</strong></h2>\r\nSave $49 by joining early. You will get a life-time rate of $49 per year and your cost will never go up. This only lasts until the official launch of the product in a matter of weeks. Plus if you pre-order <em>Rails Curve</em>, I can make the initial course that much better.\r\n\r\nSign up below to pre-order <em>Rails Curve</em>\r\n\r\n[gravityform id="4" name="Pre-order Rails Curve yearly access for only <del>$99</del> $49"]\r\n\r\n</div>', 'Rails Curve', '', 'inherit', 'open', 'open', '', '105-revision-v1', '', '', '2014-08-24 05:15:57', '2014-08-24 10:15:57', '', 105, 'http://dev.dorails.com/railsvitamins/105-revision-v1/', 0, 'revision', '', 0),
(156, 1, '2014-08-24 05:20:05', '2014-08-24 10:20:05', 'Are you trying to launch your app idea? Or are you looking to get your career off the ground? Maybe you’ve tried to learn Rails on your own, but how do you know where to start? Is the learning-curve impossibly steep? Everyone says that learning Rails is <em>sooo</em> easy, but you’ve been banging your head against the desk for months trying to figure it out.\r\n\r\nAre you drowning in a sea of error messages? As you know by now, they can wash your dream app down the drain and bring months of hard work to a screeching halt.\r\n<h3>Do you learn by <strong>doing</strong>?</h3>\r\nAre you tired of studying <em>abstract</em> programming concepts and syntax without actually applying them to a <strong>real</strong> app?\r\n\r\nHave you burned piles of money and time on books and courses to be left with absolutely <em>nothing</em>? A lot of Rails books &amp; courses take <em>forever</em> to get through and then leave you high and dry with no skills or finished product.\r\n<h4>Is your brain<strong> flat-lining</strong> because you are forced to digest too many confusing programming concepts at once?</h4>\r\nEven the books that say they are for beginners are mind-numbing. And with endless copy &amp; pasting, they end up reducing you to a transcriptionist monkey. You are left in a foggy blur and you don’t retain the material. Plus many of the resources are horribly out-of-date and almost never go picture-perfect like they are written.\r\n<h4>It shouldn’t be <strong>this</strong> difficult.</h4>\r\nLet’s face it, you need <strong>progress</strong> to stay motivated and learn Rails. Progress is the fuel that keeps you going. So a lack of it can really beat you down. I know it has for me. Do you wish there was a <em>better way</em> to learn Rails, but fear that there isn’t?\r\n\r\nYou are <strong>certain</strong> that you want to build your app idea. You just aren’t sure that you can do it. Maybe it’s a lost cause. Perhaps you should save yourself the trouble and leave it alone.\r\n<div class="well">\r\n<h3>Well, imagine you <strong>could</strong> make and launch your own Ruby on Rails app in a <strong>matter of days</strong> with little knowledge of coding.</h3>\r\n</div>\r\nI know it sounds crazy, but seriously. What would it be like if you could fast-forward through Rails’ steep learning curve? If nothing stood in the way of you learning Rails and getting your app shipped? If nothing kept you from starting your own business or landing your dream job?\r\n<h4>You would know <strong>exactly</strong> where to start learning and what was next.</h4>\r\nAnd getting stuck with error messages would be a thing of the past. You could soar through building your Rails app and cut through error messages like they were butter.\r\n\r\nYou wouldn’t have to throw away thousands on a Computer Science degree or Code School. And you wouldn’t need to find yourself a technical co-founder or hire that expensive developer. And huzzah, you could push your app live for the world to enjoy, without a hitch.\r\n<h4>You could finally make <strong>REAL</strong> traction and get ’er done.</h4>\r\nIf you had a Rails fast track, you could save months (or in my case - years) of wasted time. Not to mention you could avoid a ton of unnecessary pain and heartache.\r\n<h3>Then the dream of making AND shipping your app could <strong>finally</strong> come true.</h3>\r\nIf Rails was a piece o’ cake to pick up you could just learn by doing. Really <em>doing</em>. You’d <em>build</em> a Rails app and easily absorb the concepts and details one by one as you went along. You’d know <strong>exactly</strong> what to learn and you would learn it all in<strong> exactly</strong> the right order. You could eat the elephant one concept at a time, even in the midst of a wall of tasks, languages and syntax. And you’d never wonder if you had up-to-date training.\r\n\r\nEven without being a "Computer Scientist", you’d feel <strong>confident</strong> as you made a big-picture plan for your new app, wrote code at each step, and understood exactly what each line of code did and why it was there.\r\n<h4>Hell, at this rate you would actually <strong>enjoy </strong>coding.</h4>\r\nBy quickly stacking up tiny victories with Rails you could move yourself closer and closer to the big win of building <strong>and</strong> shipping your app for the world to see. The bottom line is that if Rails was easy-breezy to learn you could make an app <em>AND</em> get solid skills that you can build on – <strong>all at once</strong>.\r\n\r\nThat being said, it is true that Rails does have a crazy difficult learning curve and a Rails app can take months and months to build. But there’s good news. You don’t have to follow that path.\r\n<h3>With <em>Rails Curve</em> you can bypass the learning curve altogether and build a live Rails app in <strong>30 days.</strong></h3>\r\nYou will learn how to build a web app from start to finish, and grow all the skills you need to make your own apps moving forward. In <em>four weeks</em>, you will become experienced with all of the tools, concepts and skills that you need to plan, design, develop and ship a web app.\r\n<h4>With <em>Rails Curve</em> you will learn Rails by <strong>osmosis</strong></h4>\r\nYou will learn <strong>your</strong> way – by <strong>doing</strong>. After all, you decided to learn Rails so you could <em>build</em> an app – so why not learn by <strong>actually building</strong><em> one</em>?\r\n<h4 style="text-align: left;">By following the method of building <strong>AND</strong> learning at the same time you will...</h4>\r\n<ul>\r\n	<li>Understand the big picture <strong>faster</strong></li>\r\n	<li>Pick up complex skills and concepts <strong>faster</strong></li>\r\n	<li>Avoid getting paralyzed by the tiny details</li>\r\n	<li>Avoid the pain of wasting months studying in-depth concepts</li>\r\n	<li>Punch perfectionism <em>in the face</em></li>\r\n</ul>\r\nInstead of spinning your wheels on learning <em>abstract</em> concepts, <em>Rails Curve</em> will give you:\r\n<h4>a clear <strong>day-by-day plan</strong> for how to build a robust Rails app from <strong>start to finish</strong>.</h4>\r\nEach lesson will include bite-sized video screencasts that will walk you through <strong>exactly</strong> what to do, in plain english. <em>Rails Curve</em> gives you a solid path of <em>exactly</em> what to learn in <em>exactly</em> the right order. You will quickly move step by step through the process and pick up skills in each lesson until you have a completed (live) web app and the skills you need to dive into even more advanced material.\r\n<h4>As you move through each lesson, you will get a solid foundation of the key concepts and get <strong>first-hand experience</strong> on how they all work <strong>together</strong>.</h4>\r\nAnd no dull copy/pasting is necessary, you will simply write code yourself and learn the what, why and how as you go. Plus, everything is based on Rails 4 so you’ll have the latest and greatest training for Rails.\r\n<h4 style="text-align: left;"><em>Rails Curve</em> will <strong>jump-start</strong> your understanding of key elements like...</h4>\r\n<div class="row">\r\n<ul class="col-md-6">\r\n	<li>Ruby</li>\r\n	<li>Gems</li>\r\n	<li>Ruby on Rails Framework</li>\r\n	<li>Command Line (Terminal)</li>\r\n	<li>MVC pattern (Model View Controller)</li>\r\n	<li>Object-Oriented Programming</li>\r\n	<li>Active Record</li>\r\n	<li>Databases</li>\r\n	<li>HTML</li>\r\n	<li>CSS and Sass</li>\r\n	<li>Javascript and CoffeeScript</li>\r\n</ul>\r\n<ul class="col-md-6">\r\n	<li>Front-end Frameworks</li>\r\n	<li>Deployment</li>\r\n	<li>Version Control</li>\r\n	<li>Validation</li>\r\n	<li>User Authentication</li>\r\n	<li>UI Design</li>\r\n	<li>UX Design</li>\r\n	<li>Project Management</li>\r\n	<li>and more...</li>\r\n</ul>\r\n</div>\r\n<h3>You can’t build an app without the right tools</h3>\r\nSo you will get hands-on experience with all of the standard tools like the command-line (Terminal), a text editor (like <em>Sublime</em> Text), <em>Git</em>, <em>Github</em>, <em>Heroku</em>, <em>Twitter Bootstrap</em>, <em>Devise</em>, and more. You will learn the ins-and-outs of all the tools you <em>gotta have</em> in your Rails toolbelt.\r\n<h4>With <em>Rails Curve</em> you will learn <strong>exactly</strong> how to do things like ...</h4>\r\n<ul>\r\n	<li>use the command-line to create a new blank-slate app</li>\r\n	<li>use a single command to create a rails server on your computer</li>\r\n	<li>use <em>Git</em> to manage your source code and push it to an online repo at <em>Github</em></li>\r\n	<li>use the command-line to generate the pages and elements of your app on the fly</li>\r\n	<li>use the command-line to manage your database</li>\r\n	<li>use the command-line to push your app to a live server on <em>Heroku</em></li>\r\n	<li>use <em>Twitter Bootstrap</em> to rapidly style your app - with <strong>no</strong> design experience needed.</li>\r\n	<li>use the <em>Devise</em> gem to create user sign-up and sign-in in a matter of minutes.</li>\r\n	<li>and a lot more</li>\r\n</ul>\r\n<h3>But no amount of skills or tools will wipe out the possibility of <strong>error messages</strong>.</h3>\r\nSo with <em>Rails Curve</em> will teach you how to <strong>eliminate</strong> "getting stuck" forever. You’ll get <strong>real-world experience</strong> troubleshooting error messages for yourself <em>quickly</em> so you never have to slam on the breaks again. You will master the art of ...\r\n<ul>\r\n	<li>Reading error messages to get clues about what part of your app needs fixing</li>\r\n	<li>Googling and searching online dev communities to get past any error <em>in minutes</em></li>\r\n	<li>checking <em>Rails</em> and <em>Heroku</em> error logs using your trusty command line</li>\r\n</ul>\r\n<h3>By the time you finish <em>Rails Curve</em> you will have...</h3>\r\n<ul>\r\n	<li>seen how to make a solid plan you can follow</li>\r\n	<li>created all the key features needed for the app</li>\r\n	<li>sketched &amp; styled a beautiful UI on the front-end of the app</li>\r\n	<li>created a solid database back-end for the app</li>\r\n	<li>implemented a user authentication system for users to sign in and sign out</li>\r\n	<li>deployed your app to a live server</li>\r\n	<li>grown a slew of foundational web development skills in the process</li>\r\n</ul>\r\n<h3>You can <em>finally</em> get the <strong>traction</strong> you need</h3>\r\nWhether you are short on time, cash or have no formal education in programming, you will learn how to move the needle no matter what the circumstances. You will learn to make a production plan for yourself that keeps you moving forward. You will experience what it’s like to go from start to finish with a Rails app.\r\n\r\nWhen you complete <em>Rails Curve</em> you’ll feel confident that you can build apps from start to finish on your own. You’ll be totally certain that you can get past any error or issue. Your excitement won’t diminish because you’ll have a solid plan moves you to progress. You will be relieved that you don’t have to spend thousands of dollars and months of time to learn Rails. And you can finally feel in control because you will understand what each line of code does.\r\n<h3>So, fast forward 30 days and you have finished with <em>Rails Curve</em>. <strong>Now what?</strong></h3>\r\nBack to the obscure world of not knowing what’s next? <strong><em>No way</em>.</strong> When you complete the lessons you will definitely want to transition into building your own app idea. So <em>Rails Curve</em> includes outro lessons that will walk you through how to <strong>create your own plan</strong> for <em>your</em> app. This will leave you with a solid action plan that you can follow from start to finish. If you have unique issues or you need a push in the right direction, I also offer <a href="mailto:me@tyrichards.com">Rails coaching</a>. My goal is to see everyone who goes through <em>Rails Curve</em> build and launch their own app and build their career with great success and without stalling out.\r\n<h2>Join other makers who learn by doing</h2>\r\nWith <em>Rails Curve</em> you will build a <em>real</em> Rails app from start to finish and get all the skills you need to move forward and build your own app.\r\n\r\nLet <em>Rails Curve</em> take away the agony of learning Ruby on Rails.', 'Rails Curve', '', 'inherit', 'open', 'open', '', '105-revision-v1', '', '', '2014-08-24 05:20:05', '2014-08-24 10:20:05', '', 105, 'http://dev.dorails.com/railsvitamins/105-revision-v1/', 0, 'revision', '', 0),
(157, 1, '2014-08-24 05:28:44', '2014-08-24 10:28:44', '<h2>Complete your pre-order below</h2>\r\nPre-order <i>Rails Curve</i> yearly access for only <del>$99</del> <strong>$49</strong>\r\n\r\nClick below to pre-order:\r\n\r\n<form action="" method="POST"><script class="stripe-button" src="http://checkout.stripe.com/checkout.js" data-key="pk_test_4aTlVzE71bqN2QqMZiTKXkM8" data-amount="4900" data-name="Rails Curve" data-description="30-Day Course | Pre-sale Price ($49)" data-image="&lt;?php echo get_template_directory_uri(); ?&gt;/assets/images/stripe-logo.jpg">// <![CDATA[\r\n\r\n\r\n// ]]></script></form></div>', 'Pre-order Rails Curve', '', 'inherit', 'open', 'open', '', '147-revision-v1', '', '', '2014-08-24 05:28:44', '2014-08-24 10:28:44', '', 147, 'http://dev.dorails.com/railsvitamins/147-revision-v1/', 0, 'revision', '', 0),
(158, 1, '2014-08-24 05:30:46', '2014-08-24 10:30:46', '<h2>Complete your pre-order below by clicking the button below</h2>\nPre-order <i>Rails Curve</i> yearly access for only <del>$99</del> <strong>$49</strong>\n\n<div class="text-center">\n<form action="" method="POST"><script class="stripe-button" src="http://checkout.stripe.com/checkout.js" data-key="pk_test_4aTlVzE71bqN2QqMZiTKXkM8" data-amount="4900" data-name="Rails Curve" data-description="30-Day Course | Pre-sale Price ($49)" data-image="&lt;?php echo get_template_directory_uri(); ?&gt;/assets/images/stripe-logo.jpg">// <![CDATA[\n\n\n// ]]></script></form></div>', 'Pre-order Rails Curve', '', 'inherit', 'open', 'open', '', '147-autosave-v1', '', '', '2014-08-24 05:30:46', '2014-08-24 10:30:46', '', 147, 'http://dev.dorails.com/railsvitamins/147-autosave-v1/', 0, 'revision', '', 0),
(159, 1, '2014-08-24 05:30:54', '2014-08-24 10:30:54', '<h2>Complete your pre-order below by clicking the button below</h2>\r\nPre-order <i>Rails Curve</i> yearly access for only <del>$99</del> <strong>$49</strong>\r\n\r\n<div class="text-center">\r\n<form action="" method="POST"><script class="stripe-button" src="http://checkout.stripe.com/checkout.js" data-key="pk_test_4aTlVzE71bqN2QqMZiTKXkM8" data-amount="4900" data-name="Rails Curve" data-description="30-Day Course | Pre-sale Price ($49)" data-image="&lt;?php echo get_template_directory_uri(); ?&gt;/assets/images/stripe-logo.jpg">// <![CDATA[\r\n\r\n\r\n// ]]></script></form>\r\n</div>', 'Pre-order Rails Curve', '', 'inherit', 'open', 'open', '', '147-revision-v1', '', '', '2014-08-24 05:30:54', '2014-08-24 10:30:54', '', 147, 'http://dev.dorails.com/railsvitamins/147-revision-v1/', 0, 'revision', '', 0),
(160, 1, '2014-08-24 05:31:37', '2014-08-24 10:31:37', '<h2 style="text-align: center;">Complete your pre-order below by clicking the button below</h2>\r\n<p style="text-align: center;">Pre-order <i>Rails Curve</i> yearly access for only <del>$99</del> <strong>$49</strong></p>\r\n\r\n<div class="text-center"><form action="" method="POST"><script class="stripe-button" src="http://checkout.stripe.com/checkout.js" data-key="pk_test_4aTlVzE71bqN2QqMZiTKXkM8" data-amount="4900" data-name="Rails Curve" data-description="30-Day Course | Pre-sale Price ($49)" data-image="&lt;?php echo get_template_directory_uri(); ?&gt;/assets/images/stripe-logo.jpg">// <![CDATA[\r\n\r\n// ]]></script></form></div>', 'Pre-order Rails Curve', '', 'inherit', 'open', 'open', '', '147-revision-v1', '', '', '2014-08-24 05:31:37', '2014-08-24 10:31:37', '', 147, 'http://dev.dorails.com/railsvitamins/147-revision-v1/', 0, 'revision', '', 0),
(161, 1, '2014-08-24 05:32:35', '2014-08-24 10:32:35', '<h2 style="text-align: center;">Complete your pre-order billing info below by clicking the button</h2>\r\n<p style="text-align: center;">Pre-order your  <i>Rails Curve</i> yearly access for only <del>$99</del> <strong>$49</strong></p>\r\n\r\n<div class="text-center"><form action="" method="POST"><script class="stripe-button" src="http://checkout.stripe.com/checkout.js" data-key="pk_test_4aTlVzE71bqN2QqMZiTKXkM8" data-amount="4900" data-name="Rails Curve" data-description="30-Day Course | Pre-sale Price ($49)" data-image="&lt;?php echo get_template_directory_uri(); ?&gt;/assets/images/stripe-logo.jpg">// <![CDATA[\r\n\r\n\r\n// ]]></script></form></div>', 'Pre-order Rails Curve', '', 'inherit', 'open', 'open', '', '147-revision-v1', '', '', '2014-08-24 05:32:35', '2014-08-24 10:32:35', '', 147, 'http://dev.dorails.com/railsvitamins/147-revision-v1/', 0, 'revision', '', 0),
(162, 1, '2014-08-24 05:34:03', '2014-08-24 10:34:03', '<h2 style="text-align: center;">Complete your pre-order billing info below by clicking the button</h2>\r\n<p style="text-align: center;">Pre-order your  <i>Rails Curve</i> yearly access for only <del>$99</del> <strong>$49</strong></p>\r\n\r\n<div class="text-center"><form action="" method="POST"><script class="stripe-button" src="http://checkout.stripe.com/checkout.js" data-key="pk_test_4aTlVzE71bqN2QqMZiTKXkM8" data-amount="4900" data-name="Rails Curve" data-description="30-Day Course | Pre-sale Price ($49)" data-image="http://dev.dorails.com/assets/images/stripe-logo.jpg">// <![CDATA[\r\n\r\n\r\n// ]]></script></form></div>', 'Pre-order Rails Curve', '', 'inherit', 'open', 'open', '', '147-revision-v1', '', '', '2014-08-24 05:34:03', '2014-08-24 10:34:03', '', 147, 'http://dev.dorails.com/railsvitamins/147-revision-v1/', 0, 'revision', '', 0),
(163, 1, '2014-08-24 05:35:56', '2014-08-24 10:35:56', '<h2 style="text-align: center;">Complete your pre-order billing info below by clicking the button</h2>\r\n<p style="text-align: center;">Pre-order your  <i>Rails Curve</i> yearly access for only <del>$99</del> <strong>$49</strong></p>\r\n\r\n<div class="text-center"><form action="" method="POST"><script class="stripe-button" src="http://checkout.stripe.com/checkout.js" data-key="pk_test_4aTlVzE71bqN2QqMZiTKXkM8" data-amount="4900" data-name="Rails Curve" data-description="30-Day Course | Pre-sale Price ($49)" data-image="/wp-content/themes/Paradox/assets/images/stripe-logo.jpg">// <![CDATA[\r\n\r\n\r\n// ]]></script></form></div>', 'Pre-order Rails Curve', '', 'inherit', 'open', 'open', '', '147-revision-v1', '', '', '2014-08-24 05:35:56', '2014-08-24 10:35:56', '', 147, 'http://dev.dorails.com/railsvitamins/147-revision-v1/', 0, 'revision', '', 0),
(164, 1, '2014-08-24 05:51:27', '2014-08-24 10:51:27', '<h2 style="text-align: center;">Complete your pre-order billing info below by clicking the button</h2>\r\n<p style="text-align: center;">Pre-order your  <i>Rails Curve</i> yearly access for only <del>$99</del> <strong>$49</strong></p>\r\n\r\n<div class="text-center"><form action="" method="POST"><script class="stripe-button" src="http://checkout.stripe.com/checkout.js" data-key="pk_test_4aTlVzE71bqN2QqMZiTKXkM8" data-amount="4900" data-name="Rails Curve" data-description="30-Day Course | Pre-sale Price ($49)" data-image="/wp-content/themes/Paradox/assets/images/stripe-logo.jpg">// <![CDATA[\r\n\r\n\r\n// ]]></script></form></div>', 'Billing Info', '', 'inherit', 'open', 'open', '', '147-revision-v1', '', '', '2014-08-24 05:51:27', '2014-08-24 10:51:27', '', 147, 'http://dev.dorails.com/railsvitamins/147-revision-v1/', 0, 'revision', '', 0),
(165, 1, '2014-08-24 05:54:35', '2014-08-24 10:54:35', 'Thank you for pre-ordering! You\'ve received an email in your inbox confirming the payment. I will keep you posted on the release date of<em> Rails Curve. </em>\r\n\r\nIn the meantime you can checkout Rails tips and tricks <a title="Rails Vitamins" href="http://dev.dorails.com/railsvitamins/">here</a>, if you haven\'t already.\r\n\r\nHave a great day.', 'Thanks!', '', 'draft', 'open', 'closed', '', 'thanks', '', '', '2014-08-26 12:50:15', '2014-08-26 17:50:15', '', 0, 'http://dev.dorails.com/?page_id=165', 0, 'page', '', 0),
(166, 1, '2014-08-24 05:54:35', '2014-08-24 10:54:35', 'Thank you for pre-ordering! You\'ve received an email in your inbox confirming the payment. I will keep you posted on the release date of<em> Rails Curve. </em>\r\n\r\nIn the meantime you can checkout Rails tips and tricks <a title="Rails Vitamins" href="http://dev.dorails.com/railsvitamins/">here</a>, if you haven\'t already.\r\n\r\nHave a great day.', 'Thanks!', '', 'inherit', 'open', 'open', '', '165-revision-v1', '', '', '2014-08-24 05:54:35', '2014-08-24 10:54:35', '', 165, 'http://dev.dorails.com/railsvitamins/165-revision-v1/', 0, 'revision', '', 0) ;
INSERT INTO `wp_posts` ( `ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(167, 1, '2014-08-26 10:35:00', '2014-08-26 15:35:00', 'Unsure how to push your app live? Don\'t want to deal with days or weeks of configuring a server? Save the headache of dealing with your own server and get your app live in a matter of minutes with Heroku. Heroku does all the heavy lifting for you. Plus you can launch several apps for free up to a certain scale. Here\'s how you set it up and push your app live.\n\nAlso keep in mind, a lot of this stuff you will setup once and be done. This walk-through is assuming you have <a title="Get going with Git" href="http://dev.dorails.com/railsvitamins/get-going-with-git/">git installed</a>, and you have some form of a rails app to deploy.\n<h3>1. Create a Heroku Account</h3>\nFirst things first. Go to the <a href="http://heroku.com" target="_blank">Heroku</a> site and setup an account.\n<h3>2. Download Heroku Tool Belt</h3>\nNext go to <a href="https://toolbelt.heroku.com/" target="_blank">http://toolbelt.heroku.com</a> and download heroku\'s command-line tools. This will give you everything you need to work with Heroku in terminal.\n<h3>3. Login to Heroku</h3>\nTo login from the command-line, open up your command-line tool (terminal) and type:\n(Note: You will only need to do this once per computer)\n<pre>$ heroku login</pre>\nThen enter your username and your password.\n(Note: Your password will be invisible as you type)\n<pre>Email:  you@youremail.com\nPassword: # Your password\nCould not find an existing public key.\nWould you like generate one? [Yn] # Type Y\nGenerating new SSH public key.\nUploading ssh public key /Users/adam/.ssh/id_rsa.pub</pre>\n<h3>4. Create new Heroku URL</h3>\nThen we want to create our new app instance &amp; url in Heroku.\n<pre>$ cd /path/to/your/app/ # change directory to app you want to deploy\n$ git init # create local git repo if you haven\'t already\n$ heroku create\n</pre>\nAt this point you could login to your heroku account and browser and see that a new app has been created in your account by traveling to the "Apps" tab. When you enter <code>heroku create</code> Heroku creates a new url and git repo online for you and automatically adds a <i>Git Remote</i> to your current local git repo on your computer.\n\nYou can rename your Heroku url from <code>crazy-random-name.herokuapp.com</code> to <code>custom-name.herokuapp.com</code> by entering the command:\n<pre>$ heroku rename your-custom-name</pre>\n<h3>5. Add Gems &amp; Groups</h3>\nNow we want to add a couple gems just for Heroku. This is worth noting. Rails comes with the gem <code>sqlite</code> and works out of the box with that type of database, but Heroku prefers <code>postgres</code> databases. So we are going to paste <code>gem \'sqlite 3\'</code> from our Gemfile and add two groups for now. One group for your development and test environment on your local machine and another group for production environment on Heroku. So open your Gemfile, cut <code>gem \'sqlite 3\' and add the following groups:</code>\n<pre>...\ngroup :development, :test do\n   gem \'sqlite 3\'\nend\n\ngroup :production do\n   gem \'pg\'\n   gem \'rails_12factor\'\nend   \n...\n</pre>\nThen you always run <code>bundle install</code> in command-line after you add to your Gemfile\n<h3>6. Add / Commit</h3>\nThe last step before deploying is to precompile and then add/commit to our local Git repo before we push to Heroku\n<pre>$ rake assets:precompile # probably want to do this everytime you push latest commit to Heroku\n$ git add . # add all files\n$ git commit -am "Whatever latest changes"\n$ git push origin master # optional if you are already setup on Github\n$ git push heroku master\n</pre>\nThis may take a minute to let Heroku do it\'s thing. But once it\'s done, you should be live – Woohoo! The last command pushes your local Git repo to your Heroku remote repository, and specifies to go to the master branch.\n<h3>7. Open</h3>\nEnter <code>$ heroku open</code> to jump to your live app in a browser. You have pushed to the server but there is a chance you will see default Heroku error message right off the bat. Don\'t panic, it\'s normal.\n<h3>8. Migrate</h3>\nThere may be a bit of an anti-climax but if you see the default heroku error message screen you probably just need to migrate your database. To do this run this in command-line:\n<pre>$ heroku run rake db:migrate</pre>\nThis is a lot like migrating a database on your local machine but this command tells Heroku to to run <code>rake db:migrate</code> on your live app. Enter <code>$ heroku open</code> to make sure the error message is gone.\n\nOnce this is done, your wonderful creation should be on the web for the world to see. It\'s a good idea to do this early and often so you can catch any deployment problems before your app gets more and more complex.\n<h3>9. To Debug</h3>\nThis should get you up and running on Heroku quickly, but depending on your OS and the configuration of your Rials app you may run into problems. Not to worry though. Use this trusty terminal command to see what is causing the issue.\n<pre>$ heroku logs --tail</pre>\nIt seems scary at first but I like to make it easier by using <code>cmd+F</code> for Mac or <code>ctrl+F</code> for PC to search the for "error". That jumps me straight to what I want to see. Then you can simply Google the error message and go from there. It seems like half of programming is Googling.\n\nHuzzah! You have deployed\n\nHope this helps, please feel free to email or comment in the comments below if you have any issues.', '9 steps for first-time deployment to Heroku', '', 'inherit', 'open', 'open', '', '98-autosave-v1', '', '', '2014-08-26 10:35:00', '2014-08-26 15:35:00', '', 98, 'http://dev.dorails.com/railsvitamins/98-autosave-v1/', 0, 'revision', '', 0),
(168, 1, '2014-08-26 09:59:59', '2014-08-26 14:59:59', 'Unsure how to push your app live? Don\'t want to deal with days or weeks of configuring a server? Save the headache of dealing with your own server and get your app live in a matter of minutes with Heroku. Heroku does all the heavy lifting for you. Plus you can launch several apps for free up to a certain scale. Here\'s how you set it up and push your app live.\r\n\r\nAlso keep in mind, a lot of this stuff you will setup once and be done. This walk-through is assuming you have <a title="Get going with Git" href="http://dev.dorails.com/get-going-with-git/">git installed</a>, and you have some form of a rails app to deploy.\r\n<h3>1. Create a Heroku Account</h3>\r\nFirst things first. Go to the <a href="http://heroku.com" target="_blank">Heroku</a> site and setup an account.\r\n<h3>2. Download Heroku Tool Belt</h3>\r\nNext go to <a href="https://toolbelt.heroku.com/" target="_blank">http://toolbelt.heroku.com</a> and download heroku\'s command-line tools. This will give you everything you need to work with Heroku in terminal.\r\n<h3>3. Login to Heroku</h3>\r\nTo login from the command-line, open up your command-line tool (terminal) and type:\r\n(Note: You will only need to do this once per computer)\r\n<pre>$ heroku login</pre>\r\nThen enter your username and your password.\r\n(Note: Your password will be invisible as you type)\r\n<pre>Email:  you@youremail.com\r\nPassword: # Your password\r\nCould not find an existing public key.\r\nWould you like generate one? [Yn] # Type Y\r\nGenerating new SSH public key.\r\nUploading ssh public key /Users/adam/.ssh/id_rsa.pub</pre>\r\n<h3>4. Create new Heroku URL</h3>\r\nThen we want to create our new app instance &amp; url in Heroku.\r\n<pre>$ cd /path/to/your/app/ # change directory to app you want to deploy\r\n$ git init # create local git repo if you haven\'t already\r\n$ heroku create\r\n</pre>\r\nAt this point you could login to your heroku account and browser and see that a new app has been created in your account by traveling to the "Apps" tab. When you enter <code>heroku create</code> Heroku creates a new url and git repo online for you and automatically adds a <i>Git Remote</i> to your current local git repo on your computer.\r\n\r\nYou can rename your Heroku url from <code>crazy-random-name.herokuapp.com</code> to <code>custom-name.herokuapp.com</code> by entering the command <code>heroku apps:rename</code>\r\n<h3>5. Add Gems &amp; Groups</h3>\r\nNow we want to add a couple gems just for Heroku. This is worth noting. Rails comes with the gem <code>sqlite</code> and works out of the box with that type of database, but Heroku prefers <code>postgres</code> databases. So we are going to paste <code>gem \'sqlite 3\'</code> from our Gemfile and add two groups for now. One group for your development and test environment on your local machine and another group for production environment on Heroku. So open your Gemfile, cut <code>gem \'sqlite 3\' and add the following groups:</code>\r\n<pre>...\r\ngroup :development, :test do\r\n   gem \'sqlite 3\'\r\nend\r\n\r\ngroup :production do\r\n   gem \'pg\'\r\n   gem \'rails_12factor\'\r\nend   \r\n...\r\n</pre>\r\nThen you always run <code>bundle install</code> in command-line after you add to your Gemfile\r\n<h3>6. Add / Commit</h3>\r\nThe last step before deploying is to precompile and then add/commit to our local Git repo before we push to Heroku\r\n<pre>$ rake assets:precompile # probably want to do this everytime you push latest commit to Heroku\r\n$ git add . # add all files\r\n$ git commit -am "Whatever latest changes"\r\n$ git push origin master # optional if you are already setup on Github\r\n$ git push heroku master\r\n</pre>\r\nThis may take a minute to let Heroku do it\'s thing. But once it\'s done, you should be live – Woohoo! The last command pushes your local Git repo to your Heroku remote repository, and specifies to go to the master branch.\r\n<h3>7. Open</h3>\r\nEnter <code>$ heroku open</code> to jump open your live app in a browser. You have pushed to the server but there is a chance you will see default Heroku error message right off the bat. Don\'t panic, it\'s normal.\r\n<h3>8. Migrate</h3>\r\nThere may be a bit of an anti-climax but if you see the default heroku error message screen you probably just need to migrate your database. To do this run this in command-line:\r\n<pre>$ heroku run rake db:migrate</pre>\r\nThis is a lot like migrating a database on your local machine but this command tells Heroku to to run <code>rake db:migrate</code> on your live app. Enter <code>$ heroku open</code> to make sure the error message is gone.\r\n\r\nOnce this is done, your wonderful creation should be on the web for the world to see. It\'s a good idea to do this early and often so you can catch any deployment problems before your app gets more and more complex.\r\n<h3>9. To Debug</h3>\r\nThis should get you up and running on Heroku quickly, but depending on your OS and the configuration of your Rials app you may run into problems. Not to worry though. Use this trusty terminal command to see what is causing the issue.\r\n<pre>$ heroku logs --tail</pre>\r\nIt seems scary at first but I like to make it easier by using <code>cmd+F</code> for Mac or <code>ctrl+F</code> for PC to search the for "error". That jumps me straight to what I want to see. Then you can simply Google the error message and go from there. It seems like half of programming is Googling.', '9 steps for first-time deployment to Heroku', '', 'inherit', 'open', 'open', '', '98-revision-v1', '', '', '2014-08-26 09:59:59', '2014-08-26 14:59:59', '', 98, 'http://dev.dorails.com/railsvitamins/98-revision-v1/', 0, 'revision', '', 0),
(169, 1, '2014-08-26 10:01:23', '2014-08-26 15:01:23', 'Unsure how to push your app live? Don\'t want to deal with days or weeks of configuring a server? Save the headache of dealing with your own server and get your app live in a matter of minutes with Heroku. Heroku does all the heavy lifting for you. Plus you can launch several apps for free up to a certain scale. Here\'s how you set it up and push your app live.\r\n\r\nAlso keep in mind, a lot of this stuff you will setup once and be done. This walk-through is assuming you have <a title="Get going with Git" href="http://dev.dorails.com/get-going-with-git/">git installed</a>, and you have some form of a rails app to deploy.\r\n<h3>1. Create a Heroku Account</h3>\r\nFirst things first. Go to the <a href="http://heroku.com" target="_blank">Heroku</a> site and setup an account.\r\n<h3>2. Download Heroku Tool Belt</h3>\r\nNext go to <a href="https://toolbelt.heroku.com/" target="_blank">http://toolbelt.heroku.com</a> and download heroku\'s command-line tools. This will give you everything you need to work with Heroku in terminal.\r\n<h3>3. Login to Heroku</h3>\r\nTo login from the command-line, open up your command-line tool (terminal) and type:\r\n(Note: You will only need to do this once per computer)\r\n<pre>$ heroku login</pre>\r\nThen enter your username and your password.\r\n(Note: Your password will be invisible as you type)\r\n<pre>Email:  you@youremail.com\r\nPassword: # Your password\r\nCould not find an existing public key.\r\nWould you like generate one? [Yn] # Type Y\r\nGenerating new SSH public key.\r\nUploading ssh public key /Users/adam/.ssh/id_rsa.pub</pre>\r\n<h3>4. Create new Heroku URL</h3>\r\nThen we want to create our new app instance &amp; url in Heroku.\r\n<pre>$ cd /path/to/your/app/ # change directory to app you want to deploy\r\n$ git init # create local git repo if you haven\'t already\r\n$ heroku create\r\n</pre>\r\nAt this point you could login to your heroku account and browser and see that a new app has been created in your account by traveling to the "Apps" tab. When you enter <code>heroku create</code> Heroku creates a new url and git repo online for you and automatically adds a <i>Git Remote</i> to your current local git repo on your computer.\r\n\r\nYou can rename your Heroku url from <code>crazy-random-name.herokuapp.com</code> to <code>custom-name.herokuapp.com</code> by entering the command <code>heroku rename your-custom-name</code>\r\n<h3>5. Add Gems &amp; Groups</h3>\r\nNow we want to add a couple gems just for Heroku. This is worth noting. Rails comes with the gem <code>sqlite</code> and works out of the box with that type of database, but Heroku prefers <code>postgres</code> databases. So we are going to paste <code>gem \'sqlite 3\'</code> from our Gemfile and add two groups for now. One group for your development and test environment on your local machine and another group for production environment on Heroku. So open your Gemfile, cut <code>gem \'sqlite 3\' and add the following groups:</code>\r\n<pre>...\r\ngroup :development, :test do\r\n   gem \'sqlite 3\'\r\nend\r\n\r\ngroup :production do\r\n   gem \'pg\'\r\n   gem \'rails_12factor\'\r\nend   \r\n...\r\n</pre>\r\nThen you always run <code>bundle install</code> in command-line after you add to your Gemfile\r\n<h3>6. Add / Commit</h3>\r\nThe last step before deploying is to precompile and then add/commit to our local Git repo before we push to Heroku\r\n<pre>$ rake assets:precompile # probably want to do this everytime you push latest commit to Heroku\r\n$ git add . # add all files\r\n$ git commit -am "Whatever latest changes"\r\n$ git push origin master # optional if you are already setup on Github\r\n$ git push heroku master\r\n</pre>\r\nThis may take a minute to let Heroku do it\'s thing. But once it\'s done, you should be live – Woohoo! The last command pushes your local Git repo to your Heroku remote repository, and specifies to go to the master branch.\r\n<h3>7. Open</h3>\r\nEnter <code>$ heroku open</code> to jump open your live app in a browser. You have pushed to the server but there is a chance you will see default Heroku error message right off the bat. Don\'t panic, it\'s normal.\r\n<h3>8. Migrate</h3>\r\nThere may be a bit of an anti-climax but if you see the default heroku error message screen you probably just need to migrate your database. To do this run this in command-line:\r\n<pre>$ heroku run rake db:migrate</pre>\r\nThis is a lot like migrating a database on your local machine but this command tells Heroku to to run <code>rake db:migrate</code> on your live app. Enter <code>$ heroku open</code> to make sure the error message is gone.\r\n\r\nOnce this is done, your wonderful creation should be on the web for the world to see. It\'s a good idea to do this early and often so you can catch any deployment problems before your app gets more and more complex.\r\n<h3>9. To Debug</h3>\r\nThis should get you up and running on Heroku quickly, but depending on your OS and the configuration of your Rials app you may run into problems. Not to worry though. Use this trusty terminal command to see what is causing the issue.\r\n<pre>$ heroku logs --tail</pre>\r\nIt seems scary at first but I like to make it easier by using <code>cmd+F</code> for Mac or <code>ctrl+F</code> for PC to search the for "error". That jumps me straight to what I want to see. Then you can simply Google the error message and go from there. It seems like half of programming is Googling.', '9 steps for first-time deployment to Heroku', '', 'inherit', 'open', 'open', '', '98-revision-v1', '', '', '2014-08-26 10:01:23', '2014-08-26 15:01:23', '', 98, 'http://dev.dorails.com/railsvitamins/98-revision-v1/', 0, 'revision', '', 0),
(170, 1, '2014-08-26 10:03:42', '2014-08-26 15:03:42', 'Unsure how to push your app live? Don\'t want to deal with days or weeks of configuring a server? Save the headache of dealing with your own server and get your app live in a matter of minutes with Heroku. Heroku does all the heavy lifting for you. Plus you can launch several apps for free up to a certain scale. Here\'s how you set it up and push your app live.\r\n\r\nAlso keep in mind, a lot of this stuff you will setup once and be done. This walk-through is assuming you have <a title="Get going with Git" href="http://dev.dorails.com/get-going-with-git/">git installed</a>, and you have some form of a rails app to deploy.\r\n<h3>1. Create a Heroku Account</h3>\r\nFirst things first. Go to the <a href="http://heroku.com" target="_blank">Heroku</a> site and setup an account.\r\n<h3>2. Download Heroku Tool Belt</h3>\r\nNext go to <a href="https://toolbelt.heroku.com/" target="_blank">http://toolbelt.heroku.com</a> and download heroku\'s command-line tools. This will give you everything you need to work with Heroku in terminal.\r\n<h3>3. Login to Heroku</h3>\r\nTo login from the command-line, open up your command-line tool (terminal) and type:\r\n(Note: You will only need to do this once per computer)\r\n<pre>$ heroku login</pre>\r\nThen enter your username and your password.\r\n(Note: Your password will be invisible as you type)\r\n<pre>Email:  you@youremail.com\r\nPassword: # Your password\r\nCould not find an existing public key.\r\nWould you like generate one? [Yn] # Type Y\r\nGenerating new SSH public key.\r\nUploading ssh public key /Users/adam/.ssh/id_rsa.pub</pre>\r\n<h3>4. Create new Heroku URL</h3>\r\nThen we want to create our new app instance &amp; url in Heroku.\r\n<pre>$ cd /path/to/your/app/ # change directory to app you want to deploy\r\n$ git init # create local git repo if you haven\'t already\r\n$ heroku create\r\n</pre>\r\nAt this point you could login to your heroku account and browser and see that a new app has been created in your account by traveling to the "Apps" tab. When you enter <code>heroku create</code> Heroku creates a new url and git repo online for you and automatically adds a <i>Git Remote</i> to your current local git repo on your computer.\r\n\r\nYou can rename your Heroku url from <code>crazy-random-name.herokuapp.com</code> to <code>custom-name.herokuapp.com</code> by entering the command:\r\n<pre>$ heroku rename your-custom-name</pre>\r\n<h3>5. Add Gems &amp; Groups</h3>\r\nNow we want to add a couple gems just for Heroku. This is worth noting. Rails comes with the gem <code>sqlite</code> and works out of the box with that type of database, but Heroku prefers <code>postgres</code> databases. So we are going to paste <code>gem \'sqlite 3\'</code> from our Gemfile and add two groups for now. One group for your development and test environment on your local machine and another group for production environment on Heroku. So open your Gemfile, cut <code>gem \'sqlite 3\' and add the following groups:</code>\r\n<pre>...\r\ngroup :development, :test do\r\n   gem \'sqlite 3\'\r\nend\r\n\r\ngroup :production do\r\n   gem \'pg\'\r\n   gem \'rails_12factor\'\r\nend   \r\n...\r\n</pre>\r\nThen you always run <code>bundle install</code> in command-line after you add to your Gemfile\r\n<h3>6. Add / Commit</h3>\r\nThe last step before deploying is to precompile and then add/commit to our local Git repo before we push to Heroku\r\n<pre>$ rake assets:precompile # probably want to do this everytime you push latest commit to Heroku\r\n$ git add . # add all files\r\n$ git commit -am "Whatever latest changes"\r\n$ git push origin master # optional if you are already setup on Github\r\n$ git push heroku master\r\n</pre>\r\nThis may take a minute to let Heroku do it\'s thing. But once it\'s done, you should be live – Woohoo! The last command pushes your local Git repo to your Heroku remote repository, and specifies to go to the master branch.\r\n<h3>7. Open</h3>\r\nEnter <code>$ heroku open</code> to jump open your live app in a browser. You have pushed to the server but there is a chance you will see default Heroku error message right off the bat. Don\'t panic, it\'s normal.\r\n<h3>8. Migrate</h3>\r\nThere may be a bit of an anti-climax but if you see the default heroku error message screen you probably just need to migrate your database. To do this run this in command-line:\r\n<pre>$ heroku run rake db:migrate</pre>\r\nThis is a lot like migrating a database on your local machine but this command tells Heroku to to run <code>rake db:migrate</code> on your live app. Enter <code>$ heroku open</code> to make sure the error message is gone.\r\n\r\nOnce this is done, your wonderful creation should be on the web for the world to see. It\'s a good idea to do this early and often so you can catch any deployment problems before your app gets more and more complex.\r\n<h3>9. To Debug</h3>\r\nThis should get you up and running on Heroku quickly, but depending on your OS and the configuration of your Rials app you may run into problems. Not to worry though. Use this trusty terminal command to see what is causing the issue.\r\n<pre>$ heroku logs --tail</pre>\r\nIt seems scary at first but I like to make it easier by using <code>cmd+F</code> for Mac or <code>ctrl+F</code> for PC to search the for "error". That jumps me straight to what I want to see. Then you can simply Google the error message and go from there. It seems like half of programming is Googling.', '9 steps for first-time deployment to Heroku', '', 'inherit', 'open', 'open', '', '98-revision-v1', '', '', '2014-08-26 10:03:42', '2014-08-26 15:03:42', '', 98, 'http://dev.dorails.com/railsvitamins/98-revision-v1/', 0, 'revision', '', 0),
(171, 1, '2014-08-26 10:04:47', '2014-08-26 15:04:47', 'Unsure how to push your app live? Don\'t want to deal with days or weeks of configuring a server? Save the headache of dealing with your own server and get your app live in a matter of minutes with Heroku. Heroku does all the heavy lifting for you. Plus you can launch several apps for free up to a certain scale. Here\'s how you set it up and push your app live.\r\n\r\nAlso keep in mind, a lot of this stuff you will setup once and be done. This walk-through is assuming you have <a title="Get going with Git" href="http://dev.dorails.com/railsvitamins/get-going-with-git/">git installed</a>, and you have some form of a rails app to deploy.\r\n<h3>1. Create a Heroku Account</h3>\r\nFirst things first. Go to the <a href="http://heroku.com" target="_blank">Heroku</a> site and setup an account.\r\n<h3>2. Download Heroku Tool Belt</h3>\r\nNext go to <a href="https://toolbelt.heroku.com/" target="_blank">http://toolbelt.heroku.com</a> and download heroku\'s command-line tools. This will give you everything you need to work with Heroku in terminal.\r\n<h3>3. Login to Heroku</h3>\r\nTo login from the command-line, open up your command-line tool (terminal) and type:\r\n(Note: You will only need to do this once per computer)\r\n<pre>$ heroku login</pre>\r\nThen enter your username and your password.\r\n(Note: Your password will be invisible as you type)\r\n<pre>Email:  you@youremail.com\r\nPassword: # Your password\r\nCould not find an existing public key.\r\nWould you like generate one? [Yn] # Type Y\r\nGenerating new SSH public key.\r\nUploading ssh public key /Users/adam/.ssh/id_rsa.pub</pre>\r\n<h3>4. Create new Heroku URL</h3>\r\nThen we want to create our new app instance &amp; url in Heroku.\r\n<pre>$ cd /path/to/your/app/ # change directory to app you want to deploy\r\n$ git init # create local git repo if you haven\'t already\r\n$ heroku create\r\n</pre>\r\nAt this point you could login to your heroku account and browser and see that a new app has been created in your account by traveling to the "Apps" tab. When you enter <code>heroku create</code> Heroku creates a new url and git repo online for you and automatically adds a <i>Git Remote</i> to your current local git repo on your computer.\r\n\r\nYou can rename your Heroku url from <code>crazy-random-name.herokuapp.com</code> to <code>custom-name.herokuapp.com</code> by entering the command:\r\n<pre>$ heroku rename your-custom-name</pre>\r\n<h3>5. Add Gems &amp; Groups</h3>\r\nNow we want to add a couple gems just for Heroku. This is worth noting. Rails comes with the gem <code>sqlite</code> and works out of the box with that type of database, but Heroku prefers <code>postgres</code> databases. So we are going to paste <code>gem \'sqlite 3\'</code> from our Gemfile and add two groups for now. One group for your development and test environment on your local machine and another group for production environment on Heroku. So open your Gemfile, cut <code>gem \'sqlite 3\' and add the following groups:</code>\r\n<pre>...\r\ngroup :development, :test do\r\n   gem \'sqlite 3\'\r\nend\r\n\r\ngroup :production do\r\n   gem \'pg\'\r\n   gem \'rails_12factor\'\r\nend   \r\n...\r\n</pre>\r\nThen you always run <code>bundle install</code> in command-line after you add to your Gemfile\r\n<h3>6. Add / Commit</h3>\r\nThe last step before deploying is to precompile and then add/commit to our local Git repo before we push to Heroku\r\n<pre>$ rake assets:precompile # probably want to do this everytime you push latest commit to Heroku\r\n$ git add . # add all files\r\n$ git commit -am "Whatever latest changes"\r\n$ git push origin master # optional if you are already setup on Github\r\n$ git push heroku master\r\n</pre>\r\nThis may take a minute to let Heroku do it\'s thing. But once it\'s done, you should be live – Woohoo! The last command pushes your local Git repo to your Heroku remote repository, and specifies to go to the master branch.\r\n<h3>7. Open</h3>\r\nEnter <code>$ heroku open</code> to jump open your live app in a browser. You have pushed to the server but there is a chance you will see default Heroku error message right off the bat. Don\'t panic, it\'s normal.\r\n<h3>8. Migrate</h3>\r\nThere may be a bit of an anti-climax but if you see the default heroku error message screen you probably just need to migrate your database. To do this run this in command-line:\r\n<pre>$ heroku run rake db:migrate</pre>\r\nThis is a lot like migrating a database on your local machine but this command tells Heroku to to run <code>rake db:migrate</code> on your live app. Enter <code>$ heroku open</code> to make sure the error message is gone.\r\n\r\nOnce this is done, your wonderful creation should be on the web for the world to see. It\'s a good idea to do this early and often so you can catch any deployment problems before your app gets more and more complex.\r\n<h3>9. To Debug</h3>\r\nThis should get you up and running on Heroku quickly, but depending on your OS and the configuration of your Rials app you may run into problems. Not to worry though. Use this trusty terminal command to see what is causing the issue.\r\n<pre>$ heroku logs --tail</pre>\r\nIt seems scary at first but I like to make it easier by using <code>cmd+F</code> for Mac or <code>ctrl+F</code> for PC to search the for "error". That jumps me straight to what I want to see. Then you can simply Google the error message and go from there. It seems like half of programming is Googling.\r\n\r\nHope this helps, please feel free to email or comment in the comments below if you have any issues.', '9 steps for first-time deployment to Heroku', '', 'inherit', 'open', 'open', '', '98-revision-v1', '', '', '2014-08-26 10:04:47', '2014-08-26 15:04:47', '', 98, 'http://dev.dorails.com/railsvitamins/98-revision-v1/', 0, 'revision', '', 0),
(172, 1, '2014-09-04 13:27:16', '2014-09-04 18:27:16', 'Are you spinning your wheels with Rails? Buried in error messages? Wasting a load of time trying to figure out the essentials of Ruby on Rails? Do you learn by doing? Well imagine you could get all of the key Rails skills and <strong>build</strong> an app at the same time.\n\nMy <a title="30-Day Rails" href="http://dev.dorails.com/30dayrails/" target="_blank">upcoming course</a> can give you the foundational skills you need to build <b>AND </b>ship Rails apps. Whether it\'s to level up your career or start your own business, I think it can help you get launched. I\'d go on but I\'ve already said it <a title="30-Day Rails" href="http://dev.dorails.com/30dayrails/" target="_blank">here</a>. If you\'re stuck and need a leg up with Ruby on Rails, check it out by clicking below.\n\n<a class="btn btn-primary" title="Rails Curve" href="http://dev.dorails.com/railscurve/">Learn more</a>', 'Speed up the learning curve for Ruby on Rails', '', 'inherit', 'open', 'open', '', '137-autosave-v1', '', '', '2014-09-04 13:27:16', '2014-09-04 18:27:16', '', 137, 'http://dev.dorails.com/railsvitamins/137-autosave-v1/', 0, 'revision', '', 0),
(173, 1, '2014-08-26 10:21:40', '2014-08-26 15:21:40', 'Are you spinning your wheels with Rails? Buried in error messages? Wasting a load of time trying to figure out the essentials of Ruby on Rails? Do you learn by doing? Well imagine you could get all of the key Rails skills and <strong>build</strong> an app at the same time.\r\n\r\nMy <a title="Rails Curve" href="http://dev.dorails.com/railscurve/">upcoming course</a> can give you the foundational skills you need to build <b>AND </b>ship Rails apps. Whether it\'s to level up your career or start your own business, I think it can help you get launched. I\'d go on but I\'ve already said it <a title="Rails Curve" href="http://dev.dorails.com/railscurve/">here</a>. If you\'re stuck and need a leg up with Ruby on Rails, check it out by clicking below.\r\n\r\n<a class="btn btn-primary" title="Rails Curve" href="http://dev.dorails.com/railscurve/">Learn more</a>', 'Speed up the learning curve for Ruby on Rails', '', 'inherit', 'open', 'open', '', '137-revision-v1', '', '', '2014-08-26 10:21:40', '2014-08-26 15:21:40', '', 137, 'http://dev.dorails.com/railsvitamins/137-revision-v1/', 0, 'revision', '', 0),
(174, 1, '2014-08-26 10:23:00', '2014-08-26 15:23:00', 'I used to see web/software development as a lonely, anti-social and disorganized activity. It was incredibly difficult to collaborate and follow along with the progress of a project. Also it was a beat-down to transfer and backup projects to a place where I could always access them from anywhere. That was until I discovered <a href="https://github.com/" target="_blank">Github</a>.\r\n\r\nNow I push all my projects to an online repository. I see a real-time history of all my projects. I easily collaborate and contribute to other\'s projects, and get instant access to my source code whenever I need it. Github also serves as a social network of sorts for developers. In a glance others can see what I\'m working on and I can explore to see what my friends are working on. This is all part of the modern web/software developer\'s repertoire  (especially Rails), along with <a href="http://git-scm.com/" target="_blank">Git</a>.\r\n\r\nKeep in mind that Github and Git are related but different things. Git is a local version control tool for your projects, and Github is online hosting of your project source code.\r\n\r\nSo what\'s the best way to get started with Github? Follow these steps and you\'ll be rolling.\r\n<h3>1. Setup Git</h3>\r\nGit is required to be able to use Github, so if you haven\'t read my post <em><a title="Get going with Git" href="http://dev.dorails.com/railsvitamins/get-going-with-git/">Get going with Git</a></em>, go there first and setup Git on your local computer.\r\n<h3>2. Make initial commit</h3>\r\nOnce you\'ve setup Git on your computer. Find an existing project that you want to put on Github or create a new folder for an upcoming project. Then open terminal and enter the following:\r\n<pre>$ cd /path/to/your/project/ # change to the directory of your project\r\n$ git init # create local repository\r\n$ git add . # add all files in the directory\r\n$ git commit -am "Initial Commit" # commit with a message</pre>\r\nYou now have a local repository with your new or existing project. How do we push this to Github? Continue on...\r\n<h3>3. Start Github account</h3>\r\nGo to <a href="http://github.com" target="_blank">github.com</a> and setup your account.\r\n<h3>4. Create SSH Keys</h3>\r\nFollow Github instructions <a href="https://help.github.com/articles/generating-ssh-keys" target="_blank">here</a>.\r\n<h3>5. Create a new repo</h3>\r\nOnce you are setup and logged in:\r\n<ul>\r\n	<li>Click on the <code>+</code> sign in the top right hand corner</li>\r\n	<li>Click <code>New repository</code> from the dropdown</li>\r\n	<li>Give repo a name like <code>my_project</code>, <code>my-project</code>, or <code>MyProject</code> (I like to pick a convention and stick with it).</li>\r\n	<li>Give your project a description</li>\r\n	<li>Choose <code>Public</code> or <code>Private</code>.\r\n<small>Stick with public right now unless you are doing a company/client project (they might not like you publishing their source code for the world to see). Public repos are free. Private repos will cost you a little. I use them myself though.</small></li>\r\n	<li>I usually leave the <code>Initialize this repo with a README</code> unchecked because Rails projects have these by default when you setup a rails project.</li>\r\n	<li>Then click the <code>Create Repository</code> Button</li>\r\n</ul>\r\n<h3>6. Push Local Git Repo to Github Repo</h3>\r\nAfter your Github repo is created you will see a screen with setup instructions. Skip down to the <code>Push an existing repository from the command line</code> section. Type the following into the command line on your local machine:\r\n<pre>git remote add origin git@github.com:MyAccount/my_project.git\r\ngit push -u origin master</pre>\r\nYou have now set your new Github repo as the origin "remote" repository (more on remotes later). And you have set the ability to push your <em>local</em> Git repo to your <em>remote</em> Github repo.\r\n<h3>7. Do the Git Jive</h3>\r\nNow you can work on your project, make changes, and do the Git dance.\r\n<ol>\r\n	<li>Work on stuff</li>\r\n	<li>\r\n<pre>$ git add .</pre>\r\n</li>\r\n	<li>\r\n<pre>$ git commit -am "Create Navbar"</pre>\r\n<small>Note: Best practice for commits is to write in present tense and keep it short</small></li>\r\n	<li>\r\n<pre>$ git push</pre>\r\n<small>Pushes to Github repo</small></li>\r\n	<li>Repeat</li>\r\n</ol>\r\n<h3>8. Bonus</h3>\r\nI was going to save this for another post, but it\'s too much fun. Now that your Github repo is setup for your project you can pull up your project from any computer in a jiffy (as long as it has Git setup on it). You can actually do this with anyone\'s public project on Github. This is called <em>cloning</em>, and it does just that. Just open the directory where you want to drop it on your local machine and clone the repo to download the project instantly. The quickest way to clone a project is to find the project repo on Github and copy the clone code on the righthand side here:\r\n\r\n<a href="http://dev.dorails.com/wp-content/uploads/2014/08/Git-Clone.jpg"><img class="aligncenter wp-image-80" src="http://dev.dorails.com/wp-content/uploads/2014/08/Git-Clone-300x183.jpg" alt="Git Clone" width="500" height="306" /></a>\r\n\r\nThen travel to the directory you want to drop it and type <code>$ git clone</code> and paste the clone text in like so:\r\n<pre>$ cd /path/to/new/project/destination/\r\n$ git clone git@github.com:MyAccount/my_project.git</pre>\r\nFeel free to dig around Github and find other amazing developers with fun projects and clone theirs too to dig through their code.\r\n\r\nThere are a thousand other more advanced techniques I will cover with Git/Github including branches, remotes and deploying your Rails app, but you can hit the ground running now. With this jump start you can keep your code in an online repo, share what you are working on with others, easily collaborate, and interact with other humans. Congrats you\'re now a <em>modern</em> developer living in the 21st century!', 'Hop on the Github bandwagon', '', 'inherit', 'open', 'open', '', '73-revision-v1', '', '', '2014-08-26 10:23:00', '2014-08-26 15:23:00', '', 73, 'http://dev.dorails.com/railsvitamins/73-revision-v1/', 0, 'revision', '', 0),
(175, 1, '2014-08-26 10:25:59', '2014-08-26 15:25:59', 'Do you feel like your still doing web/software dev in the stoneage? Still using FTP or SVN? Ever have a client ask you to put things back how they were 2 weeks ago? Or do you have a hard time collaborating with other developers?\r\n\r\nImagine you can rewind or revert to any stage in development at the drop of a hat. And when it’s time to work on a risky or experimental feature you could get messy without affecting the main source code of the project. Imagine it is simple and straight forward to collaborate with other devs on your team without stepping on each others toes. For these and a million other reasons, you need to use Git! Git is a small but powerful tool vital to any Rails developer. If you are new to Rails and are ready to usher in a new age for yourself, it’s best to just jump on the Git bandwagon right away so you’ve got a leg to stand on.\r\n\r\nNote: Their is a distinction between Git and Github. Although related and used in tandem, it’s important to know that Git is the version control system on your local computer and Github is  a web-based hosting service. We will focus on Git for today but I do have a <a title="Hop on the Github bandwagon" href="http://dev.dorails.com/railsvitamins/hop-on-the-github-bandwagon/">post about Github</a> when you are ready.\r\n\r\nHere’s a fast track to getting setup with Git:\r\n<h3>1. Open Terminal</h3>\r\nFind the application called Terminal on your Mac (or Windows Equivalent) and open it. You should see a black command-line screen once opened\r\n<h3>2. Setup Git</h3>\r\nTo setup Git on your computer, type these in the command-line ($ signifies that this is a command, don’t type the $):\r\n<pre>$ git config --global user.name “Ty Richards”</pre>\r\n<pre>$ git config --global user.name   # to confirm name saved</pre>\r\n<pre>$ git config --global user.email “me@tyrichards.com”</pre>\r\n<pre>$ git config --global user.email   # to confirm email saved</pre>\r\n<h3>3. Create New Repo</h3>\r\nTo setup a Git repo for a new project or give an existing project a repo:\r\n<pre>$ cd ~/Sites/new_project  # travel to your new project folder in terminal</pre>\r\n<pre>$ pwd   # verify that you are in that directory</pre>\r\n<pre>$ git init  # creates a new repo</pre>\r\n<pre>$ git status # to see what files are being tracked$ git add .  # adds all files in current folder)</pre>\r\n<pre>$ git commit -a -m “initial commit”  # commits all(-a) modified files and includes a message(-m)</pre>\r\n<h3>4. Do Stuff</h3>\r\nAfter every task you do you can:\r\n<pre>$ git status # to see what is being tracked and modified</pre>\r\n<pre>$ git add .</pre>\r\n<pre>$ git commit -am “Build initial scaffolding”</pre>\r\nand repeat\r\n\r\nWith this you’ll be setup and ready to go in the era of Git. At it’s best you have full control of your source code revisions and collaboration, and at worst you have a nicely documented history of revisions that have been made on the project. There are many more advanced features of Git and GitHub makes things more exciting too. With Git you also need to understand branches, remotes, and the .gitignore file, but you are at least jumpstarted into the world of Git. More on these other things later.', 'Get going with Git', '', 'inherit', 'open', 'open', '', '42-revision-v1', '', '', '2014-08-26 10:25:59', '2014-08-26 15:25:59', '', 42, 'http://dev.dorails.com/railsvitamins/42-revision-v1/', 0, 'revision', '', 0),
(176, 1, '2014-08-26 10:29:55', '2014-08-26 15:29:55', 'Unsure how to push your app live? Don\'t want to deal with days or weeks of configuring a server? Save the headache of dealing with your own server and get your app live in a matter of minutes with Heroku. Heroku does all the heavy lifting for you. Plus you can launch several apps for free up to a certain scale. Here\'s how you set it up and push your app live.\r\n\r\nAlso keep in mind, a lot of this stuff you will setup once and be done. This walk-through is assuming you have <a title="Get going with Git" href="http://dev.dorails.com/railsvitamins/get-going-with-git/">git installed</a>, and you have some form of a rails app to deploy.\r\n<h3>1. Create a Heroku Account</h3>\r\nFirst things first. Go to the <a href="http://heroku.com" target="_blank">Heroku</a> site and setup an account.\r\n<h3>2. Download Heroku Tool Belt</h3>\r\nNext go to <a href="https://toolbelt.heroku.com/" target="_blank">http://toolbelt.heroku.com</a> and download heroku\'s command-line tools. This will give you everything you need to work with Heroku in terminal.\r\n<h3>3. Login to Heroku</h3>\r\nTo login from the command-line, open up your command-line tool (terminal) and type:\r\n(Note: You will only need to do this once per computer)\r\n<pre>$ heroku login</pre>\r\nThen enter your username and your password.\r\n(Note: Your password will be invisible as you type)\r\n<pre>Email:  you@youremail.com\r\nPassword: # Your password\r\nCould not find an existing public key.\r\nWould you like generate one? [Yn] # Type Y\r\nGenerating new SSH public key.\r\nUploading ssh public key /Users/adam/.ssh/id_rsa.pub</pre>\r\n<h3>4. Create new Heroku URL</h3>\r\nThen we want to create our new app instance &amp; url in Heroku.\r\n<pre>$ cd /path/to/your/app/ # change directory to app you want to deploy\r\n$ git init # create local git repo if you haven\'t already\r\n$ heroku create\r\n</pre>\r\nAt this point you could login to your heroku account and browser and see that a new app has been created in your account by traveling to the "Apps" tab. When you enter <code>heroku create</code> Heroku creates a new url and git repo online for you and automatically adds a <i>Git Remote</i> to your current local git repo on your computer.\r\n\r\nYou can rename your Heroku url from <code>crazy-random-name.herokuapp.com</code> to <code>custom-name.herokuapp.com</code> by entering the command:\r\n<pre>$ heroku rename your-custom-name</pre>\r\n<h3>5. Add Gems &amp; Groups</h3>\r\nNow we want to add a couple gems just for Heroku. This is worth noting. Rails comes with the gem <code>sqlite</code> and works out of the box with that type of database, but Heroku prefers <code>postgres</code> databases. So we are going to paste <code>gem \'sqlite 3\'</code> from our Gemfile and add two groups for now. One group for your development and test environment on your local machine and another group for production environment on Heroku. So open your Gemfile, cut <code>gem \'sqlite 3\' and add the following groups:</code>\r\n<pre>...\r\ngroup :development, :test do\r\n   gem \'sqlite 3\'\r\nend\r\n\r\ngroup :production do\r\n   gem \'pg\'\r\n   gem \'rails_12factor\'\r\nend   \r\n...\r\n</pre>\r\nThen you always run <code>bundle install</code> in command-line after you add to your Gemfile\r\n<h3>6. Add / Commit</h3>\r\nThe last step before deploying is to precompile and then add/commit to our local Git repo before we push to Heroku\r\n<pre>$ rake assets:precompile # probably want to do this everytime you push latest commit to Heroku\r\n$ git add . # add all files\r\n$ git commit -am "Whatever latest changes"\r\n$ git push origin master # optional if you are already setup on Github\r\n$ git push heroku master\r\n</pre>\r\nThis may take a minute to let Heroku do it\'s thing. But once it\'s done, you should be live – Woohoo! The last command pushes your local Git repo to your Heroku remote repository, and specifies to go to the master branch.\r\n<h3>7. Open</h3>\r\nEnter <code>$ heroku open</code> to jump to your live app in a browser. You have pushed to the server but there is a chance you will see default Heroku error message right off the bat. Don\'t panic, it\'s normal.\r\n<h3>8. Migrate</h3>\r\nThere may be a bit of an anti-climax but if you see the default heroku error message screen you probably just need to migrate your database. To do this run this in command-line:\r\n<pre>$ heroku run rake db:migrate</pre>\r\nThis is a lot like migrating a database on your local machine but this command tells Heroku to to run <code>rake db:migrate</code> on your live app. Enter <code>$ heroku open</code> to make sure the error message is gone.\r\n\r\nOnce this is done, your wonderful creation should be on the web for the world to see. It\'s a good idea to do this early and often so you can catch any deployment problems before your app gets more and more complex.\r\n<h3>9. To Debug</h3>\r\nThis should get you up and running on Heroku quickly, but depending on your OS and the configuration of your Rials app you may run into problems. Not to worry though. Use this trusty terminal command to see what is causing the issue.\r\n<pre>$ heroku logs --tail</pre>\r\nIt seems scary at first but I like to make it easier by using <code>cmd+F</code> for Mac or <code>ctrl+F</code> for PC to search the for "error". That jumps me straight to what I want to see. Then you can simply Google the error message and go from there. It seems like half of programming is Googling.\r\n\r\nHope this helps, please feel free to email or comment in the comments below if you have any issues.', '9 steps for first-time deployment to Heroku', '', 'inherit', 'open', 'open', '', '98-revision-v1', '', '', '2014-08-26 10:29:55', '2014-08-26 15:29:55', '', 98, 'http://dev.dorails.com/railsvitamins/98-revision-v1/', 0, 'revision', '', 0) ;
INSERT INTO `wp_posts` ( `ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(177, 1, '2014-08-26 10:35:14', '2014-08-26 15:35:14', 'Unsure how to push your app live? Don\'t want to deal with days or weeks of configuring a server? Save the headache of dealing with your own server and get your app live in a matter of minutes with Heroku. Heroku does all the heavy lifting for you. Plus you can launch several apps for free up to a certain scale. Here\'s how you set it up and push your app live.\r\n\r\nAlso keep in mind, a lot of this stuff you will setup once and be done. This walk-through is assuming you have <a title="Get going with Git" href="http://dev.dorails.com/railsvitamins/get-going-with-git/">git installed</a>, and you have some form of a rails app to deploy.\r\n<h3>1. Create a Heroku Account</h3>\r\nFirst things first. Go to the <a href="http://heroku.com" target="_blank">Heroku</a> site and setup an account.\r\n<h3>2. Download Heroku Tool Belt</h3>\r\nNext go to <a href="https://toolbelt.heroku.com/" target="_blank">http://toolbelt.heroku.com</a> and download heroku\'s command-line tools. This will give you everything you need to work with Heroku in terminal.\r\n<h3>3. Login to Heroku</h3>\r\nTo login from the command-line, open up your command-line tool (terminal) and type:\r\n(Note: You will only need to do this once per computer)\r\n<pre>$ heroku login</pre>\r\nThen enter your username and your password.\r\n(Note: Your password will be invisible as you type)\r\n<pre>Email:  you@youremail.com\r\nPassword: # Your password\r\nCould not find an existing public key.\r\nWould you like generate one? [Yn] # Type Y\r\nGenerating new SSH public key.\r\nUploading ssh public key /Users/adam/.ssh/id_rsa.pub</pre>\r\n<h3>4. Create new Heroku URL</h3>\r\nThen we want to create our new app instance &amp; url in Heroku.\r\n<pre>$ cd /path/to/your/app/ # change directory to app you want to deploy\r\n$ git init # create local git repo if you haven\'t already\r\n$ heroku create\r\n</pre>\r\nAt this point you could login to your heroku account and browser and see that a new app has been created in your account by traveling to the "Apps" tab. When you enter <code>heroku create</code> Heroku creates a new url and git repo online for you and automatically adds a <i>Git Remote</i> to your current local git repo on your computer.\r\n\r\nYou can rename your Heroku url from <code>crazy-random-name.herokuapp.com</code> to <code>custom-name.herokuapp.com</code> by entering the command:\r\n<pre>$ heroku rename your-custom-name</pre>\r\n<h3>5. Add Gems &amp; Groups</h3>\r\nNow we want to add a couple gems just for Heroku. This is worth noting. Rails comes with the gem <code>sqlite</code> and works out of the box with that type of database, but Heroku prefers <code>postgres</code> databases. So we are going to paste <code>gem \'sqlite 3\'</code> from our Gemfile and add two groups for now. One group for your development and test environment on your local machine and another group for production environment on Heroku. So open your Gemfile, cut <code>gem \'sqlite 3\' and add the following groups:</code>\r\n<pre>...\r\ngroup :development, :test do\r\n   gem \'sqlite 3\'\r\nend\r\n\r\ngroup :production do\r\n   gem \'pg\'\r\n   gem \'rails_12factor\'\r\nend   \r\n...\r\n</pre>\r\nThen you always run <code>bundle install</code> in command-line after you add to your Gemfile\r\n<h3>6. Add / Commit</h3>\r\nThe last step before deploying is to precompile and then add/commit to our local Git repo before we push to Heroku\r\n<pre>$ rake assets:precompile # probably want to do this everytime you push latest commit to Heroku\r\n$ git add . # add all files\r\n$ git commit -am "Whatever latest changes"\r\n$ git push origin master # optional if you are already setup on Github\r\n$ git push heroku master\r\n</pre>\r\nThis may take a minute to let Heroku do it\'s thing. But once it\'s done, you should be live – Woohoo! The last command pushes your local Git repo to your Heroku remote repository, and specifies to go to the master branch.\r\n<h3>7. Open</h3>\r\nEnter <code>$ heroku open</code> to jump to your live app in a browser. You have pushed to the server but there is a chance you will see default Heroku error message right off the bat. Don\'t panic, it\'s normal.\r\n<h3>8. Migrate</h3>\r\nThere may be a bit of an anti-climax but if you see the default heroku error message screen you probably just need to migrate your database. To do this run this in command-line:\r\n<pre>$ heroku run rake db:migrate</pre>\r\nThis is a lot like migrating a database on your local machine but this command tells Heroku to to run <code>rake db:migrate</code> on your live app. Enter <code>$ heroku open</code> to make sure the error message is gone.\r\n\r\nOnce this is done, your wonderful creation should be on the web for the world to see. It\'s a good idea to do this early and often so you can catch any deployment problems before your app gets more and more complex.\r\n<h3>9. To Debug</h3>\r\nThis should get you up and running on Heroku quickly, but depending on your OS and the configuration of your Rials app you may run into problems. Not to worry though. Use this trusty terminal command to see what is causing the issue.\r\n<pre>$ heroku logs --tail</pre>\r\nIt seems scary at first but I like to make it easier by using <code>cmd+F</code> for Mac or <code>ctrl+F</code> for PC to search the for "error". That jumps me straight to what I want to see. Then you can simply Google the error message and go from there. It seems like half of programming is Googling.\r\n<h3>Huzzah! You\'re deployed.</h3>\r\nHope this helps, please feel free to email or comment in the comments below if you have any issues.', '9 steps for first-time deployment to Heroku', '', 'inherit', 'open', 'open', '', '98-revision-v1', '', '', '2014-08-26 10:35:14', '2014-08-26 15:35:14', '', 98, 'http://dev.dorails.com/railsvitamins/98-revision-v1/', 0, 'revision', '', 0),
(178, 1, '2014-08-27 10:00:06', '2014-08-27 15:00:06', 'Here\'s a quick trick for how you can direct your custom domain name <code>yourfancyapp.com</code> to your live app on Heroku. This post assumes you actually have already pushed your app live to Heroku. If you haven\'t yet, that\'s okay checkout my post <a title="9 steps for first-time deployment to Heroku" href="http://dev.dorails.com/railsvitamins/9-steps-for-first-time-deployment-to-heroku/" target="_blank">here</a>.\r\n\r\n<h3>1. Add domain to Heroku</h3>\r\n\r\nFirst open your command-line and go to your local app directory and enter this heroku command:\r\n<pre>\r\n$ cd /path/to/your/app/\r\n$ heroku domains\r\n</pre>\r\nThis will show your current domains that work with your live Heroku app. You will likely see <code>random-name.herokuapp.com</code> or <code>your-custom-name.herokuapp.com</code> \r\n\r\nSo to add <code>yourfancyapp.com</code> just enter the following in your command-line:\r\n<pre>\r\n$ heroku domains:add yourfancyapp.com\r\n$ heroku domains:add www.yourfancyapp.com\r\n</pre>\r\n\r\nIn a nutshell, this command adds your domain as an alias and tells Heroku to listen for that domain name.\r\n\r\n<h3>2. Point your domain to Heroku</h3>\r\n\r\nThere are lots of domain registrar\'s so I\'m just going to show you how to do this with the most popular one, GoDaddy.com. If you haven\'t already purchased the domain go ahead and go there and do that. \r\n\r\nLogin, then click on <code>My Account</code>.\r\nThen click on <code>Manage My Domains</code>.\r\nFind your domain in the list and click on the name.\r\nThen click on the tab <code>DNS Zone File</code>.\r\nClick the <code>Add Record</code> button.\r\nThen select <code>CNAME</code> from the Record type dropdown.\r\nFor Hostname enter <code>@</code>\r\nFor Points to enter <code>your-app-name.herokuapp.com</code>\r\nThen click Finish.\r\nDon\'t forget to click the <code>Save Changes</code> button.\r\n\r\n<h3>3. Done</h3>\r\nThere is no step 3. You are done. Check your new custom url to make sure that it\'s directing to your Heroku app. Depending on the registrar this could take some time to go through.\r\n\r\n\r\n', '3 steps to add your custom domain to Heroku', '', 'trash', 'open', 'open', '', '3-steps-to-add-your-custom-domain-to-heroku', '', '', '2014-08-26 12:49:44', '2014-08-26 17:49:44', '', 0, 'http://dev.dorails.com/?page_id=178', 0, 'page', '', 0),
(179, 1, '2014-08-26 12:46:02', '2014-08-26 17:46:02', 'Here\'s a quick trick for how you can direct your custom domain name <code>yourfancyapp.com</code> to your live app on Heroku. This post assumes you actually have already pushed your app live to Heroku. If you haven\'t yet, that\'s okay checkout my post <a title="9 steps for first-time deployment to Heroku" href="http://dev.dorails.com/railsvitamins/9-steps-for-first-time-deployment-to-heroku/" target="_blank">here</a>.\r\n\r\n<h3>1. Add domain to Heroku</h3>\r\n\r\nFirst open your command-line and go to your local app directory and enter this heroku command:\r\n<pre>\r\n$ cd /path/to/your/app/\r\n$ heroku domains\r\n</pre>\r\nThis will show your current domains that work with your live Heroku app. You will likely see <code>random-name.herokuapp.com</code> or <code>your-custom-name.herokuapp.com</code> \r\n\r\nSo to add <code>yourfancyapp.com</code> just enter the following in your command-line:\r\n<pre>\r\n$ heroku domains:add yourfancyapp.com\r\n$ heroku domains:add www.yourfancyapp.com\r\n</pre>\r\n\r\nIn a nutshell, this command adds your domain as an alias and tells Heroku to listen for that domain name.\r\n\r\n<h3>2. Point your domain to Heroku</h3>\r\n\r\nThere are lots of domain registrar\'s so I\'m just going to show you how to do this with the most popular one, GoDaddy.com. If you haven\'t already purchased the domain go ahead and go there and do that. \r\n\r\nLogin, then click on <code>My Account</code>.\r\nThen click on <code>Manage My Domains</code>.\r\nFind your domain in the list and click on the name.\r\nThen click on the tab <code>DNS Zone File</code>.\r\nClick the <code>Add Record</code> button.\r\nThen select <code>CNAME</code> from the Record type dropdown.\r\nFor Hostname enter <code>@</code>\r\nFor Points to enter <code>your-app-name.herokuapp.com</code>\r\nThen click Finish.\r\nDon\'t forget to click the <code>Save Changes</code> button.\r\n\r\n<h3>3. Done</h3>\r\nThere is no step 3. You are done. Check your new custom url to make sure that it\'s directing to your Heroku app. Depending on the registrar this could take some time to go through.\r\n\r\n\r\n', '3 steps to add your custom domain to Heroku', '', 'inherit', 'open', 'open', '', '178-revision-v1', '', '', '2014-08-26 12:46:02', '2014-08-26 17:46:02', '', 178, 'http://dev.dorails.com/railsvitamins/178-revision-v1/', 0, 'revision', '', 0),
(180, 1, '2014-08-26 12:46:32', '2014-08-26 17:46:32', 'Here\'s a quick trick for how you can direct your custom domain name <code>yourfancyapp.com</code> to your live app on Heroku. This post assumes you actually have already pushed your app live to Heroku. If you haven\'t yet, that\'s okay checkout my post <a title="9 steps for first-time deployment to Heroku" href="http://dev.dorails.com/railsvitamins/9-steps-for-first-time-deployment-to-heroku/" target="_blank">here</a>.\r\n\r\n<h3>1. Add domain to Heroku</h3>\r\n\r\nFirst open your command-line and go to your local app directory and enter this heroku command:\r\n<pre>\r\n$ cd /path/to/your/app/\r\n$ heroku domains\r\n</pre>\r\nThis will show your current domains that work with your live Heroku app. You will likely see <code>random-name.herokuapp.com</code> or <code>your-custom-name.herokuapp.com</code> \r\n\r\nSo to add <code>yourfancyapp.com</code> just enter the following in your command-line:\r\n<pre>\r\n$ heroku domains:add yourfancyapp.com\r\n$ heroku domains:add www.yourfancyapp.com\r\n</pre>\r\n\r\nIn a nutshell, this command adds your domain as an alias and tells Heroku to listen for that domain name.\r\n\r\n<h3>2. Point your domain to Heroku</h3>\r\n\r\nThere are lots of domain registrar\'s so I\'m just going to show you how to do this with the most popular one, GoDaddy.com. If you haven\'t already purchased the domain go ahead and go there and do that. \r\n\r\nLogin, then click on <code>My Account</code>.\r\nThen click on <code>Manage My Domains</code>.\r\nFind your domain in the list and click on the name.\r\nThen click on the tab <code>DNS Zone File</code>.\r\nClick the <code>Add Record</code> button.\r\nThen select <code>CNAME</code> from the Record type dropdown.\r\nFor Hostname enter <code>@</code>\r\nFor Points to enter <code>your-app-name.herokuapp.com</code>\r\nThen click Finish.\r\nDon\'t forget to click the <code>Save Changes</code> button.\r\n\r\n<h3>3. Done</h3>\r\nThere is no step 3. You are done. Check your new custom url to make sure that it\'s directing to your Heroku app. Depending on the registrar this could take some time to go through.\r\n\r\n\r\n', '3 steps to add your custom domain to Heroku', '', 'inherit', 'open', 'open', '', '178-autosave-v1', '', '', '2014-08-26 12:46:32', '2014-08-26 17:46:32', '', 178, 'http://dev.dorails.com/railsvitamins/178-autosave-v1/', 0, 'revision', '', 0),
(181, 1, '2014-08-27 05:00:00', '2014-08-27 10:00:00', 'Here\'s a quick trick for how you can direct your custom domain name <code>yourfancyapp.com</code> to your live app on Heroku. This post assumes you actually have already pushed your app live to Heroku. If you haven\'t yet, that\'s okay checkout my post <a title="9 steps for first-time deployment to Heroku" href="http://dev.dorails.com/railsvitamins/9-steps-for-first-time-deployment-to-heroku/" target="_blank">here</a>.\r\n<h3>1. Add domain to Heroku</h3>\r\nFirst open your command-line and go to your local app directory and enter this heroku command:\r\n<pre>$ cd /path/to/your/app/\r\n$ heroku domains\r\n</pre>\r\nThis will show your current domains that work with your live Heroku app. You will likely see <code>random-name.herokuapp.com</code> or <code>your-custom-name.herokuapp.com</code>\r\n\r\nSo to add <code>yourfancyapp.com</code> just enter the following in your command-line:\r\n<pre>$ heroku domains:add yourfancyapp.com\r\n$ heroku domains:add www.yourfancyapp.com\r\n</pre>\r\nIn a nutshell, this command adds your domain as an alias and tells Heroku to listen for that domain name.\r\n<h3>2. Point your domain to Heroku</h3>\r\nThere are lots of domain registrar\'s so I\'m just going to show you how to do this with the most popular one, GoDaddy.com. If you haven\'t already purchased the domain go ahead and go there and do that. Now we need to add a CNAME to our DNS Records that points the domain to heroku. To do this:\r\n<ol>\r\n	<li>Login, then click on <code>My Account</code>.</li>\r\n	<li>Then click on <code>Manage My Domains</code>.</li>\r\n	<li>Find your domain in the list and click on the name.</li>\r\n	<li>Then click on the tab <code>DNS Zone File</code>.</li>\r\n	<li>Click the <code>Add Record</code> button.</li>\r\n	<li>Then select <code>CNAME</code> from the Record type dropdown.</li>\r\n	<li>For Hostname enter <code>@</code></li>\r\n	<li>For Points to enter <code>your-app-name.herokuapp.com</code></li>\r\n	<li>Then click Finish.</li>\r\n	<li>Don\'t forget to click the <code>Save Changes</code> button.</li>\r\n</ol>\r\n<h3>3. Done</h3>\r\nThere is no step 3. You are done. Check your new custom url to make sure that it\'s directing to your Heroku app. Depending on the registrar this could take some time to go through.', '3 steps to direct your custom domain to Heroku', '', 'publish', 'open', 'open', '', '3-steps-to-direct-your-custom-domain-to-heroku', '', '', '2014-08-26 12:54:56', '2014-08-26 17:54:56', '', 0, 'http://dev.dorails.com/?p=181', 0, 'post', '', 0),
(182, 1, '2014-08-26 12:49:07', '2014-08-26 17:49:07', 'Here\'s a quick trick for how you can direct your custom domain name <code>yourfancyapp.com</code> to your live app on Heroku. This post assumes you actually have already pushed your app live to Heroku. If you haven\'t yet, that\'s okay checkout my post <a title="9 steps for first-time deployment to Heroku" href="http://dev.dorails.com/railsvitamins/9-steps-for-first-time-deployment-to-heroku/" target="_blank">here</a>.\r\n\r\n<h3>1. Add domain to Heroku</h3>\r\n\r\nFirst open your command-line and go to your local app directory and enter this heroku command:\r\n<pre>\r\n$ cd /path/to/your/app/\r\n$ heroku domains\r\n</pre>\r\nThis will show your current domains that work with your live Heroku app. You will likely see <code>random-name.herokuapp.com</code> or <code>your-custom-name.herokuapp.com</code> \r\n\r\nSo to add <code>yourfancyapp.com</code> just enter the following in your command-line:\r\n<pre>\r\n$ heroku domains:add yourfancyapp.com\r\n$ heroku domains:add www.yourfancyapp.com\r\n</pre>\r\n\r\nIn a nutshell, this command adds your domain as an alias and tells Heroku to listen for that domain name.\r\n\r\n<h3>2. Point your domain to Heroku</h3>\r\n\r\nThere are lots of domain registrar\'s so I\'m just going to show you how to do this with the most popular one, GoDaddy.com. If you haven\'t already purchased the domain go ahead and go there and do that. \r\n\r\nLogin, then click on <code>My Account</code>.\r\nThen click on <code>Manage My Domains</code>.\r\nFind your domain in the list and click on the name.\r\nThen click on the tab <code>DNS Zone File</code>.\r\nClick the <code>Add Record</code> button.\r\nThen select <code>CNAME</code> from the Record type dropdown.\r\nFor Hostname enter <code>@</code>\r\nFor Points to enter <code>your-app-name.herokuapp.com</code>\r\nThen click Finish.\r\nDon\'t forget to click the <code>Save Changes</code> button.\r\n\r\n<h3>3. Done</h3>\r\nThere is no step 3. You are done. Check your new custom url to make sure that it\'s directing to your Heroku app. Depending on the registrar this could take some time to go through.\r\n\r\n', '3 steps to add your custom domain to Heroku', '', 'inherit', 'open', 'open', '', '181-revision-v1', '', '', '2014-08-26 12:49:07', '2014-08-26 17:49:07', '', 181, 'http://dev.dorails.com/railsvitamins/181-revision-v1/', 0, 'revision', '', 0),
(183, 1, '2014-08-26 12:54:14', '2014-08-26 17:54:14', 'Here\'s a quick trick for how you can direct your custom domain name <code>yourfancyapp.com</code> to your live app on Heroku. This post assumes you actually have already pushed your app live to Heroku. If you haven\'t yet, that\'s okay checkout my post <a title="9 steps for first-time deployment to Heroku" href="http://dev.dorails.com/railsvitamins/9-steps-for-first-time-deployment-to-heroku/" target="_blank">here</a>.\n<h3>1. Add domain to Heroku</h3>\nFirst open your command-line and go to your local app directory and enter this heroku command:\n<pre>$ cd /path/to/your/app/\n$ heroku domains\n</pre>\nThis will show your current domains that work with your live Heroku app. You will likely see <code>random-name.herokuapp.com</code> or <code>your-custom-name.herokuapp.com</code>\n\nSo to add <code>yourfancyapp.com</code> just enter the following in your command-line:\n<pre>$ heroku domains:add yourfancyapp.com\n$ heroku domains:add www.yourfancyapp.com\n</pre>\nIn a nutshell, this command adds your domain as an alias and tells Heroku to listen for that domain name.\n<h3>2. Point your domain to Heroku</h3>\nThere are lots of domain registrar\'s so I\'m just going to show you how to do this with the most popular one, GoDaddy.com. If you haven\'t already purchased the domain go ahead and go there and do that. Now we need to add a CNAME to our DNS Then:\n<ol>\n	<li>Login, then click on <code>My Account</code>.</li>\n	<li>Then click on <code>Manage My Domains</code>.</li>\n	<li>Find your domain in the list and click on the name.</li>\n	<li>Then click on the tab <code>DNS Zone File</code>.</li>\n	<li>Click the <code>Add Record</code> button.</li>\n	<li>Then select <code>CNAME</code> from the Record type dropdown.</li>\n	<li>For Hostname enter <code>@</code></li>\n	<li>For Points to enter <code>your-app-name.herokuapp.com</code></li>\n	<li>Then click Finish.</li>\n	<li>Don\'t forget to click the <code>Save Changes</code> button.</li>\n</ol>\n<h3>3. Done</h3>\nThere is no step 3. You are done. Check your new custom url to make sure that it\'s directing to your Heroku app. Depending on the registrar this could take some time to go through.', '3 steps to direct your custom domain to Heroku', '', 'inherit', 'open', 'open', '', '181-autosave-v1', '', '', '2014-08-26 12:54:14', '2014-08-26 17:54:14', '', 181, 'http://dev.dorails.com/railsvitamins/181-autosave-v1/', 0, 'revision', '', 0),
(184, 1, '2014-08-26 12:50:49', '2014-08-26 17:50:49', 'Here\'s a quick trick for how you can direct your custom domain name <code>yourfancyapp.com</code> to your live app on Heroku. This post assumes you actually have already pushed your app live to Heroku. If you haven\'t yet, that\'s okay checkout my post <a title="9 steps for first-time deployment to Heroku" href="http://dev.dorails.com/railsvitamins/9-steps-for-first-time-deployment-to-heroku/" target="_blank">here</a>.\r\n\r\n<h3>1. Add domain to Heroku</h3>\r\n\r\nFirst open your command-line and go to your local app directory and enter this heroku command:\r\n<pre>\r\n$ cd /path/to/your/app/\r\n$ heroku domains\r\n</pre>\r\nThis will show your current domains that work with your live Heroku app. You will likely see <code>random-name.herokuapp.com</code> or <code>your-custom-name.herokuapp.com</code> \r\n\r\nSo to add <code>yourfancyapp.com</code> just enter the following in your command-line:\r\n<pre>\r\n$ heroku domains:add yourfancyapp.com\r\n$ heroku domains:add www.yourfancyapp.com\r\n</pre>\r\n\r\nIn a nutshell, this command adds your domain as an alias and tells Heroku to listen for that domain name.\r\n\r\n<h3>2. Point your domain to Heroku</h3>\r\n\r\nThere are lots of domain registrar\'s so I\'m just going to show you how to do this with the most popular one, GoDaddy.com. If you haven\'t already purchased the domain go ahead and go there and do that. \r\n\r\nLogin, then click on <code>My Account</code>.\r\nThen click on <code>Manage My Domains</code>.\r\nFind your domain in the list and click on the name.\r\nThen click on the tab <code>DNS Zone File</code>.\r\nClick the <code>Add Record</code> button.\r\nThen select <code>CNAME</code> from the Record type dropdown.\r\nFor Hostname enter <code>@</code>\r\nFor Points to enter <code>your-app-name.herokuapp.com</code>\r\nThen click Finish.\r\nDon\'t forget to click the <code>Save Changes</code> button.\r\n\r\n<h3>3. Done</h3>\r\nThere is no step 3. You are done. Check your new custom url to make sure that it\'s directing to your Heroku app. Depending on the registrar this could take some time to go through.\r\n\r\n', '3 steps to direct your custom domain to Heroku', '', 'inherit', 'open', 'open', '', '181-revision-v1', '', '', '2014-08-26 12:50:49', '2014-08-26 17:50:49', '', 181, 'http://dev.dorails.com/railsvitamins/181-revision-v1/', 0, 'revision', '', 0),
(186, 1, '2014-08-26 12:53:13', '2014-08-26 17:53:13', 'Here\'s a quick trick for how you can direct your custom domain name <code>yourfancyapp.com</code> to your live app on Heroku. This post assumes you actually have already pushed your app live to Heroku. If you haven\'t yet, that\'s okay checkout my post <a title="9 steps for first-time deployment to Heroku" href="http://dev.dorails.com/railsvitamins/9-steps-for-first-time-deployment-to-heroku/" target="_blank">here</a>.\r\n<h3>1. Add domain to Heroku</h3>\r\nFirst open your command-line and go to your local app directory and enter this heroku command:\r\n<pre>$ cd /path/to/your/app/\r\n$ heroku domains\r\n</pre>\r\nThis will show your current domains that work with your live Heroku app. You will likely see <code>random-name.herokuapp.com</code> or <code>your-custom-name.herokuapp.com</code>\r\n\r\nSo to add <code>yourfancyapp.com</code> just enter the following in your command-line:\r\n<pre>$ heroku domains:add yourfancyapp.com\r\n$ heroku domains:add www.yourfancyapp.com\r\n</pre>\r\nIn a nutshell, this command adds your domain as an alias and tells Heroku to listen for that domain name.\r\n<h3>2. Point your domain to Heroku</h3>\r\nThere are lots of domain registrar\'s so I\'m just going to show you how to do this with the most popular one, GoDaddy.com. If you haven\'t already purchased the domain go ahead and go there and do that. Then:\r\n<ol>\r\n	<li>Login, then click on <code>My Account</code>.</li>\r\n	<li>Then click on <code>Manage My Domains</code>.</li>\r\n	<li>Find your domain in the list and click on the name.</li>\r\n	<li>Then click on the tab <code>DNS Zone File</code>.</li>\r\n	<li>Click the <code>Add Record</code> button.</li>\r\n	<li>Then select <code>CNAME</code> from the Record type dropdown.</li>\r\n	<li>For Hostname enter <code>@</code></li>\r\n	<li>For Points to enter <code>your-app-name.herokuapp.com</code></li>\r\n	<li>Then click Finish.</li>\r\n	<li>Don\'t forget to click the <code>Save Changes</code> button.</li>\r\n</ol>\r\n<h3>3. Done</h3>\r\nThere is no step 3. You are done. Check your new custom url to make sure that it\'s directing to your Heroku app. Depending on the registrar this could take some time to go through.', '3 steps to direct your custom domain to Heroku', '', 'inherit', 'open', 'open', '', '181-revision-v1', '', '', '2014-08-26 12:53:13', '2014-08-26 17:53:13', '', 181, 'http://dev.dorails.com/railsvitamins/181-revision-v1/', 0, 'revision', '', 0),
(187, 1, '2014-08-26 12:54:45', '2014-08-26 17:54:45', 'Here\'s a quick trick for how you can direct your custom domain name <code>yourfancyapp.com</code> to your live app on Heroku. This post assumes you actually have already pushed your app live to Heroku. If you haven\'t yet, that\'s okay checkout my post <a title="9 steps for first-time deployment to Heroku" href="http://dev.dorails.com/railsvitamins/9-steps-for-first-time-deployment-to-heroku/" target="_blank">here</a>.\r\n<h3>1. Add domain to Heroku</h3>\r\nFirst open your command-line and go to your local app directory and enter this heroku command:\r\n<pre>$ cd /path/to/your/app/\r\n$ heroku domains\r\n</pre>\r\nThis will show your current domains that work with your live Heroku app. You will likely see <code>random-name.herokuapp.com</code> or <code>your-custom-name.herokuapp.com</code>\r\n\r\nSo to add <code>yourfancyapp.com</code> just enter the following in your command-line:\r\n<pre>$ heroku domains:add yourfancyapp.com\r\n$ heroku domains:add www.yourfancyapp.com\r\n</pre>\r\nIn a nutshell, this command adds your domain as an alias and tells Heroku to listen for that domain name.\r\n<h3>2. Point your domain to Heroku</h3>\r\nThere are lots of domain registrar\'s so I\'m just going to show you how to do this with the most popular one, GoDaddy.com. If you haven\'t already purchased the domain go ahead and go there and do that. Now we need to add a CNAME to our DNS Records that points the domain to heroku. To do this:\r\n<ol>\r\n	<li>Login, then click on <code>My Account</code>.</li>\r\n	<li>Then click on <code>Manage My Domains</code>.</li>\r\n	<li>Find your domain in the list and click on the name.</li>\r\n	<li>Then click on the tab <code>DNS Zone File</code>.</li>\r\n	<li>Click the <code>Add Record</code> button.</li>\r\n	<li>Then select <code>CNAME</code> from the Record type dropdown.</li>\r\n	<li>For Hostname enter <code>@</code></li>\r\n	<li>For Points to enter <code>your-app-name.herokuapp.com</code></li>\r\n	<li>Then click Finish.</li>\r\n	<li>Don\'t forget to click the <code>Save Changes</code> button.</li>\r\n</ol>\r\n<h3>3. Done</h3>\r\nThere is no step 3. You are done. Check your new custom url to make sure that it\'s directing to your Heroku app. Depending on the registrar this could take some time to go through.', '3 steps to direct your custom domain to Heroku', '', 'inherit', 'open', 'open', '', '181-revision-v1', '', '', '2014-08-26 12:54:45', '2014-08-26 17:54:45', '', 181, 'http://dev.dorails.com/railsvitamins/181-revision-v1/', 0, 'revision', '', 0),
(188, 1, '2014-08-29 05:00:33', '2014-08-29 10:00:33', 'Git remotes we\'re confusing to me at first. What are Git remotes? Why do I need them? And how do I use them? It took me awhile to figure this out so I\'m hoping this will get you up to speed and save you from putzing around on your own like I did.\r\n<h3>What is a Git remote?</h3>\r\nA git <em>remote</em> is a remote repository or repo in another location. I feel like they could\'ve just called them <em>remote repos</em> instead. As I\'ve gotten further along with Git I\'ve gathered that a git remote is <strong>any</strong> other repo besides your current local repo that you can push to. At first I thought that a remote would actually <em>control</em> my code like a TV remote control or something. Turns out, it\'s much more practical to think of it as the TV that is being controlled – it\'s more of a <strong>remote</strong> <strong>location</strong> than a tool for controlling.\r\n\r\nFor example: If you have a local Git repo, setting up that repo to push to Github is just a quick everyday example of setting up a <em>remote </em>(or remote repo) for your project.  Github is the <em>remote </em>or remote repo. If you haven\'t done that checkout my tutorials on how to setup <a title="Get going with Git" href="http://dev.dorails.com/railsvitamins/get-going-with-git/">Git</a> &amp; <a title="Hop on the Github bandwagon" href="http://dev.dorails.com/railsvitamins/hop-on-the-github-bandwagon/">Github</a>. Github is nothing more than a fancy collection of remote repos. Heroku is another example. Heroku is a "platform as a service" that does the heavy lifting for configuring a live server. But by pushing to Heroku you are just pushing to another <em>remote</em> (repo).\r\n\r\nThis picture says it best. You\'re local repo pushes out to any remotes that you tell it to. Github, Staging Server, Production Server (like Heroku)\r\n\r\n<a href="http://dev.dorails.com/wp-content/uploads/2014/08/git-remotes.jpg"><img class="aligncenter img-responsive wp-image-196 size-full" src="http://dev.dorails.com/wp-content/uploads/2014/08/git-remotes.jpg" alt="A beginners guide to the what, why &amp; how of Git remotes" width="600" height="663" /></a>\r\n<h3>Why do you need remotes?</h3>\r\nRemotes are what makes the <code>$ git push</code> and  <code>$ git pull</code> commands possible. You\'d have nowhere to push without setting up remotes. Remotes have a lot of different purposes so I\'ll tell you why I need them. I need to setup my local Git repos to have multiple remotes so that I can push my source code to a unified place (like Github). This helps me access my code from anywhere and lets me collaborate more easily. I also need remotes setup so I can easily push to development servers for collaborating. I need to push code to staging sites to show clients work once it\'s ready to show off. And lastly I use remotes to easily push code changes to live websites and apps. This way you don\'t have to deal with the many perils of FTP, overwriting files, and *yikes* making changes on a live server. I just type $ git push heroku and my changes are live in a few seconds – no thinking required.\r\n<h3>How do you use remotes?</h3>\r\nIt\'s tricky at first, but once you see how it works it\'s easy. I\'m going to show you a kind of backwards way of doing remotes so you can get an idea of the ins-and-outs. You may have done a few of these things before, but I want to challenge you to try this a different way so you can think about it differently. If you haven\'t setup Git and setup a local repo on a project go ahead and <a title="Get going with Git" href="http://dev.dorails.com/railsvitamins/get-going-with-git/">do that now</a>. I\'ll wait :)\r\n<h4>Attempt to Push</h4>\r\nLet\'s start with the goal. We have a project that we want to push to a remote repo. Now once you have a new project folder with a git repo on it open up command-line, <code>cd</code> (change directory) into your project, add a new file (anything) and then try to push the changes:\r\n<pre>$ cd ~/Desktop\r\n$ mkdir new_project\r\n$ cd new_project\r\n$ cd git init  # create new git repo\r\n$ touch fancyfile.rb  # create any file\r\n$ git add .\r\n$ git commit -am "Created a fancy file"\r\n$ git push \r\n</pre>\r\nWell, you tried and you can\'t push! You\'ll notice that command line is yelling at you now. It probably says something like:\r\n<pre>fatal: No configured push destination.</pre>\r\nAnd git is nice enough to give you some instructions on what to do. Which we will ignore for now :). The reason you can\'t push is because you don\'t have a remote (repo) setup to push to.\r\n<h4>View your remotes</h4>\r\nTo see a list of all of your remotes enter this command:\r\n<pre>$ git remote -v</pre>\r\nThis shows you the remote repos that you can push to. A grand total of <strong>none</strong>. You should see no response in command-line as if you\'ve done nothing. That\'s okay we already knew that we don\'t have a remote yet.\r\n<h4>Adding a remote</h4>\r\nSo how do we add a remote? The quickest, easiest way to add a remote is with Github. Like a said earlier, a Github repo is just a <em>remote</em> repo. To add a remote you will go into command-line and enter\r\n<pre>$ git remote add origin https://github.com/UserName/repo_name.git</pre>\r\nYou probably don\'t know your Github URL yet because you haven\'t set it up on Github, that means you will need to setup an empty repo on Github.\r\n<h4>Setup remote repo</h4>\r\nSo to setup the remote, signup for Github if you haven\'t already. If you need help starting with Github, go <a title="Hop on the Github bandwagon" href="http://dev.dorails.com/railsvitamins/hop-on-the-github-bandwagon/">here</a>. But assuming you have a Github account already, log in and do this:\r\n<ol>\r\n	<li>Click on the <code>+</code> sign dropdown in the top right, then click <code>New Repository</code></li>\r\n	<li>On the next page, enter <code>fancy_name</code> for your repo name, select <code>Public</code>, then click <code>Create Repo</code>. (You don\'t have to have description)</li>\r\n	<li>Believe it or not your remote repo (Github repo) has been created it\'s just empty</li>\r\n</ol>\r\n<h4>Add Remote (for real this time)</h4>\r\nSo we\'ve got our remote repo ready, we just need to push our project to it. So back in the command-line you can now add the remote like we tried above:\r\n<pre>$ git remote add origin https://github.com/UserName/repo_name.git</pre>\r\nIt\'s good to know that the <code>origin</code> is interchangeable with any title. This is the title of your remote. I\'ve used titles like "live", "stage", and "dev". But it doesn\'t really matter so long as it makes sense. Origin is a nice term for Github though because it is supposed to be your authoritative source code.\r\n<h4>Try pushing again</h4>\r\nOkay so our remote repo url has been added to our local repo! Woohoo. So you should just be able to push right to it now, right?\r\n<pre>$ git push</pre>\r\nWrong. Ugh.. If you entered this command you probably saw the message saying that the current branch has no upstream. What the heck is an upstream and why do I need to define one? Well, basically it defines the default remote (repo) and branch that you will be pushing to when you enter <code>$ git push</code>. This makes more sense once you start pushing to multiple remotes: dev repos, staging repos, live repos (like Heroku). You say "push" and Git asks "Which repo and which branch in that repo do you want to push to?".\r\n<h4>Set Default Remote</h4>\r\nSo go ahead and define exactly where you want your default push command to go by entering\r\n<pre>git push --set-upstream origin master</pre>\r\nThis is telling Git to set the default push destination to be your "origin" remote (your new github repo) and specifies that it should be pushed to the master branch of that repo. More on branches later. This sets the default and pushes your changes back to back. All changes from now on can be added, committed and then you just run <code>$ git push</code>.\r\n\r\nTo give you an idea though, you can set remote titles to push to different remotes once you know how it works. If it we\'re a staging site with a remote repo you might specify by doing <code>$ git push staging master </code>, and for pushing live <code>$ git push live master</code>, etc, etc.\r\n\r\nAnother way around the upstream thing would be to just not define a default remote &amp; branch and specify <strong>every</strong> single time you push like so, <code>$ git push origin my_branch</code>. But thats no fun. Less is more.\r\n<h4>Okay okay okay can I push <strong>now</strong>?</h4>\r\nAlas, push that fantastic code over to your new remote now. Make another quick change and make sure it works.\r\n<pre>$ git add .\r\n$ git commit -am "More Changes"\r\n$ git push \r\n</pre>\r\n<h3>Bam!</h3>\r\nSo the basic steps for setting up Remotes are to:\r\n<ol>\r\n	<li>Setup local Git repo</li>\r\n	<li>Setup remote Git repo (this is the hard part)</li>\r\n	<li>Add remote to local Git repo</li>\r\n	<li>Push to your changes to your remote repo</li>\r\n</ol>\r\nI know this was a backasswards way of showing you remotes and you\'ve likely setup a Github repo before. But this shows you how it really works and how you can define as many remotes per project that you see fit.\r\n\r\nI love using tools like Git with Rails. But I\'ve even used this understanding of remotes to add repos on my Digital Ocean servers for Wordpress sites to Railsify my WP workflow as well.\r\n\r\nLet me know if you have any questions about remotes, there are a lot of different things you can do with them.', 'A beginners guide to the what, why & how of Git remotes', '', 'publish', 'open', 'open', '', 'a-beginners-guide-to-the-what-why-how-of-git-remotes', '', '', '2014-08-26 16:23:59', '2014-08-26 21:23:59', '', 0, 'http://dev.dorails.com/?p=188', 0, 'post', '', 0),
(189, 1, '2014-08-26 14:10:09', '2014-08-26 19:10:09', 'Git remotes we\'re confusing to me at first. What are Git remotes? Why do I need them? And how do I use them? It took me awhile to figure this out so I\'m hoping this will get you up to speed and save you some time putzing around on your own.\r\n<h3>What is a Git remote?</h3>\r\nA git <em>remote</em> is a remote repository or repo in another location. I feel like they could\'ve just called them <em>remote repos</em> instead. As I\'ve gotten further along with Git I\'ve gathered that a git remote is <strong>any</strong> other repo besides your current local repo that you can push to. At first I thought that a remote would actually <em>control</em> my code like a TV remote control or something. Turns out, it\'s much more practical to think of it as the TV that is being controlled – it\'s more of a remote location than a tool for controlling.\r\n\r\nFor example: If you have a local Git repo, setting up that repo to push to Github is just a quick everyday example of setting up a <em>remote </em>(or remote repo) for your project.  Github is the <em>remote </em>or remote repo. If you haven\'t done that checkout my tutorials on how to setup <a title="Get going with Git" href="http://dev.dorails.com/railsvitamins/get-going-with-git/">Git</a> &amp; <a title="Hop on the Github bandwagon" href="http://dev.dorails.com/railsvitamins/hop-on-the-github-bandwagon/">Github</a>. Github is nothing more than a fancy collection of remote repos. Heroku is another example. Heroku is a "platform as a service" that does the heavy lifting for configuring a live server. But pushing to Heroku is just pushing to another <em>remote</em> (repo).\r\n\r\nThis picture says it best. You\'re local repo pushes out to any remotes that you tell it to. Github, Staging Server, Production Server (like Heroku)\r\n\r\n(Photo of local repo fanning out to github, heroku, other servers)\r\n<h3>Why do you need remotes?</h3>\r\nRemotes are what makes the <code>$ git push</code> command work. You\'d have nowhere to push without setting up remotes. Remotes have a lot of different purposes so I\'ll tell you why I need them. I need to setup my local Git repos to have multiple remotes so that I can push my source code to a unified place (like Github). This helps me access my code from anywhere and lets me collaborate more easily. I also need remotes setup so I can easily push to development servers for collaborating. I need to push code to staging sites to show clients work once it\'s ready to show off. And lastly I use remotes to easily push code changes to live websites and apps. This way you don\'t have to deal with the many perils of FTP, overwriting files, and *yikes* making changes on a live server. I just type $ git push heroku and my changes are live in a few seconds – no thinking required.\r\n<h3>How do you use remotes?</h3>\r\nIt\'s tricky at first, but once you see how it\'s done it\'s easy. You may have done a few of these things before, but I want to challenge you to think about it differently. For those that learn best by doing, start <a title="Get going with Git" href="http://dev.dorails.com/railsvitamins/get-going-with-git/">here</a>. If you haven\'t setup Git and setup a local repo on a project go ahead and <a title="Get going with Git" href="http://dev.dorails.com/railsvitamins/get-going-with-git/">do that now</a>. I\'ll wait :)\r\n<h4>Viewing your remotes</h4>\r\nNow once you have a project with a git repo on it open up command-line, <code>cd</code> (change directory) into your project and type the following command:\r\n<pre>$ cd /path/to/project/\r\n$ cd git init # if you haven\'t already\r\n(make any change)\r\n$ cd add .\r\n$ cd commit .\r\n\r\n$ git remote -v\r\n</pre>\r\nYou will likely see nothing, because you haven\'t setup any remotes yet.\r\nThe quickest, easiest way to add a remote is with Github\r\n<h4>Adding a remote</h4>\r\nLike a said earlier, a Github repo is just a <em>remote</em> repo. So to setup the remote, signup for Github if you haven\'t already. If you need help with starting Github, go <a title="Hop on the Github bandwagon" href="http://dev.dorails.com/railsvitamins/hop-on-the-github-bandwagon/">here</a>. But assuming you have a Github account already, log in and do this:\r\n<ol>\r\n	<li>Click on the <code>+</code> sign dropdown in the top right, then click <code>New Repository</code></li>\r\n	<li>On the next page, enter <code>fancy_name</code> for your repo name, select <code>Public</code>, then click <code>Create Repo</code>. (You don\'t have to have description)</li>\r\n	<li>Believe it or not your remote repo (Github repo) has been created it\'s just empty</li>\r\n</ol>', 'A beginners guide to the what, why & how of Git remotes', '', 'inherit', 'open', 'open', '', '188-revision-v1', '', '', '2014-08-26 14:10:09', '2014-08-26 19:10:09', '', 188, 'http://dev.dorails.com/railsvitamins/188-revision-v1/', 0, 'revision', '', 0) ;
INSERT INTO `wp_posts` ( `ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(190, 1, '2014-08-26 15:14:03', '2014-08-26 20:14:03', 'Git remotes we\'re confusing to me at first. What are Git remotes? Why do I need them? And how do I use them? It took me awhile to figure this out so I\'m hoping this will get you up to speed and save you some time putzing around on your own.\r\n<h3>What is a Git remote?</h3>\r\nA git <em>remote</em> is a remote repository or repo in another location. I feel like they could\'ve just called them <em>remote repos</em> instead. As I\'ve gotten further along with Git I\'ve gathered that a git remote is <strong>any</strong> other repo besides your current local repo that you can push to. At first I thought that a remote would actually <em>control</em> my code like a TV remote control or something. Turns out, it\'s much more practical to think of it as the TV that is being controlled – it\'s more of a remote location than a tool for controlling.\r\n\r\nFor example: If you have a local Git repo, setting up that repo to push to Github is just a quick everyday example of setting up a <em>remote </em>(or remote repo) for your project.  Github is the <em>remote </em>or remote repo. If you haven\'t done that checkout my tutorials on how to setup <a title="Get going with Git" href="http://dev.dorails.com/railsvitamins/get-going-with-git/">Git</a> &amp; <a title="Hop on the Github bandwagon" href="http://dev.dorails.com/railsvitamins/hop-on-the-github-bandwagon/">Github</a>. Github is nothing more than a fancy collection of remote repos. Heroku is another example. Heroku is a "platform as a service" that does the heavy lifting for configuring a live server. But pushing to Heroku is just pushing to another <em>remote</em> (repo).\r\n\r\nThis picture says it best. You\'re local repo pushes out to any remotes that you tell it to. Github, Staging Server, Production Server (like Heroku)\r\n\r\n(Photo of local repo fanning out to github, heroku, other servers)\r\n<h3>Why do you need remotes?</h3>\r\nRemotes are what makes the <code>$ git push</code> command work. You\'d have nowhere to push without setting up remotes. Remotes have a lot of different purposes so I\'ll tell you why I need them. I need to setup my local Git repos to have multiple remotes so that I can push my source code to a unified place (like Github). This helps me access my code from anywhere and lets me collaborate more easily. I also need remotes setup so I can easily push to development servers for collaborating. I need to push code to staging sites to show clients work once it\'s ready to show off. And lastly I use remotes to easily push code changes to live websites and apps. This way you don\'t have to deal with the many perils of FTP, overwriting files, and *yikes* making changes on a live server. I just type $ git push heroku and my changes are live in a few seconds – no thinking required.\r\n<h3>How do you use remotes?</h3>\r\nIt\'s tricky at first, but once you see how it works it\'s easy. I\'m going to show you a kind of backwards way of doing remotes so you can get an idea of the ins-and-outs. You may have done a few of these things before, but I want to challenge you to try this and try to so you can think about it differently. If you haven\'t setup Git and setup a local repo on a project go ahead and <a title="Get going with Git" href="http://dev.dorails.com/railsvitamins/get-going-with-git/">do that now</a>. I\'ll wait :)\r\n<h4>Attempt to Push</h4>\r\nNow once you have a project with a git repo on it open up command-line, <code>cd</code> (change directory) into your project, add a new file (anything) and then try to push the changes:\r\n<pre>$ cd /path/to/project/\r\n$ cd git init # if you haven\'t already\r\n$ touch fancyfile.rb # create any file\r\n$ git add .\r\n$ git commit -am "Created a fancy file"\r\n$ git push \r\n</pre>\r\nWell, you tried and you can\'t push! You\'ll notice that command line is yelling at you now. It probably says something like:\r\n<pre>fatal: No configured push destination.</pre>\r\nAnd git is nice enough to give you some instructions on what to do. Which we will ignore for now :). The reason you can\'t push is because you don\'t have a remote (repo) setup to push to.\r\n<h4>View your remotes</h4>\r\nTo see a list of all of your remotes enter this command:\r\n<pre>$ git remote -v</pre>\r\nThis shows you the remote repos that you can push to. A ground total of none. You should see no response in command-line as if you\'ve done nothing. That\'s okay we already knew that.\r\n<h4>Adding a remote</h4>\r\nSo how do we add a remote? The quickest, easiest way to add a remote is with Github\r\nLike a said earlier, a Github repo is just a <em>remote</em> repo. To add a remote you will go into command-line and enter\r\n<pre>$ git remote add origin https://github.com/UserName/repo_name.git</pre>\r\nYou probably don\'t know your Github URL yet because you haven\'t set it up on Github, that means you will need to setup an empty repo on Github.\r\n<h4>Setup remote repo</h4>\r\nSo to setup the remote, signup for Github if you haven\'t already. If you need help with starting Github, go <a title="Hop on the Github bandwagon" href="http://dev.dorails.com/railsvitamins/hop-on-the-github-bandwagon/">here</a>. But assuming you have a Github account already, log in and do this:\r\n<ol>\r\n	<li>Click on the <code>+</code> sign dropdown in the top right, then click <code>New Repository</code></li>\r\n	<li>On the next page, enter <code>fancy_name</code> for your repo name, select <code>Public</code>, then click <code>Create Repo</code>. (You don\'t have to have description)</li>\r\n	<li>Believe it or not your remote repo (Github repo) has been created it\'s just empty</li>\r\n</ol>\r\nNow you can add the remote like we tried above:\r\n<pre>$ git remote add origin https://github.com/UserName/repo_name.git</pre>\r\nIt\'s good to know that the <code>origin</code> is interchangeable with any title. This is the title of your remote. I\'ve used titles like "live", "stage", and "dev". But it doesn\'t really matter so long as it makes sense. Origin is a nice term for Github though because it is supposed to be your authoritative source code.\r\n<h4>Try pushing again</h4>\r\nOkay so our remote repo url has been added to our local repo! Woohoo. So should just be able to push right to it now, right?\r\n<pre>$ git push</pre>\r\nWrong. Ugh.. If you entered this command you probably saw the message saying that the current branch has no upstream. What the heck is an upstream and why do I need to define one? Well, basically it defines the default remote (repo) and branch that you will be pushing to when you enter <code>$ git push</code>. This makes more sense once you start pushing to multiple remotes: dev repos, staging repos, live repos (like Heroku). You say "push" and Git asks "Which repo and which branch in that repo do you want to push to?".\r\n<h4>Set Default Remote</h4>\r\nSo go ahead and define exactly where you want your default push command to go by entering\r\n<pre>git push --set-upstream origin master</pre>\r\nThis is telling Git to set the default push destination to be your "origin" remote (your new github repo) and specifies that it should be pushed to the master branch of that repo. More on branches later. This sets the default and pushes your changes back to back. All changes from now on can be added, committed and then you just run <code>$ git push</code>. If it we\'re a staging site with a remote repo you could specify by doing <code>$ git push staging master </code>, and for pushing live <code>$ git push live master</code>, etc.\r\n\r\nAnother way around the upstream thing would be to just not define a default remote &amp; branch and specify <strong>every</strong> single time you push like so, <code>$ git push origin my_branch</code>. But thats no fun. Less is more.\r\n<h4>Okay okay okay can I push <strong>now</strong>?</h4>\r\nAlas, push that fantastic code over to your new remote now. Make another quick change and make sure it works.\r\n<pre>$ git add .\r\n$ git commit -am "More Changes"\r\n$ git push \r\n</pre>\r\nBam! I know this was a backasswards way of showing you remotes and you\'ve likely setup a Github repo before. It\'s more like error driven development. But this shows you how it really works and how you can define as many remotes per project that you see fit.', 'A beginners guide to the what, why & how of Git remotes', '', 'inherit', 'open', 'open', '', '188-revision-v1', '', '', '2014-08-26 15:14:03', '2014-08-26 20:14:03', '', 188, 'http://dev.dorails.com/railsvitamins/188-revision-v1/', 0, 'revision', '', 0),
(191, 1, '2014-08-26 15:15:06', '2014-08-26 20:15:06', 'Git remotes we\'re confusing to me at first. What are Git remotes? Why do I need them? And how do I use them? It took me awhile to figure this out so I\'m hoping this will get you up to speed and save you from putzing around on your own like I did.\r\n<h3>What is a Git remote?</h3>\r\nA git <em>remote</em> is a remote repository or repo in another location. I feel like they could\'ve just called them <em>remote repos</em> instead. As I\'ve gotten further along with Git I\'ve gathered that a git remote is <strong>any</strong> other repo besides your current local repo that you can push to. At first I thought that a remote would actually <em>control</em> my code like a TV remote control or something. Turns out, it\'s much more practical to think of it as the TV that is being controlled – it\'s more of a remote location than a tool for controlling.\r\n\r\nFor example: If you have a local Git repo, setting up that repo to push to Github is just a quick everyday example of setting up a <em>remote </em>(or remote repo) for your project.  Github is the <em>remote </em>or remote repo. If you haven\'t done that checkout my tutorials on how to setup <a title="Get going with Git" href="http://dev.dorails.com/railsvitamins/get-going-with-git/">Git</a> &amp; <a title="Hop on the Github bandwagon" href="http://dev.dorails.com/railsvitamins/hop-on-the-github-bandwagon/">Github</a>. Github is nothing more than a fancy collection of remote repos. Heroku is another example. Heroku is a "platform as a service" that does the heavy lifting for configuring a live server. But pushing to Heroku is just pushing to another <em>remote</em> (repo).\r\n\r\nThis picture says it best. You\'re local repo pushes out to any remotes that you tell it to. Github, Staging Server, Production Server (like Heroku)\r\n\r\n(Photo of local repo fanning out to github, heroku, other servers)\r\n<h3>Why do you need remotes?</h3>\r\nRemotes are what makes the <code>$ git push</code> command work. You\'d have nowhere to push without setting up remotes. Remotes have a lot of different purposes so I\'ll tell you why I need them. I need to setup my local Git repos to have multiple remotes so that I can push my source code to a unified place (like Github). This helps me access my code from anywhere and lets me collaborate more easily. I also need remotes setup so I can easily push to development servers for collaborating. I need to push code to staging sites to show clients work once it\'s ready to show off. And lastly I use remotes to easily push code changes to live websites and apps. This way you don\'t have to deal with the many perils of FTP, overwriting files, and *yikes* making changes on a live server. I just type $ git push heroku and my changes are live in a few seconds – no thinking required.\r\n<h3>How do you use remotes?</h3>\r\nIt\'s tricky at first, but once you see how it works it\'s easy. I\'m going to show you a kind of backwards way of doing remotes so you can get an idea of the ins-and-outs. You may have done a few of these things before, but I want to challenge you to try this and try to so you can think about it differently. If you haven\'t setup Git and setup a local repo on a project go ahead and <a title="Get going with Git" href="http://dev.dorails.com/railsvitamins/get-going-with-git/">do that now</a>. I\'ll wait :)\r\n<h4>Attempt to Push</h4>\r\nNow once you have a project with a git repo on it open up command-line, <code>cd</code> (change directory) into your project, add a new file (anything) and then try to push the changes:\r\n<pre>$ cd /path/to/project/\r\n$ cd git init # if you haven\'t already\r\n$ touch fancyfile.rb # create any file\r\n$ git add .\r\n$ git commit -am "Created a fancy file"\r\n$ git push \r\n</pre>\r\nWell, you tried and you can\'t push! You\'ll notice that command line is yelling at you now. It probably says something like:\r\n<pre>fatal: No configured push destination.</pre>\r\nAnd git is nice enough to give you some instructions on what to do. Which we will ignore for now :). The reason you can\'t push is because you don\'t have a remote (repo) setup to push to.\r\n<h4>View your remotes</h4>\r\nTo see a list of all of your remotes enter this command:\r\n<pre>$ git remote -v</pre>\r\nThis shows you the remote repos that you can push to. A ground total of none. You should see no response in command-line as if you\'ve done nothing. That\'s okay we already knew that.\r\n<h4>Adding a remote</h4>\r\nSo how do we add a remote? The quickest, easiest way to add a remote is with Github\r\nLike a said earlier, a Github repo is just a <em>remote</em> repo. To add a remote you will go into command-line and enter\r\n<pre>$ git remote add origin https://github.com/UserName/repo_name.git</pre>\r\nYou probably don\'t know your Github URL yet because you haven\'t set it up on Github, that means you will need to setup an empty repo on Github.\r\n<h4>Setup remote repo</h4>\r\nSo to setup the remote, signup for Github if you haven\'t already. If you need help with starting Github, go <a title="Hop on the Github bandwagon" href="http://dev.dorails.com/railsvitamins/hop-on-the-github-bandwagon/">here</a>. But assuming you have a Github account already, log in and do this:\r\n<ol>\r\n	<li>Click on the <code>+</code> sign dropdown in the top right, then click <code>New Repository</code></li>\r\n	<li>On the next page, enter <code>fancy_name</code> for your repo name, select <code>Public</code>, then click <code>Create Repo</code>. (You don\'t have to have description)</li>\r\n	<li>Believe it or not your remote repo (Github repo) has been created it\'s just empty</li>\r\n</ol>\r\nNow you can add the remote like we tried above:\r\n<pre>$ git remote add origin https://github.com/UserName/repo_name.git</pre>\r\nIt\'s good to know that the <code>origin</code> is interchangeable with any title. This is the title of your remote. I\'ve used titles like "live", "stage", and "dev". But it doesn\'t really matter so long as it makes sense. Origin is a nice term for Github though because it is supposed to be your authoritative source code.\r\n<h4>Try pushing again</h4>\r\nOkay so our remote repo url has been added to our local repo! Woohoo. So should just be able to push right to it now, right?\r\n<pre>$ git push</pre>\r\nWrong. Ugh.. If you entered this command you probably saw the message saying that the current branch has no upstream. What the heck is an upstream and why do I need to define one? Well, basically it defines the default remote (repo) and branch that you will be pushing to when you enter <code>$ git push</code>. This makes more sense once you start pushing to multiple remotes: dev repos, staging repos, live repos (like Heroku). You say "push" and Git asks "Which repo and which branch in that repo do you want to push to?".\r\n<h4>Set Default Remote</h4>\r\nSo go ahead and define exactly where you want your default push command to go by entering\r\n<pre>git push --set-upstream origin master</pre>\r\nThis is telling Git to set the default push destination to be your "origin" remote (your new github repo) and specifies that it should be pushed to the master branch of that repo. More on branches later. This sets the default and pushes your changes back to back. All changes from now on can be added, committed and then you just run <code>$ git push</code>. If it we\'re a staging site with a remote repo you could specify by doing <code>$ git push staging master </code>, and for pushing live <code>$ git push live master</code>, etc.\r\n\r\nAnother way around the upstream thing would be to just not define a default remote &amp; branch and specify <strong>every</strong> single time you push like so, <code>$ git push origin my_branch</code>. But thats no fun. Less is more.\r\n<h4>Okay okay okay can I push <strong>now</strong>?</h4>\r\nAlas, push that fantastic code over to your new remote now. Make another quick change and make sure it works.\r\n<pre>$ git add .\r\n$ git commit -am "More Changes"\r\n$ git push \r\n</pre>\r\nBam! I know this was a backasswards way of showing you remotes and you\'ve likely setup a Github repo before. It\'s more like error driven development. But this shows you how it really works and how you can define as many remotes per project that you see fit.', 'A beginners guide to the what, why & how of Git remotes', '', 'inherit', 'open', 'open', '', '188-revision-v1', '', '', '2014-08-26 15:15:06', '2014-08-26 20:15:06', '', 188, 'http://dev.dorails.com/railsvitamins/188-revision-v1/', 0, 'revision', '', 0),
(192, 1, '2014-08-26 15:16:32', '2014-08-26 20:16:32', 'Git remotes we\'re confusing to me at first. What are Git remotes? Why do I need them? And how do I use them? It took me awhile to figure this out so I\'m hoping this will get you up to speed and save you from putzing around on your own like I did.\r\n<h3>What is a Git remote?</h3>\r\nA git <em>remote</em> is a remote repository or repo in another location. I feel like they could\'ve just called them <em>remote repos</em> instead. As I\'ve gotten further along with Git I\'ve gathered that a git remote is <strong>any</strong> other repo besides your current local repo that you can push to. At first I thought that a remote would actually <em>control</em> my code like a TV remote control or something. Turns out, it\'s much more practical to think of it as the TV that is being controlled – it\'s more of a remote <strong>location</strong> than a tool for controlling.\r\n\r\nFor example: If you have a local Git repo, setting up that repo to push to Github is just a quick everyday example of setting up a <em>remote </em>(or remote repo) for your project.  Github is the <em>remote </em>or remote repo. If you haven\'t done that checkout my tutorials on how to setup <a title="Get going with Git" href="http://dev.dorails.com/railsvitamins/get-going-with-git/">Git</a> &amp; <a title="Hop on the Github bandwagon" href="http://dev.dorails.com/railsvitamins/hop-on-the-github-bandwagon/">Github</a>. Github is nothing more than a fancy collection of remote repos. Heroku is another example. Heroku is a "platform as a service" that does the heavy lifting for configuring a live server. But pushing to Heroku is just pushing to another <em>remote</em> (repo).\r\n\r\nThis picture says it best. You\'re local repo pushes out to any remotes that you tell it to. Github, Staging Server, Production Server (like Heroku)\r\n\r\n(Photo of local repo fanning out to github, heroku, other servers)\r\n<h3>Why do you need remotes?</h3>\r\nRemotes are what makes the <code>$ git push</code> command work. You\'d have nowhere to push without setting up remotes. Remotes have a lot of different purposes so I\'ll tell you why I need them. I need to setup my local Git repos to have multiple remotes so that I can push my source code to a unified place (like Github). This helps me access my code from anywhere and lets me collaborate more easily. I also need remotes setup so I can easily push to development servers for collaborating. I need to push code to staging sites to show clients work once it\'s ready to show off. And lastly I use remotes to easily push code changes to live websites and apps. This way you don\'t have to deal with the many perils of FTP, overwriting files, and *yikes* making changes on a live server. I just type $ git push heroku and my changes are live in a few seconds – no thinking required.\r\n<h3>How do you use remotes?</h3>\r\nIt\'s tricky at first, but once you see how it works it\'s easy. I\'m going to show you a kind of backwards way of doing remotes so you can get an idea of the ins-and-outs. You may have done a few of these things before, but I want to challenge you to try this and try to so you can think about it differently. If you haven\'t setup Git and setup a local repo on a project go ahead and <a title="Get going with Git" href="http://dev.dorails.com/railsvitamins/get-going-with-git/">do that now</a>. I\'ll wait :)\r\n<h4>Attempt to Push</h4>\r\nNow once you have a project with a git repo on it open up command-line, <code>cd</code> (change directory) into your project, add a new file (anything) and then try to push the changes:\r\n<pre>$ cd /path/to/project/\r\n$ cd git init # if you haven\'t already\r\n$ touch fancyfile.rb # create any file\r\n$ git add .\r\n$ git commit -am "Created a fancy file"\r\n$ git push \r\n</pre>\r\nWell, you tried and you can\'t push! You\'ll notice that command line is yelling at you now. It probably says something like:\r\n<pre>fatal: No configured push destination.</pre>\r\nAnd git is nice enough to give you some instructions on what to do. Which we will ignore for now :). The reason you can\'t push is because you don\'t have a remote (repo) setup to push to.\r\n<h4>View your remotes</h4>\r\nTo see a list of all of your remotes enter this command:\r\n<pre>$ git remote -v</pre>\r\nThis shows you the remote repos that you can push to. A ground total of none. You should see no response in command-line as if you\'ve done nothing. That\'s okay we already knew that.\r\n<h4>Adding a remote</h4>\r\nSo how do we add a remote? The quickest, easiest way to add a remote is with Github\r\nLike a said earlier, a Github repo is just a <em>remote</em> repo. To add a remote you will go into command-line and enter\r\n<pre>$ git remote add origin https://github.com/UserName/repo_name.git</pre>\r\nYou probably don\'t know your Github URL yet because you haven\'t set it up on Github, that means you will need to setup an empty repo on Github.\r\n<h4>Setup remote repo</h4>\r\nSo to setup the remote, signup for Github if you haven\'t already. If you need help with starting Github, go <a title="Hop on the Github bandwagon" href="http://dev.dorails.com/railsvitamins/hop-on-the-github-bandwagon/">here</a>. But assuming you have a Github account already, log in and do this:\r\n<ol>\r\n	<li>Click on the <code>+</code> sign dropdown in the top right, then click <code>New Repository</code></li>\r\n	<li>On the next page, enter <code>fancy_name</code> for your repo name, select <code>Public</code>, then click <code>Create Repo</code>. (You don\'t have to have description)</li>\r\n	<li>Believe it or not your remote repo (Github repo) has been created it\'s just empty</li>\r\n</ol>\r\nNow you can add the remote like we tried above:\r\n<pre>$ git remote add origin https://github.com/UserName/repo_name.git</pre>\r\nIt\'s good to know that the <code>origin</code> is interchangeable with any title. This is the title of your remote. I\'ve used titles like "live", "stage", and "dev". But it doesn\'t really matter so long as it makes sense. Origin is a nice term for Github though because it is supposed to be your authoritative source code.\r\n<h4>Try pushing again</h4>\r\nOkay so our remote repo url has been added to our local repo! Woohoo. So should just be able to push right to it now, right?\r\n<pre>$ git push</pre>\r\nWrong. Ugh.. If you entered this command you probably saw the message saying that the current branch has no upstream. What the heck is an upstream and why do I need to define one? Well, basically it defines the default remote (repo) and branch that you will be pushing to when you enter <code>$ git push</code>. This makes more sense once you start pushing to multiple remotes: dev repos, staging repos, live repos (like Heroku). You say "push" and Git asks "Which repo and which branch in that repo do you want to push to?".\r\n<h4>Set Default Remote</h4>\r\nSo go ahead and define exactly where you want your default push command to go by entering\r\n<pre>git push --set-upstream origin master</pre>\r\nThis is telling Git to set the default push destination to be your "origin" remote (your new github repo) and specifies that it should be pushed to the master branch of that repo. More on branches later. This sets the default and pushes your changes back to back. All changes from now on can be added, committed and then you just run <code>$ git push</code>. If it we\'re a staging site with a remote repo you could specify by doing <code>$ git push staging master </code>, and for pushing live <code>$ git push live master</code>, etc.\r\n\r\nAnother way around the upstream thing would be to just not define a default remote &amp; branch and specify <strong>every</strong> single time you push like so, <code>$ git push origin my_branch</code>. But thats no fun. Less is more.\r\n<h4>Okay okay okay can I push <strong>now</strong>?</h4>\r\nAlas, push that fantastic code over to your new remote now. Make another quick change and make sure it works.\r\n<pre>$ git add .\r\n$ git commit -am "More Changes"\r\n$ git push \r\n</pre>\r\nBam! I know this was a backasswards way of showing you remotes and you\'ve likely setup a Github repo before. It\'s more like error driven development. But this shows you how it really works and how you can define as many remotes per project that you see fit.', 'A beginners guide to the what, why & how of Git remotes', '', 'inherit', 'open', 'open', '', '188-revision-v1', '', '', '2014-08-26 15:16:32', '2014-08-26 20:16:32', '', 188, 'http://dev.dorails.com/railsvitamins/188-revision-v1/', 0, 'revision', '', 0),
(193, 1, '2014-08-26 16:19:18', '2014-08-26 21:19:18', 'Git remotes we\'re confusing to me at first. What are Git remotes? Why do I need them? And how do I use them? It took me awhile to figure this out so I\'m hoping this will get you up to speed and save you from putzing around on your own like I did.\n<h3>What is a Git remote?</h3>\nA git <em>remote</em> is a remote repository or repo in another location. I feel like they could\'ve just called them <em>remote repos</em> instead. As I\'ve gotten further along with Git I\'ve gathered that a git remote is <strong>any</strong> other repo besides your current local repo that you can push to. At first I thought that a remote would actually <em>control</em> my code like a TV remote control or something. Turns out, it\'s much more practical to think of it as the TV that is being controlled – it\'s more of a <strong>remote</strong> <strong>location</strong> than a tool for controlling.\n\nFor example: If you have a local Git repo, setting up that repo to push to Github is just a quick everyday example of setting up a <em>remote </em>(or remote repo) for your project.  Github is the <em>remote </em>or remote repo. If you haven\'t done that checkout my tutorials on how to setup <a title="Get going with Git" href="http://dev.dorails.com/railsvitamins/get-going-with-git/">Git</a> &amp; <a title="Hop on the Github bandwagon" href="http://dev.dorails.com/railsvitamins/hop-on-the-github-bandwagon/">Github</a>. Github is nothing more than a fancy collection of remote repos. Heroku is another example. Heroku is a "platform as a service" that does the heavy lifting for configuring a live server. But by pushing to Heroku you are just pushing to another <em>remote</em> (repo).\n\nThis picture says it best. You\'re local repo pushes out to any remotes that you tell it to. Github, Staging Server, Production Server (like Heroku)\n\n<a href="http://dev.dorails.com/wp-content/uploads/2014/08/git-remotes.jpg"><img class="aligncenter img-responsive wp-image-196 size-full" src="http://dev.dorails.com/wp-content/uploads/2014/08/git-remotes.jpg" alt="A beginners guide to the what, why &amp; how of Git remotes" width="600" height="663" /></a>\n<h3>Why do you need remotes?</h3>\nRemotes are what makes the <code>$ git push</code> and  <code>$ git pull</code> commands possible. You\'d have nowhere to push without setting up remotes. Remotes have a lot of different purposes so I\'ll tell you why I need them. I need to setup my local Git repos to have multiple remotes so that I can push my source code to a unified place (like Github). This helps me access my code from anywhere and lets me collaborate more easily. I also need remotes setup so I can easily push to development servers for collaborating. I need to push code to staging sites to show clients work once it\'s ready to show off. And lastly I use remotes to easily push code changes to live websites and apps. This way you don\'t have to deal with the many perils of FTP, overwriting files, and *yikes* making changes on a live server. I just type $ git push heroku and my changes are live in a few seconds – no thinking required.\n<h3>How do you use remotes?</h3>\nIt\'s tricky at first, but once you see how it works it\'s easy. I\'m going to show you a kind of backwards way of doing remotes so you can get an idea of the ins-and-outs. You may have done a few of these things before, but I want to challenge you to try this a different way so you can think about it differently. If you haven\'t setup Git and setup a local repo on a project go ahead and <a title="Get going with Git" href="http://dev.dorails.com/railsvitamins/get-going-with-git/">do that now</a>. I\'ll wait :)\n<h4>Attempt to Push</h4>\nLet\'s start with the goal. We have a project that we want to push to a remote repo. Now once you have a new project folder with a git repo on it open up command-line, <code>cd</code> (change directory) into your project, add a new file (anything) and then try to push the changes:\n<pre>$ cd ~/Desktop\n$ mkdir new_project\n$ cd new_project\n$ cd git init  # create new git repo\n$ touch fancyfile.rb  # create any file\n$ git add .\n$ git commit -am "Created a fancy file"\n$ git push \n</pre>\nWell, you tried and you can\'t push! You\'ll notice that command line is yelling at you now. It probably says something like:\n<pre>fatal: No configured push destination.</pre>\nAnd git is nice enough to give you some instructions on what to do. Which we will ignore for now :). The reason you can\'t push is because you don\'t have a remote (repo) setup to push to.\n<h4>View your remotes</h4>\nTo see a list of all of your remotes enter this command:\n<pre>$ git remote -v</pre>\nThis shows you the remote repos that you can push to. A grand total of <strong>none</strong>. You should see no response in command-line as if you\'ve done nothing. That\'s okay we already knew that we don\'t have a remote yet.\n<h4>Adding a remote</h4>\nSo how do we add a remote? The quickest, easiest way to add a remote is with Github. Like a said earlier, a Github repo is just a <em>remote</em> repo. To add a remote you will go into command-line and enter\n<pre>$ git remote add origin https://github.com/UserName/repo_name.git</pre>\nYou probably don\'t know your Github URL yet because you haven\'t set it up on Github, that means you will need to setup an empty repo on Github.\n<h4>Setup remote repo</h4>\nSo to setup the remote, signup for Github if you haven\'t already. If you need help starting with Github, go <a title="Hop on the Github bandwagon" href="http://dev.dorails.com/railsvitamins/hop-on-the-github-bandwagon/">here</a>. But assuming you have a Github account already, log in and do this:\n<ol>\n	<li>Click on the <code>+</code> sign dropdown in the top right, then click <code>New Repository</code></li>\n	<li>On the next page, enter <code>fancy_name</code> for your repo name, select <code>Public</code>, then click <code>Create Repo</code>. (You don\'t have to have description)</li>\n	<li>Believe it or not your remote repo (Github repo) has been created it\'s just empty</li>\n</ol>\n<h4>Add Remote (for real this time)</h4>\nSo we\'ve got our remote repo ready, we just need to push our project to it. So back in the command-line you can now add the remote like we tried above:\n<pre>$ git remote add origin https://github.com/UserName/repo_name.git</pre>\nIt\'s good to know that the <code>origin</code> is interchangeable with any title. This is the title of your remote. I\'ve used titles like "live", "stage", and "dev". But it doesn\'t really matter so long as it makes sense. Origin is a nice term for Github though because it is supposed to be your authoritative source code.\n<h4>Try pushing again</h4>\nOkay so our remote repo url has been added to our local repo! Woohoo. So you should just be able to push right to it now, right?\n<pre>$ git push</pre>\nWrong. Ugh.. If you entered this command you probably saw the message saying that the current branch has no upstream. What the heck is an upstream and why do I need to define one? Well, basically it defines the default remote (repo) and branch that you will be pushing to when you enter <code>$ git push</code>. This makes more sense once you start pushing to multiple remotes: dev repos, staging repos, live repos (like Heroku). You say "push" and Git asks "Which repo and which branch in that repo do you want to push to?".\n<h4>Set Default Remote</h4>\nSo go ahead and define exactly where you want your default push command to go by entering\n<pre>git push --set-upstream origin master</pre>\nThis is telling Git to set the default push destination to be your "origin" remote (your new github repo) and specifies that it should be pushed to the master branch of that repo. More on branches later. This sets the default and pushes your changes back to back. All changes from now on can be added, committed and then you just run <code>$ git push</code>.\n\nTo give you an idea though, you can set remote titles to push to different remotes once you know how it works. If it we\'re a staging site with a remote repo you might specify by doing <code>$ git push staging master </code>, and for pushing live <code>$ git push live master</code>, etc, etc.\n\nAnother way around the upstream thing would be to just not define a default remote &amp; branch and specify <strong>every</strong> single time you push like so, <code>$ git push origin my_branch</code>. But thats no fun. Less is more.\n<h4>Okay okay okay can I push <strong>now</strong>?</h4>\nAlas, push that fantastic code over to your new remote now. Make another quick change and make sure it works.\n<pre>$ git add .\n$ git commit -am "More Changes"\n$ git push \n</pre>\nBam! I know this was a backasswards way of showing you remotes and you\'ve likely setup a Github repo before. But this shows you how it really works and how you can define as many remotes per project that you see fit.\n\nSo the basic steps are to:\n<ol>\n	<li>Setup local Git repo</li>\n	<li>Setup remote Git repo</li>\n	<li>Add remote to local Git repo</li>\n	<li>Push to</li>\n</ol>\nI love using tools like Git with Rails. But I\'ve even used this understanding of remotes to add repos on my Digital Ocean servers for Wordpress sites to Railsify my WP workflow as well. Let me know if you have any questions about remotes, there are a lot of different things you can do with them.', 'A beginners guide to the what, why & how of Git remotes', '', 'inherit', 'open', 'open', '', '188-autosave-v1', '', '', '2014-08-26 16:19:18', '2014-08-26 21:19:18', '', 188, 'http://dev.dorails.com/railsvitamins/188-autosave-v1/', 0, 'revision', '', 0),
(194, 1, '2014-08-26 15:19:15', '2014-08-26 20:19:15', 'Git remotes we\'re confusing to me at first. What are Git remotes? Why do I need them? And how do I use them? It took me awhile to figure this out so I\'m hoping this will get you up to speed and save you from putzing around on your own like I did.\r\n<h3>What is a Git remote?</h3>\r\nA git <em>remote</em> is a remote repository or repo in another location. I feel like they could\'ve just called them <em>remote repos</em> instead. As I\'ve gotten further along with Git I\'ve gathered that a git remote is <strong>any</strong> other repo besides your current local repo that you can push to. At first I thought that a remote would actually <em>control</em> my code like a TV remote control or something. Turns out, it\'s much more practical to think of it as the TV that is being controlled – it\'s more of a <strong>remote</strong> <strong>location</strong> than a tool for controlling.\r\n\r\nFor example: If you have a local Git repo, setting up that repo to push to Github is just a quick everyday example of setting up a <em>remote </em>(or remote repo) for your project.  Github is the <em>remote </em>or remote repo. If you haven\'t done that checkout my tutorials on how to setup <a title="Get going with Git" href="http://dev.dorails.com/railsvitamins/get-going-with-git/">Git</a> &amp; <a title="Hop on the Github bandwagon" href="http://dev.dorails.com/railsvitamins/hop-on-the-github-bandwagon/">Github</a>. Github is nothing more than a fancy collection of remote repos. Heroku is another example. Heroku is a "platform as a service" that does the heavy lifting for configuring a live server. But by pushing to Heroku you are just pushing to another <em>remote</em> (repo).\r\n\r\nThis picture says it best. You\'re local repo pushes out to any remotes that you tell it to. Github, Staging Server, Production Server (like Heroku)\r\n\r\n(Photo of local repo fanning out to github, heroku, other servers)\r\n<h3>Why do you need remotes?</h3>\r\nRemotes are what makes the <code>$ git push</code> command work. You\'d have nowhere to push without setting up remotes. Remotes have a lot of different purposes so I\'ll tell you why I need them. I need to setup my local Git repos to have multiple remotes so that I can push my source code to a unified place (like Github). This helps me access my code from anywhere and lets me collaborate more easily. I also need remotes setup so I can easily push to development servers for collaborating. I need to push code to staging sites to show clients work once it\'s ready to show off. And lastly I use remotes to easily push code changes to live websites and apps. This way you don\'t have to deal with the many perils of FTP, overwriting files, and *yikes* making changes on a live server. I just type $ git push heroku and my changes are live in a few seconds – no thinking required.\r\n<h3>How do you use remotes?</h3>\r\nIt\'s tricky at first, but once you see how it works it\'s easy. I\'m going to show you a kind of backwards way of doing remotes so you can get an idea of the ins-and-outs. You may have done a few of these things before, but I want to challenge you to try this and try to so you can think about it differently. If you haven\'t setup Git and setup a local repo on a project go ahead and <a title="Get going with Git" href="http://dev.dorails.com/railsvitamins/get-going-with-git/">do that now</a>. I\'ll wait :)\r\n<h4>Attempt to Push</h4>\r\nNow once you have a project with a git repo on it open up command-line, <code>cd</code> (change directory) into your project, add a new file (anything) and then try to push the changes:\r\n<pre>$ cd /path/to/project/\r\n$ cd git init # if you haven\'t already\r\n$ touch fancyfile.rb # create any file\r\n$ git add .\r\n$ git commit -am "Created a fancy file"\r\n$ git push \r\n</pre>\r\nWell, you tried and you can\'t push! You\'ll notice that command line is yelling at you now. It probably says something like:\r\n<pre>fatal: No configured push destination.</pre>\r\nAnd git is nice enough to give you some instructions on what to do. Which we will ignore for now :). The reason you can\'t push is because you don\'t have a remote (repo) setup to push to.\r\n<h4>View your remotes</h4>\r\nTo see a list of all of your remotes enter this command:\r\n<pre>$ git remote -v</pre>\r\nThis shows you the remote repos that you can push to. A ground total of none. You should see no response in command-line as if you\'ve done nothing. That\'s okay we already knew that.\r\n<h4>Adding a remote</h4>\r\nSo how do we add a remote? The quickest, easiest way to add a remote is with Github\r\nLike a said earlier, a Github repo is just a <em>remote</em> repo. To add a remote you will go into command-line and enter\r\n<pre>$ git remote add origin https://github.com/UserName/repo_name.git</pre>\r\nYou probably don\'t know your Github URL yet because you haven\'t set it up on Github, that means you will need to setup an empty repo on Github.\r\n<h4>Setup remote repo</h4>\r\nSo to setup the remote, signup for Github if you haven\'t already. If you need help with starting Github, go <a title="Hop on the Github bandwagon" href="http://dev.dorails.com/railsvitamins/hop-on-the-github-bandwagon/">here</a>. But assuming you have a Github account already, log in and do this:\r\n<ol>\r\n	<li>Click on the <code>+</code> sign dropdown in the top right, then click <code>New Repository</code></li>\r\n	<li>On the next page, enter <code>fancy_name</code> for your repo name, select <code>Public</code>, then click <code>Create Repo</code>. (You don\'t have to have description)</li>\r\n	<li>Believe it or not your remote repo (Github repo) has been created it\'s just empty</li>\r\n</ol>\r\nNow you can add the remote like we tried above:\r\n<pre>$ git remote add origin https://github.com/UserName/repo_name.git</pre>\r\nIt\'s good to know that the <code>origin</code> is interchangeable with any title. This is the title of your remote. I\'ve used titles like "live", "stage", and "dev". But it doesn\'t really matter so long as it makes sense. Origin is a nice term for Github though because it is supposed to be your authoritative source code.\r\n<h4>Try pushing again</h4>\r\nOkay so our remote repo url has been added to our local repo! Woohoo. So should just be able to push right to it now, right?\r\n<pre>$ git push</pre>\r\nWrong. Ugh.. If you entered this command you probably saw the message saying that the current branch has no upstream. What the heck is an upstream and why do I need to define one? Well, basically it defines the default remote (repo) and branch that you will be pushing to when you enter <code>$ git push</code>. This makes more sense once you start pushing to multiple remotes: dev repos, staging repos, live repos (like Heroku). You say "push" and Git asks "Which repo and which branch in that repo do you want to push to?".\r\n<h4>Set Default Remote</h4>\r\nSo go ahead and define exactly where you want your default push command to go by entering\r\n<pre>git push --set-upstream origin master</pre>\r\nThis is telling Git to set the default push destination to be your "origin" remote (your new github repo) and specifies that it should be pushed to the master branch of that repo. More on branches later. This sets the default and pushes your changes back to back. All changes from now on can be added, committed and then you just run <code>$ git push</code>. If it we\'re a staging site with a remote repo you could specify by doing <code>$ git push staging master </code>, and for pushing live <code>$ git push live master</code>, etc.\r\n\r\nAnother way around the upstream thing would be to just not define a default remote &amp; branch and specify <strong>every</strong> single time you push like so, <code>$ git push origin my_branch</code>. But thats no fun. Less is more.\r\n<h4>Okay okay okay can I push <strong>now</strong>?</h4>\r\nAlas, push that fantastic code over to your new remote now. Make another quick change and make sure it works.\r\n<pre>$ git add .\r\n$ git commit -am "More Changes"\r\n$ git push \r\n</pre>\r\nBam! I know this was a backasswards way of showing you remotes and you\'ve likely setup a Github repo before. It\'s more like error driven development. But this shows you how it really works and how you can define as many remotes per project that you see fit.', 'A beginners guide to the what, why & how of Git remotes', '', 'inherit', 'open', 'open', '', '188-revision-v1', '', '', '2014-08-26 15:19:15', '2014-08-26 20:19:15', '', 188, 'http://dev.dorails.com/railsvitamins/188-revision-v1/', 0, 'revision', '', 0) ;
INSERT INTO `wp_posts` ( `ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(195, 1, '2014-08-26 15:28:55', '2014-08-26 20:28:55', 'Git remotes we\'re confusing to me at first. What are Git remotes? Why do I need them? And how do I use them? It took me awhile to figure this out so I\'m hoping this will get you up to speed and save you from putzing around on your own like I did.\r\n<h3>What is a Git remote?</h3>\r\nA git <em>remote</em> is a remote repository or repo in another location. I feel like they could\'ve just called them <em>remote repos</em> instead. As I\'ve gotten further along with Git I\'ve gathered that a git remote is <strong>any</strong> other repo besides your current local repo that you can push to. At first I thought that a remote would actually <em>control</em> my code like a TV remote control or something. Turns out, it\'s much more practical to think of it as the TV that is being controlled – it\'s more of a <strong>remote</strong> <strong>location</strong> than a tool for controlling.\r\n\r\nFor example: If you have a local Git repo, setting up that repo to push to Github is just a quick everyday example of setting up a <em>remote </em>(or remote repo) for your project.  Github is the <em>remote </em>or remote repo. If you haven\'t done that checkout my tutorials on how to setup <a title="Get going with Git" href="http://dev.dorails.com/railsvitamins/get-going-with-git/">Git</a> &amp; <a title="Hop on the Github bandwagon" href="http://dev.dorails.com/railsvitamins/hop-on-the-github-bandwagon/">Github</a>. Github is nothing more than a fancy collection of remote repos. Heroku is another example. Heroku is a "platform as a service" that does the heavy lifting for configuring a live server. But by pushing to Heroku you are just pushing to another <em>remote</em> (repo).\r\n\r\nThis picture says it best. You\'re local repo pushes out to any remotes that you tell it to. Github, Staging Server, Production Server (like Heroku)\r\n\r\n(Photo of local repo fanning out to github, heroku, other servers)\r\n<h3>Why do you need remotes?</h3>\r\nRemotes are what makes the <code>$ git push</code> and  <code>$ git pull</code> commands possible. You\'d have nowhere to push without setting up remotes. Remotes have a lot of different purposes so I\'ll tell you why I need them. I need to setup my local Git repos to have multiple remotes so that I can push my source code to a unified place (like Github). This helps me access my code from anywhere and lets me collaborate more easily. I also need remotes setup so I can easily push to development servers for collaborating. I need to push code to staging sites to show clients work once it\'s ready to show off. And lastly I use remotes to easily push code changes to live websites and apps. This way you don\'t have to deal with the many perils of FTP, overwriting files, and *yikes* making changes on a live server. I just type $ git push heroku and my changes are live in a few seconds – no thinking required.\r\n<h3>How do you use remotes?</h3>\r\nIt\'s tricky at first, but once you see how it works it\'s easy. I\'m going to show you a kind of backwards way of doing remotes so you can get an idea of the ins-and-outs. You may have done a few of these things before, but I want to challenge you to try this and try to so you can think about it differently. If you haven\'t setup Git and setup a local repo on a project go ahead and <a title="Get going with Git" href="http://dev.dorails.com/railsvitamins/get-going-with-git/">do that now</a>. I\'ll wait :)\r\n<h4>Attempt to Push</h4>\r\nNow once you have a project with a git repo on it open up command-line, <code>cd</code> (change directory) into your project, add a new file (anything) and then try to push the changes:\r\n<pre>$ cd /path/to/project/\r\n$ cd git init # if you haven\'t already\r\n$ touch fancyfile.rb # create any file\r\n$ git add .\r\n$ git commit -am "Created a fancy file"\r\n$ git push \r\n</pre>\r\nWell, you tried and you can\'t push! You\'ll notice that command line is yelling at you now. It probably says something like:\r\n<pre>fatal: No configured push destination.</pre>\r\nAnd git is nice enough to give you some instructions on what to do. Which we will ignore for now :). The reason you can\'t push is because you don\'t have a remote (repo) setup to push to.\r\n<h4>View your remotes</h4>\r\nTo see a list of all of your remotes enter this command:\r\n<pre>$ git remote -v</pre>\r\nThis shows you the remote repos that you can push to. A ground total of none. You should see no response in command-line as if you\'ve done nothing. That\'s okay we already knew that.\r\n<h4>Adding a remote</h4>\r\nSo how do we add a remote? The quickest, easiest way to add a remote is with Github\r\nLike a said earlier, a Github repo is just a <em>remote</em> repo. To add a remote you will go into command-line and enter\r\n<pre>$ git remote add origin https://github.com/UserName/repo_name.git</pre>\r\nYou probably don\'t know your Github URL yet because you haven\'t set it up on Github, that means you will need to setup an empty repo on Github.\r\n<h4>Setup remote repo</h4>\r\nSo to setup the remote, signup for Github if you haven\'t already. If you need help with starting Github, go <a title="Hop on the Github bandwagon" href="http://dev.dorails.com/railsvitamins/hop-on-the-github-bandwagon/">here</a>. But assuming you have a Github account already, log in and do this:\r\n<ol>\r\n	<li>Click on the <code>+</code> sign dropdown in the top right, then click <code>New Repository</code></li>\r\n	<li>On the next page, enter <code>fancy_name</code> for your repo name, select <code>Public</code>, then click <code>Create Repo</code>. (You don\'t have to have description)</li>\r\n	<li>Believe it or not your remote repo (Github repo) has been created it\'s just empty</li>\r\n</ol>\r\nNow you can add the remote like we tried above:\r\n<pre>$ git remote add origin https://github.com/UserName/repo_name.git</pre>\r\nIt\'s good to know that the <code>origin</code> is interchangeable with any title. This is the title of your remote. I\'ve used titles like "live", "stage", and "dev". But it doesn\'t really matter so long as it makes sense. Origin is a nice term for Github though because it is supposed to be your authoritative source code.\r\n<h4>Try pushing again</h4>\r\nOkay so our remote repo url has been added to our local repo! Woohoo. So should just be able to push right to it now, right?\r\n<pre>$ git push</pre>\r\nWrong. Ugh.. If you entered this command you probably saw the message saying that the current branch has no upstream. What the heck is an upstream and why do I need to define one? Well, basically it defines the default remote (repo) and branch that you will be pushing to when you enter <code>$ git push</code>. This makes more sense once you start pushing to multiple remotes: dev repos, staging repos, live repos (like Heroku). You say "push" and Git asks "Which repo and which branch in that repo do you want to push to?".\r\n<h4>Set Default Remote</h4>\r\nSo go ahead and define exactly where you want your default push command to go by entering\r\n<pre>git push --set-upstream origin master</pre>\r\nThis is telling Git to set the default push destination to be your "origin" remote (your new github repo) and specifies that it should be pushed to the master branch of that repo. More on branches later. This sets the default and pushes your changes back to back. All changes from now on can be added, committed and then you just run <code>$ git push</code>. If it we\'re a staging site with a remote repo you could specify by doing <code>$ git push staging master </code>, and for pushing live <code>$ git push live master</code>, etc.\r\n\r\nAnother way around the upstream thing would be to just not define a default remote &amp; branch and specify <strong>every</strong> single time you push like so, <code>$ git push origin my_branch</code>. But thats no fun. Less is more.\r\n<h4>Okay okay okay can I push <strong>now</strong>?</h4>\r\nAlas, push that fantastic code over to your new remote now. Make another quick change and make sure it works.\r\n<pre>$ git add .\r\n$ git commit -am "More Changes"\r\n$ git push \r\n</pre>\r\nBam! I know this was a backasswards way of showing you remotes and you\'ve likely setup a Github repo before. It\'s more like error driven development. But this shows you how it really works and how you can define as many remotes per project that you see fit.', 'A beginners guide to the what, why & how of Git remotes', '', 'inherit', 'open', 'open', '', '188-revision-v1', '', '', '2014-08-26 15:28:55', '2014-08-26 20:28:55', '', 188, 'http://dev.dorails.com/railsvitamins/188-revision-v1/', 0, 'revision', '', 0),
(196, 1, '2014-08-26 15:44:25', '2014-08-26 20:44:25', '', 'A beginners guide to the what, why & how of Git remotes', '', 'inherit', 'open', 'open', '', 'git-remotes', '', '', '2014-08-26 15:44:25', '2014-08-26 20:44:25', '', 188, 'http://dev.dorails.com/wp-content/uploads/2014/08/git-remotes.jpg', 0, 'attachment', 'image/jpeg', 0),
(197, 1, '2014-08-26 15:45:52', '2014-08-26 20:45:52', 'Git remotes we\'re confusing to me at first. What are Git remotes? Why do I need them? And how do I use them? It took me awhile to figure this out so I\'m hoping this will get you up to speed and save you from putzing around on your own like I did.\r\n<h3>What is a Git remote?</h3>\r\nA git <em>remote</em> is a remote repository or repo in another location. I feel like they could\'ve just called them <em>remote repos</em> instead. As I\'ve gotten further along with Git I\'ve gathered that a git remote is <strong>any</strong> other repo besides your current local repo that you can push to. At first I thought that a remote would actually <em>control</em> my code like a TV remote control or something. Turns out, it\'s much more practical to think of it as the TV that is being controlled – it\'s more of a <strong>remote</strong> <strong>location</strong> than a tool for controlling.\r\n\r\nFor example: If you have a local Git repo, setting up that repo to push to Github is just a quick everyday example of setting up a <em>remote </em>(or remote repo) for your project.  Github is the <em>remote </em>or remote repo. If you haven\'t done that checkout my tutorials on how to setup <a title="Get going with Git" href="http://dev.dorails.com/railsvitamins/get-going-with-git/">Git</a> &amp; <a title="Hop on the Github bandwagon" href="http://dev.dorails.com/railsvitamins/hop-on-the-github-bandwagon/">Github</a>. Github is nothing more than a fancy collection of remote repos. Heroku is another example. Heroku is a "platform as a service" that does the heavy lifting for configuring a live server. But by pushing to Heroku you are just pushing to another <em>remote</em> (repo).\r\n\r\nThis picture says it best. You\'re local repo pushes out to any remotes that you tell it to. Github, Staging Server, Production Server (like Heroku)\r\n\r\n<a href="http://dev.dorails.com/wp-content/uploads/2014/08/git-remotes.jpg"><img class="aligncenter size-medium wp-image-196" src="http://dev.dorails.com/wp-content/uploads/2014/08/git-remotes-271x300.jpg" alt="A beginners guide to the what, why &amp; how of Git remotes" width="271" height="300" /></a>\r\n<h3>Why do you need remotes?</h3>\r\nRemotes are what makes the <code>$ git push</code> and  <code>$ git pull</code> commands possible. You\'d have nowhere to push without setting up remotes. Remotes have a lot of different purposes so I\'ll tell you why I need them. I need to setup my local Git repos to have multiple remotes so that I can push my source code to a unified place (like Github). This helps me access my code from anywhere and lets me collaborate more easily. I also need remotes setup so I can easily push to development servers for collaborating. I need to push code to staging sites to show clients work once it\'s ready to show off. And lastly I use remotes to easily push code changes to live websites and apps. This way you don\'t have to deal with the many perils of FTP, overwriting files, and *yikes* making changes on a live server. I just type $ git push heroku and my changes are live in a few seconds – no thinking required.\r\n<h3>How do you use remotes?</h3>\r\nIt\'s tricky at first, but once you see how it works it\'s easy. I\'m going to show you a kind of backwards way of doing remotes so you can get an idea of the ins-and-outs. You may have done a few of these things before, but I want to challenge you to try this and try to so you can think about it differently. If you haven\'t setup Git and setup a local repo on a project go ahead and <a title="Get going with Git" href="http://dev.dorails.com/railsvitamins/get-going-with-git/">do that now</a>. I\'ll wait :)\r\n<h4>Attempt to Push</h4>\r\nNow once you have a project with a git repo on it open up command-line, <code>cd</code> (change directory) into your project, add a new file (anything) and then try to push the changes:\r\n<pre>$ cd /path/to/project/\r\n$ cd git init # if you haven\'t already\r\n$ touch fancyfile.rb # create any file\r\n$ git add .\r\n$ git commit -am "Created a fancy file"\r\n$ git push \r\n</pre>\r\nWell, you tried and you can\'t push! You\'ll notice that command line is yelling at you now. It probably says something like:\r\n<pre>fatal: No configured push destination.</pre>\r\nAnd git is nice enough to give you some instructions on what to do. Which we will ignore for now :). The reason you can\'t push is because you don\'t have a remote (repo) setup to push to.\r\n<h4>View your remotes</h4>\r\nTo see a list of all of your remotes enter this command:\r\n<pre>$ git remote -v</pre>\r\nThis shows you the remote repos that you can push to. A ground total of none. You should see no response in command-line as if you\'ve done nothing. That\'s okay we already knew that.\r\n<h4>Adding a remote</h4>\r\nSo how do we add a remote? The quickest, easiest way to add a remote is with Github\r\nLike a said earlier, a Github repo is just a <em>remote</em> repo. To add a remote you will go into command-line and enter\r\n<pre>$ git remote add origin https://github.com/UserName/repo_name.git</pre>\r\nYou probably don\'t know your Github URL yet because you haven\'t set it up on Github, that means you will need to setup an empty repo on Github.\r\n<h4>Setup remote repo</h4>\r\nSo to setup the remote, signup for Github if you haven\'t already. If you need help with starting Github, go <a title="Hop on the Github bandwagon" href="http://dev.dorails.com/railsvitamins/hop-on-the-github-bandwagon/">here</a>. But assuming you have a Github account already, log in and do this:\r\n<ol>\r\n	<li>Click on the <code>+</code> sign dropdown in the top right, then click <code>New Repository</code></li>\r\n	<li>On the next page, enter <code>fancy_name</code> for your repo name, select <code>Public</code>, then click <code>Create Repo</code>. (You don\'t have to have description)</li>\r\n	<li>Believe it or not your remote repo (Github repo) has been created it\'s just empty</li>\r\n</ol>\r\nNow you can add the remote like we tried above:\r\n<pre>$ git remote add origin https://github.com/UserName/repo_name.git</pre>\r\nIt\'s good to know that the <code>origin</code> is interchangeable with any title. This is the title of your remote. I\'ve used titles like "live", "stage", and "dev". But it doesn\'t really matter so long as it makes sense. Origin is a nice term for Github though because it is supposed to be your authoritative source code.\r\n<h4>Try pushing again</h4>\r\nOkay so our remote repo url has been added to our local repo! Woohoo. So should just be able to push right to it now, right?\r\n<pre>$ git push</pre>\r\nWrong. Ugh.. If you entered this command you probably saw the message saying that the current branch has no upstream. What the heck is an upstream and why do I need to define one? Well, basically it defines the default remote (repo) and branch that you will be pushing to when you enter <code>$ git push</code>. This makes more sense once you start pushing to multiple remotes: dev repos, staging repos, live repos (like Heroku). You say "push" and Git asks "Which repo and which branch in that repo do you want to push to?".\r\n<h4>Set Default Remote</h4>\r\nSo go ahead and define exactly where you want your default push command to go by entering\r\n<pre>git push --set-upstream origin master</pre>\r\nThis is telling Git to set the default push destination to be your "origin" remote (your new github repo) and specifies that it should be pushed to the master branch of that repo. More on branches later. This sets the default and pushes your changes back to back. All changes from now on can be added, committed and then you just run <code>$ git push</code>. If it we\'re a staging site with a remote repo you could specify by doing <code>$ git push staging master </code>, and for pushing live <code>$ git push live master</code>, etc.\r\n\r\nAnother way around the upstream thing would be to just not define a default remote &amp; branch and specify <strong>every</strong> single time you push like so, <code>$ git push origin my_branch</code>. But thats no fun. Less is more.\r\n<h4>Okay okay okay can I push <strong>now</strong>?</h4>\r\nAlas, push that fantastic code over to your new remote now. Make another quick change and make sure it works.\r\n<pre>$ git add .\r\n$ git commit -am "More Changes"\r\n$ git push \r\n</pre>\r\nBam! I know this was a backasswards way of showing you remotes and you\'ve likely setup a Github repo before. It\'s more like error driven development. But this shows you how it really works and how you can define as many remotes per project that you see fit.', 'A beginners guide to the what, why & how of Git remotes', '', 'inherit', 'open', 'open', '', '188-revision-v1', '', '', '2014-08-26 15:45:52', '2014-08-26 20:45:52', '', 188, 'http://dev.dorails.com/railsvitamins/188-revision-v1/', 0, 'revision', '', 0),
(198, 1, '2014-08-26 15:46:21', '2014-08-26 20:46:21', 'Git remotes we\'re confusing to me at first. What are Git remotes? Why do I need them? And how do I use them? It took me awhile to figure this out so I\'m hoping this will get you up to speed and save you from putzing around on your own like I did.\r\n<h3>What is a Git remote?</h3>\r\nA git <em>remote</em> is a remote repository or repo in another location. I feel like they could\'ve just called them <em>remote repos</em> instead. As I\'ve gotten further along with Git I\'ve gathered that a git remote is <strong>any</strong> other repo besides your current local repo that you can push to. At first I thought that a remote would actually <em>control</em> my code like a TV remote control or something. Turns out, it\'s much more practical to think of it as the TV that is being controlled – it\'s more of a <strong>remote</strong> <strong>location</strong> than a tool for controlling.\r\n\r\nFor example: If you have a local Git repo, setting up that repo to push to Github is just a quick everyday example of setting up a <em>remote </em>(or remote repo) for your project.  Github is the <em>remote </em>or remote repo. If you haven\'t done that checkout my tutorials on how to setup <a title="Get going with Git" href="http://dev.dorails.com/railsvitamins/get-going-with-git/">Git</a> &amp; <a title="Hop on the Github bandwagon" href="http://dev.dorails.com/railsvitamins/hop-on-the-github-bandwagon/">Github</a>. Github is nothing more than a fancy collection of remote repos. Heroku is another example. Heroku is a "platform as a service" that does the heavy lifting for configuring a live server. But by pushing to Heroku you are just pushing to another <em>remote</em> (repo).\r\n\r\nThis picture says it best. You\'re local repo pushes out to any remotes that you tell it to. Github, Staging Server, Production Server (like Heroku)\r\n\r\n<a href="http://dev.dorails.com/wp-content/uploads/2014/08/git-remotes.jpg"><img class="size-medium wp-image-196 aligncenter" src="http://dev.dorails.com/wp-content/uploads/2014/08/git-remotes-271x300.jpg" alt="A beginners guide to the what, why &amp; how of Git remotes" width="271" height="300" /></a>\r\n<h3>Why do you need remotes?</h3>\r\nRemotes are what makes the <code>$ git push</code> and  <code>$ git pull</code> commands possible. You\'d have nowhere to push without setting up remotes. Remotes have a lot of different purposes so I\'ll tell you why I need them. I need to setup my local Git repos to have multiple remotes so that I can push my source code to a unified place (like Github). This helps me access my code from anywhere and lets me collaborate more easily. I also need remotes setup so I can easily push to development servers for collaborating. I need to push code to staging sites to show clients work once it\'s ready to show off. And lastly I use remotes to easily push code changes to live websites and apps. This way you don\'t have to deal with the many perils of FTP, overwriting files, and *yikes* making changes on a live server. I just type $ git push heroku and my changes are live in a few seconds – no thinking required.\r\n<h3>How do you use remotes?</h3>\r\nIt\'s tricky at first, but once you see how it works it\'s easy. I\'m going to show you a kind of backwards way of doing remotes so you can get an idea of the ins-and-outs. You may have done a few of these things before, but I want to challenge you to try this and try to so you can think about it differently. If you haven\'t setup Git and setup a local repo on a project go ahead and <a title="Get going with Git" href="http://dev.dorails.com/railsvitamins/get-going-with-git/">do that now</a>. I\'ll wait :)\r\n<h4>Attempt to Push</h4>\r\nNow once you have a project with a git repo on it open up command-line, <code>cd</code> (change directory) into your project, add a new file (anything) and then try to push the changes:\r\n<pre>$ cd /path/to/project/\r\n$ cd git init # if you haven\'t already\r\n$ touch fancyfile.rb # create any file\r\n$ git add .\r\n$ git commit -am "Created a fancy file"\r\n$ git push \r\n</pre>\r\nWell, you tried and you can\'t push! You\'ll notice that command line is yelling at you now. It probably says something like:\r\n<pre>fatal: No configured push destination.</pre>\r\nAnd git is nice enough to give you some instructions on what to do. Which we will ignore for now :). The reason you can\'t push is because you don\'t have a remote (repo) setup to push to.\r\n<h4>View your remotes</h4>\r\nTo see a list of all of your remotes enter this command:\r\n<pre>$ git remote -v</pre>\r\nThis shows you the remote repos that you can push to. A ground total of none. You should see no response in command-line as if you\'ve done nothing. That\'s okay we already knew that.\r\n<h4>Adding a remote</h4>\r\nSo how do we add a remote? The quickest, easiest way to add a remote is with Github\r\nLike a said earlier, a Github repo is just a <em>remote</em> repo. To add a remote you will go into command-line and enter\r\n<pre>$ git remote add origin https://github.com/UserName/repo_name.git</pre>\r\nYou probably don\'t know your Github URL yet because you haven\'t set it up on Github, that means you will need to setup an empty repo on Github.\r\n<h4>Setup remote repo</h4>\r\nSo to setup the remote, signup for Github if you haven\'t already. If you need help with starting Github, go <a title="Hop on the Github bandwagon" href="http://dev.dorails.com/railsvitamins/hop-on-the-github-bandwagon/">here</a>. But assuming you have a Github account already, log in and do this:\r\n<ol>\r\n	<li>Click on the <code>+</code> sign dropdown in the top right, then click <code>New Repository</code></li>\r\n	<li>On the next page, enter <code>fancy_name</code> for your repo name, select <code>Public</code>, then click <code>Create Repo</code>. (You don\'t have to have description)</li>\r\n	<li>Believe it or not your remote repo (Github repo) has been created it\'s just empty</li>\r\n</ol>\r\nNow you can add the remote like we tried above:\r\n<pre>$ git remote add origin https://github.com/UserName/repo_name.git</pre>\r\nIt\'s good to know that the <code>origin</code> is interchangeable with any title. This is the title of your remote. I\'ve used titles like "live", "stage", and "dev". But it doesn\'t really matter so long as it makes sense. Origin is a nice term for Github though because it is supposed to be your authoritative source code.\r\n<h4>Try pushing again</h4>\r\nOkay so our remote repo url has been added to our local repo! Woohoo. So should just be able to push right to it now, right?\r\n<pre>$ git push</pre>\r\nWrong. Ugh.. If you entered this command you probably saw the message saying that the current branch has no upstream. What the heck is an upstream and why do I need to define one? Well, basically it defines the default remote (repo) and branch that you will be pushing to when you enter <code>$ git push</code>. This makes more sense once you start pushing to multiple remotes: dev repos, staging repos, live repos (like Heroku). You say "push" and Git asks "Which repo and which branch in that repo do you want to push to?".\r\n<h4>Set Default Remote</h4>\r\nSo go ahead and define exactly where you want your default push command to go by entering\r\n<pre>git push --set-upstream origin master</pre>\r\nThis is telling Git to set the default push destination to be your "origin" remote (your new github repo) and specifies that it should be pushed to the master branch of that repo. More on branches later. This sets the default and pushes your changes back to back. All changes from now on can be added, committed and then you just run <code>$ git push</code>. If it we\'re a staging site with a remote repo you could specify by doing <code>$ git push staging master </code>, and for pushing live <code>$ git push live master</code>, etc.\r\n\r\nAnother way around the upstream thing would be to just not define a default remote &amp; branch and specify <strong>every</strong> single time you push like so, <code>$ git push origin my_branch</code>. But thats no fun. Less is more.\r\n<h4>Okay okay okay can I push <strong>now</strong>?</h4>\r\nAlas, push that fantastic code over to your new remote now. Make another quick change and make sure it works.\r\n<pre>$ git add .\r\n$ git commit -am "More Changes"\r\n$ git push \r\n</pre>\r\nBam! I know this was a backasswards way of showing you remotes and you\'ve likely setup a Github repo before. It\'s more like error driven development. But this shows you how it really works and how you can define as many remotes per project that you see fit.', 'A beginners guide to the what, why & how of Git remotes', '', 'inherit', 'open', 'open', '', '188-revision-v1', '', '', '2014-08-26 15:46:21', '2014-08-26 20:46:21', '', 188, 'http://dev.dorails.com/railsvitamins/188-revision-v1/', 0, 'revision', '', 0),
(199, 1, '2014-08-26 15:47:29', '2014-08-26 20:47:29', 'Git remotes we\'re confusing to me at first. What are Git remotes? Why do I need them? And how do I use them? It took me awhile to figure this out so I\'m hoping this will get you up to speed and save you from putzing around on your own like I did.\r\n<h3>What is a Git remote?</h3>\r\nA git <em>remote</em> is a remote repository or repo in another location. I feel like they could\'ve just called them <em>remote repos</em> instead. As I\'ve gotten further along with Git I\'ve gathered that a git remote is <strong>any</strong> other repo besides your current local repo that you can push to. At first I thought that a remote would actually <em>control</em> my code like a TV remote control or something. Turns out, it\'s much more practical to think of it as the TV that is being controlled – it\'s more of a <strong>remote</strong> <strong>location</strong> than a tool for controlling.\r\n\r\nFor example: If you have a local Git repo, setting up that repo to push to Github is just a quick everyday example of setting up a <em>remote </em>(or remote repo) for your project.  Github is the <em>remote </em>or remote repo. If you haven\'t done that checkout my tutorials on how to setup <a title="Get going with Git" href="http://dev.dorails.com/railsvitamins/get-going-with-git/">Git</a> &amp; <a title="Hop on the Github bandwagon" href="http://dev.dorails.com/railsvitamins/hop-on-the-github-bandwagon/">Github</a>. Github is nothing more than a fancy collection of remote repos. Heroku is another example. Heroku is a "platform as a service" that does the heavy lifting for configuring a live server. But by pushing to Heroku you are just pushing to another <em>remote</em> (repo).\r\n\r\nThis picture says it best. You\'re local repo pushes out to any remotes that you tell it to. Github, Staging Server, Production Server (like Heroku)\r\n\r\n<a href="http://dev.dorails.com/wp-content/uploads/2014/08/git-remotes.jpg"><img class="aligncenter img-responsive wp-image-196 size-full" src="http://dev.dorails.com/wp-content/uploads/2014/08/git-remotes.jpg" alt="A beginners guide to the what, why &amp; how of Git remotes" width="600" height="663" /></a>\r\n<h3>Why do you need remotes?</h3>\r\nRemotes are what makes the <code>$ git push</code> and  <code>$ git pull</code> commands possible. You\'d have nowhere to push without setting up remotes. Remotes have a lot of different purposes so I\'ll tell you why I need them. I need to setup my local Git repos to have multiple remotes so that I can push my source code to a unified place (like Github). This helps me access my code from anywhere and lets me collaborate more easily. I also need remotes setup so I can easily push to development servers for collaborating. I need to push code to staging sites to show clients work once it\'s ready to show off. And lastly I use remotes to easily push code changes to live websites and apps. This way you don\'t have to deal with the many perils of FTP, overwriting files, and *yikes* making changes on a live server. I just type $ git push heroku and my changes are live in a few seconds – no thinking required.\r\n<h3>How do you use remotes?</h3>\r\nIt\'s tricky at first, but once you see how it works it\'s easy. I\'m going to show you a kind of backwards way of doing remotes so you can get an idea of the ins-and-outs. You may have done a few of these things before, but I want to challenge you to try this and try to so you can think about it differently. If you haven\'t setup Git and setup a local repo on a project go ahead and <a title="Get going with Git" href="http://dev.dorails.com/railsvitamins/get-going-with-git/">do that now</a>. I\'ll wait :)\r\n<h4>Attempt to Push</h4>\r\nNow once you have a project with a git repo on it open up command-line, <code>cd</code> (change directory) into your project, add a new file (anything) and then try to push the changes:\r\n<pre>$ cd /path/to/project/\r\n$ cd git init # if you haven\'t already\r\n$ touch fancyfile.rb # create any file\r\n$ git add .\r\n$ git commit -am "Created a fancy file"\r\n$ git push \r\n</pre>\r\nWell, you tried and you can\'t push! You\'ll notice that command line is yelling at you now. It probably says something like:\r\n<pre>fatal: No configured push destination.</pre>\r\nAnd git is nice enough to give you some instructions on what to do. Which we will ignore for now :). The reason you can\'t push is because you don\'t have a remote (repo) setup to push to.\r\n<h4>View your remotes</h4>\r\nTo see a list of all of your remotes enter this command:\r\n<pre>$ git remote -v</pre>\r\nThis shows you the remote repos that you can push to. A ground total of none. You should see no response in command-line as if you\'ve done nothing. That\'s okay we already knew that.\r\n<h4>Adding a remote</h4>\r\nSo how do we add a remote? The quickest, easiest way to add a remote is with Github\r\nLike a said earlier, a Github repo is just a <em>remote</em> repo. To add a remote you will go into command-line and enter\r\n<pre>$ git remote add origin https://github.com/UserName/repo_name.git</pre>\r\nYou probably don\'t know your Github URL yet because you haven\'t set it up on Github, that means you will need to setup an empty repo on Github.\r\n<h4>Setup remote repo</h4>\r\nSo to setup the remote, signup for Github if you haven\'t already. If you need help with starting Github, go <a title="Hop on the Github bandwagon" href="http://dev.dorails.com/railsvitamins/hop-on-the-github-bandwagon/">here</a>. But assuming you have a Github account already, log in and do this:\r\n<ol>\r\n	<li>Click on the <code>+</code> sign dropdown in the top right, then click <code>New Repository</code></li>\r\n	<li>On the next page, enter <code>fancy_name</code> for your repo name, select <code>Public</code>, then click <code>Create Repo</code>. (You don\'t have to have description)</li>\r\n	<li>Believe it or not your remote repo (Github repo) has been created it\'s just empty</li>\r\n</ol>\r\nNow you can add the remote like we tried above:\r\n<pre>$ git remote add origin https://github.com/UserName/repo_name.git</pre>\r\nIt\'s good to know that the <code>origin</code> is interchangeable with any title. This is the title of your remote. I\'ve used titles like "live", "stage", and "dev". But it doesn\'t really matter so long as it makes sense. Origin is a nice term for Github though because it is supposed to be your authoritative source code.\r\n<h4>Try pushing again</h4>\r\nOkay so our remote repo url has been added to our local repo! Woohoo. So should just be able to push right to it now, right?\r\n<pre>$ git push</pre>\r\nWrong. Ugh.. If you entered this command you probably saw the message saying that the current branch has no upstream. What the heck is an upstream and why do I need to define one? Well, basically it defines the default remote (repo) and branch that you will be pushing to when you enter <code>$ git push</code>. This makes more sense once you start pushing to multiple remotes: dev repos, staging repos, live repos (like Heroku). You say "push" and Git asks "Which repo and which branch in that repo do you want to push to?".\r\n<h4>Set Default Remote</h4>\r\nSo go ahead and define exactly where you want your default push command to go by entering\r\n<pre>git push --set-upstream origin master</pre>\r\nThis is telling Git to set the default push destination to be your "origin" remote (your new github repo) and specifies that it should be pushed to the master branch of that repo. More on branches later. This sets the default and pushes your changes back to back. All changes from now on can be added, committed and then you just run <code>$ git push</code>. If it we\'re a staging site with a remote repo you could specify by doing <code>$ git push staging master </code>, and for pushing live <code>$ git push live master</code>, etc.\r\n\r\nAnother way around the upstream thing would be to just not define a default remote &amp; branch and specify <strong>every</strong> single time you push like so, <code>$ git push origin my_branch</code>. But thats no fun. Less is more.\r\n<h4>Okay okay okay can I push <strong>now</strong>?</h4>\r\nAlas, push that fantastic code over to your new remote now. Make another quick change and make sure it works.\r\n<pre>$ git add .\r\n$ git commit -am "More Changes"\r\n$ git push \r\n</pre>\r\nBam! I know this was a backasswards way of showing you remotes and you\'ve likely setup a Github repo before. It\'s more like error driven development. But this shows you how it really works and how you can define as many remotes per project that you see fit.', 'A beginners guide to the what, why & how of Git remotes', '', 'inherit', 'open', 'open', '', '188-revision-v1', '', '', '2014-08-26 15:47:29', '2014-08-26 20:47:29', '', 188, 'http://dev.dorails.com/railsvitamins/188-revision-v1/', 0, 'revision', '', 0),
(200, 1, '2014-08-26 15:54:59', '2014-08-26 20:54:59', 'Git remotes we\'re confusing to me at first. What are Git remotes? Why do I need them? And how do I use them? It took me awhile to figure this out so I\'m hoping this will get you up to speed and save you from putzing around on your own like I did.\r\n<h3>What is a Git remote?</h3>\r\nA git <em>remote</em> is a remote repository or repo in another location. I feel like they could\'ve just called them <em>remote repos</em> instead. As I\'ve gotten further along with Git I\'ve gathered that a git remote is <strong>any</strong> other repo besides your current local repo that you can push to. At first I thought that a remote would actually <em>control</em> my code like a TV remote control or something. Turns out, it\'s much more practical to think of it as the TV that is being controlled – it\'s more of a <strong>remote</strong> <strong>location</strong> than a tool for controlling.\r\n\r\nFor example: If you have a local Git repo, setting up that repo to push to Github is just a quick everyday example of setting up a <em>remote </em>(or remote repo) for your project.  Github is the <em>remote </em>or remote repo. If you haven\'t done that checkout my tutorials on how to setup <a title="Get going with Git" href="http://dev.dorails.com/railsvitamins/get-going-with-git/">Git</a> &amp; <a title="Hop on the Github bandwagon" href="http://dev.dorails.com/railsvitamins/hop-on-the-github-bandwagon/">Github</a>. Github is nothing more than a fancy collection of remote repos. Heroku is another example. Heroku is a "platform as a service" that does the heavy lifting for configuring a live server. But by pushing to Heroku you are just pushing to another <em>remote</em> (repo).\r\n\r\nThis picture says it best. You\'re local repo pushes out to any remotes that you tell it to. Github, Staging Server, Production Server (like Heroku)\r\n\r\n<a href="http://dev.dorails.com/wp-content/uploads/2014/08/git-remotes.jpg"><img class="aligncenter img-responsive wp-image-196 size-full" src="http://dev.dorails.com/wp-content/uploads/2014/08/git-remotes.jpg" alt="A beginners guide to the what, why &amp; how of Git remotes" width="600" height="663" /></a>\r\n<h3>Why do you need remotes?</h3>\r\nRemotes are what makes the <code>$ git push</code> and  <code>$ git pull</code> commands possible. You\'d have nowhere to push without setting up remotes. Remotes have a lot of different purposes so I\'ll tell you why I need them. I need to setup my local Git repos to have multiple remotes so that I can push my source code to a unified place (like Github). This helps me access my code from anywhere and lets me collaborate more easily. I also need remotes setup so I can easily push to development servers for collaborating. I need to push code to staging sites to show clients work once it\'s ready to show off. And lastly I use remotes to easily push code changes to live websites and apps. This way you don\'t have to deal with the many perils of FTP, overwriting files, and *yikes* making changes on a live server. I just type $ git push heroku and my changes are live in a few seconds – no thinking required.\r\n<h3>How do you use remotes?</h3>\r\nIt\'s tricky at first, but once you see how it works it\'s easy. I\'m going to show you a kind of backwards way of doing remotes so you can get an idea of the ins-and-outs. You may have done a few of these things before, but I want to challenge you to try this a different way so you can think about it differently. If you haven\'t setup Git and setup a local repo on a project go ahead and <a title="Get going with Git" href="http://dev.dorails.com/railsvitamins/get-going-with-git/">do that now</a>. I\'ll wait :)\r\n<h4>Attempt to Push</h4>\r\nLet\'s start with the goal. We have a project that we want to push to a remote repo. Now once you have a project folder with a git repo on it open up command-line, <code>cd</code> (change directory) into your project, add a new file (anything) and then try to push the changes:\r\n<pre>$ cd /path/to/project/\r\n$ cd git init # if you haven\'t already\r\n$ touch fancyfile.rb # create any file\r\n$ git add .\r\n$ git commit -am "Created a fancy file"\r\n$ git push \r\n</pre>\r\nWell, you tried and you can\'t push! You\'ll notice that command line is yelling at you now. It probably says something like:\r\n<pre>fatal: No configured push destination.</pre>\r\nAnd git is nice enough to give you some instructions on what to do. Which we will ignore for now :). The reason you can\'t push is because you don\'t have a remote (repo) setup to push to.\r\n<h4>View your remotes</h4>\r\nTo see a list of all of your remotes enter this command:\r\n<pre>$ git remote -v</pre>\r\nThis shows you the remote repos that you can push to. A ground total of none. You should see no response in command-line as if you\'ve done nothing. That\'s okay we already knew that.\r\n<h4>Adding a remote</h4>\r\nSo how do we add a remote? The quickest, easiest way to add a remote is with Github\r\nLike a said earlier, a Github repo is just a <em>remote</em> repo. To add a remote you will go into command-line and enter\r\n<pre>$ git remote add origin https://github.com/UserName/repo_name.git</pre>\r\nYou probably don\'t know your Github URL yet because you haven\'t set it up on Github, that means you will need to setup an empty repo on Github.\r\n<h4>Setup remote repo</h4>\r\nSo to setup the remote, signup for Github if you haven\'t already. If you need help with starting Github, go <a title="Hop on the Github bandwagon" href="http://dev.dorails.com/railsvitamins/hop-on-the-github-bandwagon/">here</a>. But assuming you have a Github account already, log in and do this:\r\n<ol>\r\n	<li>Click on the <code>+</code> sign dropdown in the top right, then click <code>New Repository</code></li>\r\n	<li>On the next page, enter <code>fancy_name</code> for your repo name, select <code>Public</code>, then click <code>Create Repo</code>. (You don\'t have to have description)</li>\r\n	<li>Believe it or not your remote repo (Github repo) has been created it\'s just empty</li>\r\n</ol>\r\nNow you can add the remote like we tried above:\r\n<pre>$ git remote add origin https://github.com/UserName/repo_name.git</pre>\r\nIt\'s good to know that the <code>origin</code> is interchangeable with any title. This is the title of your remote. I\'ve used titles like "live", "stage", and "dev". But it doesn\'t really matter so long as it makes sense. Origin is a nice term for Github though because it is supposed to be your authoritative source code.\r\n<h4>Try pushing again</h4>\r\nOkay so our remote repo url has been added to our local repo! Woohoo. So should just be able to push right to it now, right?\r\n<pre>$ git push</pre>\r\nWrong. Ugh.. If you entered this command you probably saw the message saying that the current branch has no upstream. What the heck is an upstream and why do I need to define one? Well, basically it defines the default remote (repo) and branch that you will be pushing to when you enter <code>$ git push</code>. This makes more sense once you start pushing to multiple remotes: dev repos, staging repos, live repos (like Heroku). You say "push" and Git asks "Which repo and which branch in that repo do you want to push to?".\r\n<h4>Set Default Remote</h4>\r\nSo go ahead and define exactly where you want your default push command to go by entering\r\n<pre>git push --set-upstream origin master</pre>\r\nThis is telling Git to set the default push destination to be your "origin" remote (your new github repo) and specifies that it should be pushed to the master branch of that repo. More on branches later. This sets the default and pushes your changes back to back. All changes from now on can be added, committed and then you just run <code>$ git push</code>. If it we\'re a staging site with a remote repo you could specify by doing <code>$ git push staging master </code>, and for pushing live <code>$ git push live master</code>, etc.\r\n\r\nAnother way around the upstream thing would be to just not define a default remote &amp; branch and specify <strong>every</strong> single time you push like so, <code>$ git push origin my_branch</code>. But thats no fun. Less is more.\r\n<h4>Okay okay okay can I push <strong>now</strong>?</h4>\r\nAlas, push that fantastic code over to your new remote now. Make another quick change and make sure it works.\r\n<pre>$ git add .\r\n$ git commit -am "More Changes"\r\n$ git push \r\n</pre>\r\nBam! I know this was a backasswards way of showing you remotes and you\'ve likely setup a Github repo before. It\'s more like error driven development. But this shows you how it really works and how you can define as many remotes per project that you see fit.', 'A beginners guide to the what, why & how of Git remotes', '', 'inherit', 'open', 'open', '', '188-revision-v1', '', '', '2014-08-26 15:54:59', '2014-08-26 20:54:59', '', 188, 'http://dev.dorails.com/railsvitamins/188-revision-v1/', 0, 'revision', '', 0) ;
INSERT INTO `wp_posts` ( `ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(201, 1, '2014-08-26 15:56:20', '2014-08-26 20:56:20', 'Git remotes we\'re confusing to me at first. What are Git remotes? Why do I need them? And how do I use them? It took me awhile to figure this out so I\'m hoping this will get you up to speed and save you from putzing around on your own like I did.\r\n<h3>What is a Git remote?</h3>\r\nA git <em>remote</em> is a remote repository or repo in another location. I feel like they could\'ve just called them <em>remote repos</em> instead. As I\'ve gotten further along with Git I\'ve gathered that a git remote is <strong>any</strong> other repo besides your current local repo that you can push to. At first I thought that a remote would actually <em>control</em> my code like a TV remote control or something. Turns out, it\'s much more practical to think of it as the TV that is being controlled – it\'s more of a <strong>remote</strong> <strong>location</strong> than a tool for controlling.\r\n\r\nFor example: If you have a local Git repo, setting up that repo to push to Github is just a quick everyday example of setting up a <em>remote </em>(or remote repo) for your project.  Github is the <em>remote </em>or remote repo. If you haven\'t done that checkout my tutorials on how to setup <a title="Get going with Git" href="http://dev.dorails.com/railsvitamins/get-going-with-git/">Git</a> &amp; <a title="Hop on the Github bandwagon" href="http://dev.dorails.com/railsvitamins/hop-on-the-github-bandwagon/">Github</a>. Github is nothing more than a fancy collection of remote repos. Heroku is another example. Heroku is a "platform as a service" that does the heavy lifting for configuring a live server. But by pushing to Heroku you are just pushing to another <em>remote</em> (repo).\r\n\r\nThis picture says it best. You\'re local repo pushes out to any remotes that you tell it to. Github, Staging Server, Production Server (like Heroku)\r\n\r\n<a href="http://dev.dorails.com/wp-content/uploads/2014/08/git-remotes.jpg"><img class="aligncenter img-responsive wp-image-196 size-full" src="http://dev.dorails.com/wp-content/uploads/2014/08/git-remotes.jpg" alt="A beginners guide to the what, why &amp; how of Git remotes" width="600" height="663" /></a>\r\n<h3>Why do you need remotes?</h3>\r\nRemotes are what makes the <code>$ git push</code> and  <code>$ git pull</code> commands possible. You\'d have nowhere to push without setting up remotes. Remotes have a lot of different purposes so I\'ll tell you why I need them. I need to setup my local Git repos to have multiple remotes so that I can push my source code to a unified place (like Github). This helps me access my code from anywhere and lets me collaborate more easily. I also need remotes setup so I can easily push to development servers for collaborating. I need to push code to staging sites to show clients work once it\'s ready to show off. And lastly I use remotes to easily push code changes to live websites and apps. This way you don\'t have to deal with the many perils of FTP, overwriting files, and *yikes* making changes on a live server. I just type $ git push heroku and my changes are live in a few seconds – no thinking required.\r\n<h3>How do you use remotes?</h3>\r\nIt\'s tricky at first, but once you see how it works it\'s easy. I\'m going to show you a kind of backwards way of doing remotes so you can get an idea of the ins-and-outs. You may have done a few of these things before, but I want to challenge you to try this a different way so you can think about it differently. If you haven\'t setup Git and setup a local repo on a project go ahead and <a title="Get going with Git" href="http://dev.dorails.com/railsvitamins/get-going-with-git/">do that now</a>. I\'ll wait :)\r\n<h4>Attempt to Push</h4>\r\nLet\'s start with the goal. We have a project that we want to push to a remote repo. Now once you have a project folder with a git repo on it open up command-line, <code>cd</code> (change directory) into your project, add a new file (anything) and then try to push the changes:\r\n<pre>$ cd /path/to/project/\r\n$ cd git init # if you haven\'t already\r\n$ touch fancyfile.rb # create any file\r\n$ git add .\r\n$ git commit -am "Created a fancy file"\r\n$ git push \r\n</pre>\r\nWell, you tried and you can\'t push! You\'ll notice that command line is yelling at you now. It probably says something like:\r\n<pre>fatal: No configured push destination.</pre>\r\nAnd git is nice enough to give you some instructions on what to do. Which we will ignore for now :). The reason you can\'t push is because you don\'t have a remote (repo) setup to push to.\r\n<h4>View your remotes</h4>\r\nTo see a list of all of your remotes enter this command:\r\n<pre>$ git remote -v</pre>\r\nThis shows you the remote repos that you can push to. A grand total of none. You should see no response in command-line as if you\'ve done nothing. That\'s okay we already knew that.\r\n<h4>Adding a remote</h4>\r\nSo how do we add a remote? The quickest, easiest way to add a remote is with Github\r\nLike a said earlier, a Github repo is just a <em>remote</em> repo. To add a remote you will go into command-line and enter\r\n<pre>$ git remote add origin https://github.com/UserName/repo_name.git</pre>\r\nYou probably don\'t know your Github URL yet because you haven\'t set it up on Github, that means you will need to setup an empty repo on Github.\r\n<h4>Setup remote repo</h4>\r\nSo to setup the remote, signup for Github if you haven\'t already. If you need help with starting Github, go <a title="Hop on the Github bandwagon" href="http://dev.dorails.com/railsvitamins/hop-on-the-github-bandwagon/">here</a>. But assuming you have a Github account already, log in and do this:\r\n<ol>\r\n	<li>Click on the <code>+</code> sign dropdown in the top right, then click <code>New Repository</code></li>\r\n	<li>On the next page, enter <code>fancy_name</code> for your repo name, select <code>Public</code>, then click <code>Create Repo</code>. (You don\'t have to have description)</li>\r\n	<li>Believe it or not your remote repo (Github repo) has been created it\'s just empty</li>\r\n</ol>\r\nNow you can add the remote like we tried above:\r\n<pre>$ git remote add origin https://github.com/UserName/repo_name.git</pre>\r\nIt\'s good to know that the <code>origin</code> is interchangeable with any title. This is the title of your remote. I\'ve used titles like "live", "stage", and "dev". But it doesn\'t really matter so long as it makes sense. Origin is a nice term for Github though because it is supposed to be your authoritative source code.\r\n<h4>Try pushing again</h4>\r\nOkay so our remote repo url has been added to our local repo! Woohoo. So should just be able to push right to it now, right?\r\n<pre>$ git push</pre>\r\nWrong. Ugh.. If you entered this command you probably saw the message saying that the current branch has no upstream. What the heck is an upstream and why do I need to define one? Well, basically it defines the default remote (repo) and branch that you will be pushing to when you enter <code>$ git push</code>. This makes more sense once you start pushing to multiple remotes: dev repos, staging repos, live repos (like Heroku). You say "push" and Git asks "Which repo and which branch in that repo do you want to push to?".\r\n<h4>Set Default Remote</h4>\r\nSo go ahead and define exactly where you want your default push command to go by entering\r\n<pre>git push --set-upstream origin master</pre>\r\nThis is telling Git to set the default push destination to be your "origin" remote (your new github repo) and specifies that it should be pushed to the master branch of that repo. More on branches later. This sets the default and pushes your changes back to back. All changes from now on can be added, committed and then you just run <code>$ git push</code>. If it we\'re a staging site with a remote repo you could specify by doing <code>$ git push staging master </code>, and for pushing live <code>$ git push live master</code>, etc.\r\n\r\nAnother way around the upstream thing would be to just not define a default remote &amp; branch and specify <strong>every</strong> single time you push like so, <code>$ git push origin my_branch</code>. But thats no fun. Less is more.\r\n<h4>Okay okay okay can I push <strong>now</strong>?</h4>\r\nAlas, push that fantastic code over to your new remote now. Make another quick change and make sure it works.\r\n<pre>$ git add .\r\n$ git commit -am "More Changes"\r\n$ git push \r\n</pre>\r\nBam! I know this was a backasswards way of showing you remotes and you\'ve likely setup a Github repo before. It\'s more like error driven development. But this shows you how it really works and how you can define as many remotes per project that you see fit.', 'A beginners guide to the what, why & how of Git remotes', '', 'inherit', 'open', 'open', '', '188-revision-v1', '', '', '2014-08-26 15:56:20', '2014-08-26 20:56:20', '', 188, 'http://dev.dorails.com/railsvitamins/188-revision-v1/', 0, 'revision', '', 0),
(202, 1, '2014-08-26 15:59:39', '2014-08-26 20:59:39', 'Git remotes we\'re confusing to me at first. What are Git remotes? Why do I need them? And how do I use them? It took me awhile to figure this out so I\'m hoping this will get you up to speed and save you from putzing around on your own like I did.\r\n<h3>What is a Git remote?</h3>\r\nA git <em>remote</em> is a remote repository or repo in another location. I feel like they could\'ve just called them <em>remote repos</em> instead. As I\'ve gotten further along with Git I\'ve gathered that a git remote is <strong>any</strong> other repo besides your current local repo that you can push to. At first I thought that a remote would actually <em>control</em> my code like a TV remote control or something. Turns out, it\'s much more practical to think of it as the TV that is being controlled – it\'s more of a <strong>remote</strong> <strong>location</strong> than a tool for controlling.\r\n\r\nFor example: If you have a local Git repo, setting up that repo to push to Github is just a quick everyday example of setting up a <em>remote </em>(or remote repo) for your project.  Github is the <em>remote </em>or remote repo. If you haven\'t done that checkout my tutorials on how to setup <a title="Get going with Git" href="http://dev.dorails.com/railsvitamins/get-going-with-git/">Git</a> &amp; <a title="Hop on the Github bandwagon" href="http://dev.dorails.com/railsvitamins/hop-on-the-github-bandwagon/">Github</a>. Github is nothing more than a fancy collection of remote repos. Heroku is another example. Heroku is a "platform as a service" that does the heavy lifting for configuring a live server. But by pushing to Heroku you are just pushing to another <em>remote</em> (repo).\r\n\r\nThis picture says it best. You\'re local repo pushes out to any remotes that you tell it to. Github, Staging Server, Production Server (like Heroku)\r\n\r\n<a href="http://dev.dorails.com/wp-content/uploads/2014/08/git-remotes.jpg"><img class="aligncenter img-responsive wp-image-196 size-full" src="http://dev.dorails.com/wp-content/uploads/2014/08/git-remotes.jpg" alt="A beginners guide to the what, why &amp; how of Git remotes" width="600" height="663" /></a>\r\n<h3>Why do you need remotes?</h3>\r\nRemotes are what makes the <code>$ git push</code> and  <code>$ git pull</code> commands possible. You\'d have nowhere to push without setting up remotes. Remotes have a lot of different purposes so I\'ll tell you why I need them. I need to setup my local Git repos to have multiple remotes so that I can push my source code to a unified place (like Github). This helps me access my code from anywhere and lets me collaborate more easily. I also need remotes setup so I can easily push to development servers for collaborating. I need to push code to staging sites to show clients work once it\'s ready to show off. And lastly I use remotes to easily push code changes to live websites and apps. This way you don\'t have to deal with the many perils of FTP, overwriting files, and *yikes* making changes on a live server. I just type $ git push heroku and my changes are live in a few seconds – no thinking required.\r\n<h3>How do you use remotes?</h3>\r\nIt\'s tricky at first, but once you see how it works it\'s easy. I\'m going to show you a kind of backwards way of doing remotes so you can get an idea of the ins-and-outs. You may have done a few of these things before, but I want to challenge you to try this a different way so you can think about it differently. If you haven\'t setup Git and setup a local repo on a project go ahead and <a title="Get going with Git" href="http://dev.dorails.com/railsvitamins/get-going-with-git/">do that now</a>. I\'ll wait :)\r\n<h4>Attempt to Push</h4>\r\nLet\'s start with the goal. We have a project that we want to push to a remote repo. Now once you have a new project folder with a git repo on it open up command-line, <code>cd</code> (change directory) into your project, add a new file (anything) and then try to push the changes:\r\n<pre>$ cd ~/Desktop\r\n$ mkdir new_project\r\n$ cd new_project\r\n$ cd git init  # create new git repo\r\n$ touch fancyfile.rb  # create any file\r\n$ git add .\r\n$ git commit -am "Created a fancy file"\r\n$ git push \r\n</pre>\r\nWell, you tried and you can\'t push! You\'ll notice that command line is yelling at you now. It probably says something like:\r\n<pre>fatal: No configured push destination.</pre>\r\nAnd git is nice enough to give you some instructions on what to do. Which we will ignore for now :). The reason you can\'t push is because you don\'t have a remote (repo) setup to push to.\r\n<h4>View your remotes</h4>\r\nTo see a list of all of your remotes enter this command:\r\n<pre>$ git remote -v</pre>\r\nThis shows you the remote repos that you can push to. A grand total of <strong>none</strong>. You should see no response in command-line as if you\'ve done nothing. That\'s okay we already knew that we don\'t have a remote yet.\r\n<h4>Adding a remote</h4>\r\nSo how do we add a remote? The quickest, easiest way to add a remote is with Github\r\nLike a said earlier, a Github repo is just a <em>remote</em> repo. To add a remote you will go into command-line and enter\r\n<pre>$ git remote add origin https://github.com/UserName/repo_name.git</pre>\r\nYou probably don\'t know your Github URL yet because you haven\'t set it up on Github, that means you will need to setup an empty repo on Github.\r\n<h4>Setup remote repo</h4>\r\nSo to setup the remote, signup for Github if you haven\'t already. If you need help with starting Github, go <a title="Hop on the Github bandwagon" href="http://dev.dorails.com/railsvitamins/hop-on-the-github-bandwagon/">here</a>. But assuming you have a Github account already, log in and do this:\r\n<ol>\r\n	<li>Click on the <code>+</code> sign dropdown in the top right, then click <code>New Repository</code></li>\r\n	<li>On the next page, enter <code>fancy_name</code> for your repo name, select <code>Public</code>, then click <code>Create Repo</code>. (You don\'t have to have description)</li>\r\n	<li>Believe it or not your remote repo (Github repo) has been created it\'s just empty</li>\r\n</ol>\r\nNow you can add the remote like we tried above:\r\n<pre>$ git remote add origin https://github.com/UserName/repo_name.git</pre>\r\nIt\'s good to know that the <code>origin</code> is interchangeable with any title. This is the title of your remote. I\'ve used titles like "live", "stage", and "dev". But it doesn\'t really matter so long as it makes sense. Origin is a nice term for Github though because it is supposed to be your authoritative source code.\r\n<h4>Try pushing again</h4>\r\nOkay so our remote repo url has been added to our local repo! Woohoo. So should just be able to push right to it now, right?\r\n<pre>$ git push</pre>\r\nWrong. Ugh.. If you entered this command you probably saw the message saying that the current branch has no upstream. What the heck is an upstream and why do I need to define one? Well, basically it defines the default remote (repo) and branch that you will be pushing to when you enter <code>$ git push</code>. This makes more sense once you start pushing to multiple remotes: dev repos, staging repos, live repos (like Heroku). You say "push" and Git asks "Which repo and which branch in that repo do you want to push to?".\r\n<h4>Set Default Remote</h4>\r\nSo go ahead and define exactly where you want your default push command to go by entering\r\n<pre>git push --set-upstream origin master</pre>\r\nThis is telling Git to set the default push destination to be your "origin" remote (your new github repo) and specifies that it should be pushed to the master branch of that repo. More on branches later. This sets the default and pushes your changes back to back. All changes from now on can be added, committed and then you just run <code>$ git push</code>. If it we\'re a staging site with a remote repo you could specify by doing <code>$ git push staging master </code>, and for pushing live <code>$ git push live master</code>, etc.\r\n\r\nAnother way around the upstream thing would be to just not define a default remote &amp; branch and specify <strong>every</strong> single time you push like so, <code>$ git push origin my_branch</code>. But thats no fun. Less is more.\r\n<h4>Okay okay okay can I push <strong>now</strong>?</h4>\r\nAlas, push that fantastic code over to your new remote now. Make another quick change and make sure it works.\r\n<pre>$ git add .\r\n$ git commit -am "More Changes"\r\n$ git push \r\n</pre>\r\nBam! I know this was a backasswards way of showing you remotes and you\'ve likely setup a Github repo before. It\'s more like error driven development. But this shows you how it really works and how you can define as many remotes per project that you see fit.', 'A beginners guide to the what, why & how of Git remotes', '', 'inherit', 'open', 'open', '', '188-revision-v1', '', '', '2014-08-26 15:59:39', '2014-08-26 20:59:39', '', 188, 'http://dev.dorails.com/railsvitamins/188-revision-v1/', 0, 'revision', '', 0),
(203, 1, '2014-08-26 16:03:24', '2014-08-26 21:03:24', 'Git remotes we\'re confusing to me at first. What are Git remotes? Why do I need them? And how do I use them? It took me awhile to figure this out so I\'m hoping this will get you up to speed and save you from putzing around on your own like I did.\r\n<h3>What is a Git remote?</h3>\r\nA git <em>remote</em> is a remote repository or repo in another location. I feel like they could\'ve just called them <em>remote repos</em> instead. As I\'ve gotten further along with Git I\'ve gathered that a git remote is <strong>any</strong> other repo besides your current local repo that you can push to. At first I thought that a remote would actually <em>control</em> my code like a TV remote control or something. Turns out, it\'s much more practical to think of it as the TV that is being controlled – it\'s more of a <strong>remote</strong> <strong>location</strong> than a tool for controlling.\r\n\r\nFor example: If you have a local Git repo, setting up that repo to push to Github is just a quick everyday example of setting up a <em>remote </em>(or remote repo) for your project.  Github is the <em>remote </em>or remote repo. If you haven\'t done that checkout my tutorials on how to setup <a title="Get going with Git" href="http://dev.dorails.com/railsvitamins/get-going-with-git/">Git</a> &amp; <a title="Hop on the Github bandwagon" href="http://dev.dorails.com/railsvitamins/hop-on-the-github-bandwagon/">Github</a>. Github is nothing more than a fancy collection of remote repos. Heroku is another example. Heroku is a "platform as a service" that does the heavy lifting for configuring a live server. But by pushing to Heroku you are just pushing to another <em>remote</em> (repo).\r\n\r\nThis picture says it best. You\'re local repo pushes out to any remotes that you tell it to. Github, Staging Server, Production Server (like Heroku)\r\n\r\n<a href="http://dev.dorails.com/wp-content/uploads/2014/08/git-remotes.jpg"><img class="aligncenter img-responsive wp-image-196 size-full" src="http://dev.dorails.com/wp-content/uploads/2014/08/git-remotes.jpg" alt="A beginners guide to the what, why &amp; how of Git remotes" width="600" height="663" /></a>\r\n<h3>Why do you need remotes?</h3>\r\nRemotes are what makes the <code>$ git push</code> and  <code>$ git pull</code> commands possible. You\'d have nowhere to push without setting up remotes. Remotes have a lot of different purposes so I\'ll tell you why I need them. I need to setup my local Git repos to have multiple remotes so that I can push my source code to a unified place (like Github). This helps me access my code from anywhere and lets me collaborate more easily. I also need remotes setup so I can easily push to development servers for collaborating. I need to push code to staging sites to show clients work once it\'s ready to show off. And lastly I use remotes to easily push code changes to live websites and apps. This way you don\'t have to deal with the many perils of FTP, overwriting files, and *yikes* making changes on a live server. I just type $ git push heroku and my changes are live in a few seconds – no thinking required.\r\n<h3>How do you use remotes?</h3>\r\nIt\'s tricky at first, but once you see how it works it\'s easy. I\'m going to show you a kind of backwards way of doing remotes so you can get an idea of the ins-and-outs. You may have done a few of these things before, but I want to challenge you to try this a different way so you can think about it differently. If you haven\'t setup Git and setup a local repo on a project go ahead and <a title="Get going with Git" href="http://dev.dorails.com/railsvitamins/get-going-with-git/">do that now</a>. I\'ll wait :)\r\n<h4>Attempt to Push</h4>\r\nLet\'s start with the goal. We have a project that we want to push to a remote repo. Now once you have a new project folder with a git repo on it open up command-line, <code>cd</code> (change directory) into your project, add a new file (anything) and then try to push the changes:\r\n<pre>$ cd ~/Desktop\r\n$ mkdir new_project\r\n$ cd new_project\r\n$ cd git init  # create new git repo\r\n$ touch fancyfile.rb  # create any file\r\n$ git add .\r\n$ git commit -am "Created a fancy file"\r\n$ git push \r\n</pre>\r\nWell, you tried and you can\'t push! You\'ll notice that command line is yelling at you now. It probably says something like:\r\n<pre>fatal: No configured push destination.</pre>\r\nAnd git is nice enough to give you some instructions on what to do. Which we will ignore for now :). The reason you can\'t push is because you don\'t have a remote (repo) setup to push to.\r\n<h4>View your remotes</h4>\r\nTo see a list of all of your remotes enter this command:\r\n<pre>$ git remote -v</pre>\r\nThis shows you the remote repos that you can push to. A grand total of <strong>none</strong>. You should see no response in command-line as if you\'ve done nothing. That\'s okay we already knew that we don\'t have a remote yet.\r\n<h4>Adding a remote</h4>\r\nSo how do we add a remote? The quickest, easiest way to add a remote is with Github. Like a said earlier, a Github repo is just a <em>remote</em> repo. To add a remote you will go into command-line and enter\r\n<pre>$ git remote add origin https://github.com/UserName/repo_name.git</pre>\r\nYou probably don\'t know your Github URL yet because you haven\'t set it up on Github, that means you will need to setup an empty repo on Github.\r\n<h4>Setup remote repo</h4>\r\nSo to setup the remote, signup for Github if you haven\'t already. If you need help with starting Github, go <a title="Hop on the Github bandwagon" href="http://dev.dorails.com/railsvitamins/hop-on-the-github-bandwagon/">here</a>. But assuming you have a Github account already, log in and do this:\r\n<ol>\r\n	<li>Click on the <code>+</code> sign dropdown in the top right, then click <code>New Repository</code></li>\r\n	<li>On the next page, enter <code>fancy_name</code> for your repo name, select <code>Public</code>, then click <code>Create Repo</code>. (You don\'t have to have description)</li>\r\n	<li>Believe it or not your remote repo (Github repo) has been created it\'s just empty</li>\r\n</ol>\r\nNow you can add the remote like we tried above:\r\n<pre>$ git remote add origin https://github.com/UserName/repo_name.git</pre>\r\nIt\'s good to know that the <code>origin</code> is interchangeable with any title. This is the title of your remote. I\'ve used titles like "live", "stage", and "dev". But it doesn\'t really matter so long as it makes sense. Origin is a nice term for Github though because it is supposed to be your authoritative source code.\r\n<h4>Try pushing again</h4>\r\nOkay so our remote repo url has been added to our local repo! Woohoo. So should just be able to push right to it now, right?\r\n<pre>$ git push</pre>\r\nWrong. Ugh.. If you entered this command you probably saw the message saying that the current branch has no upstream. What the heck is an upstream and why do I need to define one? Well, basically it defines the default remote (repo) and branch that you will be pushing to when you enter <code>$ git push</code>. This makes more sense once you start pushing to multiple remotes: dev repos, staging repos, live repos (like Heroku). You say "push" and Git asks "Which repo and which branch in that repo do you want to push to?".\r\n<h4>Set Default Remote</h4>\r\nSo go ahead and define exactly where you want your default push command to go by entering\r\n<pre>git push --set-upstream origin master</pre>\r\nThis is telling Git to set the default push destination to be your "origin" remote (your new github repo) and specifies that it should be pushed to the master branch of that repo. More on branches later. This sets the default and pushes your changes back to back. All changes from now on can be added, committed and then you just run <code>$ git push</code>. If it we\'re a staging site with a remote repo you could specify by doing <code>$ git push staging master </code>, and for pushing live <code>$ git push live master</code>, etc.\r\n\r\nAnother way around the upstream thing would be to just not define a default remote &amp; branch and specify <strong>every</strong> single time you push like so, <code>$ git push origin my_branch</code>. But thats no fun. Less is more.\r\n<h4>Okay okay okay can I push <strong>now</strong>?</h4>\r\nAlas, push that fantastic code over to your new remote now. Make another quick change and make sure it works.\r\n<pre>$ git add .\r\n$ git commit -am "More Changes"\r\n$ git push \r\n</pre>\r\nBam! I know this was a backasswards way of showing you remotes and you\'ve likely setup a Github repo before. It\'s more like error driven development. But this shows you how it really works and how you can define as many remotes per project that you see fit.', 'A beginners guide to the what, why & how of Git remotes', '', 'inherit', 'open', 'open', '', '188-revision-v1', '', '', '2014-08-26 16:03:24', '2014-08-26 21:03:24', '', 188, 'http://dev.dorails.com/railsvitamins/188-revision-v1/', 0, 'revision', '', 0),
(204, 1, '2014-08-26 16:03:56', '2014-08-26 21:03:56', 'Git remotes we\'re confusing to me at first. What are Git remotes? Why do I need them? And how do I use them? It took me awhile to figure this out so I\'m hoping this will get you up to speed and save you from putzing around on your own like I did.\r\n<h3>What is a Git remote?</h3>\r\nA git <em>remote</em> is a remote repository or repo in another location. I feel like they could\'ve just called them <em>remote repos</em> instead. As I\'ve gotten further along with Git I\'ve gathered that a git remote is <strong>any</strong> other repo besides your current local repo that you can push to. At first I thought that a remote would actually <em>control</em> my code like a TV remote control or something. Turns out, it\'s much more practical to think of it as the TV that is being controlled – it\'s more of a <strong>remote</strong> <strong>location</strong> than a tool for controlling.\r\n\r\nFor example: If you have a local Git repo, setting up that repo to push to Github is just a quick everyday example of setting up a <em>remote </em>(or remote repo) for your project.  Github is the <em>remote </em>or remote repo. If you haven\'t done that checkout my tutorials on how to setup <a title="Get going with Git" href="http://dev.dorails.com/railsvitamins/get-going-with-git/">Git</a> &amp; <a title="Hop on the Github bandwagon" href="http://dev.dorails.com/railsvitamins/hop-on-the-github-bandwagon/">Github</a>. Github is nothing more than a fancy collection of remote repos. Heroku is another example. Heroku is a "platform as a service" that does the heavy lifting for configuring a live server. But by pushing to Heroku you are just pushing to another <em>remote</em> (repo).\r\n\r\nThis picture says it best. You\'re local repo pushes out to any remotes that you tell it to. Github, Staging Server, Production Server (like Heroku)\r\n\r\n<a href="http://dev.dorails.com/wp-content/uploads/2014/08/git-remotes.jpg"><img class="aligncenter img-responsive wp-image-196 size-full" src="http://dev.dorails.com/wp-content/uploads/2014/08/git-remotes.jpg" alt="A beginners guide to the what, why &amp; how of Git remotes" width="600" height="663" /></a>\r\n<h3>Why do you need remotes?</h3>\r\nRemotes are what makes the <code>$ git push</code> and  <code>$ git pull</code> commands possible. You\'d have nowhere to push without setting up remotes. Remotes have a lot of different purposes so I\'ll tell you why I need them. I need to setup my local Git repos to have multiple remotes so that I can push my source code to a unified place (like Github). This helps me access my code from anywhere and lets me collaborate more easily. I also need remotes setup so I can easily push to development servers for collaborating. I need to push code to staging sites to show clients work once it\'s ready to show off. And lastly I use remotes to easily push code changes to live websites and apps. This way you don\'t have to deal with the many perils of FTP, overwriting files, and *yikes* making changes on a live server. I just type $ git push heroku and my changes are live in a few seconds – no thinking required.\r\n<h3>How do you use remotes?</h3>\r\nIt\'s tricky at first, but once you see how it works it\'s easy. I\'m going to show you a kind of backwards way of doing remotes so you can get an idea of the ins-and-outs. You may have done a few of these things before, but I want to challenge you to try this a different way so you can think about it differently. If you haven\'t setup Git and setup a local repo on a project go ahead and <a title="Get going with Git" href="http://dev.dorails.com/railsvitamins/get-going-with-git/">do that now</a>. I\'ll wait :)\r\n<h4>Attempt to Push</h4>\r\nLet\'s start with the goal. We have a project that we want to push to a remote repo. Now once you have a new project folder with a git repo on it open up command-line, <code>cd</code> (change directory) into your project, add a new file (anything) and then try to push the changes:\r\n<pre>$ cd ~/Desktop\r\n$ mkdir new_project\r\n$ cd new_project\r\n$ cd git init  # create new git repo\r\n$ touch fancyfile.rb  # create any file\r\n$ git add .\r\n$ git commit -am "Created a fancy file"\r\n$ git push \r\n</pre>\r\nWell, you tried and you can\'t push! You\'ll notice that command line is yelling at you now. It probably says something like:\r\n<pre>fatal: No configured push destination.</pre>\r\nAnd git is nice enough to give you some instructions on what to do. Which we will ignore for now :). The reason you can\'t push is because you don\'t have a remote (repo) setup to push to.\r\n<h4>View your remotes</h4>\r\nTo see a list of all of your remotes enter this command:\r\n<pre>$ git remote -v</pre>\r\nThis shows you the remote repos that you can push to. A grand total of <strong>none</strong>. You should see no response in command-line as if you\'ve done nothing. That\'s okay we already knew that we don\'t have a remote yet.\r\n<h4>Adding a remote</h4>\r\nSo how do we add a remote? The quickest, easiest way to add a remote is with Github. Like a said earlier, a Github repo is just a <em>remote</em> repo. To add a remote you will go into command-line and enter\r\n<pre>$ git remote add origin https://github.com/UserName/repo_name.git</pre>\r\nYou probably don\'t know your Github URL yet because you haven\'t set it up on Github, that means you will need to setup an empty repo on Github.\r\n<h4>Setup remote repo</h4>\r\nSo to setup the remote, signup for Github if you haven\'t already. If you need help starting with Github, go <a title="Hop on the Github bandwagon" href="http://dev.dorails.com/railsvitamins/hop-on-the-github-bandwagon/">here</a>. But assuming you have a Github account already, log in and do this:\r\n<ol>\r\n	<li>Click on the <code>+</code> sign dropdown in the top right, then click <code>New Repository</code></li>\r\n	<li>On the next page, enter <code>fancy_name</code> for your repo name, select <code>Public</code>, then click <code>Create Repo</code>. (You don\'t have to have description)</li>\r\n	<li>Believe it or not your remote repo (Github repo) has been created it\'s just empty</li>\r\n</ol>\r\nNow you can add the remote like we tried above:\r\n<pre>$ git remote add origin https://github.com/UserName/repo_name.git</pre>\r\nIt\'s good to know that the <code>origin</code> is interchangeable with any title. This is the title of your remote. I\'ve used titles like "live", "stage", and "dev". But it doesn\'t really matter so long as it makes sense. Origin is a nice term for Github though because it is supposed to be your authoritative source code.\r\n<h4>Try pushing again</h4>\r\nOkay so our remote repo url has been added to our local repo! Woohoo. So should just be able to push right to it now, right?\r\n<pre>$ git push</pre>\r\nWrong. Ugh.. If you entered this command you probably saw the message saying that the current branch has no upstream. What the heck is an upstream and why do I need to define one? Well, basically it defines the default remote (repo) and branch that you will be pushing to when you enter <code>$ git push</code>. This makes more sense once you start pushing to multiple remotes: dev repos, staging repos, live repos (like Heroku). You say "push" and Git asks "Which repo and which branch in that repo do you want to push to?".\r\n<h4>Set Default Remote</h4>\r\nSo go ahead and define exactly where you want your default push command to go by entering\r\n<pre>git push --set-upstream origin master</pre>\r\nThis is telling Git to set the default push destination to be your "origin" remote (your new github repo) and specifies that it should be pushed to the master branch of that repo. More on branches later. This sets the default and pushes your changes back to back. All changes from now on can be added, committed and then you just run <code>$ git push</code>. If it we\'re a staging site with a remote repo you could specify by doing <code>$ git push staging master </code>, and for pushing live <code>$ git push live master</code>, etc.\r\n\r\nAnother way around the upstream thing would be to just not define a default remote &amp; branch and specify <strong>every</strong> single time you push like so, <code>$ git push origin my_branch</code>. But thats no fun. Less is more.\r\n<h4>Okay okay okay can I push <strong>now</strong>?</h4>\r\nAlas, push that fantastic code over to your new remote now. Make another quick change and make sure it works.\r\n<pre>$ git add .\r\n$ git commit -am "More Changes"\r\n$ git push \r\n</pre>\r\nBam! I know this was a backasswards way of showing you remotes and you\'ve likely setup a Github repo before. It\'s more like error driven development. But this shows you how it really works and how you can define as many remotes per project that you see fit.', 'A beginners guide to the what, why & how of Git remotes', '', 'inherit', 'open', 'open', '', '188-revision-v1', '', '', '2014-08-26 16:03:56', '2014-08-26 21:03:56', '', 188, 'http://dev.dorails.com/railsvitamins/188-revision-v1/', 0, 'revision', '', 0),
(205, 1, '2014-08-26 16:08:06', '2014-08-26 21:08:06', 'Git remotes we\'re confusing to me at first. What are Git remotes? Why do I need them? And how do I use them? It took me awhile to figure this out so I\'m hoping this will get you up to speed and save you from putzing around on your own like I did.\r\n<h3>What is a Git remote?</h3>\r\nA git <em>remote</em> is a remote repository or repo in another location. I feel like they could\'ve just called them <em>remote repos</em> instead. As I\'ve gotten further along with Git I\'ve gathered that a git remote is <strong>any</strong> other repo besides your current local repo that you can push to. At first I thought that a remote would actually <em>control</em> my code like a TV remote control or something. Turns out, it\'s much more practical to think of it as the TV that is being controlled – it\'s more of a <strong>remote</strong> <strong>location</strong> than a tool for controlling.\r\n\r\nFor example: If you have a local Git repo, setting up that repo to push to Github is just a quick everyday example of setting up a <em>remote </em>(or remote repo) for your project.  Github is the <em>remote </em>or remote repo. If you haven\'t done that checkout my tutorials on how to setup <a title="Get going with Git" href="http://dev.dorails.com/railsvitamins/get-going-with-git/">Git</a> &amp; <a title="Hop on the Github bandwagon" href="http://dev.dorails.com/railsvitamins/hop-on-the-github-bandwagon/">Github</a>. Github is nothing more than a fancy collection of remote repos. Heroku is another example. Heroku is a "platform as a service" that does the heavy lifting for configuring a live server. But by pushing to Heroku you are just pushing to another <em>remote</em> (repo).\r\n\r\nThis picture says it best. You\'re local repo pushes out to any remotes that you tell it to. Github, Staging Server, Production Server (like Heroku)\r\n\r\n<a href="http://dev.dorails.com/wp-content/uploads/2014/08/git-remotes.jpg"><img class="aligncenter img-responsive wp-image-196 size-full" src="http://dev.dorails.com/wp-content/uploads/2014/08/git-remotes.jpg" alt="A beginners guide to the what, why &amp; how of Git remotes" width="600" height="663" /></a>\r\n<h3>Why do you need remotes?</h3>\r\nRemotes are what makes the <code>$ git push</code> and  <code>$ git pull</code> commands possible. You\'d have nowhere to push without setting up remotes. Remotes have a lot of different purposes so I\'ll tell you why I need them. I need to setup my local Git repos to have multiple remotes so that I can push my source code to a unified place (like Github). This helps me access my code from anywhere and lets me collaborate more easily. I also need remotes setup so I can easily push to development servers for collaborating. I need to push code to staging sites to show clients work once it\'s ready to show off. And lastly I use remotes to easily push code changes to live websites and apps. This way you don\'t have to deal with the many perils of FTP, overwriting files, and *yikes* making changes on a live server. I just type $ git push heroku and my changes are live in a few seconds – no thinking required.\r\n<h3>How do you use remotes?</h3>\r\nIt\'s tricky at first, but once you see how it works it\'s easy. I\'m going to show you a kind of backwards way of doing remotes so you can get an idea of the ins-and-outs. You may have done a few of these things before, but I want to challenge you to try this a different way so you can think about it differently. If you haven\'t setup Git and setup a local repo on a project go ahead and <a title="Get going with Git" href="http://dev.dorails.com/railsvitamins/get-going-with-git/">do that now</a>. I\'ll wait :)\r\n<h4>Attempt to Push</h4>\r\nLet\'s start with the goal. We have a project that we want to push to a remote repo. Now once you have a new project folder with a git repo on it open up command-line, <code>cd</code> (change directory) into your project, add a new file (anything) and then try to push the changes:\r\n<pre>$ cd ~/Desktop\r\n$ mkdir new_project\r\n$ cd new_project\r\n$ cd git init  # create new git repo\r\n$ touch fancyfile.rb  # create any file\r\n$ git add .\r\n$ git commit -am "Created a fancy file"\r\n$ git push \r\n</pre>\r\nWell, you tried and you can\'t push! You\'ll notice that command line is yelling at you now. It probably says something like:\r\n<pre>fatal: No configured push destination.</pre>\r\nAnd git is nice enough to give you some instructions on what to do. Which we will ignore for now :). The reason you can\'t push is because you don\'t have a remote (repo) setup to push to.\r\n<h4>View your remotes</h4>\r\nTo see a list of all of your remotes enter this command:\r\n<pre>$ git remote -v</pre>\r\nThis shows you the remote repos that you can push to. A grand total of <strong>none</strong>. You should see no response in command-line as if you\'ve done nothing. That\'s okay we already knew that we don\'t have a remote yet.\r\n<h4>Adding a remote</h4>\r\nSo how do we add a remote? The quickest, easiest way to add a remote is with Github. Like a said earlier, a Github repo is just a <em>remote</em> repo. To add a remote you will go into command-line and enter\r\n<pre>$ git remote add origin https://github.com/UserName/repo_name.git</pre>\r\nYou probably don\'t know your Github URL yet because you haven\'t set it up on Github, that means you will need to setup an empty repo on Github.\r\n<h4>Setup remote repo</h4>\r\nSo to setup the remote, signup for Github if you haven\'t already. If you need help starting with Github, go <a title="Hop on the Github bandwagon" href="http://dev.dorails.com/railsvitamins/hop-on-the-github-bandwagon/">here</a>. But assuming you have a Github account already, log in and do this:\r\n<ol>\r\n	<li>Click on the <code>+</code> sign dropdown in the top right, then click <code>New Repository</code></li>\r\n	<li>On the next page, enter <code>fancy_name</code> for your repo name, select <code>Public</code>, then click <code>Create Repo</code>. (You don\'t have to have description)</li>\r\n	<li>Believe it or not your remote repo (Github repo) has been created it\'s just empty</li>\r\n</ol>\r\n<h4>Add Remote (for real this time)</h4>\r\nSo we\'ve got our remote repo ready, we just need to push our project to it. So back in the command-line you can now add the remote like we tried above:\r\n<pre>$ git remote add origin https://github.com/UserName/repo_name.git</pre>\r\nIt\'s good to know that the <code>origin</code> is interchangeable with any title. This is the title of your remote. I\'ve used titles like "live", "stage", and "dev". But it doesn\'t really matter so long as it makes sense. Origin is a nice term for Github though because it is supposed to be your authoritative source code.\r\n<h4>Try pushing again</h4>\r\nOkay so our remote repo url has been added to our local repo! Woohoo. So you should just be able to push right to it now, right?\r\n<pre>$ git push</pre>\r\nWrong. Ugh.. If you entered this command you probably saw the message saying that the current branch has no upstream. What the heck is an upstream and why do I need to define one? Well, basically it defines the default remote (repo) and branch that you will be pushing to when you enter <code>$ git push</code>. This makes more sense once you start pushing to multiple remotes: dev repos, staging repos, live repos (like Heroku). You say "push" and Git asks "Which repo and which branch in that repo do you want to push to?".\r\n<h4>Set Default Remote</h4>\r\nSo go ahead and define exactly where you want your default push command to go by entering\r\n<pre>git push --set-upstream origin master</pre>\r\nThis is telling Git to set the default push destination to be your "origin" remote (your new github repo) and specifies that it should be pushed to the master branch of that repo. More on branches later. This sets the default and pushes your changes back to back. All changes from now on can be added, committed and then you just run <code>$ git push</code>. If it we\'re a staging site with a remote repo you could specify by doing <code>$ git push staging master </code>, and for pushing live <code>$ git push live master</code>, etc.\r\n\r\nAnother way around the upstream thing would be to just not define a default remote &amp; branch and specify <strong>every</strong> single time you push like so, <code>$ git push origin my_branch</code>. But thats no fun. Less is more.\r\n<h4>Okay okay okay can I push <strong>now</strong>?</h4>\r\nAlas, push that fantastic code over to your new remote now. Make another quick change and make sure it works.\r\n<pre>$ git add .\r\n$ git commit -am "More Changes"\r\n$ git push \r\n</pre>\r\nBam! I know this was a backasswards way of showing you remotes and you\'ve likely setup a Github repo before. It\'s more like error driven development. But this shows you how it really works and how you can define as many remotes per project that you see fit.', 'A beginners guide to the what, why & how of Git remotes', '', 'inherit', 'open', 'open', '', '188-revision-v1', '', '', '2014-08-26 16:08:06', '2014-08-26 21:08:06', '', 188, 'http://dev.dorails.com/railsvitamins/188-revision-v1/', 0, 'revision', '', 0) ;
INSERT INTO `wp_posts` ( `ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(206, 1, '2014-08-26 16:20:36', '2014-08-26 21:20:36', 'Git remotes we\'re confusing to me at first. What are Git remotes? Why do I need them? And how do I use them? It took me awhile to figure this out so I\'m hoping this will get you up to speed and save you from putzing around on your own like I did.\r\n<h3>What is a Git remote?</h3>\r\nA git <em>remote</em> is a remote repository or repo in another location. I feel like they could\'ve just called them <em>remote repos</em> instead. As I\'ve gotten further along with Git I\'ve gathered that a git remote is <strong>any</strong> other repo besides your current local repo that you can push to. At first I thought that a remote would actually <em>control</em> my code like a TV remote control or something. Turns out, it\'s much more practical to think of it as the TV that is being controlled – it\'s more of a <strong>remote</strong> <strong>location</strong> than a tool for controlling.\r\n\r\nFor example: If you have a local Git repo, setting up that repo to push to Github is just a quick everyday example of setting up a <em>remote </em>(or remote repo) for your project.  Github is the <em>remote </em>or remote repo. If you haven\'t done that checkout my tutorials on how to setup <a title="Get going with Git" href="http://dev.dorails.com/railsvitamins/get-going-with-git/">Git</a> &amp; <a title="Hop on the Github bandwagon" href="http://dev.dorails.com/railsvitamins/hop-on-the-github-bandwagon/">Github</a>. Github is nothing more than a fancy collection of remote repos. Heroku is another example. Heroku is a "platform as a service" that does the heavy lifting for configuring a live server. But by pushing to Heroku you are just pushing to another <em>remote</em> (repo).\r\n\r\nThis picture says it best. You\'re local repo pushes out to any remotes that you tell it to. Github, Staging Server, Production Server (like Heroku)\r\n\r\n<a href="http://dev.dorails.com/wp-content/uploads/2014/08/git-remotes.jpg"><img class="aligncenter img-responsive wp-image-196 size-full" src="http://dev.dorails.com/wp-content/uploads/2014/08/git-remotes.jpg" alt="A beginners guide to the what, why &amp; how of Git remotes" width="600" height="663" /></a>\r\n<h3>Why do you need remotes?</h3>\r\nRemotes are what makes the <code>$ git push</code> and  <code>$ git pull</code> commands possible. You\'d have nowhere to push without setting up remotes. Remotes have a lot of different purposes so I\'ll tell you why I need them. I need to setup my local Git repos to have multiple remotes so that I can push my source code to a unified place (like Github). This helps me access my code from anywhere and lets me collaborate more easily. I also need remotes setup so I can easily push to development servers for collaborating. I need to push code to staging sites to show clients work once it\'s ready to show off. And lastly I use remotes to easily push code changes to live websites and apps. This way you don\'t have to deal with the many perils of FTP, overwriting files, and *yikes* making changes on a live server. I just type $ git push heroku and my changes are live in a few seconds – no thinking required.\r\n<h3>How do you use remotes?</h3>\r\nIt\'s tricky at first, but once you see how it works it\'s easy. I\'m going to show you a kind of backwards way of doing remotes so you can get an idea of the ins-and-outs. You may have done a few of these things before, but I want to challenge you to try this a different way so you can think about it differently. If you haven\'t setup Git and setup a local repo on a project go ahead and <a title="Get going with Git" href="http://dev.dorails.com/railsvitamins/get-going-with-git/">do that now</a>. I\'ll wait :)\r\n<h4>Attempt to Push</h4>\r\nLet\'s start with the goal. We have a project that we want to push to a remote repo. Now once you have a new project folder with a git repo on it open up command-line, <code>cd</code> (change directory) into your project, add a new file (anything) and then try to push the changes:\r\n<pre>$ cd ~/Desktop\r\n$ mkdir new_project\r\n$ cd new_project\r\n$ cd git init  # create new git repo\r\n$ touch fancyfile.rb  # create any file\r\n$ git add .\r\n$ git commit -am "Created a fancy file"\r\n$ git push \r\n</pre>\r\nWell, you tried and you can\'t push! You\'ll notice that command line is yelling at you now. It probably says something like:\r\n<pre>fatal: No configured push destination.</pre>\r\nAnd git is nice enough to give you some instructions on what to do. Which we will ignore for now :). The reason you can\'t push is because you don\'t have a remote (repo) setup to push to.\r\n<h4>View your remotes</h4>\r\nTo see a list of all of your remotes enter this command:\r\n<pre>$ git remote -v</pre>\r\nThis shows you the remote repos that you can push to. A grand total of <strong>none</strong>. You should see no response in command-line as if you\'ve done nothing. That\'s okay we already knew that we don\'t have a remote yet.\r\n<h4>Adding a remote</h4>\r\nSo how do we add a remote? The quickest, easiest way to add a remote is with Github. Like a said earlier, a Github repo is just a <em>remote</em> repo. To add a remote you will go into command-line and enter\r\n<pre>$ git remote add origin https://github.com/UserName/repo_name.git</pre>\r\nYou probably don\'t know your Github URL yet because you haven\'t set it up on Github, that means you will need to setup an empty repo on Github.\r\n<h4>Setup remote repo</h4>\r\nSo to setup the remote, signup for Github if you haven\'t already. If you need help starting with Github, go <a title="Hop on the Github bandwagon" href="http://dev.dorails.com/railsvitamins/hop-on-the-github-bandwagon/">here</a>. But assuming you have a Github account already, log in and do this:\r\n<ol>\r\n	<li>Click on the <code>+</code> sign dropdown in the top right, then click <code>New Repository</code></li>\r\n	<li>On the next page, enter <code>fancy_name</code> for your repo name, select <code>Public</code>, then click <code>Create Repo</code>. (You don\'t have to have description)</li>\r\n	<li>Believe it or not your remote repo (Github repo) has been created it\'s just empty</li>\r\n</ol>\r\n<h4>Add Remote (for real this time)</h4>\r\nSo we\'ve got our remote repo ready, we just need to push our project to it. So back in the command-line you can now add the remote like we tried above:\r\n<pre>$ git remote add origin https://github.com/UserName/repo_name.git</pre>\r\nIt\'s good to know that the <code>origin</code> is interchangeable with any title. This is the title of your remote. I\'ve used titles like "live", "stage", and "dev". But it doesn\'t really matter so long as it makes sense. Origin is a nice term for Github though because it is supposed to be your authoritative source code.\r\n<h4>Try pushing again</h4>\r\nOkay so our remote repo url has been added to our local repo! Woohoo. So you should just be able to push right to it now, right?\r\n<pre>$ git push</pre>\r\nWrong. Ugh.. If you entered this command you probably saw the message saying that the current branch has no upstream. What the heck is an upstream and why do I need to define one? Well, basically it defines the default remote (repo) and branch that you will be pushing to when you enter <code>$ git push</code>. This makes more sense once you start pushing to multiple remotes: dev repos, staging repos, live repos (like Heroku). You say "push" and Git asks "Which repo and which branch in that repo do you want to push to?".\r\n<h4>Set Default Remote</h4>\r\nSo go ahead and define exactly where you want your default push command to go by entering\r\n<pre>git push --set-upstream origin master</pre>\r\nThis is telling Git to set the default push destination to be your "origin" remote (your new github repo) and specifies that it should be pushed to the master branch of that repo. More on branches later. This sets the default and pushes your changes back to back. All changes from now on can be added, committed and then you just run <code>$ git push</code>.\r\n\r\nTo give you an idea though, you can set remote titles to push to different remotes once you know how it works. If it we\'re a staging site with a remote repo you might specify by doing <code>$ git push staging master </code>, and for pushing live <code>$ git push live master</code>, etc, etc.\r\n\r\nAnother way around the upstream thing would be to just not define a default remote &amp; branch and specify <strong>every</strong> single time you push like so, <code>$ git push origin my_branch</code>. But thats no fun. Less is more.\r\n<h4>Okay okay okay can I push <strong>now</strong>?</h4>\r\nAlas, push that fantastic code over to your new remote now. Make another quick change and make sure it works.\r\n<pre>$ git add .\r\n$ git commit -am "More Changes"\r\n$ git push \r\n</pre>\r\n<h3>Bam!</h3>\r\nSo the basic steps for setting up Remotes are to:\r\n<ol>\r\n	<li>Setup local Git repo</li>\r\n	<li>Setup remote Git repo</li>\r\n	<li>Add remote to local Git repo</li>\r\n	<li>Push to your changes to your remote repo</li>\r\n</ol>\r\nI know this was a backasswards way of showing you remotes and you\'ve likely setup a Github repo before. But this shows you how it really works and how you can define as many remotes per project that you see fit.\r\n\r\nI love using tools like Git with Rails. But I\'ve even used this understanding of remotes to add repos on my Digital Ocean servers for Wordpress sites to Railsify my WP workflow as well.\r\n\r\nLet me know if you have any questions about remotes, there are a lot of different things you can do with them.', 'A beginners guide to the what, why & how of Git remotes', '', 'inherit', 'open', 'open', '', '188-revision-v1', '', '', '2014-08-26 16:20:36', '2014-08-26 21:20:36', '', 188, 'http://dev.dorails.com/railsvitamins/188-revision-v1/', 0, 'revision', '', 0),
(207, 1, '2014-08-26 16:23:59', '2014-08-26 21:23:59', 'Git remotes we\'re confusing to me at first. What are Git remotes? Why do I need them? And how do I use them? It took me awhile to figure this out so I\'m hoping this will get you up to speed and save you from putzing around on your own like I did.\r\n<h3>What is a Git remote?</h3>\r\nA git <em>remote</em> is a remote repository or repo in another location. I feel like they could\'ve just called them <em>remote repos</em> instead. As I\'ve gotten further along with Git I\'ve gathered that a git remote is <strong>any</strong> other repo besides your current local repo that you can push to. At first I thought that a remote would actually <em>control</em> my code like a TV remote control or something. Turns out, it\'s much more practical to think of it as the TV that is being controlled – it\'s more of a <strong>remote</strong> <strong>location</strong> than a tool for controlling.\r\n\r\nFor example: If you have a local Git repo, setting up that repo to push to Github is just a quick everyday example of setting up a <em>remote </em>(or remote repo) for your project.  Github is the <em>remote </em>or remote repo. If you haven\'t done that checkout my tutorials on how to setup <a title="Get going with Git" href="http://dev.dorails.com/railsvitamins/get-going-with-git/">Git</a> &amp; <a title="Hop on the Github bandwagon" href="http://dev.dorails.com/railsvitamins/hop-on-the-github-bandwagon/">Github</a>. Github is nothing more than a fancy collection of remote repos. Heroku is another example. Heroku is a "platform as a service" that does the heavy lifting for configuring a live server. But by pushing to Heroku you are just pushing to another <em>remote</em> (repo).\r\n\r\nThis picture says it best. You\'re local repo pushes out to any remotes that you tell it to. Github, Staging Server, Production Server (like Heroku)\r\n\r\n<a href="http://dev.dorails.com/wp-content/uploads/2014/08/git-remotes.jpg"><img class="aligncenter img-responsive wp-image-196 size-full" src="http://dev.dorails.com/wp-content/uploads/2014/08/git-remotes.jpg" alt="A beginners guide to the what, why &amp; how of Git remotes" width="600" height="663" /></a>\r\n<h3>Why do you need remotes?</h3>\r\nRemotes are what makes the <code>$ git push</code> and  <code>$ git pull</code> commands possible. You\'d have nowhere to push without setting up remotes. Remotes have a lot of different purposes so I\'ll tell you why I need them. I need to setup my local Git repos to have multiple remotes so that I can push my source code to a unified place (like Github). This helps me access my code from anywhere and lets me collaborate more easily. I also need remotes setup so I can easily push to development servers for collaborating. I need to push code to staging sites to show clients work once it\'s ready to show off. And lastly I use remotes to easily push code changes to live websites and apps. This way you don\'t have to deal with the many perils of FTP, overwriting files, and *yikes* making changes on a live server. I just type $ git push heroku and my changes are live in a few seconds – no thinking required.\r\n<h3>How do you use remotes?</h3>\r\nIt\'s tricky at first, but once you see how it works it\'s easy. I\'m going to show you a kind of backwards way of doing remotes so you can get an idea of the ins-and-outs. You may have done a few of these things before, but I want to challenge you to try this a different way so you can think about it differently. If you haven\'t setup Git and setup a local repo on a project go ahead and <a title="Get going with Git" href="http://dev.dorails.com/railsvitamins/get-going-with-git/">do that now</a>. I\'ll wait :)\r\n<h4>Attempt to Push</h4>\r\nLet\'s start with the goal. We have a project that we want to push to a remote repo. Now once you have a new project folder with a git repo on it open up command-line, <code>cd</code> (change directory) into your project, add a new file (anything) and then try to push the changes:\r\n<pre>$ cd ~/Desktop\r\n$ mkdir new_project\r\n$ cd new_project\r\n$ cd git init  # create new git repo\r\n$ touch fancyfile.rb  # create any file\r\n$ git add .\r\n$ git commit -am "Created a fancy file"\r\n$ git push \r\n</pre>\r\nWell, you tried and you can\'t push! You\'ll notice that command line is yelling at you now. It probably says something like:\r\n<pre>fatal: No configured push destination.</pre>\r\nAnd git is nice enough to give you some instructions on what to do. Which we will ignore for now :). The reason you can\'t push is because you don\'t have a remote (repo) setup to push to.\r\n<h4>View your remotes</h4>\r\nTo see a list of all of your remotes enter this command:\r\n<pre>$ git remote -v</pre>\r\nThis shows you the remote repos that you can push to. A grand total of <strong>none</strong>. You should see no response in command-line as if you\'ve done nothing. That\'s okay we already knew that we don\'t have a remote yet.\r\n<h4>Adding a remote</h4>\r\nSo how do we add a remote? The quickest, easiest way to add a remote is with Github. Like a said earlier, a Github repo is just a <em>remote</em> repo. To add a remote you will go into command-line and enter\r\n<pre>$ git remote add origin https://github.com/UserName/repo_name.git</pre>\r\nYou probably don\'t know your Github URL yet because you haven\'t set it up on Github, that means you will need to setup an empty repo on Github.\r\n<h4>Setup remote repo</h4>\r\nSo to setup the remote, signup for Github if you haven\'t already. If you need help starting with Github, go <a title="Hop on the Github bandwagon" href="http://dev.dorails.com/railsvitamins/hop-on-the-github-bandwagon/">here</a>. But assuming you have a Github account already, log in and do this:\r\n<ol>\r\n	<li>Click on the <code>+</code> sign dropdown in the top right, then click <code>New Repository</code></li>\r\n	<li>On the next page, enter <code>fancy_name</code> for your repo name, select <code>Public</code>, then click <code>Create Repo</code>. (You don\'t have to have description)</li>\r\n	<li>Believe it or not your remote repo (Github repo) has been created it\'s just empty</li>\r\n</ol>\r\n<h4>Add Remote (for real this time)</h4>\r\nSo we\'ve got our remote repo ready, we just need to push our project to it. So back in the command-line you can now add the remote like we tried above:\r\n<pre>$ git remote add origin https://github.com/UserName/repo_name.git</pre>\r\nIt\'s good to know that the <code>origin</code> is interchangeable with any title. This is the title of your remote. I\'ve used titles like "live", "stage", and "dev". But it doesn\'t really matter so long as it makes sense. Origin is a nice term for Github though because it is supposed to be your authoritative source code.\r\n<h4>Try pushing again</h4>\r\nOkay so our remote repo url has been added to our local repo! Woohoo. So you should just be able to push right to it now, right?\r\n<pre>$ git push</pre>\r\nWrong. Ugh.. If you entered this command you probably saw the message saying that the current branch has no upstream. What the heck is an upstream and why do I need to define one? Well, basically it defines the default remote (repo) and branch that you will be pushing to when you enter <code>$ git push</code>. This makes more sense once you start pushing to multiple remotes: dev repos, staging repos, live repos (like Heroku). You say "push" and Git asks "Which repo and which branch in that repo do you want to push to?".\r\n<h4>Set Default Remote</h4>\r\nSo go ahead and define exactly where you want your default push command to go by entering\r\n<pre>git push --set-upstream origin master</pre>\r\nThis is telling Git to set the default push destination to be your "origin" remote (your new github repo) and specifies that it should be pushed to the master branch of that repo. More on branches later. This sets the default and pushes your changes back to back. All changes from now on can be added, committed and then you just run <code>$ git push</code>.\r\n\r\nTo give you an idea though, you can set remote titles to push to different remotes once you know how it works. If it we\'re a staging site with a remote repo you might specify by doing <code>$ git push staging master </code>, and for pushing live <code>$ git push live master</code>, etc, etc.\r\n\r\nAnother way around the upstream thing would be to just not define a default remote &amp; branch and specify <strong>every</strong> single time you push like so, <code>$ git push origin my_branch</code>. But thats no fun. Less is more.\r\n<h4>Okay okay okay can I push <strong>now</strong>?</h4>\r\nAlas, push that fantastic code over to your new remote now. Make another quick change and make sure it works.\r\n<pre>$ git add .\r\n$ git commit -am "More Changes"\r\n$ git push \r\n</pre>\r\n<h3>Bam!</h3>\r\nSo the basic steps for setting up Remotes are to:\r\n<ol>\r\n	<li>Setup local Git repo</li>\r\n	<li>Setup remote Git repo (this is the hard part)</li>\r\n	<li>Add remote to local Git repo</li>\r\n	<li>Push to your changes to your remote repo</li>\r\n</ol>\r\nI know this was a backasswards way of showing you remotes and you\'ve likely setup a Github repo before. But this shows you how it really works and how you can define as many remotes per project that you see fit.\r\n\r\nI love using tools like Git with Rails. But I\'ve even used this understanding of remotes to add repos on my Digital Ocean servers for Wordpress sites to Railsify my WP workflow as well.\r\n\r\nLet me know if you have any questions about remotes, there are a lot of different things you can do with them.', 'A beginners guide to the what, why & how of Git remotes', '', 'inherit', 'open', 'open', '', '188-revision-v1', '', '', '2014-08-26 16:23:59', '2014-08-26 21:23:59', '', 188, 'http://dev.dorails.com/railsvitamins/188-revision-v1/', 0, 'revision', '', 0),
(208, 1, '2014-08-31 20:11:39', '0000-00-00 00:00:00', '', 'Auto Draft', '', 'auto-draft', 'open', 'open', '', '', '', '', '2014-08-31 20:11:39', '0000-00-00 00:00:00', '', 0, 'http://dev.dorails.com/?p=208', 0, 'post', '', 0),
(209, 1, '2014-09-01 21:21:13', '2014-09-02 02:21:13', ' ', '', '', 'publish', 'open', 'open', '', '209', '', '', '2014-09-01 21:22:01', '2014-09-02 02:22:01', '', 0, 'http://dev.dorails.com/?p=209', 4, 'nav_menu_item', '', 0),
(210, 1, '2014-09-01 21:20:27', '0000-00-00 00:00:00', '', 'More', '', 'draft', 'open', 'open', '', '', '', '', '2014-09-01 21:20:27', '0000-00-00 00:00:00', '', 0, 'http://dev.dorails.com/?p=210', 1, 'nav_menu_item', '', 0),
(211, 1, '2014-09-01 21:21:39', '2014-09-02 02:21:39', '<h1>About</h1>\r\n<div>I\'ll start by introducing myself. My name is Ty. I\'m passionate about building digital things, writing/recording music, and traveling. I\'m a full-stack Rails developer and "tweener" (design <strong>and</strong> programming). I have a design degree but zero formal education in Computer Science. I run a web &amp; mobile shop called <a href="http://paradoxcreative.com" target="_blank">Paradox</a>. I started with PHP/Wordpress sites and slowly worked my way to Ruby on Rails web apps &amp; mobile apps. Now I\'ve got clients all over the US and a small team of remote developers &amp; designers.</div>\r\n<div>\r\n\r\nThat being said, I have screwed up so many things along the way (and still do), and learned a <strong>lot</strong> of things the hard way. I juggle projects, clients, and a team, along with the day-to-day business admin stuff. I daily hack my way through UI Designs, UX, database admin, security, front-end dev, backend-dev, server configurations, etc, etc. As a n0n-computer-science guy, learning programming was a huge struggle for me because most of the Rails resources out there are geared for "engineers". Here\'s my chance to pay it forward to other Rails developers and entrepreneurs and make sure you don\'t run into all the problems I have.\r\n<h2>Why do_rails?</h2>\r\nI created <a title="Home" href="http://dev.dorails.com/">do_rails</a> so that other people don\'t have to go through all the heartache that I did to learn Ruby on Rails. I also want to fill the void in education for people who don\'t have Computer Science degrees. I learn best by doing, and think a lot of people learn this way too, so do_rails is geared towards this learning style. I figured it took me about a year to learn the basics of Ruby on Rails, but I could show someone what I learned in a matter of days. Also, if I waste 10 hours on a problem, I\'m sure I\'m not the first - so I\'ll post it here and hopefully save you the trouble.\r\n\r\nThat\'s it in a nutshell. By the way, I\'ve got a new crash course called Rails Curve that helps you build a Ruby on Rails app in 30 days. You can learn more about it <a href="http://dev.dorails.com/railscurve" target="_blank">here</a>. And you can see my weekly posts on the blog <a title="Rails Vitamins" href="http://dev.dorails.com/railsvitamins/" target="_blank">here</a>.\r\n\r\nCheers,\r\nTy\r\n\r\n</div>', 'About', '', 'publish', 'closed', 'closed', '', 'about', '', '', '2014-09-04 20:29:07', '2014-09-05 01:29:07', '', 0, 'http://dev.dorails.com/?page_id=211', 0, 'page', '', 0),
(212, 1, '2014-09-01 21:21:39', '2014-09-02 02:21:39', '', 'About', '', 'inherit', 'open', 'open', '', '211-revision-v1', '', '', '2014-09-01 21:21:39', '2014-09-02 02:21:39', '', 211, 'http://dev.dorails.com/railsvitamins/211-revision-v1/', 0, 'revision', '', 0),
(213, 1, '2014-09-01 21:22:01', '2014-09-02 02:22:01', ' ', '', '', 'publish', 'open', 'open', '', '213', '', '', '2014-09-01 21:22:01', '2014-09-02 02:22:01', '', 0, 'http://dev.dorails.com/?p=213', 1, 'nav_menu_item', '', 0),
(214, 1, '2014-09-02 10:59:01', '2014-09-02 15:59:01', '<h1>About</h1>\n<div>I\'ll start by introducing myself. My name is Ty. I\'m passionate about building digital things, writing/recording music, and traveling. I\'m a full-stack Rails developer and "tweener" (design <strong>and</strong> programming). I have a design degree but zero formal education in Computer Science. I run a web &amp; mobile shop called <a href="http://paradoxcreative.com" target="_blank">Paradox</a>. I started with PHP/Wordpress sites and slowly worked my way to Ruby on Rails web apps &amp; mobile apps. Now I\'ve got clients all over the US and a small team of remote developers &amp; designers.</div>\n<div>\n\nThat being said, I have screwed up so many things along the way (and still do), and learned a <strong>lot</strong> of things the hard way. I juggle   projects, clients, and a team, along with the day-to-day business admin stuff. I daily hack my way through UI Designs, UX, database admin, security, front-end dev, backend-dev, server configurations, etc, etc. As a n0n-computer-science guy, learning programming was a huge struggle for me because most of the Rails resources out there are geared for "engineers". Here\'s my chance to pay it forward to other Rails developers and entrepreneurs and make sure you don\'t run into all the problems I have.\n\nI created <a title="Home" href="http://dev.dorails.com/">do_rails</a> so that other developers don\'t have to go through all the heartache that I did to learn Rails. I also want to fill the void in education for people who don\'t have Computer Science degrees. I learn best by doing, and think a lot of people learn this way too, so do_rails is geared towards this learning style. I figured it took me about a year to learn the basics of Ruby on Rails, but I could show someone what I learned in a matter of days. If I waste 10 hours on a , I\'m sure I\'m not the first - so I\'ll post it here and hopefully save you the trouble.\n\nBy the way, I\'ve got a new course called Rails Curve that helps you build a Ruby on Rails app in 30 days. You can learn more about it <a href="http://dev.dorails.com/railscurve" target="_blank">here</a>. And you can see my weekly posts on the blog <a title="Rails Vitamins" href="http://dev.dorails.com/railsvitamins/" target="_blank">here</a>.\n\nCheers,\nTy\n\nMaybe you have questions about something you\'re stuck on in Rails, front-end, back-end, design, managing time, hourly rates, client problems, invoicing/propsals, you name it...\n\n</div>\n<div>\n\nFeel free to keep it short if you\'re busy, but I\'d still love to hear from you. I read and reply to every email that comes my way. Thanks again for joining, and I hope you\'re having an awesome day.\n\nCheers,\nTy\n\n</div>', 'About', '', 'inherit', 'open', 'open', '', '211-autosave-v1', '', '', '2014-09-02 10:59:01', '2014-09-02 15:59:01', '', 211, 'http://dev.dorails.com/railsvitamins/211-autosave-v1/', 0, 'revision', '', 0),
(215, 1, '2014-09-02 10:31:32', '2014-09-02 15:31:32', '<div>I\'ll start by introducing myself. My name is Ty. I\'m passionate about building digital things, writing/recording music, and traveling. I\'m am a full-stack developer and "tweener" as they say because I do design &amp; development. In 2003 I started freelancing as a web developer &amp; designer. I officially started my web &amp; mobile app development biz back in 2011 and kept growing from there. I started with PHP &amp; Wordpress sites and slowly worked my way to web &amp; mobile apps. Now we\'ve got clients all over the US and a small team of remote developers &amp; designers. You can learn about Paradox <a href="http://paradoxcreative.com/" target="_blank">here</a>.</div>\r\n<div>\r\n\r\nI have screwed up so many things along the way (and still do), and learned a <strong>lot</strong> of things the hard way. I juggle projects, clients, and a team, along with the day-to-day business admin stuff. Here\'s my chance to pay it forward to other freelancers and make sure you don\'t run into all the problems I have.\r\n\r\nBy the way, I\'ve got a new course I am releasing called Rails Curve that helps speed up the learning curve for Ruby on Rails. You can learn more about it <a href="http://dev.dorails.com/railscurve" target="_blank">here</a>.\r\n\r\nMaybe you have questions about something you\'re stuck on in Rails, front-end, back-end, design, managing time, hourly rates, client problems, invoicing/propsals, you name it...\r\n\r\n</div>\r\n<div>\r\n\r\nFeel free to keep it short if you\'re busy, but I\'d still love to hear from you. I read and reply to every email that comes my way. Thanks again for joining, and I hope you\'re having an awesome day.\r\n\r\nCheers,\r\nTy\r\n\r\n</div>', 'About do_rails', '', 'inherit', 'open', 'open', '', '211-revision-v1', '', '', '2014-09-02 10:31:32', '2014-09-02 15:31:32', '', 211, 'http://dev.dorails.com/railsvitamins/211-revision-v1/', 0, 'revision', '', 0),
(216, 1, '2014-09-02 10:32:48', '2014-09-02 15:32:48', '<div>I\'ll start by introducing myself. My name is Ty. I\'m passionate about building digital things, writing/recording music, and traveling. I\'m am a full-stack developer and "tweener" as they say because I do design &amp; development. In 2003 I started freelancing as a web developer &amp; designer. I officially started my web &amp; mobile app development biz back in 2011 and kept growing from there. I started with PHP &amp; Wordpress sites and slowly worked my way to web &amp; mobile apps. Now we\'ve got clients all over the US and a small team of remote developers &amp; designers. You can learn about Paradox <a href="http://paradoxcreative.com/" target="_blank">here</a>.</div>\r\n<div>\r\n\r\nI have screwed up so many things along the way (and still do), and learned a <strong>lot</strong> of things the hard way. I juggle projects, clients, and a team, along with the day-to-day business admin stuff. Here\'s my chance to pay it forward to other freelancers and make sure you don\'t run into all the problems I have.\r\n\r\nBy the way, I\'ve got a new course I am releasing called Rails Curve that helps speed up the learning curve for Ruby on Rails. You can learn more about it <a href="http://dev.dorails.com/railscurve" target="_blank">here</a>.\r\n\r\nMaybe you have questions about something you\'re stuck on in Rails, front-end, back-end, design, managing time, hourly rates, client problems, invoicing/propsals, you name it...\r\n\r\n</div>\r\n<div>\r\n\r\nFeel free to keep it short if you\'re busy, but I\'d still love to hear from you. I read and reply to every email that comes my way. Thanks again for joining, and I hope you\'re having an awesome day.\r\n\r\nCheers,\r\nTy\r\n\r\n</div>', 'About', '', 'inherit', 'open', 'open', '', '211-revision-v1', '', '', '2014-09-02 10:32:48', '2014-09-02 15:32:48', '', 211, 'http://dev.dorails.com/railsvitamins/211-revision-v1/', 0, 'revision', '', 0),
(217, 1, '2014-09-02 10:32:59', '2014-09-02 15:32:59', '<h1>About</h1>\r\n<div>I\'ll start by introducing myself. My name is Ty. I\'m passionate about building digital things, writing/recording music, and traveling. I\'m am a full-stack developer and "tweener" as they say because I do design &amp; development. In 2003 I started freelancing as a web developer &amp; designer. I officially started my web &amp; mobile app development biz back in 2011 and kept growing from there. I started with PHP &amp; Wordpress sites and slowly worked my way to web &amp; mobile apps. Now we\'ve got clients all over the US and a small team of remote developers &amp; designers. You can learn about Paradox <a href="http://paradoxcreative.com/" target="_blank">here</a>.</div>\r\n<div>\r\n\r\nI have screwed up so many things along the way (and still do), and learned a <strong>lot</strong> of things the hard way. I juggle projects, clients, and a team, along with the day-to-day business admin stuff. Here\'s my chance to pay it forward to other freelancers and make sure you don\'t run into all the problems I have.\r\n\r\nBy the way, I\'ve got a new course I am releasing called Rails Curve that helps speed up the learning curve for Ruby on Rails. You can learn more about it <a href="http://dev.dorails.com/railscurve" target="_blank">here</a>.\r\n\r\nMaybe you have questions about something you\'re stuck on in Rails, front-end, back-end, design, managing time, hourly rates, client problems, invoicing/propsals, you name it...\r\n\r\n</div>\r\n<div>\r\n\r\nFeel free to keep it short if you\'re busy, but I\'d still love to hear from you. I read and reply to every email that comes my way. Thanks again for joining, and I hope you\'re having an awesome day.\r\n\r\nCheers,\r\nTy\r\n\r\n</div>', 'About', '', 'inherit', 'open', 'open', '', '211-revision-v1', '', '', '2014-09-02 10:32:59', '2014-09-02 15:32:59', '', 211, 'http://dev.dorails.com/railsvitamins/211-revision-v1/', 0, 'revision', '', 0),
(218, 1, '2014-09-02 11:00:40', '2014-09-02 16:00:40', '<h1>About</h1>\r\n<div>I\'ll start by introducing myself. My name is Ty. I\'m passionate about building digital things, writing/recording music, and traveling. I\'m a full-stack Rails developer and "tweener" (design <strong>and</strong> programming). I have a design degree but zero formal education in Computer Science. I run a web &amp; mobile shop called <a href="http://paradoxcreative.com" target="_blank">Paradox</a>. I started with PHP/Wordpress sites and slowly worked my way to Ruby on Rails web apps &amp; mobile apps. Now I\'ve got clients all over the US and a small team of remote developers &amp; designers.</div>\r\n<div>\r\n\r\nThat being said, I have screwed up so many things along the way (and still do), and learned a <strong>lot</strong> of things the hard way. I juggle   projects, clients, and a team, along with the day-to-day business admin stuff. I daily hack my way through UI Designs, UX, database admin, security, front-end dev, backend-dev, server configurations, etc, etc. As a n0n-computer-science guy, learning programming was a huge struggle for me because most of the Rails resources out there are geared for "engineers". Here\'s my chance to pay it forward to other Rails developers and entrepreneurs and make sure you don\'t run into all the problems I have.\r\n\r\nI created <a title="Home" href="http://dev.dorails.com/">do_rails</a> so that other developers don\'t have to go through all the heartache that I did to learn Rails. I also want to fill the void in education for people who don\'t have Computer Science degrees. I learn best by doing, and think a lot of people learn this way too, so do_rails is geared towards this learning style. I figured it took me about a year to learn the basics of Ruby on Rails, but I could show someone what I learned in a matter of days. Also, if I waste 10 hours on a problem, I\'m sure I\'m not the first - so I\'ll post it here and hopefully save you the trouble.\r\n\r\nThat\'s it in a nutshell. By the way, I\'ve got a new crash course called Rails Curve that helps you build a Ruby on Rails app in 30 days. You can learn more about it <a href="http://dev.dorails.com/railscurve" target="_blank">here</a>. And you can see my weekly posts on the blog <a title="Rails Vitamins" href="http://dev.dorails.com/railsvitamins/" target="_blank">here</a>.\r\n\r\nCheers,\r\nTy\r\n\r\n</div>', 'About', '', 'inherit', 'open', 'open', '', '211-revision-v1', '', '', '2014-09-02 11:00:40', '2014-09-02 16:00:40', '', 211, 'http://dev.dorails.com/railsvitamins/211-revision-v1/', 0, 'revision', '', 0),
(219, 1, '2014-09-02 11:03:00', '2014-09-02 16:03:00', '<h1>About</h1>\r\n<div>I\'ll start by introducing myself. My name is Ty. I\'m passionate about building digital things, writing/recording music, and traveling. I\'m a full-stack Rails developer and "tweener" (design <strong>and</strong> programming). I have a design degree but zero formal education in Computer Science. I run a web &amp; mobile shop called <a href="http://paradoxcreative.com" target="_blank">Paradox</a>. I started with PHP/Wordpress sites and slowly worked my way to Ruby on Rails web apps &amp; mobile apps. Now I\'ve got clients all over the US and a small team of remote developers &amp; designers.</div>\r\n<h2>Hello</h2>\r\n<div>\r\n\r\nThat being said, I have screwed up so many things along the way (and still do), and learned a <strong>lot</strong> of things the hard way. I juggle   projects, clients, and a team, along with the day-to-day business admin stuff. I daily hack my way through UI Designs, UX, database admin, security, front-end dev, backend-dev, server configurations, etc, etc. As a n0n-computer-science guy, learning programming was a huge struggle for me because most of the Rails resources out there are geared for "engineers". Here\'s my chance to pay it forward to other Rails developers and entrepreneurs and make sure you don\'t run into all the problems I have.\r\n\r\nI created <a title="Home" href="http://dev.dorails.com/">do_rails</a> so that other developers don\'t have to go through all the heartache that I did to learn Rails. I also want to fill the void in education for people who don\'t have Computer Science degrees. I learn best by doing, and think a lot of people learn this way too, so do_rails is geared towards this learning style. I figured it took me about a year to learn the basics of Ruby on Rails, but I could show someone what I learned in a matter of days. Also, if I waste 10 hours on a problem, I\'m sure I\'m not the first - so I\'ll post it here and hopefully save you the trouble.\r\n\r\nThat\'s it in a nutshell. By the way, I\'ve got a new crash course called Rails Curve that helps you build a Ruby on Rails app in 30 days. You can learn more about it <a href="http://dev.dorails.com/railscurve" target="_blank">here</a>. And you can see my weekly posts on the blog <a title="Rails Vitamins" href="http://dev.dorails.com/railsvitamins/" target="_blank">here</a>.\r\n\r\nCheers,\r\nTy\r\n\r\n</div>', 'About', '', 'inherit', 'open', 'open', '', '211-revision-v1', '', '', '2014-09-02 11:03:00', '2014-09-02 16:03:00', '', 211, 'http://dev.dorails.com/railsvitamins/211-revision-v1/', 0, 'revision', '', 0),
(220, 1, '2014-09-02 11:07:25', '2014-09-02 16:07:25', '<h1>About</h1>\r\n<div>I\'ll start by introducing myself. My name is Ty. I\'m passionate about building digital things, writing/recording music, and traveling. I\'m a full-stack Rails developer and "tweener" (design <strong>and</strong> programming). I have a design degree but zero formal education in Computer Science. I run a web &amp; mobile shop called <a href="http://paradoxcreative.com" target="_blank">Paradox</a>. I started with PHP/Wordpress sites and slowly worked my way to Ruby on Rails web apps &amp; mobile apps. Now I\'ve got clients all over the US and a small team of remote developers &amp; designers.</div>\r\n<div>\r\n\r\nThat being said, I have screwed up so many things along the way (and still do), and learned a <strong>lot</strong> of things the hard way. I juggle   projects, clients, and a team, along with the day-to-day business admin stuff. I daily hack my way through UI Designs, UX, database admin, security, front-end dev, backend-dev, server configurations, etc, etc. As a n0n-computer-science guy, learning programming was a huge struggle for me because most of the Rails resources out there are geared for "engineers". Here\'s my chance to pay it forward to other Rails developers and entrepreneurs and make sure you don\'t run into all the problems I have.\r\n<h2>Why do_rails?</h2>\r\nI created <a title="Home" href="http://dev.dorails.com/">do_rails</a> so that other developers don\'t have to go through all the heartache that I did to learn Rails. I also want to fill the void in education for people who don\'t have Computer Science degrees. I learn best by doing, and think a lot of people learn this way too, so do_rails is geared towards this learning style. I figured it took me about a year to learn the basics of Ruby on Rails, but I could show someone what I learned in a matter of days. Also, if I waste 10 hours on a problem, I\'m sure I\'m not the first - so I\'ll post it here and hopefully save you the trouble.\r\n\r\nThat\'s it in a nutshell. By the way, I\'ve got a new crash course called Rails Curve that helps you build a Ruby on Rails app in 30 days. You can learn more about it <a href="http://dev.dorails.com/railscurve" target="_blank">here</a>. And you can see my weekly posts on the blog <a title="Rails Vitamins" href="http://dev.dorails.com/railsvitamins/" target="_blank">here</a>.\r\n\r\nCheers,\r\nTy\r\n\r\n</div>', 'About', '', 'inherit', 'open', 'open', '', '211-revision-v1', '', '', '2014-09-02 11:07:25', '2014-09-02 16:07:25', '', 211, 'http://dev.dorails.com/railsvitamins/211-revision-v1/', 0, 'revision', '', 0),
(221, 1, '2014-09-02 11:09:33', '2014-09-02 16:09:33', '<h1>About</h1>\r\n<div>I\'ll start by introducing myself. My name is Ty. I\'m passionate about building digital things, writing/recording music, and traveling. I\'m a full-stack Rails developer and "tweener" (design <strong>and</strong> programming). I have a design degree but zero formal education in Computer Science. I run a web &amp; mobile shop called <a href="http://paradoxcreative.com" target="_blank">Paradox</a>. I started with PHP/Wordpress sites and slowly worked my way to Ruby on Rails web apps &amp; mobile apps. Now I\'ve got clients all over the US and a small team of remote developers &amp; designers.</div>\r\n<div>\r\n\r\nThat being said, I have screwed up so many things along the way (and still do), and learned a <strong>lot</strong> of things the hard way. I juggle   projects, clients, and a team, along with the day-to-day business admin stuff. I daily hack my way through UI Designs, UX, database admin, security, front-end dev, backend-dev, server configurations, etc, etc. As a n0n-computer-science guy, learning programming was a huge struggle for me because most of the Rails resources out there are geared for "engineers". Here\'s my chance to pay it forward to other Rails developers and entrepreneurs and make sure you don\'t run into all the problems I have.\r\n<h2>Why do_rails?</h2>\r\nI created <a title="Home" href="http://dev.dorails.com/">do_rails</a> so that other people don\'t have to go through all the heartache that I did to learn Ruby on Rails. I also want to fill the void in education for people who don\'t have Computer Science degrees. I learn best by doing, and think a lot of people learn this way too, so do_rails is geared towards this learning style. I figured it took me about a year to learn the basics of Ruby on Rails, but I could show someone what I learned in a matter of days. Also, if I waste 10 hours on a problem, I\'m sure I\'m not the first - so I\'ll post it here and hopefully save you the trouble.\r\n\r\nThat\'s it in a nutshell. By the way, I\'ve got a new crash course called Rails Curve that helps you build a Ruby on Rails app in 30 days. You can learn more about it <a href="http://dev.dorails.com/railscurve" target="_blank">here</a>. And you can see my weekly posts on the blog <a title="Rails Vitamins" href="http://dev.dorails.com/railsvitamins/" target="_blank">here</a>.\r\n\r\nCheers,\r\nTy\r\n\r\n</div>', 'About', '', 'inherit', 'open', 'open', '', '211-revision-v1', '', '', '2014-09-02 11:09:33', '2014-09-02 16:09:33', '', 211, 'http://dev.dorails.com/railsvitamins/211-revision-v1/', 0, 'revision', '', 0),
(222, 1, '2014-09-02 11:27:37', '2014-09-02 16:27:37', '', 'Ty Richards', '', 'inherit', 'open', 'open', '', 'tyrichards', '', '', '2014-09-02 11:27:37', '2014-09-02 16:27:37', '', 211, 'http://dev.dorails.com/wp-content/uploads/2014/09/TyRichards.jpg', 0, 'attachment', 'image/jpeg', 0),
(223, 1, '2014-09-02 11:43:16', '2014-09-02 16:43:16', '<h1>About</h1>\r\n<div><a href="http://dev.dorails.com/wp-content/uploads/2014/09/TyRichards.jpg"><img class="size-medium wp-image-222 alignleft" src="http://dev.dorails.com/wp-content/uploads/2014/09/TyRichards-300x300.jpg" alt="Ty Richards - do_rails" width="300" height="300" /></a>I\'ll start by introducing myself. My name is Ty. I\'m passionate about building digital things, writing/recording music, and traveling. I\'m a full-stack Rails developer and "tweener" (design <strong>and</strong> programming). I have a design degree but zero formal education in Computer Science. I run a web &amp; mobile shop called <a href="http://paradoxcreative.com" target="_blank">Paradox</a>. I started with PHP/Wordpress sites and slowly worked my way to Ruby on Rails web apps &amp; mobile apps. Now I\'ve got clients all over the US and a small team of remote developers &amp; designers.</div>\r\n<div>\r\n\r\nThat being said, I have screwed up so many things along the way (and still do), and learned a <strong>lot</strong> of things the hard way. I juggle   projects, clients, and a team, along with the day-to-day business admin stuff. I daily hack my way through UI Designs, UX, database admin, security, front-end dev, backend-dev, server configurations, etc, etc. As a n0n-computer-science guy, learning programming was a huge struggle for me because most of the Rails resources out there are geared for "engineers". Here\'s my chance to pay it forward to other Rails developers and entrepreneurs and make sure you don\'t run into all the problems I have.\r\n<h2>Why do_rails?</h2>\r\nI created <a title="Home" href="http://dev.dorails.com/">do_rails</a> so that other people don\'t have to go through all the heartache that I did to learn Ruby on Rails. I also want to fill the void in education for people who don\'t have Computer Science degrees. I learn best by doing, and think a lot of people learn this way too, so do_rails is geared towards this learning style. I figured it took me about a year to learn the basics of Ruby on Rails, but I could show someone what I learned in a matter of days. Also, if I waste 10 hours on a problem, I\'m sure I\'m not the first - so I\'ll post it here and hopefully save you the trouble.\r\n\r\nThat\'s it in a nutshell. By the way, I\'ve got a new crash course called Rails Curve that helps you build a Ruby on Rails app in 30 days. You can learn more about it <a href="http://dev.dorails.com/railscurve" target="_blank">here</a>. And you can see my weekly posts on the blog <a title="Rails Vitamins" href="http://dev.dorails.com/railsvitamins/" target="_blank">here</a>.\r\n\r\nCheers,\r\nTy\r\n\r\n</div>', 'About', '', 'inherit', 'open', 'open', '', '211-revision-v1', '', '', '2014-09-02 11:43:16', '2014-09-02 16:43:16', '', 211, 'http://dev.dorails.com/railsvitamins/211-revision-v1/', 0, 'revision', '', 0),
(224, 1, '2014-09-02 11:43:52', '2014-09-02 16:43:52', '<h1>About</h1>\r\n<div>I\'ll start by introducing myself. My name is Ty. I\'m passionate about building digital things, writing/recording music, and traveling. I\'m a full-stack Rails developer and "tweener" (design <strong>and</strong> programming). I have a design degree but zero formal education in Computer Science. I run a web &amp; mobile shop called <a href="http://paradoxcreative.com" target="_blank">Paradox</a>. I started with PHP/Wordpress sites and slowly worked my way to Ruby on Rails web apps &amp; mobile apps. Now I\'ve got clients all over the US and a small team of remote developers &amp; designers.</div>\r\n<div>\r\n\r\nThat being said, I have screwed up so many things along the way (and still do), and learned a <strong>lot</strong> of things the hard way. I juggle   projects, clients, and a team, along with the day-to-day business admin stuff. I daily hack my way through UI Designs, UX, database admin, security, front-end dev, backend-dev, server configurations, etc, etc. As a n0n-computer-science guy, learning programming was a huge struggle for me because most of the Rails resources out there are geared for "engineers". Here\'s my chance to pay it forward to other Rails developers and entrepreneurs and make sure you don\'t run into all the problems I have.\r\n<h2>Why do_rails?</h2>\r\nI created <a title="Home" href="http://dev.dorails.com/">do_rails</a> so that other people don\'t have to go through all the heartache that I did to learn Ruby on Rails. I also want to fill the void in education for people who don\'t have Computer Science degrees. I learn best by doing, and think a lot of people learn this way too, so do_rails is geared towards this learning style. I figured it took me about a year to learn the basics of Ruby on Rails, but I could show someone what I learned in a matter of days. Also, if I waste 10 hours on a problem, I\'m sure I\'m not the first - so I\'ll post it here and hopefully save you the trouble.\r\n\r\nThat\'s it in a nutshell. By the way, I\'ve got a new crash course called Rails Curve that helps you build a Ruby on Rails app in 30 days. You can learn more about it <a href="http://dev.dorails.com/railscurve" target="_blank">here</a>. And you can see my weekly posts on the blog <a title="Rails Vitamins" href="http://dev.dorails.com/railsvitamins/" target="_blank">here</a>.\r\n\r\nCheers,\r\nTy\r\n\r\n</div>', 'About', '', 'inherit', 'open', 'open', '', '211-revision-v1', '', '', '2014-09-02 11:43:52', '2014-09-02 16:43:52', '', 211, 'http://dev.dorails.com/railsvitamins/211-revision-v1/', 0, 'revision', '', 0),
(225, 1, '2014-09-02 11:47:51', '2014-09-02 16:47:51', '', 'About Sidebar', '', 'publish', 'closed', 'closed', '', 'about-sidebar', '', '', '2014-09-02 11:58:33', '2014-09-02 16:58:33', '', 0, 'http://dev.dorails.com/?post_type=sidebar&#038;p=225', 0, 'sidebar', '', 0) ;
INSERT INTO `wp_posts` ( `ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(226, 1, '2014-09-02 13:31:21', '2014-09-02 18:31:21', '<h1>About</h1>\r\n<div>I\'ll start by introducing myself. My name is Ty. I\'m passionate about building digital things, writing/recording music, and traveling. I\'m a full-stack Rails developer and "tweener" (design <strong>and</strong> programming). I have a design degree but zero formal education in Computer Science. I run a web &amp; mobile shop called <a href="http://paradoxcreative.com" target="_blank">Paradox</a>. I started with PHP/Wordpress sites and slowly worked my way to Ruby on Rails web apps &amp; mobile apps. Now I\'ve got clients all over the US and a small team of remote developers &amp; designers.</div>\r\n<div>\r\n\r\nThat being said, I have screwed up so many things along the way (and still do), and learned a <strong>lot</strong> of things the hard way. I juggle projects, clients, and a team, along with the day-to-day business admin stuff. I daily hack my way through UI Designs, UX, database admin, security, front-end dev, backend-dev, server configurations, etc, etc. As a n0n-computer-science guy, learning programming was a huge struggle for me because most of the Rails resources out there are geared for "engineers". Here\'s my chance to pay it forward to other Rails developers and entrepreneurs and make sure you don\'t run into all the problems I have.\r\n<h2>Why do_rails?</h2>\r\nI created <a title="Home" href="http://dev.dorails.com/">do_rails</a> so that other people don\'t have to go through all the heartache that I did to learn Ruby on Rails. I also want to fill the void in education for people who don\'t have Computer Science degrees. I learn best by doing, and think a lot of people learn this way too, so do_rails is geared towards this learning style. I figured it took me about a year to learn the basics of Ruby on Rails, but I could show someone what I learned in a matter of days. Also, if I waste 10 hours on a problem, I\'m sure I\'m not the first - so I\'ll post it here and hopefully save you the trouble.\r\n\r\nThat\'s it in a nutshell. By the way, I\'ve got a new crash course called Rails Curve that helps you build a Ruby on Rails app in 30 days. You can learn more about it <a href="http://dev.dorails.com/railscurve" target="_blank">here</a>. And you can see my weekly posts on the blog <a title="Rails Vitamins" href="http://dev.dorails.com/railsvitamins/" target="_blank">here</a>.\r\n\r\nCheers,\r\nTy\r\n\r\n</div>', 'About', '', 'inherit', 'open', 'open', '', '211-revision-v1', '', '', '2014-09-02 13:31:21', '2014-09-02 18:31:21', '', 211, 'http://dev.dorails.com/railsvitamins/211-revision-v1/', 0, 'revision', '', 0),
(227, 1, '2014-09-03 11:00:05', '2014-09-03 16:00:05', 'The command-line is an absolutely vital tool for any Rails developer. If you aren\'t familiar with command-line (aka Terminal), it can be intimidating at first. It was confusing and seemed unnecessary to me when I first started using it. But once you start really digging into it, you will see how powerful it is. Rails devs use the command-line to enter commands for Rails, Git, Heroku, SQL, Linux, etc, etc.\r\n\r\nBut let\'s walk before we run. Here\'s a quick crash-course for command-line basics. Run through this quick exercise and you will have it down in no time.\r\n<h3>Getting around</h3>\r\nFirst, go to your Applications folder and open Terminal (or download iTerm). You may want to drag this to your dock for easy access. Keep in mind, every time you type a command you shouldn\'t type the <code>$</code> sign. This is just something that lets you know that this a terminal command.\r\n\r\nOnce Terminal is open type:\r\n<pre>$ pwd</pre>\r\nThis stands for Print Working Directory. This is telling you what directory you are currently inside of. You should see Terminal return something like <code>/Users/tyrichards</code> as a response.\r\n\r\nOkay you can see you are in your home directory, but what\'s inside of this directory? Where can you go from here? Type this command:\r\n<pre>$ ls</pre>\r\n<code>$ ls</code> is a command that lists everything within the current directory. This will show you all the files and folder that live in the current directory.\r\n\r\nSo what happens when you want to move to one of these directories? Okay let\'s travel to our desktop. To do this type the command:\r\n<pre>$ cd Desktop</pre>\r\nYou have now moved to your desktop. The <code>$ cd</code> command allows you to "change directory" to the following path. Type the command <code>$ pwd</code> to verify that you are there. And you can even type <code>$ ls</code> to see what files and folders live there.\r\n<h3>Creating Folders</h3>\r\nOkay let\'s say we want to create a new folder on our desktop with Terminal. To do this, type the command:\r\n<pre>$ mkdir Test</pre>\r\nThis will make a new directory with the name Test. Type the <code>$ ls</code> command to see that it\'s been created.\r\n\r\nBut let\'s rename it to something that is more descriptive. We could create a new folder but how would we rename the folder? You can do this by using the <code>$ mv</code> command like so:\r\n<pre>$ mv Test \'My Awesome Project\'</pre>\r\nThe <code>$ mv</code> command will rename the <code>Test</code> folder to <code>My Awesome Project</code>. Enter <code>$ ls</code> to make sure it worked. And as you could probably guess the <code>$ mv</code> command stands for "move". You can use this to move a file to a different directory as well with <code>$ mv /current/path /new/path</code>. But we won\'t go to deep into that right now.\r\n\r\nTo copy the folder you can just use the <code>$ cp</code> command:\r\n<pre>$ cp -r \'My Awesome Project\' \'My Awesome Folder Copy\'</pre>\r\nThis command creates a copy of your <code>My Awesome Project</code> folder and names it . <code>$ ls</code> to see the results. When you are copying files you can get away with just typing <code>$ mv filename</code>, but with files you need to add the <code>-r</code> so that you will also "recursively" copy the files inside.\r\n\r\nBut we really don\'t want any copies of this folder so let\'s go ahead and delete the copy with this command:\r\n<pre>$ rm -rf \'My Awesome Project Copy\'</pre>\r\n<code>$ rm</code> as you could probably guess "removes" or deletes the folder. The <code>r</code> in <code>-rf</code> means "recursive", which is a fancy word for "every file/folder within". The <code>f</code> in <code>-rf</code> means to force - this basically means you won\'t have to manually approve every file you want to delete within that folder. Put it all together and you can see that the command <code>$ rm -rf foldername</code> removes a folder and all files within it. Enter <code>$ ls</code> to see that the folder copy is deleted.\r\n<h3>Creating &amp; Editing Files</h3>\r\nOkay let\'s create a file now with command-line. Let\'s <code>$ cd</code> into our new folder and create a new file. Notice that you can press the <code>Tab</code> key after typing a few characters and terminal will auto-complete the file name for you. In Terminal, type:\r\n<pre>$ cd \'My Awesome Project\'</pre>\r\nIf you run <code>$ ls</code>, then you will see that our project is empty. To create a new file enter:\r\n<pre>$ touch readme.md</pre>\r\nYou now have an empty readme file! <code>$ touch</code> creates a new file with the name of your choice. Type <code>$ ls</code> to verify that it\'s there.\r\n\r\nOkay we have a file but it\'s pretty useless right now, so what\'s the best way to edit this? Well that depends... I\'ll show show you a few ways I edit files for different cases.\r\n<h4>Edit files right from Terminal</h4>\r\nTo make a quick addition right from terminal use the <code>$ nano</code> command.\r\n<pre>$ nano readme.md</pre>\r\nAfter you enter the command you should see a blank screen because your file is empty. Type <code>Hello World!</code> into your new file. When you\'re done, press <code>ctrl-X</code> to exit the file and press <code>Y</code> to agree to save changes when you see the prompt <code>Save modified buffer (ANSWERING "No" WILL DESTROY CHANGES) ?</code>. Then the screen will say <code>File Name to Write: readme.md</code>. You could change the name of the file here but you don\'t want to so press enter. You should now be back to your regular screen.\r\n\r\nYou can type <code>$ cat readme.md</code> to show you the contents of the file. Viola!\r\n<h4>Edit files in a text editor</h4>\r\nThe fastest way to open files in a text editor from the command line would be to type the following:\r\n<pre>$ open readme.md</pre>\r\nThis will automatically open the file in your default text editor. You can make any changes you want in there, and then press <code>cmd-S</code> to save and you are good to go.\r\n<h3>Sanity Check</h3>\r\nFeel free to open up the folder and the file from your Finder window for a sanity check. And there you go! You\'ve successfully learned to navigate your machine, create, edit and delete files and folders with the command-line. You can do a million other things with it but you gotta start somewhere!\r\n<h3>Recap of Commands</h3>\r\n<ul>\r\n	<li><code>$ pwd</code> = print working directory</li>\r\n	<li><code>$ ls</code> = list all files and folders within current directory</li>\r\n	<li><code>$ cd foldername</code> = change directory (go to) to foldername</li>\r\n	<li><code>$ mkdir foldername</code> = make directory (create folder) with name</li>\r\n	<li><code>$ mv foldername to newfoldername</code> = Rename old folder to new name (Or move folder to new directory with new name)</li>\r\n	<li><code>$ cp foldername to foldernamecopy</code> = copy folder to the current directory with a new foldername</li>\r\n	<li><code>$ rm filename</code> = remove (delete) file</li>\r\n	<li><code>$ rm -rf filename</code> = remove (delete) folder recursively (r) with no approval (f)</li>\r\n	<li><code>$ touch filename</code> = create file with filename</li>\r\n	<li><code>$ nano filename</code> = open and edit file within terminal (ctrl-X to close)</li>\r\n	<li><code>$ open filename</code> = open and edit file within your default text editor</li>\r\n	<li><code>$ subl .</code> = open entire folder in Sublime (<a title="How to setup Sublime with the command-line" href="http://dev.dorails.com/railsvitamins/how-to-setup-sublime-with-the-command-line/">Learn how to set this up</a>)</li>\r\n	<li><code>$ cat filename</code> = display contents of file</li>\r\n</ul>\r\n<h3>Tools</h3>\r\nFor the command-line, I use iTerm instead of the stock Terminal app that comes with OSX. Consider using this. I use it mainly because I can quickly press <code>cmd-spacebar</code> anytime I need to get to the terminal (which is a lot). Also I set it to be large halfscreen drop window on the top instead of the usual floating windows, so I don\'t have to mess around with moving and sizing them.\r\n\r\nLike I said above, I use Sublime Text 2 for my text editor. I highly recommend it because:\r\n<ul>\r\n<ul>\r\n	<li>you crack open entire projects with the <code>subl .</code> command (learn how to set this up in another post <a title="How to setup Sublime with the command-line" href="http://dev.dorails.com/railsvitamins/how-to-setup-sublime-with-the-command-line/" target="_blank">here</a>)</li>\r\n	<li>you can easily browse files within it</li>\r\n	<li>it has a package installer that allows you to add any type of language syntax or auto-complete you could ever imagine</li>\r\n	<li>also if you set it up, you can run Rails tests from within Sublime (super handy)</li>\r\n</ul>\r\n</ul>\r\n<h3>Tips</h3>\r\n<ul>\r\n	<li>When things start to get cluttered in your terminal window. Use <code>$ clear</code> to go to a blank screen. But don\'t be alarmed you can scroll up to see your previous commands</li>\r\n	<li>If you need to run a longer command that you recently entered. Press the up/down keys to toggle through all your most recent entries.</li>\r\n	<li>Wean yourself off using Finder windows to navigate your files.</li>\r\n	<li>Setup Sublime Text 2 to work with <code>subl .</code> so you can easily open projects from terminal on the fly. Learn how to do that <a title="How to setup Sublime with the command-line" href="http://dev.dorails.com/railsvitamins/how-to-setup-sublime-with-the-command-line/" target="_blank">here</a>.</li>\r\n	<li>Create a <code>.bash_profile</code> for yourself so you can make shortcut commands. I have a separate post about this <a title="Save a ton of time with .bash_profile aliases" href="http://dev.dorails.com/railsvitamins/save-a-ton-of-time-with-bash_profile-aliases/" target="_blank">here</a>.</li>\r\n</ul>\r\nThat\'s all for now. Let me know if you have any questions or other topics you want me to cover.', 'Getting started with the command-line?', '', 'publish', 'open', 'open', '', 'getting-started-with-command-line', '', '', '2014-09-03 14:32:27', '2014-09-03 19:32:27', '', 0, 'http://dev.dorails.com/?p=227', 0, 'post', '', 1),
(228, 1, '2014-09-03 08:44:06', '2014-09-03 13:44:06', 'If you aren\'t familiar with command-line, it can be intimidating at first. I want to encourage you to dive in though! Checkout this quick crash course for command-line, and you will have it down in no time.\r\n\r\n&nbsp;\r\n<h3>Navigating</h3>\r\n$ cd ~/Desktop\r\n\r\n$ pwd\r\n\r\n$ ls\r\n<h3>Creating Folders</h3>\r\n$ mkdir Test\r\n\r\n$ ls\r\n\r\n$ mv Test \'Test Folder\'\r\n\r\n$ cp \'Test Folder\' \'Test Folder Copy\'\r\n\r\n$ cd \'Test Folder Copy\'\r\n\r\n(use tab)\r\n<h3>Creating &amp; Editing Files</h3>\r\n$ touch readme.md\r\n\r\n$ nano readme.md (use tab)\r\n\r\n$ Add some text (Hello World!)\r\n\r\nctrl-X to exit, then press Y to agree to save changes\r\n\r\nOr use $ cat readme.md\r\n\r\nYou can also type $ open readme.md to open in your default text editor\r\n<h3>Custom Command-Line Tools</h3>\r\nI use Sublime Text, so I\'ve setup a custom command-line tools that allow me to open files and even entire directories within Sublime. I highly recommend doing this. It takes a minute to setup, but it\'s worth it.\r\n<h3>Tips</h3>\r\nWeen yourself off using Finder Windows to navigate your files.\r\n\r\n&nbsp;\r\n\r\n&nbsp;\r\n\r\n&nbsp;', 'Getting started with command-line', '', 'inherit', 'open', 'open', '', '227-revision-v1', '', '', '2014-09-03 08:44:06', '2014-09-03 13:44:06', '', 227, 'http://dev.dorails.com/railsvitamins/227-revision-v1/', 0, 'revision', '', 0),
(229, 1, '2014-09-03 08:56:05', '2014-09-03 13:56:05', 'If you aren\'t familiar with command-line, it can be intimidating at first. I want to encourage you to dive in though! Checkout this quick crash course for command-line, and you will have it down in no time.\r\n<h3>Getting around</h3>\r\nOpen Terminal\r\n\r\n$ ls\r\n\r\n$ cd ~/Desktop\r\n\r\n$ pwd\r\n\r\n$ ls\r\n<h3>Creating Folders</h3>\r\n$ mkdir Test\r\n\r\n$ ls\r\n\r\n$ mv Test \'Test Folder\'\r\n\r\n$ cp \'Test Folder\' \'Test Folder Copy\'\r\n\r\n$ cd \'Test Folder Copy\'\r\n\r\n(use tab)\r\n<h3>Creating &amp; Editing Files</h3>\r\n$ touch readme.md\r\n\r\n$ nano readme.md (use tab)\r\n\r\n$ Add some text (Hello World!)\r\n\r\nctrl-X to exit, then press Y to agree to save changes\r\n\r\nOr use $ cat readme.md\r\n\r\nYou can also type $ open readme.md to open in your default text editor\r\n<h3>Custom Command-Line Tools</h3>\r\nI use Sublime Text, so I\'ve setup a custom command-line tools that allow me to open files and even entire directories within Sublime. I highly recommend doing this. It takes a minute to setup, but it\'s worth it.\r\n\r\nFirst create a "symbolic link" in your /bin folder by entering the command below\r\n<pre>$ ln -s "/Applications/Sublime Text 2.app/Contents/SharedSupport/bin/subl" ~/bin/subl</pre>\r\nThis command creates a "sym link" in your /bin folder that links to the code within the Sublime Text app. Once this is working open a new terminal window, <code>cd</code> to your <code>\'~/Desktop/Test Folder\' and then type:\r\n\r\n<pre>$ subl readme.md</pre>\r\n\r\n<h3>Tips</h3>\r\nWeen yourself off using Finder Windows to navigate your files.\r\n\r\n&nbsp;\r\n\r\n&nbsp;\r\n\r\n&nbsp;', 'Getting started with command-line', '', 'inherit', 'open', 'open', '', '227-revision-v1', '', '', '2014-09-03 08:56:05', '2014-09-03 13:56:05', '', 227, 'http://dev.dorails.com/railsvitamins/227-revision-v1/', 0, 'revision', '', 0),
(230, 1, '2014-09-03 12:16:55', '2014-09-03 17:16:55', 'The command-line is an absolutely vital tool for any Rails developer. If you aren\'t familiar with command-line (aka Terminal), it can be intimidating at first. It was confusing and seemed unnecessary to me when I first started using it. But once you start really digging into it, you will see how powerful it is. Rails devs use the command-line to enter commands for Rails, Git, Heroku, SQL, Linux, etc, etc.\n\nBut let\'s walk before we run. Here\'s a quick crash-course for command-line basics. Run through this quick exercise and you will have it down in no time.\n<h3>Getting around</h3>\nFirst, go to your Applications folder and open Terminal (or download iTerm). You may want to drag this to your dock for easy access. Keep in mind, every time you type a command you shouldn\'t type the <code>$</code> sign. This is just something that lets you know that this a terminal command.\n\nOnce Terminal is open type:\n<pre>$ pwd</pre>\nThis stands for Print Working Directory. This is telling you what directory you are currently inside of. You should see Terminal return something like <code>/Users/tyrichards</code> as a response.\n\nOkay you can see you are in your home directory, but what\'s inside of this directory? Where can you go from here? Type this command:\n<pre>$ ls</pre>\n<code>$ ls</code> is a command that lists everything within the current directory. This will show you all the files and folder that live in the current directory.\n\nSo what happens when you want to move to one of these directories? Okay let\'s travel to our desktop. To do this type the command:\n<pre>$ cd Desktop</pre>\nYou have now moved to your desktop. The <code>$ cd</code> command allows you to "change directory" to the following path. Type the command <code>$ pwd</code> to verify that you are there. And you can even type <code>$ ls</code> to see what files and folders live there.\n<h3>Creating Folders</h3>\nOkay let\'s say we want to create a new folder on our desktop with Terminal. To do this, type the command:\n<pre>$ mkdir Test</pre>\nThis will make a new directory with the name Test. Type the <code>$ ls</code> command to see that it\'s been created.\n\nBut let\'s rename it to something that is more descriptive. We could create a new folder but how would we rename the folder? You can do this by using the <code>$ mv</code> command like so:\n<pre>$ mv Test \'My Awesome Project\'</pre>\nThe <code>$ mv</code> command will rename the <code>Test</code> folder to <code>My Awesome Project</code>. Enter <code>$ ls</code> to make sure it worked. And as you could probably guess the <code>$ mv</code> command stands for "move". You can use this to move a file to a different directory as well with <code>$ mv /current/path /new/path</code>. But we won\'t go to deep into that right now.\n\nTo copy the folder you can just use the <code>$ cp</code> command:\n<pre>$ cp -r \'My Awesome Project\' \'My Awesome Folder Copy\'</pre>\nThis command creates a copy of your <code>My Awesome Project</code> folder and names it . <code>$ ls</code> to see the results. When you are copying files you can get away with just typing <code>$ mv filename</code>, but with files you need to add the <code>-r</code> so that you will also "recursively" copy the files inside.\n\nBut we really don\'t want any copies of this folder so let\'s go ahead and delete the copy with this command:\n<pre>$ rm -rf \'My Awesome Project Copy\'</pre>\n<code>$ rm</code> as you could probably guess "removes" or deletes the folder. The <code>r</code> in <code>-rf</code> means "recursive", which is a fancy word for "every file/folder within". The <code>f</code> in <code>-rf</code> means to force - this basically means you won\'t have to manually approve every file you want to delete within that folder. Put it all together and you can see that the command <code>$ rm -rf foldername</code> removes a folder and all files within it. Enter <code>$ ls</code> to see that the folder copy is deleted.\n<h3>Creating &amp; Editing Files</h3>\nOkay let\'s create a file now with command-line. Let\'s <code>$ cd</code> into our new folder and create a new file. Notice that you can press the <code>Tab</code> key after typing a few characters and terminal will auto-complete the file name for you. In Terminal, type:\n<pre>$ cd \'My Awesome Project\'</pre>\nIf you run <code>$ ls</code>, then you will see that our project is empty. To create a new file enter:\n<pre>$ touch readme.md</pre>\nYou now have an empty readme file! <code>$ touch</code> creates a new file with the name of your choice. Type <code>$ ls</code> to verify that it\'s there.\n\nOkay we have a file but it\'s pretty useless right now, so what\'s the best way to edit this? Well that depends... I\'ll show show you a few ways I edit files for different cases.\n<h4>Edit files right from Terminal</h4>\nTo make a quick addition right from terminal use the <code>$ nano</code> command.\n<pre>$ nano readme.md</pre>\nAfter you enter the command you should see a blank screen because your file is empty. Type <code>Hello World!</code> into your new file. When you\'re done, press <code>ctrl-X</code> to exit the file and press <code>Y</code> to agree to save changes when you see the prompt <code>Save modified buffer (ANSWERING "No" WILL DESTROY CHANGES) ?</code>. Then the screen will say <code>File Name to Write: readme.md</code>. You should now be back to your regular screen.\n\nYou can type <code>$ cat readme.md</code> to show you the contents of the file. Viola!\n<h4>Edit files in a text editor</h4>\nThe fastest way to open files in a text editor from the command line would be to type the following:\n<pre>$ open readme.md</pre>\nThis will automatically open the file in your default text editor. You can make any changes you want, press <code>cmd-S</code> and you are good to go.\n<h3>Sanity Check</h3>\nFeel free to open up the folder and the file from your Finder window for a sanity check. And there you go! You\'ve successfully learned to navigate your machine, create, edit and delete files and folders with the command-line. You can do a million other things with it but you gotta start somewhere!\n<h3>Recap of Commands</h3>\n<ul>\n	<li><code>$ pwd</code> = print working directory</li>\n	<li><code>$ ls</code> = list all files and folders within current directory</li>\n	<li><code>$ cd foldername</code> = change directory (go to) to foldername</li>\n	<li><code>$ mkdir foldername</code> = make directory (create folder) with name</li>\n	<li><code>$ mv foldername to newfoldername</code> = Rename old folder to new name (Or move folder to new directory with new name)</li>\n	<li><code>$ cp foldername to foldernamecopy</code> = copy folder to the current directory with a new foldername</li>\n	<li><code>$ rm filename</code> = remove (delete) file</li>\n	<li><code>$ rm -rf filename</code> = remove (delete) folder recursively (r) with no approval (f)</li>\n	<li><code>$ touch filename</code> = create file with filename</li>\n	<li><code>$ nano filename</code> = open and edit file within terminal (ctrl-X to close)</li>\n	<li><code>$ open filename</code> = open and edit file within your default text editor</li>\n	<li><code>$ subl .</code> = open entire folder in Sublime (<a title="How to setup Sublime with the command-line" href="http://dev.dorails.com/railsvitamins/how-to-setup-sublime-with-the-command-line/">Learn how to set this up</a>)</li>\n	<li><code>$ cat filename</code> = display contents of file</li>\n</ul>\n<h3>Tools</h3>\nFor the command-line, I use iTerm instead of the stock Terminal app that comes with OSX. Consider using this. I use it mainly because I can quickly press <code>cmd-spacebar</code> anytime I need to get to the terminal (which is a lot). Also I set it to be large halfscreen drop window on the top instead of the usual floating windows, so I don\'t have to mess around with moving and sizing them.\n\nLike I said above, I use Sublime Text 2 for my text editor. I highly recommend it because:\n<ul>\n<ul>\n	<li>you crack open entire projects with the <code>subl .</code> command (learn how to set this up in another post <a title="How to setup Sublime with the command-line" href="http://dev.dorails.com/railsvitamins/how-to-setup-sublime-with-the-command-line/" target="_blank">here</a>)</li>\n	<li>you can easily browse files within it</li>\n	<li>it has a package installer that allows you to add any type of language syntax or auto-complete you could ever imagine</li>\n	<li>also if you set it up, you can run Rails tests from within Sublime (super handy)</li>\n</ul>\n</ul>\n<h3>Tips</h3>\n<ul>\n	<li>When things start to get cluttered in your terminal window. Use <code>$ clear</code> to go to a blank screen. But don\'t be alarmed you can scroll up to see your previous commands</li>\n	<li>If you need to run a longer command that you recently entered. Press the up/down keys to toggle through all your most recent entries.</li>\n	<li>Wean yourself off using Finder windows to navigate your files.</li>\n	<li>Setup Sublime Text 2 to work with <code>subl .</code> so you can easily open projects from terminal on the fly. Learn how to do that <a title="How to setup Sublime with the command-line" href="http://dev.dorails.com/railsvitamins/how-to-setup-sublime-with-the-command-line/" target="_blank">here</a>.</li>\n	<li>Create a <code>.bash_profile</code> for yourself so you can make shortcut commands. I have a separate post about this <a title="Save a ton of time with .bash_profile aliases" href="http://dev.dorails.com/railsvitamins/save-a-ton-of-time-with-bash_profile-aliases/" target="_blank">here</a>.</li>\n</ul>\nThat\'s all for now. Let me know if you have any questions or other topics you want me to cover.', 'Getting started with the command-line?', '', 'inherit', 'open', 'open', '', '227-autosave-v1', '', '', '2014-09-03 12:16:55', '2014-09-03 17:16:55', '', 227, 'http://dev.dorails.com/railsvitamins/227-autosave-v1/', 0, 'revision', '', 0) ;
INSERT INTO `wp_posts` ( `ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(231, 1, '2014-09-03 09:22:59', '2014-09-03 14:22:59', 'If you aren\'t familiar with command-line, it can be intimidating at first. I want to encourage you to dive in though! Checkout this quick crash course for command-line, and you will have it down in no time.\r\n\r\n<h3>Getting around</h3>\r\nFirst, go to your Applications folder and open Terminal. You may want to drag this to your dock for easy access.\r\n\r\nOnce Terminal is open type:\r\n\r\n<pre>$ pwd</pre>\r\n\r\nThis stands for Print Working Directory. This is telling you what directory you are currently inside of. You should see Terminal return something like <code>/Users/tyrichards</code> as a response.\r\n\r\nOkay you are in your home directory, but what\'s inside of this directory? Where can you go from here? Type this command:\r\n\r\n<pre>$ ls</pre>\r\n\r\n<code>$ ls</code> is a command that lists everything within the current directory. This will show you all the files and folder that live in the current directory.\r\n\r\nSo what happens when you want to move to one of these directories? Okay let\'s travel to our desktopType the command:\r\n\r\n<pre>$ cd ~/Desktop</pre>\r\n\r\n$ pwd\r\n\r\n$ ls\r\n<h3>Creating Folders</h3>\r\n$ mkdir Test\r\n\r\n$ ls\r\n\r\n$ mv Test \'Test Folder\'\r\n\r\n$ cp \'Test Folder\' \'Test Folder Copy\'\r\n\r\n$ cd \'Test Folder Copy\'\r\n\r\n(use tab)\r\n<h3>Creating &amp; Editing Files</h3>\r\n$ touch readme.md\r\n\r\n$ nano readme.md (use tab)\r\n\r\n$ Add some text (Hello World!)\r\n\r\nctrl-X to exit, then press Y to agree to save changes\r\n\r\nOr use $ cat readme.md\r\n\r\n$ clear\r\n\r\nYou can also type $ open readme.md to open in your default text editor\r\n<h3>Custom Command-Line Tools</h3>\r\nI use Sublime Text, so I\'ve setup a custom command-line tools that allow me to open files and even entire directories within Sublime. I highly recommend doing this. It takes a minute to setup, but it\'s worth it.\r\n\r\nFirst create a "symbolic link" in your /bin folder by entering the command below\r\n<pre>$ ln -s "/Applications/Sublime Text 2.app/Contents/SharedSupport/bin/subl" ~/bin/subl</pre>\r\nThis command creates a "sym link" in your /bin folder that links to the code within the Sublime Text app. Once this is run, open a new terminal window and <code>cd</code> to your <code>\'~/Desktop/Test Folder\'</code> and then type:\r\n<pre>$ subl readme.md</pre>\r\nAlso try to open the entire folder with:\r\n<pre>$ subl .</pre>\r\nYou should now see the folder and all files in it. There\'s just one file in there now, but you can imagine how useful this would be if you had entire Rails project open and you could easily navigate through the files &amp; folders this way.\r\n\r\n<h3>Tools</h3>\r\nLike I said I use Sublime Text 2 for my text editor. I highly recommend it because:\r\n<ul>\r\n<li>you can browse files within it</li>\r\n<li>you can open files directly from the command-line</li>\r\n<li>it has a package installer that allows you to add any type of language syntax or auto-complete you could ever imagine</li>\r\n<li>also if you set it up, you can run Rails tests from within Sublime (super handy)</li>\r\n\r\nFor the command-line, I use iTerm instead of the stock Terminal app that comes with OSX. Consider using this. I use it mainly because I can quickly press <code>cmd-spacebar</code> anytime I need to get to the terminal (which is a lot). Also I set it to be large halfscreen drop window on the top instead of the usual floating windows, so I don\'t have to mess around with moving and sizing them.\r\n\r\n<h3>Tips</h3>\r\nWean yourself off using Finder windows to navigate your files.\r\nCreate a <code>.bash_profile</code> for yourself so you can make shortcut commands. I have a separate post about this here.\r\n \r\n&nbsp;\r\n\r\n&nbsp;\r\n\r\n&nbsp;', 'Getting started with command-line', '', 'inherit', 'open', 'open', '', '227-revision-v1', '', '', '2014-09-03 09:22:59', '2014-09-03 14:22:59', '', 227, 'http://dev.dorails.com/railsvitamins/227-revision-v1/', 0, 'revision', '', 0),
(232, 1, '2014-09-03 11:07:08', '2014-09-03 16:07:08', 'If you aren\'t familiar with command-line (aka Terminal), it can be intimidating at first. I want to encourage you to dive in though! Checkout this quick crash-course for command-line, and you will have it down in no time.\r\n\r\n<h3>Getting around</h3>\r\nFirst, go to your Applications folder and open Terminal. You may want to drag this to your dock for easy access. Keep in mind every time you type a command you shouldn\'t type the <code>$</code> sign. This is just something that lets you know that this a terminal command.\r\n\r\nOnce Terminal is open type:\r\n<pre>$ pwd</pre>\r\nThis stands for Print Working Directory. This is telling you what directory you are currently inside of. You should see Terminal return something like <code>/Users/tyrichards</code> as a response.\r\n\r\nOkay you can see you are in your home directory, but what\'s inside of this directory? Where can you go from here? Type this command:\r\n<pre>$ ls</pre>\r\n<code>$ ls</code> is a command that lists everything within the current directory. This will show you all the files and folder that live in the current directory.\r\n\r\nSo what happens when you want to move to one of these directories? Okay let\'s travel to our desktop. To do this type the command:\r\n<pre>$ cd Desktop</pre>\r\nYou have now moved to your desktop. The <code>$ cd</code> command allows you to "change directory" to the following path. Type the command <code>$ pwd</code> to verify that you are there. And you can even type <code>$ ls</code> to see what files and folders live there.\r\n\r\n<h3>Creating Folders</h3>\r\nOkay let\'s say we want to create a new folder on our desktop with Terminal. To do this, type the command:\r\n\r\n<pre>$ mkdir Test</pre>\r\n\r\nThis will make a new directory with the name Test. Type the <code>$ ls</code> command to see that it\'s been created.\r\n\r\nBut let\'s say want to rename it to something that is more descriptive. We could create a new folder but how would we rename the folder? You can do this by using the <code>$ mv</code> command like so:\r\n\r\n<pre>$ mv Test \'My Awesome Project\'</pre>\r\n\r\nThe <code>$ mv</code> command will rename the <code>Test</code> folder to <code>My Awesome Project</code>. Enter <code>$ ls</code> to make sure it worked. And as you could probably guess the <code>$ mv</code> command stands for "move". You can use this to move a file to a different directory as well with <code>$ mv /current/path /new/path</code>. But we won\'t go to deep into that right now. \r\n\r\nTo copy the folder you can just use the <code>$ cp</code> command:\r\n\r\n<pre>$ cp \'My Awesome Project\' \'My Awesome Folder Copy\'</pre>\r\n\r\nThis command copies your <code>My Awesome Project</code folder within the same directory with a new name <code>My Awesome Folder Copy</code>. <code>$ ls</code> to see the results. \r\n\r\nBut we really don\'t want a thousand copies of this folder so let\'s go ahead and delete the copy with this command:\r\n\r\n<pre>$ rm -rf \'My Awesome Project Copy\'</pre>\r\n\r\n<code>$ rm</code> as you could probably guess "removes" or deletes the folder. The <code>r</code> in <code>-rf</code> means "recursive", which is a fancy word for every file/folder. The <code>f</code> in <code>-rf</code> means to force - this basically means you won\'t have to manually approve every file you want to delete within that folder. Put it all together and you can see that the command <code>$ rm -rf foldername</code> removes a folder and all files within it. Enter <code>$ ls</code> to see that the folder copy is deleted.\r\n\r\n<h3>Creating &amp; Editing Files</h3>\r\n\r\nOkay let\'s create a file now with command-line. Let\'s <code>$ cd</code> into our new folder and create a new file. Notice that you can press the <code>Tab</code> key after typing a few characters and terminal will auto-complete the file name for you. In Terminal, type:  \r\n\r\n<pre>$ cd \'My Awesome Project\'</pre>\r\n\r\nIf you run <code>$ ls</code>, then you will see that our project is empty. To create a new file enter:\r\n\r\n<pre>$ touch readme.md</pre>\r\n\r\nYou now have an empty readme file! <code>$ touch</code> creates a new file with the name of your choice. Type <code>$ ls</code> to verify that it\'s there. \r\n\r\nOkay we have a file but it\'s pretty useless right now, so what\'s the best way to edit this? Well that depends... I\'ll show show you a few ways I edit files for different cases.\r\n\r\n<h4>Edit files in terminal</h4>\r\n\r\nTo make a quick addition in terminal use the <code>$ nano</code> command.\r\n\r\n<pre>$ nano readme.md</pre>\r\n\r\nAfter you enter the command you should see a blank screen because your file is empty. Type <code>Hello World!</code> into your new file. When your done, press <code>ctrl-X</code> to exit the file and press <code>Y</code> to agree to save changes. You should now be back to your regular screen. \r\n\r\nYou can type <code>$ cat readme.md</code> to show you the contents of the file. Viola!\r\n\r\n<h4>Edit files in a text editor</h4>\r\n\r\nThe fastest way to open files in a text editor from the command line would be to type the following:\r\n\r\n<pre>$ open readme.md</pre>\r\n\r\nThis will automatically open the file in your default text editor. You can make any changes you want, press <code>cmd-S</code> and you are good to go.\r\n\r\n<h3>Sanity Check</h3>\r\n\r\nFeel free to open up the folder and the file from your Finder window for a sanity check. And there you go! You\'ve successfully learned to navigate your machine, create, edit and delete files and folders with the command-line. \r\n\r\n<h3>Tools</h3>\r\nLike I said I use Sublime Text 2 for my text editor. I highly recommend it because:\r\n<ul>\r\n<ul>\r\n	<li>you can browse files within it</li>\r\n	<li>you can open files directly from the command-line</li>\r\n	<li>it has a package installer that allows you to add any type of language syntax or auto-complete you could ever imagine</li>\r\n	<li>also if you set it up, you can run Rails tests from within Sublime (super handy)</li>\r\n</ul>\r\n</ul>\r\nFor the command-line, I use iTerm instead of the stock Terminal app that comes with OSX. Consider using this. I use it mainly because I can quickly press <code>cmd-spacebar</code> anytime I need to get to the terminal (which is a lot). Also I set it to be large halfscreen drop window on the top instead of the usual floating windows, so I don\'t have to mess around with moving and sizing them.\r\n<h3>Tips</h3>\r\n$ clear\r\nWean yourself off using Finder windows to navigate your files.\r\nCreate a <code>.bash_profile</code> for yourself so you can make shortcut commands. I have a separate post about this here.\r\n\r\n&nbsp;\r\n\r\n&nbsp;\r\n\r\n&nbsp;', 'Getting started with the command-line?', '', 'inherit', 'open', 'open', '', '227-revision-v1', '', '', '2014-09-03 11:07:08', '2014-09-03 16:07:08', '', 227, 'http://dev.dorails.com/railsvitamins/227-revision-v1/', 0, 'revision', '', 0),
(233, 1, '2014-09-03 11:30:23', '2014-09-03 16:30:23', 'I use Sublime Text 2, so I\'ve setup a custom command-line tool that allows me to open files and even entire project directories within Sublime with the command <code>$ subl .</code>. I highly recommend doing this. It takes a minute to setup, but it\'s worth it because it allows you to fly in and out of projects quickly.\r\n\r\nFirst create a "symbolic link" in your /bin folder by entering the command below\r\n<pre>$ ln -s "/Applications/Sublime Text 2.app/Contents/SharedSupport/bin/subl" ~/bin/subl</pre>\r\nThis command creates a "sym link" in your /bin folder that links to the code within the Sublime Text app. You may also need to create a <code>~/bin</code> folder in your home directory if there isn\'t one there.\r\n\r\nOnce this is run, open a new terminal window and <code>cd</code> to your project to open a file:\r\n<pre>$ cd /your/project/directory\r\n$ subl filename</pre>\r\nOr crack open the entire project folder with:\r\n<pre>$ subl .</pre>\r\nBam, you are setup to navigate through your projects at lightning speed.', 'The best way to open Rails projects from the command-line', '', 'publish', 'open', 'open', '', 'the-best-way-to-open-rails-projects-from-the-command-line', '', '', '2014-09-03 14:31:46', '2014-09-03 19:31:46', '', 0, 'http://dev.dorails.com/?p=233', 0, 'post', '', 0),
(234, 1, '2014-09-03 11:08:23', '2014-09-03 16:08:23', 'I use Sublime Text, so I\'ve setup a custom command-line tools that allow me to open files and even entire directories within Sublime. I highly recommend doing this. It takes a minute to setup, but it\'s worth it.\r\n\r\nFirst create a "symbolic link" in your /bin folder by entering the command below\r\n<pre>$ ln -s "/Applications/Sublime Text 2.app/Contents/SharedSupport/bin/subl" ~/bin/subl</pre>\r\nThis command creates a "sym link" in your /bin folder that links to the code within the Sublime Text app. Once this is run, open a new terminal window and <code>cd</code> to your <code>\'~/Desktop/Test Folder\'</code> and then type:\r\n<pre>$ subl readme.md</pre>\r\nAlso try to open the entire folder with:\r\n<pre>$ subl .</pre>\r\nYou should now see the folder and all files in it. There\'s just one file in there now, but you can imagine how useful this would be if you had entire Rails project open and you could easily navigate through the files &amp; folders this way.', 'How to setup Sublime with the command-line', '', 'inherit', 'open', 'open', '', '233-revision-v1', '', '', '2014-09-03 11:08:23', '2014-09-03 16:08:23', '', 233, 'http://dev.dorails.com/railsvitamins/233-revision-v1/', 0, 'revision', '', 0),
(235, 1, '2014-09-03 11:10:45', '2014-09-03 16:10:45', 'If you aren\'t familiar with command-line (aka Terminal), it can be intimidating at first. I want to encourage you to dive in though! Checkout this quick crash-course for command-line, and you will have it down in no time.\r\n<h3>Getting around</h3>\r\nFirst, go to your Applications folder and open Terminal. You may want to drag this to your dock for easy access. Keep in mind every time you type a command you shouldn\'t type the <code>$</code> sign. This is just something that lets you know that this a terminal command.\r\n\r\nOnce Terminal is open type:\r\n<pre>$ pwd</pre>\r\nThis stands for Print Working Directory. This is telling you what directory you are currently inside of. You should see Terminal return something like <code>/Users/tyrichards</code> as a response.\r\n\r\nOkay you can see you are in your home directory, but what\'s inside of this directory? Where can you go from here? Type this command:\r\n<pre>$ ls</pre>\r\n<code>$ ls</code> is a command that lists everything within the current directory. This will show you all the files and folder that live in the current directory.\r\n\r\nSo what happens when you want to move to one of these directories? Okay let\'s travel to our desktop. To do this type the command:\r\n<pre>$ cd Desktop</pre>\r\nYou have now moved to your desktop. The <code>$ cd</code> command allows you to "change directory" to the following path. Type the command <code>$ pwd</code> to verify that you are there. And you can even type <code>$ ls</code> to see what files and folders live there.\r\n<h3>Creating Folders</h3>\r\nOkay let\'s say we want to create a new folder on our desktop with Terminal. To do this, type the command:\r\n<pre>$ mkdir Test</pre>\r\nThis will make a new directory with the name Test. Type the <code>$ ls</code> command to see that it\'s been created.\r\n\r\nBut let\'s say want to rename it to something that is more descriptive. We could create a new folder but how would we rename the folder? You can do this by using the <code>$ mv</code> command like so:\r\n<pre>$ mv Test \'My Awesome Project\'</pre>\r\nThe <code>$ mv</code> command will rename the <code>Test</code> folder to <code>My Awesome Project</code>. Enter <code>$ ls</code> to make sure it worked. And as you could probably guess the <code>$ mv</code> command stands for "move". You can use this to move a file to a different directory as well with <code>$ mv /current/path /new/path</code>. But we won\'t go to deep into that right now.\r\n\r\nTo copy the folder you can just use the <code>$ cp</code> command:\r\n<pre>$ cp \'My Awesome Project\' \'My Awesome Folder Copy\'</pre>\r\nThis command copies your <code>My Awesome ProjectMy Awesome Folder Copy</code>. <code>$ ls</code> to see the results.\r\n\r\nBut we really don\'t want a thousand copies of this folder so let\'s go ahead and delete the copy with this command:\r\n<pre>$ rm -rf \'My Awesome Project Copy\'</pre>\r\n<code>$ rm</code> as you could probably guess "removes" or deletes the folder. The <code>r</code> in <code>-rf</code> means "recursive", which is a fancy word for every file/folder. The <code>f</code> in <code>-rf</code> means to force - this basically means you won\'t have to manually approve every file you want to delete within that folder. Put it all together and you can see that the command <code>$ rm -rf foldername</code> removes a folder and all files within it. Enter <code>$ ls</code> to see that the folder copy is deleted.\r\n<h3>Creating &amp; Editing Files</h3>\r\nOkay let\'s create a file now with command-line. Let\'s <code>$ cd</code> into our new folder and create a new file. Notice that you can press the <code>Tab</code> key after typing a few characters and terminal will auto-complete the file name for you. In Terminal, type:\r\n<pre>$ cd \'My Awesome Project\'</pre>\r\nIf you run <code>$ ls</code>, then you will see that our project is empty. To create a new file enter:\r\n<pre>$ touch readme.md</pre>\r\nYou now have an empty readme file! <code>$ touch</code> creates a new file with the name of your choice. Type <code>$ ls</code> to verify that it\'s there.\r\n\r\nOkay we have a file but it\'s pretty useless right now, so what\'s the best way to edit this? Well that depends... I\'ll show show you a few ways I edit files for different cases.\r\n<h4>Edit files right from Terminal</h4>\r\nTo make a quick addition right from terminal use the <code>$ nano</code> command.\r\n<pre>$ nano readme.md</pre>\r\nAfter you enter the command you should see a blank screen because your file is empty. Type <code>Hello World!</code> into your new file. When your done, press <code>ctrl-X</code> to exit the file and press <code>Y</code> to agree to save changes. You should now be back to your regular screen.\r\n\r\nYou can type <code>$ cat readme.md</code> to show you the contents of the file. Viola!\r\n<h4>Edit files in a text editor</h4>\r\nThe fastest way to open files in a text editor from the command line would be to type the following:\r\n<pre>$ open readme.md</pre>\r\nThis will automatically open the file in your default text editor. You can make any changes you want, press <code>cmd-S</code> and you are good to go.\r\n<h3>Sanity Check</h3>\r\nFeel free to open up the folder and the file from your Finder window for a sanity check. And there you go! You\'ve successfully learned to navigate your machine, create, edit and delete files and folders with the command-line.\r\n<h3>Tools</h3>\r\nLike I said I use Sublime Text 2 for my text editor. I highly recommend it because:\r\n<ul>\r\n<ul>\r\n	<li>you crack open entire projects - learn how to set this up in another post here.</li>\r\n	<li>you can browse files within it</li>\r\n	<li>you can open files directly from the command-line</li>\r\n	<li>it has a package installer that allows you to add any type of language syntax or auto-complete you could ever imagine</li>\r\n	<li>also if you set it up, you can run Rails tests from within Sublime (super handy)</li>\r\n</ul>\r\n</ul>\r\nFor the command-line, I use iTerm instead of the stock Terminal app that comes with OSX. Consider using this. I use it mainly because I can quickly press <code>cmd-spacebar</code> anytime I need to get to the terminal (which is a lot). Also I set it to be large halfscreen drop window on the top instead of the usual floating windows, so I don\'t have to mess around with moving and sizing them.\r\n<h3>Tips</h3>\r\n$ clear\r\nWean yourself off using Finder windows to navigate your files.\r\nCreate a <code>.bash_profile</code> for yourself so you can make shortcut commands. I have a separate post about this here.\r\n\r\n&nbsp;\r\n\r\n&nbsp;\r\n\r\n&nbsp;', 'Getting started with the command-line?', '', 'inherit', 'open', 'open', '', '227-revision-v1', '', '', '2014-09-03 11:10:45', '2014-09-03 16:10:45', '', 227, 'http://dev.dorails.com/railsvitamins/227-revision-v1/', 0, 'revision', '', 0),
(236, 1, '2014-09-03 11:28:22', '2014-09-03 16:28:22', 'The command-line is an absolutely vital tool for any Rails developer. If you aren\'t familiar with command-line (aka Terminal), it can be intimidating at first. It was confusing and seemed unnecessary to me when I first started using it. But once you start really digging into it, you will see how powerful it is. Rails devs use use the command-line to enter commands for Rails, Git, Heroku, SQL, Linux, etc, etc. \r\n\r\nBut let\'s walk before we run. Here\'s a quick crash-course for command-line basics. Run through this quick exercise and you will have it down in no time.\r\n\r\n<h3>Getting around</h3>\r\nFirst, go to your Applications folder and open Terminal (or download iTerm). You may want to drag this to your dock for easy access. Keep in mind, every time you type a command you shouldn\'t type the <code>$</code> sign. This is just something that lets you know that this a terminal command.\r\n\r\nOnce Terminal is open type:\r\n<pre>$ pwd</pre>\r\nThis stands for Print Working Directory. This is telling you what directory you are currently inside of. You should see Terminal return something like <code>/Users/tyrichards</code> as a response.\r\n\r\nOkay you can see you are in your home directory, but what\'s inside of this directory? Where can you go from here? Type this command:\r\n<pre>$ ls</pre>\r\n<code>$ ls</code> is a command that lists everything within the current directory. This will show you all the files and folder that live in the current directory.\r\n\r\nSo what happens when you want to move to one of these directories? Okay let\'s travel to our desktop. To do this type the command:\r\n<pre>$ cd Desktop</pre>\r\nYou have now moved to your desktop. The <code>$ cd</code> command allows you to "change directory" to the following path. Type the command <code>$ pwd</code> to verify that you are there. And you can even type <code>$ ls</code> to see what files and folders live there.\r\n<h3>Creating Folders</h3>\r\nOkay let\'s say we want to create a new folder on our desktop with Terminal. To do this, type the command:\r\n<pre>$ mkdir Test</pre>\r\nThis will make a new directory with the name Test. Type the <code>$ ls</code> command to see that it\'s been created.\r\n\r\nBut let\'s say want to rename it to something that is more descriptive. We could create a new folder but how would we rename the folder? You can do this by using the <code>$ mv</code> command like so:\r\n<pre>$ mv Test \'My Awesome Project\'</pre>\r\nThe <code>$ mv</code> command will rename the <code>Test</code> folder to <code>My Awesome Project</code>. Enter <code>$ ls</code> to make sure it worked. And as you could probably guess the <code>$ mv</code> command stands for "move". You can use this to move a file to a different directory as well with <code>$ mv /current/path /new/path</code>. But we won\'t go to deep into that right now.\r\n\r\nTo copy the folder you can just use the <code>$ cp</code> command:\r\n<pre>$ cp \'My Awesome Project\' \'My Awesome Folder Copy\'</pre>\r\nThis command copies your <code>My Awesome ProjectMy Awesome Folder Copy</code>. <code>$ ls</code> to see the results.\r\n\r\nBut we really don\'t want a thousand copies of this folder so let\'s go ahead and delete the copy with this command:\r\n<pre>$ rm -rf \'My Awesome Project Copy\'</pre>\r\n<code>$ rm</code> as you could probably guess "removes" or deletes the folder. The <code>r</code> in <code>-rf</code> means "recursive", which is a fancy word for every file/folder. The <code>f</code> in <code>-rf</code> means to force - this basically means you won\'t have to manually approve every file you want to delete within that folder. Put it all together and you can see that the command <code>$ rm -rf foldername</code> removes a folder and all files within it. Enter <code>$ ls</code> to see that the folder copy is deleted.\r\n<h3>Creating &amp; Editing Files</h3>\r\nOkay let\'s create a file now with command-line. Let\'s <code>$ cd</code> into our new folder and create a new file. Notice that you can press the <code>Tab</code> key after typing a few characters and terminal will auto-complete the file name for you. In Terminal, type:\r\n<pre>$ cd \'My Awesome Project\'</pre>\r\nIf you run <code>$ ls</code>, then you will see that our project is empty. To create a new file enter:\r\n<pre>$ touch readme.md</pre>\r\nYou now have an empty readme file! <code>$ touch</code> creates a new file with the name of your choice. Type <code>$ ls</code> to verify that it\'s there.\r\n\r\nOkay we have a file but it\'s pretty useless right now, so what\'s the best way to edit this? Well that depends... I\'ll show show you a few ways I edit files for different cases.\r\n<h4>Edit files right from Terminal</h4>\r\nTo make a quick addition right from terminal use the <code>$ nano</code> command.\r\n<pre>$ nano readme.md</pre>\r\nAfter you enter the command you should see a blank screen because your file is empty. Type <code>Hello World!</code> into your new file. When your done, press <code>ctrl-X</code> to exit the file and press <code>Y</code> to agree to save changes. You should now be back to your regular screen.\r\n\r\nYou can type <code>$ cat readme.md</code> to show you the contents of the file. Viola!\r\n<h4>Edit files in a text editor</h4>\r\nThe fastest way to open files in a text editor from the command line would be to type the following:\r\n<pre>$ open readme.md</pre>\r\nThis will automatically open the file in your default text editor. You can make any changes you want, press <code>cmd-S</code> and you are good to go.\r\n<h3>Sanity Check</h3>\r\nFeel free to open up the folder and the file from your Finder window for a sanity check. And there you go! You\'ve successfully learned to navigate your machine, create, edit and delete files and folders with the command-line.\r\n<h3>Tools</h3>\r\nFor the command-line, I use iTerm instead of the stock Terminal app that comes with OSX. Consider using this. I use it mainly because I can quickly press <code>cmd-spacebar</code> anytime I need to get to the terminal (which is a lot). Also I set it to be large halfscreen drop window on the top instead of the usual floating windows, so I don\'t have to mess around with moving and sizing them.\r\n\r\nLike I said above, I use Sublime Text 2 for my text editor. I highly recommend it because:\r\n<ul>\r\n<ul>\r\n	<li>you crack open entire projects with the <code>subl .</code> command (learn how to set this up in another post <a title="How to setup Sublime with the command-line" href="http://dev.dorails.com/railsvitamins/how-to-setup-sublime-with-the-command-line/">here</a>)</li>\r\n	<li>you can easily browse files within it</li>\r\n	<li>it has a package installer that allows you to add any type of language syntax or auto-complete you could ever imagine</li>\r\n	<li>also if you set it up, you can run Rails tests from within Sublime (super handy)</li>\r\n</ul>\r\n</ul>\r\n<h3>Tips</h3>\r\n<ul>\r\n	<li>When things start to get cluttered in your terminal window. Use <code>$ clear</code> to go to a blank screen. But don\'t be alarmed you can scroll up to see your previous commands</li>\r\n        <li>If you need to run a longer command that you recently entered. Press the up/down keys to toggle through all your most recent entries.\r\n	<li>Wean yourself off using Finder windows to navigate your files.</li>\r\n        <li>Setup Sublime Text 2 to work with <code>subl .</code> so you can easily open projects from terminal on the fly.\r\n	<li>Create a <code>.bash_profile</code> for yourself so you can make shortcut commands. I have a separate post about this here.</li>\r\n</ul>\r\n&nbsp;\r\n\r\n&nbsp;\r\n\r\n&nbsp;', 'Getting started with the command-line?', '', 'inherit', 'open', 'open', '', '227-revision-v1', '', '', '2014-09-03 11:28:22', '2014-09-03 16:28:22', '', 227, 'http://dev.dorails.com/railsvitamins/227-revision-v1/', 0, 'revision', '', 0),
(237, 1, '2014-09-03 11:29:13', '2014-09-03 16:29:13', 'The command-line is an absolutely vital tool for any Rails developer. If you aren\'t familiar with command-line (aka Terminal), it can be intimidating at first. It was confusing and seemed unnecessary to me when I first started using it. But once you start really digging into it, you will see how powerful it is. Rails devs use use the command-line to enter commands for Rails, Git, Heroku, SQL, Linux, etc, etc.\r\n\r\nBut let\'s walk before we run. Here\'s a quick crash-course for command-line basics. Run through this quick exercise and you will have it down in no time.\r\n<h3>Getting around</h3>\r\nFirst, go to your Applications folder and open Terminal (or download iTerm). You may want to drag this to your dock for easy access. Keep in mind, every time you type a command you shouldn\'t type the <code>$</code> sign. This is just something that lets you know that this a terminal command.\r\n\r\nOnce Terminal is open type:\r\n<pre>$ pwd</pre>\r\nThis stands for Print Working Directory. This is telling you what directory you are currently inside of. You should see Terminal return something like <code>/Users/tyrichards</code> as a response.\r\n\r\nOkay you can see you are in your home directory, but what\'s inside of this directory? Where can you go from here? Type this command:\r\n<pre>$ ls</pre>\r\n<code>$ ls</code> is a command that lists everything within the current directory. This will show you all the files and folder that live in the current directory.\r\n\r\nSo what happens when you want to move to one of these directories? Okay let\'s travel to our desktop. To do this type the command:\r\n<pre>$ cd Desktop</pre>\r\nYou have now moved to your desktop. The <code>$ cd</code> command allows you to "change directory" to the following path. Type the command <code>$ pwd</code> to verify that you are there. And you can even type <code>$ ls</code> to see what files and folders live there.\r\n<h3>Creating Folders</h3>\r\nOkay let\'s say we want to create a new folder on our desktop with Terminal. To do this, type the command:\r\n<pre>$ mkdir Test</pre>\r\nThis will make a new directory with the name Test. Type the <code>$ ls</code> command to see that it\'s been created.\r\n\r\nBut let\'s say want to rename it to something that is more descriptive. We could create a new folder but how would we rename the folder? You can do this by using the <code>$ mv</code> command like so:\r\n<pre>$ mv Test \'My Awesome Project\'</pre>\r\nThe <code>$ mv</code> command will rename the <code>Test</code> folder to <code>My Awesome Project</code>. Enter <code>$ ls</code> to make sure it worked. And as you could probably guess the <code>$ mv</code> command stands for "move". You can use this to move a file to a different directory as well with <code>$ mv /current/path /new/path</code>. But we won\'t go to deep into that right now.\r\n\r\nTo copy the folder you can just use the <code>$ cp</code> command:\r\n<pre>$ cp \'My Awesome Project\' \'My Awesome Folder Copy\'</pre>\r\nThis command copies your <code>My Awesome ProjectMy Awesome Folder Copy</code>. <code>$ ls</code> to see the results.\r\n\r\nBut we really don\'t want a thousand copies of this folder so let\'s go ahead and delete the copy with this command:\r\n<pre>$ rm -rf \'My Awesome Project Copy\'</pre>\r\n<code>$ rm</code> as you could probably guess "removes" or deletes the folder. The <code>r</code> in <code>-rf</code> means "recursive", which is a fancy word for every file/folder. The <code>f</code> in <code>-rf</code> means to force - this basically means you won\'t have to manually approve every file you want to delete within that folder. Put it all together and you can see that the command <code>$ rm -rf foldername</code> removes a folder and all files within it. Enter <code>$ ls</code> to see that the folder copy is deleted.\r\n<h3>Creating &amp; Editing Files</h3>\r\nOkay let\'s create a file now with command-line. Let\'s <code>$ cd</code> into our new folder and create a new file. Notice that you can press the <code>Tab</code> key after typing a few characters and terminal will auto-complete the file name for you. In Terminal, type:\r\n<pre>$ cd \'My Awesome Project\'</pre>\r\nIf you run <code>$ ls</code>, then you will see that our project is empty. To create a new file enter:\r\n<pre>$ touch readme.md</pre>\r\nYou now have an empty readme file! <code>$ touch</code> creates a new file with the name of your choice. Type <code>$ ls</code> to verify that it\'s there.\r\n\r\nOkay we have a file but it\'s pretty useless right now, so what\'s the best way to edit this? Well that depends... I\'ll show show you a few ways I edit files for different cases.\r\n<h4>Edit files right from Terminal</h4>\r\nTo make a quick addition right from terminal use the <code>$ nano</code> command.\r\n<pre>$ nano readme.md</pre>\r\nAfter you enter the command you should see a blank screen because your file is empty. Type <code>Hello World!</code> into your new file. When your done, press <code>ctrl-X</code> to exit the file and press <code>Y</code> to agree to save changes. You should now be back to your regular screen.\r\n\r\nYou can type <code>$ cat readme.md</code> to show you the contents of the file. Viola!\r\n<h4>Edit files in a text editor</h4>\r\nThe fastest way to open files in a text editor from the command line would be to type the following:\r\n<pre>$ open readme.md</pre>\r\nThis will automatically open the file in your default text editor. You can make any changes you want, press <code>cmd-S</code> and you are good to go.\r\n<h3>Sanity Check</h3>\r\nFeel free to open up the folder and the file from your Finder window for a sanity check. And there you go! You\'ve successfully learned to navigate your machine, create, edit and delete files and folders with the command-line.\r\n<h3>Tools</h3>\r\nFor the command-line, I use iTerm instead of the stock Terminal app that comes with OSX. Consider using this. I use it mainly because I can quickly press <code>cmd-spacebar</code> anytime I need to get to the terminal (which is a lot). Also I set it to be large halfscreen drop window on the top instead of the usual floating windows, so I don\'t have to mess around with moving and sizing them.\r\n\r\nLike I said above, I use Sublime Text 2 for my text editor. I highly recommend it because:\r\n<ul>\r\n<ul>\r\n	<li>you crack open entire projects with the <code>subl .</code> command (learn how to set this up in another post <a title="How to setup Sublime with the command-line" href="http://dev.dorails.com/railsvitamins/how-to-setup-sublime-with-the-command-line/">here</a>)</li>\r\n	<li>you can easily browse files within it</li>\r\n	<li>it has a package installer that allows you to add any type of language syntax or auto-complete you could ever imagine</li>\r\n	<li>also if you set it up, you can run Rails tests from within Sublime (super handy)</li>\r\n</ul>\r\n</ul>\r\n<h3>Tips</h3>\r\n<ul>\r\n	<li>When things start to get cluttered in your terminal window. Use <code>$ clear</code> to go to a blank screen. But don\'t be alarmed you can scroll up to see your previous commands</li>\r\n	<li>If you need to run a longer command that you recently entered. Press the up/down keys to toggle through all your most recent entries.</li>\r\n	<li>Wean yourself off using Finder windows to navigate your files.</li>\r\n	<li>Setup Sublime Text 2 to work with <code>subl .</code> so you can easily open projects from terminal on the fly.</li>\r\n	<li>Create a <code>.bash_profile</code> for yourself so you can make shortcut commands. I have a separate post about this here.</li>\r\n</ul>\r\nThat\'s all for now. Let me know if you have any questions or other topics you want me to cover.', 'Getting started with the command-line?', '', 'inherit', 'open', 'open', '', '227-revision-v1', '', '', '2014-09-03 11:29:13', '2014-09-03 16:29:13', '', 227, 'http://dev.dorails.com/railsvitamins/227-revision-v1/', 0, 'revision', '', 0),
(238, 1, '2014-09-03 12:00:01', '2014-09-03 17:00:01', 'If you find yourself wasting a ton of time typing things in command-line like: \r\n\r\n<pre>$ cd /forever/long/project/directory/path/that/goes/on/forever/and/ever/and/ever</pre>\r\n\r\nor you just want to shorten common commands like these to make your life easier. Then I recommend setting up some quick .bash_profile <i>aliases</i>.\r\n\r\nTo do so open Terminal, and find and open your .bash_profile file\r\n\r\n<pre>$ open ~/.bash_profile</pre>\r\n\r\nIf the file doesn\'t exist go ahead and create it\r\n\r\n<pre>\r\n$ touch ~/.bash_profile\r\n$ open ~/.bash_profile\r\n</pre>\r\n\r\nNow add the following aliases to your file. These allow you to make your own custom commands that are shorter.\r\n\r\nFor example, I can type <code>$ sites</code> to jump to my sites directory. Or I type <code>$dr</code> to jump straight to my Do Rails project folder.\r\n<pre>\r\nalias sites=\'cd Sites\'\r\nalias dr=\'cd ~/Sites/do_rails\'\r\n</pre>\r\n\r\nIt\'s also good if you are tired of typing the same ssh commands over and over.\r\n<pre>\r\nalias sshdorails=\'ssh root@555.555.55.5\'\r\n</pre>\r\n\r\nI especially love it for shortening git commands though. I almost always type <code>$ git add .</code> to add all my changes. So I\'ve shortened that to <code>$ add</code> to make my life that much simpler. I haven\'t typed out "git" in months...\r\n<pre>\r\nalias add=\'git add .\'\r\nalias commit=\'git commit -am\'\r\nalias push=\'git push\'\r\nalias pull=\'git pull\'\r\nalias log=\'git log --oneline\'\r\nalias diff=\'git diff\'\r\nalias pull=\'git pull\'\r\nalias preco=\'rake assets:precompile\'\r\nalias st=\'git status\'\r\nalias remove=\'git rm --cached\'\r\n</pre>\r\n\r\nLast but not least, make yourself a quick alias to get back to your .bash_profile so you can add aliases on the fly for new projects, etc.\r\n<pre>alias editbash=\'subl ~/.bash_profile\'</pre>\r\n\r\nOnce you save this file you will need to open a new terminal window for the changes to take effect.\r\n\r\nHuzzah! Hacktastic!', 'Save a ton of time typing with .bash_profile aliases', '', 'publish', 'open', 'open', '', 'save-a-ton-of-time-typing-with-bash_profile-aliases', '', '', '2014-09-03 14:37:26', '2014-09-03 19:37:26', '', 0, 'http://dev.dorails.com/?p=238', 0, 'post', '', 1),
(239, 1, '2014-09-03 11:32:01', '2014-09-03 16:32:01', '', 'Save a ton of time with .bash_profile aliases', '', 'inherit', 'open', 'open', '', '238-revision-v1', '', '', '2014-09-03 11:32:01', '2014-09-03 16:32:01', '', 238, 'http://dev.dorails.com/railsvitamins/238-revision-v1/', 0, 'revision', '', 0),
(240, 1, '2014-09-03 11:35:44', '2014-09-03 16:35:44', 'The command-line is an absolutely vital tool for any Rails developer. If you aren\'t familiar with command-line (aka Terminal), it can be intimidating at first. It was confusing and seemed unnecessary to me when I first started using it. But once you start really digging into it, you will see how powerful it is. Rails devs use use the command-line to enter commands for Rails, Git, Heroku, SQL, Linux, etc, etc.\r\n\r\nBut let\'s walk before we run. Here\'s a quick crash-course for command-line basics. Run through this quick exercise and you will have it down in no time.\r\n<h3>Getting around</h3>\r\nFirst, go to your Applications folder and open Terminal (or download iTerm). You may want to drag this to your dock for easy access. Keep in mind, every time you type a command you shouldn\'t type the <code>$</code> sign. This is just something that lets you know that this a terminal command.\r\n\r\nOnce Terminal is open type:\r\n<pre>$ pwd</pre>\r\nThis stands for Print Working Directory. This is telling you what directory you are currently inside of. You should see Terminal return something like <code>/Users/tyrichards</code> as a response.\r\n\r\nOkay you can see you are in your home directory, but what\'s inside of this directory? Where can you go from here? Type this command:\r\n<pre>$ ls</pre>\r\n<code>$ ls</code> is a command that lists everything within the current directory. This will show you all the files and folder that live in the current directory.\r\n\r\nSo what happens when you want to move to one of these directories? Okay let\'s travel to our desktop. To do this type the command:\r\n<pre>$ cd Desktop</pre>\r\nYou have now moved to your desktop. The <code>$ cd</code> command allows you to "change directory" to the following path. Type the command <code>$ pwd</code> to verify that you are there. And you can even type <code>$ ls</code> to see what files and folders live there.\r\n<h3>Creating Folders</h3>\r\nOkay let\'s say we want to create a new folder on our desktop with Terminal. To do this, type the command:\r\n<pre>$ mkdir Test</pre>\r\nThis will make a new directory with the name Test. Type the <code>$ ls</code> command to see that it\'s been created.\r\n\r\nBut let\'s say want to rename it to something that is more descriptive. We could create a new folder but how would we rename the folder? You can do this by using the <code>$ mv</code> command like so:\r\n<pre>$ mv Test \'My Awesome Project\'</pre>\r\nThe <code>$ mv</code> command will rename the <code>Test</code> folder to <code>My Awesome Project</code>. Enter <code>$ ls</code> to make sure it worked. And as you could probably guess the <code>$ mv</code> command stands for "move". You can use this to move a file to a different directory as well with <code>$ mv /current/path /new/path</code>. But we won\'t go to deep into that right now.\r\n\r\nTo copy the folder you can just use the <code>$ cp</code> command:\r\n<pre>$ cp \'My Awesome Project\' \'My Awesome Folder Copy\'</pre>\r\nThis command copies your <code>My Awesome ProjectMy Awesome Folder Copy</code>. <code>$ ls</code> to see the results.\r\n\r\nBut we really don\'t want a thousand copies of this folder so let\'s go ahead and delete the copy with this command:\r\n<pre>$ rm -rf \'My Awesome Project Copy\'</pre>\r\n<code>$ rm</code> as you could probably guess "removes" or deletes the folder. The <code>r</code> in <code>-rf</code> means "recursive", which is a fancy word for every file/folder. The <code>f</code> in <code>-rf</code> means to force - this basically means you won\'t have to manually approve every file you want to delete within that folder. Put it all together and you can see that the command <code>$ rm -rf foldername</code> removes a folder and all files within it. Enter <code>$ ls</code> to see that the folder copy is deleted.\r\n<h3>Creating &amp; Editing Files</h3>\r\nOkay let\'s create a file now with command-line. Let\'s <code>$ cd</code> into our new folder and create a new file. Notice that you can press the <code>Tab</code> key after typing a few characters and terminal will auto-complete the file name for you. In Terminal, type:\r\n<pre>$ cd \'My Awesome Project\'</pre>\r\nIf you run <code>$ ls</code>, then you will see that our project is empty. To create a new file enter:\r\n<pre>$ touch readme.md</pre>\r\nYou now have an empty readme file! <code>$ touch</code> creates a new file with the name of your choice. Type <code>$ ls</code> to verify that it\'s there.\r\n\r\nOkay we have a file but it\'s pretty useless right now, so what\'s the best way to edit this? Well that depends... I\'ll show show you a few ways I edit files for different cases.\r\n<h4>Edit files right from Terminal</h4>\r\nTo make a quick addition right from terminal use the <code>$ nano</code> command.\r\n<pre>$ nano readme.md</pre>\r\nAfter you enter the command you should see a blank screen because your file is empty. Type <code>Hello World!</code> into your new file. When your done, press <code>ctrl-X</code> to exit the file and press <code>Y</code> to agree to save changes. You should now be back to your regular screen.\r\n\r\nYou can type <code>$ cat readme.md</code> to show you the contents of the file. Viola!\r\n<h4>Edit files in a text editor</h4>\r\nThe fastest way to open files in a text editor from the command line would be to type the following:\r\n<pre>$ open readme.md</pre>\r\nThis will automatically open the file in your default text editor. You can make any changes you want, press <code>cmd-S</code> and you are good to go.\r\n<h3>Sanity Check</h3>\r\nFeel free to open up the folder and the file from your Finder window for a sanity check. And there you go! You\'ve successfully learned to navigate your machine, create, edit and delete files and folders with the command-line. You can do a million other things with it but you gotta start somewhere!\r\n<h3>Tools</h3>\r\nFor the command-line, I use iTerm instead of the stock Terminal app that comes with OSX. Consider using this. I use it mainly because I can quickly press <code>cmd-spacebar</code> anytime I need to get to the terminal (which is a lot). Also I set it to be large halfscreen drop window on the top instead of the usual floating windows, so I don\'t have to mess around with moving and sizing them.\r\n\r\nLike I said above, I use Sublime Text 2 for my text editor. I highly recommend it because:\r\n<ul>\r\n<ul>\r\n	<li>you crack open entire projects with the <code>subl .</code> command (learn how to set this up in another post <a title="How to setup Sublime with the command-line" href="http://dev.dorails.com/railsvitamins/how-to-setup-sublime-with-the-command-line/" target="_blank">here</a>)</li>\r\n	<li>you can easily browse files within it</li>\r\n	<li>it has a package installer that allows you to add any type of language syntax or auto-complete you could ever imagine</li>\r\n	<li>also if you set it up, you can run Rails tests from within Sublime (super handy)</li>\r\n</ul>\r\n</ul>\r\n<h3>Tips</h3>\r\n<ul>\r\n	<li>When things start to get cluttered in your terminal window. Use <code>$ clear</code> to go to a blank screen. But don\'t be alarmed you can scroll up to see your previous commands</li>\r\n	<li>If you need to run a longer command that you recently entered. Press the up/down keys to toggle through all your most recent entries.</li>\r\n	<li>Wean yourself off using Finder windows to navigate your files.</li>\r\n	<li>Setup Sublime Text 2 to work with <code>subl .</code> so you can easily open projects from terminal on the fly. Learn how to do that <a title="How to setup Sublime with the command-line" href="http://dev.dorails.com/railsvitamins/how-to-setup-sublime-with-the-command-line/" target="_blank">here</a>.</li>\r\n	<li>Create a <code>.bash_profile</code> for yourself so you can make shortcut commands. I have a separate post about this <a title="Save a ton of time with .bash_profile aliases" href="http://dev.dorails.com/railsvitamins/save-a-ton-of-time-with-bash_profile-aliases/" target="_blank">here</a>.</li>\r\n</ul>\r\nThat\'s all for now. Let me know if you have any questions or other topics you want me to cover.', 'Getting started with the command-line?', '', 'inherit', 'open', 'open', '', '227-revision-v1', '', '', '2014-09-03 11:35:44', '2014-09-03 16:35:44', '', 227, 'http://dev.dorails.com/railsvitamins/227-revision-v1/', 0, 'revision', '', 0) ;
INSERT INTO `wp_posts` ( `ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(241, 1, '2014-09-03 11:56:30', '2014-09-03 16:56:30', 'The command-line is an absolutely vital tool for any Rails developer. If you aren\'t familiar with command-line (aka Terminal), it can be intimidating at first. It was confusing and seemed unnecessary to me when I first started using it. But once you start really digging into it, you will see how powerful it is. Rails devs use the command-line to enter commands for Rails, Git, Heroku, SQL, Linux, etc, etc.\r\n\r\nBut let\'s walk before we run. Here\'s a quick crash-course for command-line basics. Run through this quick exercise and you will have it down in no time.\r\n<h3>Getting around</h3>\r\nFirst, go to your Applications folder and open Terminal (or download iTerm). You may want to drag this to your dock for easy access. Keep in mind, every time you type a command you shouldn\'t type the <code>$</code> sign. This is just something that lets you know that this a terminal command.\r\n\r\nOnce Terminal is open type:\r\n<pre>$ pwd</pre>\r\nThis stands for Print Working Directory. This is telling you what directory you are currently inside of. You should see Terminal return something like <code>/Users/tyrichards</code> as a response.\r\n\r\nOkay you can see you are in your home directory, but what\'s inside of this directory? Where can you go from here? Type this command:\r\n<pre>$ ls</pre>\r\n<code>$ ls</code> is a command that lists everything within the current directory. This will show you all the files and folder that live in the current directory.\r\n\r\nSo what happens when you want to move to one of these directories? Okay let\'s travel to our desktop. To do this type the command:\r\n<pre>$ cd Desktop</pre>\r\nYou have now moved to your desktop. The <code>$ cd</code> command allows you to "change directory" to the following path. Type the command <code>$ pwd</code> to verify that you are there. And you can even type <code>$ ls</code> to see what files and folders live there.\r\n<h3>Creating Folders</h3>\r\nOkay let\'s say we want to create a new folder on our desktop with Terminal. To do this, type the command:\r\n<pre>$ mkdir Test</pre>\r\nThis will make a new directory with the name Test. Type the <code>$ ls</code> command to see that it\'s been created.\r\n\r\nBut let\'s say want to rename it to something that is more descriptive. We could create a new folder but how would we rename the folder? You can do this by using the <code>$ mv</code> command like so:\r\n<pre>$ mv Test \'My Awesome Project\'</pre>\r\nThe <code>$ mv</code> command will rename the <code>Test</code> folder to <code>My Awesome Project</code>. Enter <code>$ ls</code> to make sure it worked. And as you could probably guess the <code>$ mv</code> command stands for "move". You can use this to move a file to a different directory as well with <code>$ mv /current/path /new/path</code>. But we won\'t go to deep into that right now.\r\n\r\nTo copy the folder you can just use the <code>$ cp</code> command:\r\n<pre>$ cp \'My Awesome Project\' \'My Awesome Folder Copy\'</pre>\r\nThis command copies your <code>My Awesome ProjectMy Awesome Folder Copy</code>. <code>$ ls</code> to see the results.\r\n\r\nBut we really don\'t want a thousand copies of this folder so let\'s go ahead and delete the copy with this command:\r\n<pre>$ rm -rf \'My Awesome Project Copy\'</pre>\r\n<code>$ rm</code> as you could probably guess "removes" or deletes the folder. The <code>r</code> in <code>-rf</code> means "recursive", which is a fancy word for every file/folder. The <code>f</code> in <code>-rf</code> means to force - this basically means you won\'t have to manually approve every file you want to delete within that folder. Put it all together and you can see that the command <code>$ rm -rf foldername</code> removes a folder and all files within it. Enter <code>$ ls</code> to see that the folder copy is deleted.\r\n<h3>Creating &amp; Editing Files</h3>\r\nOkay let\'s create a file now with command-line. Let\'s <code>$ cd</code> into our new folder and create a new file. Notice that you can press the <code>Tab</code> key after typing a few characters and terminal will auto-complete the file name for you. In Terminal, type:\r\n<pre>$ cd \'My Awesome Project\'</pre>\r\nIf you run <code>$ ls</code>, then you will see that our project is empty. To create a new file enter:\r\n<pre>$ touch readme.md</pre>\r\nYou now have an empty readme file! <code>$ touch</code> creates a new file with the name of your choice. Type <code>$ ls</code> to verify that it\'s there.\r\n\r\nOkay we have a file but it\'s pretty useless right now, so what\'s the best way to edit this? Well that depends... I\'ll show show you a few ways I edit files for different cases.\r\n<h4>Edit files right from Terminal</h4>\r\nTo make a quick addition right from terminal use the <code>$ nano</code> command.\r\n<pre>$ nano readme.md</pre>\r\nAfter you enter the command you should see a blank screen because your file is empty. Type <code>Hello World!</code> into your new file. When your done, press <code>ctrl-X</code> to exit the file and press <code>Y</code> to agree to save changes. You should now be back to your regular screen.\r\n\r\nYou can type <code>$ cat readme.md</code> to show you the contents of the file. Viola!\r\n<h4>Edit files in a text editor</h4>\r\nThe fastest way to open files in a text editor from the command line would be to type the following:\r\n<pre>$ open readme.md</pre>\r\nThis will automatically open the file in your default text editor. You can make any changes you want, press <code>cmd-S</code> and you are good to go.\r\n<h3>Sanity Check</h3>\r\nFeel free to open up the folder and the file from your Finder window for a sanity check. And there you go! You\'ve successfully learned to navigate your machine, create, edit and delete files and folders with the command-line. You can do a million other things with it but you gotta start somewhere!\r\n<h3>Recap of Commands</h3>\r\n<ul>\r\n	<li><code>$ pwd</code> = print working directory</li>\r\n	<li><code>$ ls</code> = list all files and folders within current directory</li>\r\n	<li><code>$ cd foldername</code> = change directory (go to) to foldername</li>\r\n	<li><code>$ mkdir foldername</code> = make directory (create folder) with name</li>\r\n	<li><code>$ mv foldername to newfoldername</code> = Rename old folder to new name (Or move folder to new directory with new name)</li>\r\n	<li><code>$ cp foldername to foldernamecopy</code> = copy folder to the current directory with a new foldername</li>\r\n	<li><code>$ rm filename</code> = remove (delete) file</li>\r\n	<li><code>$ rm -rf filename</code> = remove (delete) folder recursively (r) with no approval (f)</li>\r\n	<li><code>$ touch filename</code> = create file with filename</li>\r\n	<li><code>$ nano filename</code> = open and edit file within terminal (ctrl-X to close)</li>\r\n	<li><code>$ open filename</code> = open and edit file within your default text editor</li>\r\n	<li><code>$ subl .</code> = open entire folder in Sublime (Learn how to setup here)</li>\r\n	<li><code>$ cat filename</code> = display contents of file</li>\r\n</ul>\r\n&nbsp;\r\n<h3>Tools</h3>\r\nFor the command-line, I use iTerm instead of the stock Terminal app that comes with OSX. Consider using this. I use it mainly because I can quickly press <code>cmd-spacebar</code> anytime I need to get to the terminal (which is a lot). Also I set it to be large halfscreen drop window on the top instead of the usual floating windows, so I don\'t have to mess around with moving and sizing them.\r\n\r\nLike I said above, I use Sublime Text 2 for my text editor. I highly recommend it because:\r\n<ul>\r\n<ul>\r\n	<li>you crack open entire projects with the <code>subl .</code> command (learn how to set this up in another post <a title="How to setup Sublime with the command-line" href="http://dev.dorails.com/railsvitamins/how-to-setup-sublime-with-the-command-line/" target="_blank">here</a>)</li>\r\n	<li>you can easily browse files within it</li>\r\n	<li>it has a package installer that allows you to add any type of language syntax or auto-complete you could ever imagine</li>\r\n	<li>also if you set it up, you can run Rails tests from within Sublime (super handy)</li>\r\n</ul>\r\n</ul>\r\n<h3>Tips</h3>\r\n<ul>\r\n	<li>When things start to get cluttered in your terminal window. Use <code>$ clear</code> to go to a blank screen. But don\'t be alarmed you can scroll up to see your previous commands</li>\r\n	<li>If you need to run a longer command that you recently entered. Press the up/down keys to toggle through all your most recent entries.</li>\r\n	<li>Wean yourself off using Finder windows to navigate your files.</li>\r\n	<li>Setup Sublime Text 2 to work with <code>subl .</code> so you can easily open projects from terminal on the fly. Learn how to do that <a title="How to setup Sublime with the command-line" href="http://dev.dorails.com/railsvitamins/how-to-setup-sublime-with-the-command-line/" target="_blank">here</a>.</li>\r\n	<li>Create a <code>.bash_profile</code> for yourself so you can make shortcut commands. I have a separate post about this <a title="Save a ton of time with .bash_profile aliases" href="http://dev.dorails.com/railsvitamins/save-a-ton-of-time-with-bash_profile-aliases/" target="_blank">here</a>.</li>\r\n</ul>\r\nThat\'s all for now. Let me know if you have any questions or other topics you want me to cover.', 'Getting started with the command-line?', '', 'inherit', 'open', 'open', '', '227-revision-v1', '', '', '2014-09-03 11:56:30', '2014-09-03 16:56:30', '', 227, 'http://dev.dorails.com/railsvitamins/227-revision-v1/', 0, 'revision', '', 0),
(242, 1, '2014-09-03 11:57:48', '2014-09-03 16:57:48', 'The command-line is an absolutely vital tool for any Rails developer. If you aren\'t familiar with command-line (aka Terminal), it can be intimidating at first. It was confusing and seemed unnecessary to me when I first started using it. But once you start really digging into it, you will see how powerful it is. Rails devs use the command-line to enter commands for Rails, Git, Heroku, SQL, Linux, etc, etc.\r\n\r\nBut let\'s walk before we run. Here\'s a quick crash-course for command-line basics. Run through this quick exercise and you will have it down in no time.\r\n<h3>Getting around</h3>\r\nFirst, go to your Applications folder and open Terminal (or download iTerm). You may want to drag this to your dock for easy access. Keep in mind, every time you type a command you shouldn\'t type the <code>$</code> sign. This is just something that lets you know that this a terminal command.\r\n\r\nOnce Terminal is open type:\r\n<pre>$ pwd</pre>\r\nThis stands for Print Working Directory. This is telling you what directory you are currently inside of. You should see Terminal return something like <code>/Users/tyrichards</code> as a response.\r\n\r\nOkay you can see you are in your home directory, but what\'s inside of this directory? Where can you go from here? Type this command:\r\n<pre>$ ls</pre>\r\n<code>$ ls</code> is a command that lists everything within the current directory. This will show you all the files and folder that live in the current directory.\r\n\r\nSo what happens when you want to move to one of these directories? Okay let\'s travel to our desktop. To do this type the command:\r\n<pre>$ cd Desktop</pre>\r\nYou have now moved to your desktop. The <code>$ cd</code> command allows you to "change directory" to the following path. Type the command <code>$ pwd</code> to verify that you are there. And you can even type <code>$ ls</code> to see what files and folders live there.\r\n<h3>Creating Folders</h3>\r\nOkay let\'s say we want to create a new folder on our desktop with Terminal. To do this, type the command:\r\n<pre>$ mkdir Test</pre>\r\nThis will make a new directory with the name Test. Type the <code>$ ls</code> command to see that it\'s been created.\r\n\r\nBut let\'s say want to rename it to something that is more descriptive. We could create a new folder but how would we rename the folder? You can do this by using the <code>$ mv</code> command like so:\r\n<pre>$ mv Test \'My Awesome Project\'</pre>\r\nThe <code>$ mv</code> command will rename the <code>Test</code> folder to <code>My Awesome Project</code>. Enter <code>$ ls</code> to make sure it worked. And as you could probably guess the <code>$ mv</code> command stands for "move". You can use this to move a file to a different directory as well with <code>$ mv /current/path /new/path</code>. But we won\'t go to deep into that right now.\r\n\r\nTo copy the folder you can just use the <code>$ cp</code> command:\r\n<pre>$ cp \'My Awesome Project\' \'My Awesome Folder Copy\'</pre>\r\nThis command copies your <code>My Awesome ProjectMy Awesome Folder Copy</code>. <code>$ ls</code> to see the results.\r\n\r\nBut we really don\'t want a thousand copies of this folder so let\'s go ahead and delete the copy with this command:\r\n<pre>$ rm -rf \'My Awesome Project Copy\'</pre>\r\n<code>$ rm</code> as you could probably guess "removes" or deletes the folder. The <code>r</code> in <code>-rf</code> means "recursive", which is a fancy word for every file/folder. The <code>f</code> in <code>-rf</code> means to force - this basically means you won\'t have to manually approve every file you want to delete within that folder. Put it all together and you can see that the command <code>$ rm -rf foldername</code> removes a folder and all files within it. Enter <code>$ ls</code> to see that the folder copy is deleted.\r\n<h3>Creating &amp; Editing Files</h3>\r\nOkay let\'s create a file now with command-line. Let\'s <code>$ cd</code> into our new folder and create a new file. Notice that you can press the <code>Tab</code> key after typing a few characters and terminal will auto-complete the file name for you. In Terminal, type:\r\n<pre>$ cd \'My Awesome Project\'</pre>\r\nIf you run <code>$ ls</code>, then you will see that our project is empty. To create a new file enter:\r\n<pre>$ touch readme.md</pre>\r\nYou now have an empty readme file! <code>$ touch</code> creates a new file with the name of your choice. Type <code>$ ls</code> to verify that it\'s there.\r\n\r\nOkay we have a file but it\'s pretty useless right now, so what\'s the best way to edit this? Well that depends... I\'ll show show you a few ways I edit files for different cases.\r\n<h4>Edit files right from Terminal</h4>\r\nTo make a quick addition right from terminal use the <code>$ nano</code> command.\r\n<pre>$ nano readme.md</pre>\r\nAfter you enter the command you should see a blank screen because your file is empty. Type <code>Hello World!</code> into your new file. When your done, press <code>ctrl-X</code> to exit the file and press <code>Y</code> to agree to save changes. You should now be back to your regular screen.\r\n\r\nYou can type <code>$ cat readme.md</code> to show you the contents of the file. Viola!\r\n<h4>Edit files in a text editor</h4>\r\nThe fastest way to open files in a text editor from the command line would be to type the following:\r\n<pre>$ open readme.md</pre>\r\nThis will automatically open the file in your default text editor. You can make any changes you want, press <code>cmd-S</code> and you are good to go.\r\n<h3>Sanity Check</h3>\r\nFeel free to open up the folder and the file from your Finder window for a sanity check. And there you go! You\'ve successfully learned to navigate your machine, create, edit and delete files and folders with the command-line. You can do a million other things with it but you gotta start somewhere!\r\n<h3>Recap of Commands</h3>\r\n<ul>\r\n	<li><code>$ pwd</code> = print working directory</li>\r\n	<li><code>$ ls</code> = list all files and folders within current directory</li>\r\n	<li><code>$ cd foldername</code> = change directory (go to) to foldername</li>\r\n	<li><code>$ mkdir foldername</code> = make directory (create folder) with name</li>\r\n	<li><code>$ mv foldername to newfoldername</code> = Rename old folder to new name (Or move folder to new directory with new name)</li>\r\n	<li><code>$ cp foldername to foldernamecopy</code> = copy folder to the current directory with a new foldername</li>\r\n	<li><code>$ rm filename</code> = remove (delete) file</li>\r\n	<li><code>$ rm -rf filename</code> = remove (delete) folder recursively (r) with no approval (f)</li>\r\n	<li><code>$ touch filename</code> = create file with filename</li>\r\n	<li><code>$ nano filename</code> = open and edit file within terminal (ctrl-X to close)</li>\r\n	<li><code>$ open filename</code> = open and edit file within your default text editor</li>\r\n	<li><code>$ subl .</code> = open entire folder in Sublime (<a title="How to setup Sublime with the command-line" href="http://dev.dorails.com/railsvitamins/how-to-setup-sublime-with-the-command-line/">Learn how to set this up</a>)</li>\r\n	<li><code>$ cat filename</code> = display contents of file</li>\r\n</ul>\r\n&nbsp;\r\n<h3>Tools</h3>\r\nFor the command-line, I use iTerm instead of the stock Terminal app that comes with OSX. Consider using this. I use it mainly because I can quickly press <code>cmd-spacebar</code> anytime I need to get to the terminal (which is a lot). Also I set it to be large halfscreen drop window on the top instead of the usual floating windows, so I don\'t have to mess around with moving and sizing them.\r\n\r\nLike I said above, I use Sublime Text 2 for my text editor. I highly recommend it because:\r\n<ul>\r\n<ul>\r\n	<li>you crack open entire projects with the <code>subl .</code> command (learn how to set this up in another post <a title="How to setup Sublime with the command-line" href="http://dev.dorails.com/railsvitamins/how-to-setup-sublime-with-the-command-line/" target="_blank">here</a>)</li>\r\n	<li>you can easily browse files within it</li>\r\n	<li>it has a package installer that allows you to add any type of language syntax or auto-complete you could ever imagine</li>\r\n	<li>also if you set it up, you can run Rails tests from within Sublime (super handy)</li>\r\n</ul>\r\n</ul>\r\n<h3>Tips</h3>\r\n<ul>\r\n	<li>When things start to get cluttered in your terminal window. Use <code>$ clear</code> to go to a blank screen. But don\'t be alarmed you can scroll up to see your previous commands</li>\r\n	<li>If you need to run a longer command that you recently entered. Press the up/down keys to toggle through all your most recent entries.</li>\r\n	<li>Wean yourself off using Finder windows to navigate your files.</li>\r\n	<li>Setup Sublime Text 2 to work with <code>subl .</code> so you can easily open projects from terminal on the fly. Learn how to do that <a title="How to setup Sublime with the command-line" href="http://dev.dorails.com/railsvitamins/how-to-setup-sublime-with-the-command-line/" target="_blank">here</a>.</li>\r\n	<li>Create a <code>.bash_profile</code> for yourself so you can make shortcut commands. I have a separate post about this <a title="Save a ton of time with .bash_profile aliases" href="http://dev.dorails.com/railsvitamins/save-a-ton-of-time-with-bash_profile-aliases/" target="_blank">here</a>.</li>\r\n</ul>\r\nThat\'s all for now. Let me know if you have any questions or other topics you want me to cover.', 'Getting started with the command-line?', '', 'inherit', 'open', 'open', '', '227-revision-v1', '', '', '2014-09-03 11:57:48', '2014-09-03 16:57:48', '', 227, 'http://dev.dorails.com/railsvitamins/227-revision-v1/', 0, 'revision', '', 0) ;
INSERT INTO `wp_posts` ( `ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(243, 1, '2014-09-03 11:58:30', '2014-09-03 16:58:30', 'The command-line is an absolutely vital tool for any Rails developer. If you aren\'t familiar with command-line (aka Terminal), it can be intimidating at first. It was confusing and seemed unnecessary to me when I first started using it. But once you start really digging into it, you will see how powerful it is. Rails devs use the command-line to enter commands for Rails, Git, Heroku, SQL, Linux, etc, etc.\r\n\r\nBut let\'s walk before we run. Here\'s a quick crash-course for command-line basics. Run through this quick exercise and you will have it down in no time.\r\n<h3>Getting around</h3>\r\nFirst, go to your Applications folder and open Terminal (or download iTerm). You may want to drag this to your dock for easy access. Keep in mind, every time you type a command you shouldn\'t type the <code>$</code> sign. This is just something that lets you know that this a terminal command.\r\n\r\nOnce Terminal is open type:\r\n<pre>$ pwd</pre>\r\nThis stands for Print Working Directory. This is telling you what directory you are currently inside of. You should see Terminal return something like <code>/Users/tyrichards</code> as a response.\r\n\r\nOkay you can see you are in your home directory, but what\'s inside of this directory? Where can you go from here? Type this command:\r\n<pre>$ ls</pre>\r\n<code>$ ls</code> is a command that lists everything within the current directory. This will show you all the files and folder that live in the current directory.\r\n\r\nSo what happens when you want to move to one of these directories? Okay let\'s travel to our desktop. To do this type the command:\r\n<pre>$ cd Desktop</pre>\r\nYou have now moved to your desktop. The <code>$ cd</code> command allows you to "change directory" to the following path. Type the command <code>$ pwd</code> to verify that you are there. And you can even type <code>$ ls</code> to see what files and folders live there.\r\n<h3>Creating Folders</h3>\r\nOkay let\'s say we want to create a new folder on our desktop with Terminal. To do this, type the command:\r\n<pre>$ mkdir Test</pre>\r\nThis will make a new directory with the name Test. Type the <code>$ ls</code> command to see that it\'s been created.\r\n\r\nBut let\'s say want to rename it to something that is more descriptive. We could create a new folder but how would we rename the folder? You can do this by using the <code>$ mv</code> command like so:\r\n<pre>$ mv Test \'My Awesome Project\'</pre>\r\nThe <code>$ mv</code> command will rename the <code>Test</code> folder to <code>My Awesome Project</code>. Enter <code>$ ls</code> to make sure it worked. And as you could probably guess the <code>$ mv</code> command stands for "move". You can use this to move a file to a different directory as well with <code>$ mv /current/path /new/path</code>. But we won\'t go to deep into that right now.\r\n\r\nTo copy the folder you can just use the <code>$ cp</code> command:\r\n<pre>$ cp \'My Awesome Project\' \'My Awesome Folder Copy\'</pre>\r\nThis command copies your <code>My Awesome ProjectMy Awesome Folder Copy</code>. <code>$ ls</code> to see the results.\r\n\r\nBut we really don\'t want a thousand copies of this folder so let\'s go ahead and delete the copy with this command:\r\n<pre>$ rm -rf \'My Awesome Project Copy\'</pre>\r\n<code>$ rm</code> as you could probably guess "removes" or deletes the folder. The <code>r</code> in <code>-rf</code> means "recursive", which is a fancy word for every file/folder. The <code>f</code> in <code>-rf</code> means to force - this basically means you won\'t have to manually approve every file you want to delete within that folder. Put it all together and you can see that the command <code>$ rm -rf foldername</code> removes a folder and all files within it. Enter <code>$ ls</code> to see that the folder copy is deleted.\r\n<h3>Creating &amp; Editing Files</h3>\r\nOkay let\'s create a file now with command-line. Let\'s <code>$ cd</code> into our new folder and create a new file. Notice that you can press the <code>Tab</code> key after typing a few characters and terminal will auto-complete the file name for you. In Terminal, type:\r\n<pre>$ cd \'My Awesome Project\'</pre>\r\nIf you run <code>$ ls</code>, then you will see that our project is empty. To create a new file enter:\r\n<pre>$ touch readme.md</pre>\r\nYou now have an empty readme file! <code>$ touch</code> creates a new file with the name of your choice. Type <code>$ ls</code> to verify that it\'s there.\r\n\r\nOkay we have a file but it\'s pretty useless right now, so what\'s the best way to edit this? Well that depends... I\'ll show show you a few ways I edit files for different cases.\r\n<h4>Edit files right from Terminal</h4>\r\nTo make a quick addition right from terminal use the <code>$ nano</code> command.\r\n<pre>$ nano readme.md</pre>\r\nAfter you enter the command you should see a blank screen because your file is empty. Type <code>Hello World!</code> into your new file. When your done, press <code>ctrl-X</code> to exit the file and press <code>Y</code> to agree to save changes. You should now be back to your regular screen.\r\n\r\nYou can type <code>$ cat readme.md</code> to show you the contents of the file. Viola!\r\n<h4>Edit files in a text editor</h4>\r\nThe fastest way to open files in a text editor from the command line would be to type the following:\r\n<pre>$ open readme.md</pre>\r\nThis will automatically open the file in your default text editor. You can make any changes you want, press <code>cmd-S</code> and you are good to go.\r\n<h3>Sanity Check</h3>\r\nFeel free to open up the folder and the file from your Finder window for a sanity check. And there you go! You\'ve successfully learned to navigate your machine, create, edit and delete files and folders with the command-line. You can do a million other things with it but you gotta start somewhere!\r\n<h3>Recap of Commands</h3>\r\n<ul>\r\n	<li><code>$ pwd</code> = print working directory</li>\r\n	<li><code>$ ls</code> = list all files and folders within current directory</li>\r\n	<li><code>$ cd foldername</code> = change directory (go to) to foldername</li>\r\n	<li><code>$ mkdir foldername</code> = make directory (create folder) with name</li>\r\n	<li><code>$ mv foldername to newfoldername</code> = Rename old folder to new name (Or move folder to new directory with new name)</li>\r\n	<li><code>$ cp foldername to foldernamecopy</code> = copy folder to the current directory with a new foldername</li>\r\n	<li><code>$ rm filename</code> = remove (delete) file</li>\r\n	<li><code>$ rm -rf filename</code> = remove (delete) folder recursively (r) with no approval (f)</li>\r\n	<li><code>$ touch filename</code> = create file with filename</li>\r\n	<li><code>$ nano filename</code> = open and edit file within terminal (ctrl-X to close)</li>\r\n	<li><code>$ open filename</code> = open and edit file within your default text editor</li>\r\n	<li><code>$ subl .</code> = open entire folder in Sublime (<a title="How to setup Sublime with the command-line" href="http://dev.dorails.com/railsvitamins/how-to-setup-sublime-with-the-command-line/">Learn how to set this up</a>)</li>\r\n	<li><code>$ cat filename</code> = display contents of file</li>\r\n</ul>\r\n<h3>Tools</h3>\r\nFor the command-line, I use iTerm instead of the stock Terminal app that comes with OSX. Consider using this. I use it mainly because I can quickly press <code>cmd-spacebar</code> anytime I need to get to the terminal (which is a lot). Also I set it to be large halfscreen drop window on the top instead of the usual floating windows, so I don\'t have to mess around with moving and sizing them.\r\n\r\nLike I said above, I use Sublime Text 2 for my text editor. I highly recommend it because:\r\n<ul>\r\n<ul>\r\n	<li>you crack open entire projects with the <code>subl .</code> command (learn how to set this up in another post <a title="How to setup Sublime with the command-line" href="http://dev.dorails.com/railsvitamins/how-to-setup-sublime-with-the-command-line/" target="_blank">here</a>)</li>\r\n	<li>you can easily browse files within it</li>\r\n	<li>it has a package installer that allows you to add any type of language syntax or auto-complete you could ever imagine</li>\r\n	<li>also if you set it up, you can run Rails tests from within Sublime (super handy)</li>\r\n</ul>\r\n</ul>\r\n<h3>Tips</h3>\r\n<ul>\r\n	<li>When things start to get cluttered in your terminal window. Use <code>$ clear</code> to go to a blank screen. But don\'t be alarmed you can scroll up to see your previous commands</li>\r\n	<li>If you need to run a longer command that you recently entered. Press the up/down keys to toggle through all your most recent entries.</li>\r\n	<li>Wean yourself off using Finder windows to navigate your files.</li>\r\n	<li>Setup Sublime Text 2 to work with <code>subl .</code> so you can easily open projects from terminal on the fly. Learn how to do that <a title="How to setup Sublime with the command-line" href="http://dev.dorails.com/railsvitamins/how-to-setup-sublime-with-the-command-line/" target="_blank">here</a>.</li>\r\n	<li>Create a <code>.bash_profile</code> for yourself so you can make shortcut commands. I have a separate post about this <a title="Save a ton of time with .bash_profile aliases" href="http://dev.dorails.com/railsvitamins/save-a-ton-of-time-with-bash_profile-aliases/" target="_blank">here</a>.</li>\r\n</ul>\r\nThat\'s all for now. Let me know if you have any questions or other topics you want me to cover.', 'Getting started with the command-line?', '', 'inherit', 'open', 'open', '', '227-revision-v1', '', '', '2014-09-03 11:58:30', '2014-09-03 16:58:30', '', 227, 'http://dev.dorails.com/railsvitamins/227-revision-v1/', 0, 'revision', '', 0),
(244, 1, '2014-09-03 12:01:05', '2014-09-03 17:01:05', 'The command-line is an absolutely vital tool for any Rails developer. If you aren\'t familiar with command-line (aka Terminal), it can be intimidating at first. It was confusing and seemed unnecessary to me when I first started using it. But once you start really digging into it, you will see how powerful it is. Rails devs use the command-line to enter commands for Rails, Git, Heroku, SQL, Linux, etc, etc.\r\n\r\nBut let\'s walk before we run. Here\'s a quick crash-course for command-line basics. Run through this quick exercise and you will have it down in no time.\r\n<h3>Getting around</h3>\r\nFirst, go to your Applications folder and open Terminal (or download iTerm). You may want to drag this to your dock for easy access. Keep in mind, every time you type a command you shouldn\'t type the <code>$</code> sign. This is just something that lets you know that this a terminal command.\r\n\r\nOnce Terminal is open type:\r\n<pre>$ pwd</pre>\r\nThis stands for Print Working Directory. This is telling you what directory you are currently inside of. You should see Terminal return something like <code>/Users/tyrichards</code> as a response.\r\n\r\nOkay you can see you are in your home directory, but what\'s inside of this directory? Where can you go from here? Type this command:\r\n<pre>$ ls</pre>\r\n<code>$ ls</code> is a command that lists everything within the current directory. This will show you all the files and folder that live in the current directory.\r\n\r\nSo what happens when you want to move to one of these directories? Okay let\'s travel to our desktop. To do this type the command:\r\n<pre>$ cd Desktop</pre>\r\nYou have now moved to your desktop. The <code>$ cd</code> command allows you to "change directory" to the following path. Type the command <code>$ pwd</code> to verify that you are there. And you can even type <code>$ ls</code> to see what files and folders live there.\r\n<h3>Creating Folders</h3>\r\nOkay let\'s say we want to create a new folder on our desktop with Terminal. To do this, type the command:\r\n<pre>$ mkdir Test</pre>\r\nThis will make a new directory with the name Test. Type the <code>$ ls</code> command to see that it\'s been created.\r\n\r\nBut let\'s rename it to something that is more descriptive. We could create a new folder but how would we rename the folder? You can do this by using the <code>$ mv</code> command like so:\r\n<pre>$ mv Test \'My Awesome Project\'</pre>\r\nThe <code>$ mv</code> command will rename the <code>Test</code> folder to <code>My Awesome Project</code>. Enter <code>$ ls</code> to make sure it worked. And as you could probably guess the <code>$ mv</code> command stands for "move". You can use this to move a file to a different directory as well with <code>$ mv /current/path /new/path</code>. But we won\'t go to deep into that right now.\r\n\r\nTo copy the folder you can just use the <code>$ cp</code> command:\r\n<pre>$ cp \'My Awesome Project\' \'My Awesome Folder Copy\'</pre>\r\nThis command copies your <code>My Awesome ProjectMy Awesome Folder Copy</code>. <code>$ ls</code> to see the results.\r\n\r\nBut we really don\'t want a thousand copies of this folder so let\'s go ahead and delete the copy with this command:\r\n<pre>$ rm -rf \'My Awesome Project Copy\'</pre>\r\n<code>$ rm</code> as you could probably guess "removes" or deletes the folder. The <code>r</code> in <code>-rf</code> means "recursive", which is a fancy word for every file/folder. The <code>f</code> in <code>-rf</code> means to force - this basically means you won\'t have to manually approve every file you want to delete within that folder. Put it all together and you can see that the command <code>$ rm -rf foldername</code> removes a folder and all files within it. Enter <code>$ ls</code> to see that the folder copy is deleted.\r\n<h3>Creating &amp; Editing Files</h3>\r\nOkay let\'s create a file now with command-line. Let\'s <code>$ cd</code> into our new folder and create a new file. Notice that you can press the <code>Tab</code> key after typing a few characters and terminal will auto-complete the file name for you. In Terminal, type:\r\n<pre>$ cd \'My Awesome Project\'</pre>\r\nIf you run <code>$ ls</code>, then you will see that our project is empty. To create a new file enter:\r\n<pre>$ touch readme.md</pre>\r\nYou now have an empty readme file! <code>$ touch</code> creates a new file with the name of your choice. Type <code>$ ls</code> to verify that it\'s there.\r\n\r\nOkay we have a file but it\'s pretty useless right now, so what\'s the best way to edit this? Well that depends... I\'ll show show you a few ways I edit files for different cases.\r\n<h4>Edit files right from Terminal</h4>\r\nTo make a quick addition right from terminal use the <code>$ nano</code> command.\r\n<pre>$ nano readme.md</pre>\r\nAfter you enter the command you should see a blank screen because your file is empty. Type <code>Hello World!</code> into your new file. When your done, press <code>ctrl-X</code> to exit the file and press <code>Y</code> to agree to save changes. You should now be back to your regular screen.\r\n\r\nYou can type <code>$ cat readme.md</code> to show you the contents of the file. Viola!\r\n<h4>Edit files in a text editor</h4>\r\nThe fastest way to open files in a text editor from the command line would be to type the following:\r\n<pre>$ open readme.md</pre>\r\nThis will automatically open the file in your default text editor. You can make any changes you want, press <code>cmd-S</code> and you are good to go.\r\n<h3>Sanity Check</h3>\r\nFeel free to open up the folder and the file from your Finder window for a sanity check. And there you go! You\'ve successfully learned to navigate your machine, create, edit and delete files and folders with the command-line. You can do a million other things with it but you gotta start somewhere!\r\n<h3>Recap of Commands</h3>\r\n<ul>\r\n	<li><code>$ pwd</code> = print working directory</li>\r\n	<li><code>$ ls</code> = list all files and folders within current directory</li>\r\n	<li><code>$ cd foldername</code> = change directory (go to) to foldername</li>\r\n	<li><code>$ mkdir foldername</code> = make directory (create folder) with name</li>\r\n	<li><code>$ mv foldername to newfoldername</code> = Rename old folder to new name (Or move folder to new directory with new name)</li>\r\n	<li><code>$ cp foldername to foldernamecopy</code> = copy folder to the current directory with a new foldername</li>\r\n	<li><code>$ rm filename</code> = remove (delete) file</li>\r\n	<li><code>$ rm -rf filename</code> = remove (delete) folder recursively (r) with no approval (f)</li>\r\n	<li><code>$ touch filename</code> = create file with filename</li>\r\n	<li><code>$ nano filename</code> = open and edit file within terminal (ctrl-X to close)</li>\r\n	<li><code>$ open filename</code> = open and edit file within your default text editor</li>\r\n	<li><code>$ subl .</code> = open entire folder in Sublime (<a title="How to setup Sublime with the command-line" href="http://dev.dorails.com/railsvitamins/how-to-setup-sublime-with-the-command-line/">Learn how to set this up</a>)</li>\r\n	<li><code>$ cat filename</code> = display contents of file</li>\r\n</ul>\r\n<h3>Tools</h3>\r\nFor the command-line, I use iTerm instead of the stock Terminal app that comes with OSX. Consider using this. I use it mainly because I can quickly press <code>cmd-spacebar</code> anytime I need to get to the terminal (which is a lot). Also I set it to be large halfscreen drop window on the top instead of the usual floating windows, so I don\'t have to mess around with moving and sizing them.\r\n\r\nLike I said above, I use Sublime Text 2 for my text editor. I highly recommend it because:\r\n<ul>\r\n<ul>\r\n	<li>you crack open entire projects with the <code>subl .</code> command (learn how to set this up in another post <a title="How to setup Sublime with the command-line" href="http://dev.dorails.com/railsvitamins/how-to-setup-sublime-with-the-command-line/" target="_blank">here</a>)</li>\r\n	<li>you can easily browse files within it</li>\r\n	<li>it has a package installer that allows you to add any type of language syntax or auto-complete you could ever imagine</li>\r\n	<li>also if you set it up, you can run Rails tests from within Sublime (super handy)</li>\r\n</ul>\r\n</ul>\r\n<h3>Tips</h3>\r\n<ul>\r\n	<li>When things start to get cluttered in your terminal window. Use <code>$ clear</code> to go to a blank screen. But don\'t be alarmed you can scroll up to see your previous commands</li>\r\n	<li>If you need to run a longer command that you recently entered. Press the up/down keys to toggle through all your most recent entries.</li>\r\n	<li>Wean yourself off using Finder windows to navigate your files.</li>\r\n	<li>Setup Sublime Text 2 to work with <code>subl .</code> so you can easily open projects from terminal on the fly. Learn how to do that <a title="How to setup Sublime with the command-line" href="http://dev.dorails.com/railsvitamins/how-to-setup-sublime-with-the-command-line/" target="_blank">here</a>.</li>\r\n	<li>Create a <code>.bash_profile</code> for yourself so you can make shortcut commands. I have a separate post about this <a title="Save a ton of time with .bash_profile aliases" href="http://dev.dorails.com/railsvitamins/save-a-ton-of-time-with-bash_profile-aliases/" target="_blank">here</a>.</li>\r\n</ul>\r\nThat\'s all for now. Let me know if you have any questions or other topics you want me to cover.', 'Getting started with the command-line?', '', 'inherit', 'open', 'open', '', '227-revision-v1', '', '', '2014-09-03 12:01:05', '2014-09-03 17:01:05', '', 227, 'http://dev.dorails.com/railsvitamins/227-revision-v1/', 0, 'revision', '', 0),
(245, 1, '2014-09-03 12:07:35', '2014-09-03 17:07:35', 'The command-line is an absolutely vital tool for any Rails developer. If you aren\'t familiar with command-line (aka Terminal), it can be intimidating at first. It was confusing and seemed unnecessary to me when I first started using it. But once you start really digging into it, you will see how powerful it is. Rails devs use the command-line to enter commands for Rails, Git, Heroku, SQL, Linux, etc, etc.\r\n\r\nBut let\'s walk before we run. Here\'s a quick crash-course for command-line basics. Run through this quick exercise and you will have it down in no time.\r\n<h3>Getting around</h3>\r\nFirst, go to your Applications folder and open Terminal (or download iTerm). You may want to drag this to your dock for easy access. Keep in mind, every time you type a command you shouldn\'t type the <code>$</code> sign. This is just something that lets you know that this a terminal command.\r\n\r\nOnce Terminal is open type:\r\n<pre>$ pwd</pre>\r\nThis stands for Print Working Directory. This is telling you what directory you are currently inside of. You should see Terminal return something like <code>/Users/tyrichards</code> as a response.\r\n\r\nOkay you can see you are in your home directory, but what\'s inside of this directory? Where can you go from here? Type this command:\r\n<pre>$ ls</pre>\r\n<code>$ ls</code> is a command that lists everything within the current directory. This will show you all the files and folder that live in the current directory.\r\n\r\nSo what happens when you want to move to one of these directories? Okay let\'s travel to our desktop. To do this type the command:\r\n<pre>$ cd Desktop</pre>\r\nYou have now moved to your desktop. The <code>$ cd</code> command allows you to "change directory" to the following path. Type the command <code>$ pwd</code> to verify that you are there. And you can even type <code>$ ls</code> to see what files and folders live there.\r\n<h3>Creating Folders</h3>\r\nOkay let\'s say we want to create a new folder on our desktop with Terminal. To do this, type the command:\r\n<pre>$ mkdir Test</pre>\r\nThis will make a new directory with the name Test. Type the <code>$ ls</code> command to see that it\'s been created.\r\n\r\nBut let\'s rename it to something that is more descriptive. We could create a new folder but how would we rename the folder? You can do this by using the <code>$ mv</code> command like so:\r\n<pre>$ mv Test \'My Awesome Project\'</pre>\r\nThe <code>$ mv</code> command will rename the <code>Test</code> folder to <code>My Awesome Project</code>. Enter <code>$ ls</code> to make sure it worked. And as you could probably guess the <code>$ mv</code> command stands for "move". You can use this to move a file to a different directory as well with <code>$ mv /current/path /new/path</code>. But we won\'t go to deep into that right now.\r\n\r\nTo copy the folder you can just use the <code>$ cp</code> command:\r\n<pre>$ cp -r \'My Awesome Project\' \'My Awesome Folder Copy\'</pre>\r\nThis command creates a copy of your <code>My Awesome Project</code> folder and names it . <code>$ ls</code> to see the results. You need to add the <code>-r</code> when you are copying folders so that you will also "recursively" copy the files inside.\r\n\r\nBut we really don\'t want a thousand copies of this folder so let\'s go ahead and delete the copy with this command:\r\n<pre>$ rm -rf \'My Awesome Project Copy\'</pre>\r\n<code>$ rm</code> as you could probably guess "removes" or deletes the folder. The <code>r</code> in <code>-rf</code> means "recursive", which is a fancy word for every file/folder. The <code>f</code> in <code>-rf</code> means to force - this basically means you won\'t have to manually approve every file you want to delete within that folder. Put it all together and you can see that the command <code>$ rm -rf foldername</code> removes a folder and all files within it. Enter <code>$ ls</code> to see that the folder copy is deleted.\r\n<h3>Creating &amp; Editing Files</h3>\r\nOkay let\'s create a file now with command-line. Let\'s <code>$ cd</code> into our new folder and create a new file. Notice that you can press the <code>Tab</code> key after typing a few characters and terminal will auto-complete the file name for you. In Terminal, type:\r\n<pre>$ cd \'My Awesome Project\'</pre>\r\nIf you run <code>$ ls</code>, then you will see that our project is empty. To create a new file enter:\r\n<pre>$ touch readme.md</pre>\r\nYou now have an empty readme file! <code>$ touch</code> creates a new file with the name of your choice. Type <code>$ ls</code> to verify that it\'s there.\r\n\r\nOkay we have a file but it\'s pretty useless right now, so what\'s the best way to edit this? Well that depends... I\'ll show show you a few ways I edit files for different cases.\r\n<h4>Edit files right from Terminal</h4>\r\nTo make a quick addition right from terminal use the <code>$ nano</code> command.\r\n<pre>$ nano readme.md</pre>\r\nAfter you enter the command you should see a blank screen because your file is empty. Type <code>Hello World!</code> into your new file. When your done, press <code>ctrl-X</code> to exit the file and press <code>Y</code> to agree to save changes. You should now be back to your regular screen.\r\n\r\nYou can type <code>$ cat readme.md</code> to show you the contents of the file. Viola!\r\n<h4>Edit files in a text editor</h4>\r\nThe fastest way to open files in a text editor from the command line would be to type the following:\r\n<pre>$ open readme.md</pre>\r\nThis will automatically open the file in your default text editor. You can make any changes you want, press <code>cmd-S</code> and you are good to go.\r\n<h3>Sanity Check</h3>\r\nFeel free to open up the folder and the file from your Finder window for a sanity check. And there you go! You\'ve successfully learned to navigate your machine, create, edit and delete files and folders with the command-line. You can do a million other things with it but you gotta start somewhere!\r\n<h3>Recap of Commands</h3>\r\n<ul>\r\n	<li><code>$ pwd</code> = print working directory</li>\r\n	<li><code>$ ls</code> = list all files and folders within current directory</li>\r\n	<li><code>$ cd foldername</code> = change directory (go to) to foldername</li>\r\n	<li><code>$ mkdir foldername</code> = make directory (create folder) with name</li>\r\n	<li><code>$ mv foldername to newfoldername</code> = Rename old folder to new name (Or move folder to new directory with new name)</li>\r\n	<li><code>$ cp foldername to foldernamecopy</code> = copy folder to the current directory with a new foldername</li>\r\n	<li><code>$ rm filename</code> = remove (delete) file</li>\r\n	<li><code>$ rm -rf filename</code> = remove (delete) folder recursively (r) with no approval (f)</li>\r\n	<li><code>$ touch filename</code> = create file with filename</li>\r\n	<li><code>$ nano filename</code> = open and edit file within terminal (ctrl-X to close)</li>\r\n	<li><code>$ open filename</code> = open and edit file within your default text editor</li>\r\n	<li><code>$ subl .</code> = open entire folder in Sublime (<a title="How to setup Sublime with the command-line" href="http://dev.dorails.com/railsvitamins/how-to-setup-sublime-with-the-command-line/">Learn how to set this up</a>)</li>\r\n	<li><code>$ cat filename</code> = display contents of file</li>\r\n</ul>\r\n<h3>Tools</h3>\r\nFor the command-line, I use iTerm instead of the stock Terminal app that comes with OSX. Consider using this. I use it mainly because I can quickly press <code>cmd-spacebar</code> anytime I need to get to the terminal (which is a lot). Also I set it to be large halfscreen drop window on the top instead of the usual floating windows, so I don\'t have to mess around with moving and sizing them.\r\n\r\nLike I said above, I use Sublime Text 2 for my text editor. I highly recommend it because:\r\n<ul>\r\n<ul>\r\n	<li>you crack open entire projects with the <code>subl .</code> command (learn how to set this up in another post <a title="How to setup Sublime with the command-line" href="http://dev.dorails.com/railsvitamins/how-to-setup-sublime-with-the-command-line/" target="_blank">here</a>)</li>\r\n	<li>you can easily browse files within it</li>\r\n	<li>it has a package installer that allows you to add any type of language syntax or auto-complete you could ever imagine</li>\r\n	<li>also if you set it up, you can run Rails tests from within Sublime (super handy)</li>\r\n</ul>\r\n</ul>\r\n<h3>Tips</h3>\r\n<ul>\r\n	<li>When things start to get cluttered in your terminal window. Use <code>$ clear</code> to go to a blank screen. But don\'t be alarmed you can scroll up to see your previous commands</li>\r\n	<li>If you need to run a longer command that you recently entered. Press the up/down keys to toggle through all your most recent entries.</li>\r\n	<li>Wean yourself off using Finder windows to navigate your files.</li>\r\n	<li>Setup Sublime Text 2 to work with <code>subl .</code> so you can easily open projects from terminal on the fly. Learn how to do that <a title="How to setup Sublime with the command-line" href="http://dev.dorails.com/railsvitamins/how-to-setup-sublime-with-the-command-line/" target="_blank">here</a>.</li>\r\n	<li>Create a <code>.bash_profile</code> for yourself so you can make shortcut commands. I have a separate post about this <a title="Save a ton of time with .bash_profile aliases" href="http://dev.dorails.com/railsvitamins/save-a-ton-of-time-with-bash_profile-aliases/" target="_blank">here</a>.</li>\r\n</ul>\r\nThat\'s all for now. Let me know if you have any questions or other topics you want me to cover.', 'Getting started with the command-line?', '', 'inherit', 'open', 'open', '', '227-revision-v1', '', '', '2014-09-03 12:07:35', '2014-09-03 17:07:35', '', 227, 'http://dev.dorails.com/railsvitamins/227-revision-v1/', 0, 'revision', '', 0),
(246, 1, '2014-09-03 12:11:10', '2014-09-03 17:11:10', 'The command-line is an absolutely vital tool for any Rails developer. If you aren\'t familiar with command-line (aka Terminal), it can be intimidating at first. It was confusing and seemed unnecessary to me when I first started using it. But once you start really digging into it, you will see how powerful it is. Rails devs use the command-line to enter commands for Rails, Git, Heroku, SQL, Linux, etc, etc.\r\n\r\nBut let\'s walk before we run. Here\'s a quick crash-course for command-line basics. Run through this quick exercise and you will have it down in no time.\r\n<h3>Getting around</h3>\r\nFirst, go to your Applications folder and open Terminal (or download iTerm). You may want to drag this to your dock for easy access. Keep in mind, every time you type a command you shouldn\'t type the <code>$</code> sign. This is just something that lets you know that this a terminal command.\r\n\r\nOnce Terminal is open type:\r\n<pre>$ pwd</pre>\r\nThis stands for Print Working Directory. This is telling you what directory you are currently inside of. You should see Terminal return something like <code>/Users/tyrichards</code> as a response.\r\n\r\nOkay you can see you are in your home directory, but what\'s inside of this directory? Where can you go from here? Type this command:\r\n<pre>$ ls</pre>\r\n<code>$ ls</code> is a command that lists everything within the current directory. This will show you all the files and folder that live in the current directory.\r\n\r\nSo what happens when you want to move to one of these directories? Okay let\'s travel to our desktop. To do this type the command:\r\n<pre>$ cd Desktop</pre>\r\nYou have now moved to your desktop. The <code>$ cd</code> command allows you to "change directory" to the following path. Type the command <code>$ pwd</code> to verify that you are there. And you can even type <code>$ ls</code> to see what files and folders live there.\r\n<h3>Creating Folders</h3>\r\nOkay let\'s say we want to create a new folder on our desktop with Terminal. To do this, type the command:\r\n<pre>$ mkdir Test</pre>\r\nThis will make a new directory with the name Test. Type the <code>$ ls</code> command to see that it\'s been created.\r\n\r\nBut let\'s rename it to something that is more descriptive. We could create a new folder but how would we rename the folder? You can do this by using the <code>$ mv</code> command like so:\r\n<pre>$ mv Test \'My Awesome Project\'</pre>\r\nThe <code>$ mv</code> command will rename the <code>Test</code> folder to <code>My Awesome Project</code>. Enter <code>$ ls</code> to make sure it worked. And as you could probably guess the <code>$ mv</code> command stands for "move". You can use this to move a file to a different directory as well with <code>$ mv /current/path /new/path</code>. But we won\'t go to deep into that right now.\r\n\r\nTo copy the folder you can just use the <code>$ cp</code> command:\r\n<pre>$ cp -r \'My Awesome Project\' \'My Awesome Folder Copy\'</pre>\r\nThis command creates a copy of your <code>My Awesome Project</code> folder and names it . <code>$ ls</code> to see the results. When you are copying files you can get away with just typing <code>$ mv filename</code>, but with files you need to add the <code>-r</code> so that you will also "recursively" copy the files inside.\r\n\r\nBut we really don\'t want a thousand copies of this folder so let\'s go ahead and delete the copy with this command:\r\n<pre>$ rm -rf \'My Awesome Project Copy\'</pre>\r\n<code>$ rm</code> as you could probably guess "removes" or deletes the folder. The <code>r</code> in <code>-rf</code> means "recursive", which is a fancy word for every file/folder. The <code>f</code> in <code>-rf</code> means to force - this basically means you won\'t have to manually approve every file you want to delete within that folder. Put it all together and you can see that the command <code>$ rm -rf foldername</code> removes a folder and all files within it. Enter <code>$ ls</code> to see that the folder copy is deleted.\r\n<h3>Creating &amp; Editing Files</h3>\r\nOkay let\'s create a file now with command-line. Let\'s <code>$ cd</code> into our new folder and create a new file. Notice that you can press the <code>Tab</code> key after typing a few characters and terminal will auto-complete the file name for you. In Terminal, type:\r\n<pre>$ cd \'My Awesome Project\'</pre>\r\nIf you run <code>$ ls</code>, then you will see that our project is empty. To create a new file enter:\r\n<pre>$ touch readme.md</pre>\r\nYou now have an empty readme file! <code>$ touch</code> creates a new file with the name of your choice. Type <code>$ ls</code> to verify that it\'s there.\r\n\r\nOkay we have a file but it\'s pretty useless right now, so what\'s the best way to edit this? Well that depends... I\'ll show show you a few ways I edit files for different cases.\r\n<h4>Edit files right from Terminal</h4>\r\nTo make a quick addition right from terminal use the <code>$ nano</code> command.\r\n<pre>$ nano readme.md</pre>\r\nAfter you enter the command you should see a blank screen because your file is empty. Type <code>Hello World!</code> into your new file. When your done, press <code>ctrl-X</code> to exit the file and press <code>Y</code> to agree to save changes. You should now be back to your regular screen.\r\n\r\nYou can type <code>$ cat readme.md</code> to show you the contents of the file. Viola!\r\n<h4>Edit files in a text editor</h4>\r\nThe fastest way to open files in a text editor from the command line would be to type the following:\r\n<pre>$ open readme.md</pre>\r\nThis will automatically open the file in your default text editor. You can make any changes you want, press <code>cmd-S</code> and you are good to go.\r\n<h3>Sanity Check</h3>\r\nFeel free to open up the folder and the file from your Finder window for a sanity check. And there you go! You\'ve successfully learned to navigate your machine, create, edit and delete files and folders with the command-line. You can do a million other things with it but you gotta start somewhere!\r\n<h3>Recap of Commands</h3>\r\n<ul>\r\n	<li><code>$ pwd</code> = print working directory</li>\r\n	<li><code>$ ls</code> = list all files and folders within current directory</li>\r\n	<li><code>$ cd foldername</code> = change directory (go to) to foldername</li>\r\n	<li><code>$ mkdir foldername</code> = make directory (create folder) with name</li>\r\n	<li><code>$ mv foldername to newfoldername</code> = Rename old folder to new name (Or move folder to new directory with new name)</li>\r\n	<li><code>$ cp foldername to foldernamecopy</code> = copy folder to the current directory with a new foldername</li>\r\n	<li><code>$ rm filename</code> = remove (delete) file</li>\r\n	<li><code>$ rm -rf filename</code> = remove (delete) folder recursively (r) with no approval (f)</li>\r\n	<li><code>$ touch filename</code> = create file with filename</li>\r\n	<li><code>$ nano filename</code> = open and edit file within terminal (ctrl-X to close)</li>\r\n	<li><code>$ open filename</code> = open and edit file within your default text editor</li>\r\n	<li><code>$ subl .</code> = open entire folder in Sublime (<a title="How to setup Sublime with the command-line" href="http://dev.dorails.com/railsvitamins/how-to-setup-sublime-with-the-command-line/">Learn how to set this up</a>)</li>\r\n	<li><code>$ cat filename</code> = display contents of file</li>\r\n</ul>\r\n<h3>Tools</h3>\r\nFor the command-line, I use iTerm instead of the stock Terminal app that comes with OSX. Consider using this. I use it mainly because I can quickly press <code>cmd-spacebar</code> anytime I need to get to the terminal (which is a lot). Also I set it to be large halfscreen drop window on the top instead of the usual floating windows, so I don\'t have to mess around with moving and sizing them.\r\n\r\nLike I said above, I use Sublime Text 2 for my text editor. I highly recommend it because:\r\n<ul>\r\n<ul>\r\n	<li>you crack open entire projects with the <code>subl .</code> command (learn how to set this up in another post <a title="How to setup Sublime with the command-line" href="http://dev.dorails.com/railsvitamins/how-to-setup-sublime-with-the-command-line/" target="_blank">here</a>)</li>\r\n	<li>you can easily browse files within it</li>\r\n	<li>it has a package installer that allows you to add any type of language syntax or auto-complete you could ever imagine</li>\r\n	<li>also if you set it up, you can run Rails tests from within Sublime (super handy)</li>\r\n</ul>\r\n</ul>\r\n<h3>Tips</h3>\r\n<ul>\r\n	<li>When things start to get cluttered in your terminal window. Use <code>$ clear</code> to go to a blank screen. But don\'t be alarmed you can scroll up to see your previous commands</li>\r\n	<li>If you need to run a longer command that you recently entered. Press the up/down keys to toggle through all your most recent entries.</li>\r\n	<li>Wean yourself off using Finder windows to navigate your files.</li>\r\n	<li>Setup Sublime Text 2 to work with <code>subl .</code> so you can easily open projects from terminal on the fly. Learn how to do that <a title="How to setup Sublime with the command-line" href="http://dev.dorails.com/railsvitamins/how-to-setup-sublime-with-the-command-line/" target="_blank">here</a>.</li>\r\n	<li>Create a <code>.bash_profile</code> for yourself so you can make shortcut commands. I have a separate post about this <a title="Save a ton of time with .bash_profile aliases" href="http://dev.dorails.com/railsvitamins/save-a-ton-of-time-with-bash_profile-aliases/" target="_blank">here</a>.</li>\r\n</ul>\r\nThat\'s all for now. Let me know if you have any questions or other topics you want me to cover.', 'Getting started with the command-line?', '', 'inherit', 'open', 'open', '', '227-revision-v1', '', '', '2014-09-03 12:11:10', '2014-09-03 17:11:10', '', 227, 'http://dev.dorails.com/railsvitamins/227-revision-v1/', 0, 'revision', '', 0),
(247, 1, '2014-09-03 12:11:30', '2014-09-03 17:11:30', 'The command-line is an absolutely vital tool for any Rails developer. If you aren\'t familiar with command-line (aka Terminal), it can be intimidating at first. It was confusing and seemed unnecessary to me when I first started using it. But once you start really digging into it, you will see how powerful it is. Rails devs use the command-line to enter commands for Rails, Git, Heroku, SQL, Linux, etc, etc.\r\n\r\nBut let\'s walk before we run. Here\'s a quick crash-course for command-line basics. Run through this quick exercise and you will have it down in no time.\r\n<h3>Getting around</h3>\r\nFirst, go to your Applications folder and open Terminal (or download iTerm). You may want to drag this to your dock for easy access. Keep in mind, every time you type a command you shouldn\'t type the <code>$</code> sign. This is just something that lets you know that this a terminal command.\r\n\r\nOnce Terminal is open type:\r\n<pre>$ pwd</pre>\r\nThis stands for Print Working Directory. This is telling you what directory you are currently inside of. You should see Terminal return something like <code>/Users/tyrichards</code> as a response.\r\n\r\nOkay you can see you are in your home directory, but what\'s inside of this directory? Where can you go from here? Type this command:\r\n<pre>$ ls</pre>\r\n<code>$ ls</code> is a command that lists everything within the current directory. This will show you all the files and folder that live in the current directory.\r\n\r\nSo what happens when you want to move to one of these directories? Okay let\'s travel to our desktop. To do this type the command:\r\n<pre>$ cd Desktop</pre>\r\nYou have now moved to your desktop. The <code>$ cd</code> command allows you to "change directory" to the following path. Type the command <code>$ pwd</code> to verify that you are there. And you can even type <code>$ ls</code> to see what files and folders live there.\r\n<h3>Creating Folders</h3>\r\nOkay let\'s say we want to create a new folder on our desktop with Terminal. To do this, type the command:\r\n<pre>$ mkdir Test</pre>\r\nThis will make a new directory with the name Test. Type the <code>$ ls</code> command to see that it\'s been created.\r\n\r\nBut let\'s rename it to something that is more descriptive. We could create a new folder but how would we rename the folder? You can do this by using the <code>$ mv</code> command like so:\r\n<pre>$ mv Test \'My Awesome Project\'</pre>\r\nThe <code>$ mv</code> command will rename the <code>Test</code> folder to <code>My Awesome Project</code>. Enter <code>$ ls</code> to make sure it worked. And as you could probably guess the <code>$ mv</code> command stands for "move". You can use this to move a file to a different directory as well with <code>$ mv /current/path /new/path</code>. But we won\'t go to deep into that right now.\r\n\r\nTo copy the folder you can just use the <code>$ cp</code> command:\r\n<pre>$ cp -r \'My Awesome Project\' \'My Awesome Folder Copy\'</pre>\r\nThis command creates a copy of your <code>My Awesome Project</code> folder and names it . <code>$ ls</code> to see the results. When you are copying files you can get away with just typing <code>$ mv filename</code>, but with files you need to add the <code>-r</code> so that you will also "recursively" copy the files inside.\r\n\r\nBut we really don\'t want any copies of this folder so let\'s go ahead and delete the copy with this command:\r\n<pre>$ rm -rf \'My Awesome Project Copy\'</pre>\r\n<code>$ rm</code> as you could probably guess "removes" or deletes the folder. The <code>r</code> in <code>-rf</code> means "recursive", which is a fancy word for every file/folder. The <code>f</code> in <code>-rf</code> means to force - this basically means you won\'t have to manually approve every file you want to delete within that folder. Put it all together and you can see that the command <code>$ rm -rf foldername</code> removes a folder and all files within it. Enter <code>$ ls</code> to see that the folder copy is deleted.\r\n<h3>Creating &amp; Editing Files</h3>\r\nOkay let\'s create a file now with command-line. Let\'s <code>$ cd</code> into our new folder and create a new file. Notice that you can press the <code>Tab</code> key after typing a few characters and terminal will auto-complete the file name for you. In Terminal, type:\r\n<pre>$ cd \'My Awesome Project\'</pre>\r\nIf you run <code>$ ls</code>, then you will see that our project is empty. To create a new file enter:\r\n<pre>$ touch readme.md</pre>\r\nYou now have an empty readme file! <code>$ touch</code> creates a new file with the name of your choice. Type <code>$ ls</code> to verify that it\'s there.\r\n\r\nOkay we have a file but it\'s pretty useless right now, so what\'s the best way to edit this? Well that depends... I\'ll show show you a few ways I edit files for different cases.\r\n<h4>Edit files right from Terminal</h4>\r\nTo make a quick addition right from terminal use the <code>$ nano</code> command.\r\n<pre>$ nano readme.md</pre>\r\nAfter you enter the command you should see a blank screen because your file is empty. Type <code>Hello World!</code> into your new file. When your done, press <code>ctrl-X</code> to exit the file and press <code>Y</code> to agree to save changes. You should now be back to your regular screen.\r\n\r\nYou can type <code>$ cat readme.md</code> to show you the contents of the file. Viola!\r\n<h4>Edit files in a text editor</h4>\r\nThe fastest way to open files in a text editor from the command line would be to type the following:\r\n<pre>$ open readme.md</pre>\r\nThis will automatically open the file in your default text editor. You can make any changes you want, press <code>cmd-S</code> and you are good to go.\r\n<h3>Sanity Check</h3>\r\nFeel free to open up the folder and the file from your Finder window for a sanity check. And there you go! You\'ve successfully learned to navigate your machine, create, edit and delete files and folders with the command-line. You can do a million other things with it but you gotta start somewhere!\r\n<h3>Recap of Commands</h3>\r\n<ul>\r\n	<li><code>$ pwd</code> = print working directory</li>\r\n	<li><code>$ ls</code> = list all files and folders within current directory</li>\r\n	<li><code>$ cd foldername</code> = change directory (go to) to foldername</li>\r\n	<li><code>$ mkdir foldername</code> = make directory (create folder) with name</li>\r\n	<li><code>$ mv foldername to newfoldername</code> = Rename old folder to new name (Or move folder to new directory with new name)</li>\r\n	<li><code>$ cp foldername to foldernamecopy</code> = copy folder to the current directory with a new foldername</li>\r\n	<li><code>$ rm filename</code> = remove (delete) file</li>\r\n	<li><code>$ rm -rf filename</code> = remove (delete) folder recursively (r) with no approval (f)</li>\r\n	<li><code>$ touch filename</code> = create file with filename</li>\r\n	<li><code>$ nano filename</code> = open and edit file within terminal (ctrl-X to close)</li>\r\n	<li><code>$ open filename</code> = open and edit file within your default text editor</li>\r\n	<li><code>$ subl .</code> = open entire folder in Sublime (<a title="How to setup Sublime with the command-line" href="http://dev.dorails.com/railsvitamins/how-to-setup-sublime-with-the-command-line/">Learn how to set this up</a>)</li>\r\n	<li><code>$ cat filename</code> = display contents of file</li>\r\n</ul>\r\n<h3>Tools</h3>\r\nFor the command-line, I use iTerm instead of the stock Terminal app that comes with OSX. Consider using this. I use it mainly because I can quickly press <code>cmd-spacebar</code> anytime I need to get to the terminal (which is a lot). Also I set it to be large halfscreen drop window on the top instead of the usual floating windows, so I don\'t have to mess around with moving and sizing them.\r\n\r\nLike I said above, I use Sublime Text 2 for my text editor. I highly recommend it because:\r\n<ul>\r\n<ul>\r\n	<li>you crack open entire projects with the <code>subl .</code> command (learn how to set this up in another post <a title="How to setup Sublime with the command-line" href="http://dev.dorails.com/railsvitamins/how-to-setup-sublime-with-the-command-line/" target="_blank">here</a>)</li>\r\n	<li>you can easily browse files within it</li>\r\n	<li>it has a package installer that allows you to add any type of language syntax or auto-complete you could ever imagine</li>\r\n	<li>also if you set it up, you can run Rails tests from within Sublime (super handy)</li>\r\n</ul>\r\n</ul>\r\n<h3>Tips</h3>\r\n<ul>\r\n	<li>When things start to get cluttered in your terminal window. Use <code>$ clear</code> to go to a blank screen. But don\'t be alarmed you can scroll up to see your previous commands</li>\r\n	<li>If you need to run a longer command that you recently entered. Press the up/down keys to toggle through all your most recent entries.</li>\r\n	<li>Wean yourself off using Finder windows to navigate your files.</li>\r\n	<li>Setup Sublime Text 2 to work with <code>subl .</code> so you can easily open projects from terminal on the fly. Learn how to do that <a title="How to setup Sublime with the command-line" href="http://dev.dorails.com/railsvitamins/how-to-setup-sublime-with-the-command-line/" target="_blank">here</a>.</li>\r\n	<li>Create a <code>.bash_profile</code> for yourself so you can make shortcut commands. I have a separate post about this <a title="Save a ton of time with .bash_profile aliases" href="http://dev.dorails.com/railsvitamins/save-a-ton-of-time-with-bash_profile-aliases/" target="_blank">here</a>.</li>\r\n</ul>\r\nThat\'s all for now. Let me know if you have any questions or other topics you want me to cover.', 'Getting started with the command-line?', '', 'inherit', 'open', 'open', '', '227-revision-v1', '', '', '2014-09-03 12:11:30', '2014-09-03 17:11:30', '', 227, 'http://dev.dorails.com/railsvitamins/227-revision-v1/', 0, 'revision', '', 0) ;
INSERT INTO `wp_posts` ( `ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(248, 1, '2014-09-03 12:12:40', '2014-09-03 17:12:40', 'The command-line is an absolutely vital tool for any Rails developer. If you aren\'t familiar with command-line (aka Terminal), it can be intimidating at first. It was confusing and seemed unnecessary to me when I first started using it. But once you start really digging into it, you will see how powerful it is. Rails devs use the command-line to enter commands for Rails, Git, Heroku, SQL, Linux, etc, etc.\r\n\r\nBut let\'s walk before we run. Here\'s a quick crash-course for command-line basics. Run through this quick exercise and you will have it down in no time.\r\n<h3>Getting around</h3>\r\nFirst, go to your Applications folder and open Terminal (or download iTerm). You may want to drag this to your dock for easy access. Keep in mind, every time you type a command you shouldn\'t type the <code>$</code> sign. This is just something that lets you know that this a terminal command.\r\n\r\nOnce Terminal is open type:\r\n<pre>$ pwd</pre>\r\nThis stands for Print Working Directory. This is telling you what directory you are currently inside of. You should see Terminal return something like <code>/Users/tyrichards</code> as a response.\r\n\r\nOkay you can see you are in your home directory, but what\'s inside of this directory? Where can you go from here? Type this command:\r\n<pre>$ ls</pre>\r\n<code>$ ls</code> is a command that lists everything within the current directory. This will show you all the files and folder that live in the current directory.\r\n\r\nSo what happens when you want to move to one of these directories? Okay let\'s travel to our desktop. To do this type the command:\r\n<pre>$ cd Desktop</pre>\r\nYou have now moved to your desktop. The <code>$ cd</code> command allows you to "change directory" to the following path. Type the command <code>$ pwd</code> to verify that you are there. And you can even type <code>$ ls</code> to see what files and folders live there.\r\n<h3>Creating Folders</h3>\r\nOkay let\'s say we want to create a new folder on our desktop with Terminal. To do this, type the command:\r\n<pre>$ mkdir Test</pre>\r\nThis will make a new directory with the name Test. Type the <code>$ ls</code> command to see that it\'s been created.\r\n\r\nBut let\'s rename it to something that is more descriptive. We could create a new folder but how would we rename the folder? You can do this by using the <code>$ mv</code> command like so:\r\n<pre>$ mv Test \'My Awesome Project\'</pre>\r\nThe <code>$ mv</code> command will rename the <code>Test</code> folder to <code>My Awesome Project</code>. Enter <code>$ ls</code> to make sure it worked. And as you could probably guess the <code>$ mv</code> command stands for "move". You can use this to move a file to a different directory as well with <code>$ mv /current/path /new/path</code>. But we won\'t go to deep into that right now.\r\n\r\nTo copy the folder you can just use the <code>$ cp</code> command:\r\n<pre>$ cp -r \'My Awesome Project\' \'My Awesome Folder Copy\'</pre>\r\nThis command creates a copy of your <code>My Awesome Project</code> folder and names it . <code>$ ls</code> to see the results. When you are copying files you can get away with just typing <code>$ mv filename</code>, but with files you need to add the <code>-r</code> so that you will also "recursively" copy the files inside.\r\n\r\nBut we really don\'t want any copies of this folder so let\'s go ahead and delete the copy with this command:\r\n<pre>$ rm -rf \'My Awesome Project Copy\'</pre>\r\n<code>$ rm</code> as you could probably guess "removes" or deletes the folder. The <code>r</code> in <code>-rf</code> means "recursive", which is a fancy word for "every file/folder within". The <code>f</code> in <code>-rf</code> means to force - this basically means you won\'t have to manually approve every file you want to delete within that folder. Put it all together and you can see that the command <code>$ rm -rf foldername</code> removes a folder and all files within it. Enter <code>$ ls</code> to see that the folder copy is deleted.\r\n<h3>Creating &amp; Editing Files</h3>\r\nOkay let\'s create a file now with command-line. Let\'s <code>$ cd</code> into our new folder and create a new file. Notice that you can press the <code>Tab</code> key after typing a few characters and terminal will auto-complete the file name for you. In Terminal, type:\r\n<pre>$ cd \'My Awesome Project\'</pre>\r\nIf you run <code>$ ls</code>, then you will see that our project is empty. To create a new file enter:\r\n<pre>$ touch readme.md</pre>\r\nYou now have an empty readme file! <code>$ touch</code> creates a new file with the name of your choice. Type <code>$ ls</code> to verify that it\'s there.\r\n\r\nOkay we have a file but it\'s pretty useless right now, so what\'s the best way to edit this? Well that depends... I\'ll show show you a few ways I edit files for different cases.\r\n<h4>Edit files right from Terminal</h4>\r\nTo make a quick addition right from terminal use the <code>$ nano</code> command.\r\n<pre>$ nano readme.md</pre>\r\nAfter you enter the command you should see a blank screen because your file is empty. Type <code>Hello World!</code> into your new file. When your done, press <code>ctrl-X</code> to exit the file and press <code>Y</code> to agree to save changes. You should now be back to your regular screen.\r\n\r\nYou can type <code>$ cat readme.md</code> to show you the contents of the file. Viola!\r\n<h4>Edit files in a text editor</h4>\r\nThe fastest way to open files in a text editor from the command line would be to type the following:\r\n<pre>$ open readme.md</pre>\r\nThis will automatically open the file in your default text editor. You can make any changes you want, press <code>cmd-S</code> and you are good to go.\r\n<h3>Sanity Check</h3>\r\nFeel free to open up the folder and the file from your Finder window for a sanity check. And there you go! You\'ve successfully learned to navigate your machine, create, edit and delete files and folders with the command-line. You can do a million other things with it but you gotta start somewhere!\r\n<h3>Recap of Commands</h3>\r\n<ul>\r\n	<li><code>$ pwd</code> = print working directory</li>\r\n	<li><code>$ ls</code> = list all files and folders within current directory</li>\r\n	<li><code>$ cd foldername</code> = change directory (go to) to foldername</li>\r\n	<li><code>$ mkdir foldername</code> = make directory (create folder) with name</li>\r\n	<li><code>$ mv foldername to newfoldername</code> = Rename old folder to new name (Or move folder to new directory with new name)</li>\r\n	<li><code>$ cp foldername to foldernamecopy</code> = copy folder to the current directory with a new foldername</li>\r\n	<li><code>$ rm filename</code> = remove (delete) file</li>\r\n	<li><code>$ rm -rf filename</code> = remove (delete) folder recursively (r) with no approval (f)</li>\r\n	<li><code>$ touch filename</code> = create file with filename</li>\r\n	<li><code>$ nano filename</code> = open and edit file within terminal (ctrl-X to close)</li>\r\n	<li><code>$ open filename</code> = open and edit file within your default text editor</li>\r\n	<li><code>$ subl .</code> = open entire folder in Sublime (<a title="How to setup Sublime with the command-line" href="http://dev.dorails.com/railsvitamins/how-to-setup-sublime-with-the-command-line/">Learn how to set this up</a>)</li>\r\n	<li><code>$ cat filename</code> = display contents of file</li>\r\n</ul>\r\n<h3>Tools</h3>\r\nFor the command-line, I use iTerm instead of the stock Terminal app that comes with OSX. Consider using this. I use it mainly because I can quickly press <code>cmd-spacebar</code> anytime I need to get to the terminal (which is a lot). Also I set it to be large halfscreen drop window on the top instead of the usual floating windows, so I don\'t have to mess around with moving and sizing them.\r\n\r\nLike I said above, I use Sublime Text 2 for my text editor. I highly recommend it because:\r\n<ul>\r\n<ul>\r\n	<li>you crack open entire projects with the <code>subl .</code> command (learn how to set this up in another post <a title="How to setup Sublime with the command-line" href="http://dev.dorails.com/railsvitamins/how-to-setup-sublime-with-the-command-line/" target="_blank">here</a>)</li>\r\n	<li>you can easily browse files within it</li>\r\n	<li>it has a package installer that allows you to add any type of language syntax or auto-complete you could ever imagine</li>\r\n	<li>also if you set it up, you can run Rails tests from within Sublime (super handy)</li>\r\n</ul>\r\n</ul>\r\n<h3>Tips</h3>\r\n<ul>\r\n	<li>When things start to get cluttered in your terminal window. Use <code>$ clear</code> to go to a blank screen. But don\'t be alarmed you can scroll up to see your previous commands</li>\r\n	<li>If you need to run a longer command that you recently entered. Press the up/down keys to toggle through all your most recent entries.</li>\r\n	<li>Wean yourself off using Finder windows to navigate your files.</li>\r\n	<li>Setup Sublime Text 2 to work with <code>subl .</code> so you can easily open projects from terminal on the fly. Learn how to do that <a title="How to setup Sublime with the command-line" href="http://dev.dorails.com/railsvitamins/how-to-setup-sublime-with-the-command-line/" target="_blank">here</a>.</li>\r\n	<li>Create a <code>.bash_profile</code> for yourself so you can make shortcut commands. I have a separate post about this <a title="Save a ton of time with .bash_profile aliases" href="http://dev.dorails.com/railsvitamins/save-a-ton-of-time-with-bash_profile-aliases/" target="_blank">here</a>.</li>\r\n</ul>\r\nThat\'s all for now. Let me know if you have any questions or other topics you want me to cover.', 'Getting started with the command-line?', '', 'inherit', 'open', 'open', '', '227-revision-v1', '', '', '2014-09-03 12:12:40', '2014-09-03 17:12:40', '', 227, 'http://dev.dorails.com/railsvitamins/227-revision-v1/', 0, 'revision', '', 0),
(249, 1, '2014-09-03 12:14:52', '2014-09-03 17:14:52', 'The command-line is an absolutely vital tool for any Rails developer. If you aren\'t familiar with command-line (aka Terminal), it can be intimidating at first. It was confusing and seemed unnecessary to me when I first started using it. But once you start really digging into it, you will see how powerful it is. Rails devs use the command-line to enter commands for Rails, Git, Heroku, SQL, Linux, etc, etc.\r\n\r\nBut let\'s walk before we run. Here\'s a quick crash-course for command-line basics. Run through this quick exercise and you will have it down in no time.\r\n<h3>Getting around</h3>\r\nFirst, go to your Applications folder and open Terminal (or download iTerm). You may want to drag this to your dock for easy access. Keep in mind, every time you type a command you shouldn\'t type the <code>$</code> sign. This is just something that lets you know that this a terminal command.\r\n\r\nOnce Terminal is open type:\r\n<pre>$ pwd</pre>\r\nThis stands for Print Working Directory. This is telling you what directory you are currently inside of. You should see Terminal return something like <code>/Users/tyrichards</code> as a response.\r\n\r\nOkay you can see you are in your home directory, but what\'s inside of this directory? Where can you go from here? Type this command:\r\n<pre>$ ls</pre>\r\n<code>$ ls</code> is a command that lists everything within the current directory. This will show you all the files and folder that live in the current directory.\r\n\r\nSo what happens when you want to move to one of these directories? Okay let\'s travel to our desktop. To do this type the command:\r\n<pre>$ cd Desktop</pre>\r\nYou have now moved to your desktop. The <code>$ cd</code> command allows you to "change directory" to the following path. Type the command <code>$ pwd</code> to verify that you are there. And you can even type <code>$ ls</code> to see what files and folders live there.\r\n<h3>Creating Folders</h3>\r\nOkay let\'s say we want to create a new folder on our desktop with Terminal. To do this, type the command:\r\n<pre>$ mkdir Test</pre>\r\nThis will make a new directory with the name Test. Type the <code>$ ls</code> command to see that it\'s been created.\r\n\r\nBut let\'s rename it to something that is more descriptive. We could create a new folder but how would we rename the folder? You can do this by using the <code>$ mv</code> command like so:\r\n<pre>$ mv Test \'My Awesome Project\'</pre>\r\nThe <code>$ mv</code> command will rename the <code>Test</code> folder to <code>My Awesome Project</code>. Enter <code>$ ls</code> to make sure it worked. And as you could probably guess the <code>$ mv</code> command stands for "move". You can use this to move a file to a different directory as well with <code>$ mv /current/path /new/path</code>. But we won\'t go to deep into that right now.\r\n\r\nTo copy the folder you can just use the <code>$ cp</code> command:\r\n<pre>$ cp -r \'My Awesome Project\' \'My Awesome Folder Copy\'</pre>\r\nThis command creates a copy of your <code>My Awesome Project</code> folder and names it . <code>$ ls</code> to see the results. When you are copying files you can get away with just typing <code>$ mv filename</code>, but with files you need to add the <code>-r</code> so that you will also "recursively" copy the files inside.\r\n\r\nBut we really don\'t want any copies of this folder so let\'s go ahead and delete the copy with this command:\r\n<pre>$ rm -rf \'My Awesome Project Copy\'</pre>\r\n<code>$ rm</code> as you could probably guess "removes" or deletes the folder. The <code>r</code> in <code>-rf</code> means "recursive", which is a fancy word for "every file/folder within". The <code>f</code> in <code>-rf</code> means to force - this basically means you won\'t have to manually approve every file you want to delete within that folder. Put it all together and you can see that the command <code>$ rm -rf foldername</code> removes a folder and all files within it. Enter <code>$ ls</code> to see that the folder copy is deleted.\r\n<h3>Creating &amp; Editing Files</h3>\r\nOkay let\'s create a file now with command-line. Let\'s <code>$ cd</code> into our new folder and create a new file. Notice that you can press the <code>Tab</code> key after typing a few characters and terminal will auto-complete the file name for you. In Terminal, type:\r\n<pre>$ cd \'My Awesome Project\'</pre>\r\nIf you run <code>$ ls</code>, then you will see that our project is empty. To create a new file enter:\r\n<pre>$ touch readme.md</pre>\r\nYou now have an empty readme file! <code>$ touch</code> creates a new file with the name of your choice. Type <code>$ ls</code> to verify that it\'s there.\r\n\r\nOkay we have a file but it\'s pretty useless right now, so what\'s the best way to edit this? Well that depends... I\'ll show show you a few ways I edit files for different cases.\r\n<h4>Edit files right from Terminal</h4>\r\nTo make a quick addition right from terminal use the <code>$ nano</code> command.\r\n<pre>$ nano readme.md</pre>\r\nAfter you enter the command you should see a blank screen because your file is empty. Type <code>Hello World!</code> into your new file. When you\'re done, press <code>ctrl-X</code> to exit the file and press <code>Y</code> to agree to save changes. You should now be back to your regular screen.\r\n\r\nYou can type <code>$ cat readme.md</code> to show you the contents of the file. Viola!\r\n<h4>Edit files in a text editor</h4>\r\nThe fastest way to open files in a text editor from the command line would be to type the following:\r\n<pre>$ open readme.md</pre>\r\nThis will automatically open the file in your default text editor. You can make any changes you want, press <code>cmd-S</code> and you are good to go.\r\n<h3>Sanity Check</h3>\r\nFeel free to open up the folder and the file from your Finder window for a sanity check. And there you go! You\'ve successfully learned to navigate your machine, create, edit and delete files and folders with the command-line. You can do a million other things with it but you gotta start somewhere!\r\n<h3>Recap of Commands</h3>\r\n<ul>\r\n	<li><code>$ pwd</code> = print working directory</li>\r\n	<li><code>$ ls</code> = list all files and folders within current directory</li>\r\n	<li><code>$ cd foldername</code> = change directory (go to) to foldername</li>\r\n	<li><code>$ mkdir foldername</code> = make directory (create folder) with name</li>\r\n	<li><code>$ mv foldername to newfoldername</code> = Rename old folder to new name (Or move folder to new directory with new name)</li>\r\n	<li><code>$ cp foldername to foldernamecopy</code> = copy folder to the current directory with a new foldername</li>\r\n	<li><code>$ rm filename</code> = remove (delete) file</li>\r\n	<li><code>$ rm -rf filename</code> = remove (delete) folder recursively (r) with no approval (f)</li>\r\n	<li><code>$ touch filename</code> = create file with filename</li>\r\n	<li><code>$ nano filename</code> = open and edit file within terminal (ctrl-X to close)</li>\r\n	<li><code>$ open filename</code> = open and edit file within your default text editor</li>\r\n	<li><code>$ subl .</code> = open entire folder in Sublime (<a title="How to setup Sublime with the command-line" href="http://dev.dorails.com/railsvitamins/how-to-setup-sublime-with-the-command-line/">Learn how to set this up</a>)</li>\r\n	<li><code>$ cat filename</code> = display contents of file</li>\r\n</ul>\r\n<h3>Tools</h3>\r\nFor the command-line, I use iTerm instead of the stock Terminal app that comes with OSX. Consider using this. I use it mainly because I can quickly press <code>cmd-spacebar</code> anytime I need to get to the terminal (which is a lot). Also I set it to be large halfscreen drop window on the top instead of the usual floating windows, so I don\'t have to mess around with moving and sizing them.\r\n\r\nLike I said above, I use Sublime Text 2 for my text editor. I highly recommend it because:\r\n<ul>\r\n<ul>\r\n	<li>you crack open entire projects with the <code>subl .</code> command (learn how to set this up in another post <a title="How to setup Sublime with the command-line" href="http://dev.dorails.com/railsvitamins/how-to-setup-sublime-with-the-command-line/" target="_blank">here</a>)</li>\r\n	<li>you can easily browse files within it</li>\r\n	<li>it has a package installer that allows you to add any type of language syntax or auto-complete you could ever imagine</li>\r\n	<li>also if you set it up, you can run Rails tests from within Sublime (super handy)</li>\r\n</ul>\r\n</ul>\r\n<h3>Tips</h3>\r\n<ul>\r\n	<li>When things start to get cluttered in your terminal window. Use <code>$ clear</code> to go to a blank screen. But don\'t be alarmed you can scroll up to see your previous commands</li>\r\n	<li>If you need to run a longer command that you recently entered. Press the up/down keys to toggle through all your most recent entries.</li>\r\n	<li>Wean yourself off using Finder windows to navigate your files.</li>\r\n	<li>Setup Sublime Text 2 to work with <code>subl .</code> so you can easily open projects from terminal on the fly. Learn how to do that <a title="How to setup Sublime with the command-line" href="http://dev.dorails.com/railsvitamins/how-to-setup-sublime-with-the-command-line/" target="_blank">here</a>.</li>\r\n	<li>Create a <code>.bash_profile</code> for yourself so you can make shortcut commands. I have a separate post about this <a title="Save a ton of time with .bash_profile aliases" href="http://dev.dorails.com/railsvitamins/save-a-ton-of-time-with-bash_profile-aliases/" target="_blank">here</a>.</li>\r\n</ul>\r\nThat\'s all for now. Let me know if you have any questions or other topics you want me to cover.', 'Getting started with the command-line?', '', 'inherit', 'open', 'open', '', '227-revision-v1', '', '', '2014-09-03 12:14:52', '2014-09-03 17:14:52', '', 227, 'http://dev.dorails.com/railsvitamins/227-revision-v1/', 0, 'revision', '', 0),
(250, 1, '2014-09-03 12:17:21', '2014-09-03 17:17:21', 'The command-line is an absolutely vital tool for any Rails developer. If you aren\'t familiar with command-line (aka Terminal), it can be intimidating at first. It was confusing and seemed unnecessary to me when I first started using it. But once you start really digging into it, you will see how powerful it is. Rails devs use the command-line to enter commands for Rails, Git, Heroku, SQL, Linux, etc, etc.\r\n\r\nBut let\'s walk before we run. Here\'s a quick crash-course for command-line basics. Run through this quick exercise and you will have it down in no time.\r\n<h3>Getting around</h3>\r\nFirst, go to your Applications folder and open Terminal (or download iTerm). You may want to drag this to your dock for easy access. Keep in mind, every time you type a command you shouldn\'t type the <code>$</code> sign. This is just something that lets you know that this a terminal command.\r\n\r\nOnce Terminal is open type:\r\n<pre>$ pwd</pre>\r\nThis stands for Print Working Directory. This is telling you what directory you are currently inside of. You should see Terminal return something like <code>/Users/tyrichards</code> as a response.\r\n\r\nOkay you can see you are in your home directory, but what\'s inside of this directory? Where can you go from here? Type this command:\r\n<pre>$ ls</pre>\r\n<code>$ ls</code> is a command that lists everything within the current directory. This will show you all the files and folder that live in the current directory.\r\n\r\nSo what happens when you want to move to one of these directories? Okay let\'s travel to our desktop. To do this type the command:\r\n<pre>$ cd Desktop</pre>\r\nYou have now moved to your desktop. The <code>$ cd</code> command allows you to "change directory" to the following path. Type the command <code>$ pwd</code> to verify that you are there. And you can even type <code>$ ls</code> to see what files and folders live there.\r\n<h3>Creating Folders</h3>\r\nOkay let\'s say we want to create a new folder on our desktop with Terminal. To do this, type the command:\r\n<pre>$ mkdir Test</pre>\r\nThis will make a new directory with the name Test. Type the <code>$ ls</code> command to see that it\'s been created.\r\n\r\nBut let\'s rename it to something that is more descriptive. We could create a new folder but how would we rename the folder? You can do this by using the <code>$ mv</code> command like so:\r\n<pre>$ mv Test \'My Awesome Project\'</pre>\r\nThe <code>$ mv</code> command will rename the <code>Test</code> folder to <code>My Awesome Project</code>. Enter <code>$ ls</code> to make sure it worked. And as you could probably guess the <code>$ mv</code> command stands for "move". You can use this to move a file to a different directory as well with <code>$ mv /current/path /new/path</code>. But we won\'t go to deep into that right now.\r\n\r\nTo copy the folder you can just use the <code>$ cp</code> command:\r\n<pre>$ cp -r \'My Awesome Project\' \'My Awesome Folder Copy\'</pre>\r\nThis command creates a copy of your <code>My Awesome Project</code> folder and names it . <code>$ ls</code> to see the results. When you are copying files you can get away with just typing <code>$ mv filename</code>, but with files you need to add the <code>-r</code> so that you will also "recursively" copy the files inside.\r\n\r\nBut we really don\'t want any copies of this folder so let\'s go ahead and delete the copy with this command:\r\n<pre>$ rm -rf \'My Awesome Project Copy\'</pre>\r\n<code>$ rm</code> as you could probably guess "removes" or deletes the folder. The <code>r</code> in <code>-rf</code> means "recursive", which is a fancy word for "every file/folder within". The <code>f</code> in <code>-rf</code> means to force - this basically means you won\'t have to manually approve every file you want to delete within that folder. Put it all together and you can see that the command <code>$ rm -rf foldername</code> removes a folder and all files within it. Enter <code>$ ls</code> to see that the folder copy is deleted.\r\n<h3>Creating &amp; Editing Files</h3>\r\nOkay let\'s create a file now with command-line. Let\'s <code>$ cd</code> into our new folder and create a new file. Notice that you can press the <code>Tab</code> key after typing a few characters and terminal will auto-complete the file name for you. In Terminal, type:\r\n<pre>$ cd \'My Awesome Project\'</pre>\r\nIf you run <code>$ ls</code>, then you will see that our project is empty. To create a new file enter:\r\n<pre>$ touch readme.md</pre>\r\nYou now have an empty readme file! <code>$ touch</code> creates a new file with the name of your choice. Type <code>$ ls</code> to verify that it\'s there.\r\n\r\nOkay we have a file but it\'s pretty useless right now, so what\'s the best way to edit this? Well that depends... I\'ll show show you a few ways I edit files for different cases.\r\n<h4>Edit files right from Terminal</h4>\r\nTo make a quick addition right from terminal use the <code>$ nano</code> command.\r\n<pre>$ nano readme.md</pre>\r\nAfter you enter the command you should see a blank screen because your file is empty. Type <code>Hello World!</code> into your new file. When you\'re done, press <code>ctrl-X</code> to exit the file and press <code>Y</code> to agree to save changes when you see the prompt <code>Save modified buffer (ANSWERING "No" WILL DESTROY CHANGES) ?</code>. Then the screen will say <code>File Name to Write: readme.md</code>. You could change the name of the file here but you don\'t want to so press enter. You should now be back to your regular screen.\r\n\r\nYou can type <code>$ cat readme.md</code> to show you the contents of the file. Viola!\r\n<h4>Edit files in a text editor</h4>\r\nThe fastest way to open files in a text editor from the command line would be to type the following:\r\n<pre>$ open readme.md</pre>\r\nThis will automatically open the file in your default text editor. You can make any changes you want, press <code>cmd-S</code> and you are good to go.\r\n<h3>Sanity Check</h3>\r\nFeel free to open up the folder and the file from your Finder window for a sanity check. And there you go! You\'ve successfully learned to navigate your machine, create, edit and delete files and folders with the command-line. You can do a million other things with it but you gotta start somewhere!\r\n<h3>Recap of Commands</h3>\r\n<ul>\r\n	<li><code>$ pwd</code> = print working directory</li>\r\n	<li><code>$ ls</code> = list all files and folders within current directory</li>\r\n	<li><code>$ cd foldername</code> = change directory (go to) to foldername</li>\r\n	<li><code>$ mkdir foldername</code> = make directory (create folder) with name</li>\r\n	<li><code>$ mv foldername to newfoldername</code> = Rename old folder to new name (Or move folder to new directory with new name)</li>\r\n	<li><code>$ cp foldername to foldernamecopy</code> = copy folder to the current directory with a new foldername</li>\r\n	<li><code>$ rm filename</code> = remove (delete) file</li>\r\n	<li><code>$ rm -rf filename</code> = remove (delete) folder recursively (r) with no approval (f)</li>\r\n	<li><code>$ touch filename</code> = create file with filename</li>\r\n	<li><code>$ nano filename</code> = open and edit file within terminal (ctrl-X to close)</li>\r\n	<li><code>$ open filename</code> = open and edit file within your default text editor</li>\r\n	<li><code>$ subl .</code> = open entire folder in Sublime (<a title="How to setup Sublime with the command-line" href="http://dev.dorails.com/railsvitamins/how-to-setup-sublime-with-the-command-line/">Learn how to set this up</a>)</li>\r\n	<li><code>$ cat filename</code> = display contents of file</li>\r\n</ul>\r\n<h3>Tools</h3>\r\nFor the command-line, I use iTerm instead of the stock Terminal app that comes with OSX. Consider using this. I use it mainly because I can quickly press <code>cmd-spacebar</code> anytime I need to get to the terminal (which is a lot). Also I set it to be large halfscreen drop window on the top instead of the usual floating windows, so I don\'t have to mess around with moving and sizing them.\r\n\r\nLike I said above, I use Sublime Text 2 for my text editor. I highly recommend it because:\r\n<ul>\r\n<ul>\r\n	<li>you crack open entire projects with the <code>subl .</code> command (learn how to set this up in another post <a title="How to setup Sublime with the command-line" href="http://dev.dorails.com/railsvitamins/how-to-setup-sublime-with-the-command-line/" target="_blank">here</a>)</li>\r\n	<li>you can easily browse files within it</li>\r\n	<li>it has a package installer that allows you to add any type of language syntax or auto-complete you could ever imagine</li>\r\n	<li>also if you set it up, you can run Rails tests from within Sublime (super handy)</li>\r\n</ul>\r\n</ul>\r\n<h3>Tips</h3>\r\n<ul>\r\n	<li>When things start to get cluttered in your terminal window. Use <code>$ clear</code> to go to a blank screen. But don\'t be alarmed you can scroll up to see your previous commands</li>\r\n	<li>If you need to run a longer command that you recently entered. Press the up/down keys to toggle through all your most recent entries.</li>\r\n	<li>Wean yourself off using Finder windows to navigate your files.</li>\r\n	<li>Setup Sublime Text 2 to work with <code>subl .</code> so you can easily open projects from terminal on the fly. Learn how to do that <a title="How to setup Sublime with the command-line" href="http://dev.dorails.com/railsvitamins/how-to-setup-sublime-with-the-command-line/" target="_blank">here</a>.</li>\r\n	<li>Create a <code>.bash_profile</code> for yourself so you can make shortcut commands. I have a separate post about this <a title="Save a ton of time with .bash_profile aliases" href="http://dev.dorails.com/railsvitamins/save-a-ton-of-time-with-bash_profile-aliases/" target="_blank">here</a>.</li>\r\n</ul>\r\nThat\'s all for now. Let me know if you have any questions or other topics you want me to cover.', 'Getting started with the command-line?', '', 'inherit', 'open', 'open', '', '227-revision-v1', '', '', '2014-09-03 12:17:21', '2014-09-03 17:17:21', '', 227, 'http://dev.dorails.com/railsvitamins/227-revision-v1/', 0, 'revision', '', 0),
(251, 1, '2014-09-03 12:18:42', '2014-09-03 17:18:42', 'The command-line is an absolutely vital tool for any Rails developer. If you aren\'t familiar with command-line (aka Terminal), it can be intimidating at first. It was confusing and seemed unnecessary to me when I first started using it. But once you start really digging into it, you will see how powerful it is. Rails devs use the command-line to enter commands for Rails, Git, Heroku, SQL, Linux, etc, etc.\r\n\r\nBut let\'s walk before we run. Here\'s a quick crash-course for command-line basics. Run through this quick exercise and you will have it down in no time.\r\n<h3>Getting around</h3>\r\nFirst, go to your Applications folder and open Terminal (or download iTerm). You may want to drag this to your dock for easy access. Keep in mind, every time you type a command you shouldn\'t type the <code>$</code> sign. This is just something that lets you know that this a terminal command.\r\n\r\nOnce Terminal is open type:\r\n<pre>$ pwd</pre>\r\nThis stands for Print Working Directory. This is telling you what directory you are currently inside of. You should see Terminal return something like <code>/Users/tyrichards</code> as a response.\r\n\r\nOkay you can see you are in your home directory, but what\'s inside of this directory? Where can you go from here? Type this command:\r\n<pre>$ ls</pre>\r\n<code>$ ls</code> is a command that lists everything within the current directory. This will show you all the files and folder that live in the current directory.\r\n\r\nSo what happens when you want to move to one of these directories? Okay let\'s travel to our desktop. To do this type the command:\r\n<pre>$ cd Desktop</pre>\r\nYou have now moved to your desktop. The <code>$ cd</code> command allows you to "change directory" to the following path. Type the command <code>$ pwd</code> to verify that you are there. And you can even type <code>$ ls</code> to see what files and folders live there.\r\n<h3>Creating Folders</h3>\r\nOkay let\'s say we want to create a new folder on our desktop with Terminal. To do this, type the command:\r\n<pre>$ mkdir Test</pre>\r\nThis will make a new directory with the name Test. Type the <code>$ ls</code> command to see that it\'s been created.\r\n\r\nBut let\'s rename it to something that is more descriptive. We could create a new folder but how would we rename the folder? You can do this by using the <code>$ mv</code> command like so:\r\n<pre>$ mv Test \'My Awesome Project\'</pre>\r\nThe <code>$ mv</code> command will rename the <code>Test</code> folder to <code>My Awesome Project</code>. Enter <code>$ ls</code> to make sure it worked. And as you could probably guess the <code>$ mv</code> command stands for "move". You can use this to move a file to a different directory as well with <code>$ mv /current/path /new/path</code>. But we won\'t go to deep into that right now.\r\n\r\nTo copy the folder you can just use the <code>$ cp</code> command:\r\n<pre>$ cp -r \'My Awesome Project\' \'My Awesome Folder Copy\'</pre>\r\nThis command creates a copy of your <code>My Awesome Project</code> folder and names it . <code>$ ls</code> to see the results. When you are copying files you can get away with just typing <code>$ mv filename</code>, but with files you need to add the <code>-r</code> so that you will also "recursively" copy the files inside.\r\n\r\nBut we really don\'t want any copies of this folder so let\'s go ahead and delete the copy with this command:\r\n<pre>$ rm -rf \'My Awesome Project Copy\'</pre>\r\n<code>$ rm</code> as you could probably guess "removes" or deletes the folder. The <code>r</code> in <code>-rf</code> means "recursive", which is a fancy word for "every file/folder within". The <code>f</code> in <code>-rf</code> means to force - this basically means you won\'t have to manually approve every file you want to delete within that folder. Put it all together and you can see that the command <code>$ rm -rf foldername</code> removes a folder and all files within it. Enter <code>$ ls</code> to see that the folder copy is deleted.\r\n<h3>Creating &amp; Editing Files</h3>\r\nOkay let\'s create a file now with command-line. Let\'s <code>$ cd</code> into our new folder and create a new file. Notice that you can press the <code>Tab</code> key after typing a few characters and terminal will auto-complete the file name for you. In Terminal, type:\r\n<pre>$ cd \'My Awesome Project\'</pre>\r\nIf you run <code>$ ls</code>, then you will see that our project is empty. To create a new file enter:\r\n<pre>$ touch readme.md</pre>\r\nYou now have an empty readme file! <code>$ touch</code> creates a new file with the name of your choice. Type <code>$ ls</code> to verify that it\'s there.\r\n\r\nOkay we have a file but it\'s pretty useless right now, so what\'s the best way to edit this? Well that depends... I\'ll show show you a few ways I edit files for different cases.\r\n<h4>Edit files right from Terminal</h4>\r\nTo make a quick addition right from terminal use the <code>$ nano</code> command.\r\n<pre>$ nano readme.md</pre>\r\nAfter you enter the command you should see a blank screen because your file is empty. Type <code>Hello World!</code> into your new file. When you\'re done, press <code>ctrl-X</code> to exit the file and press <code>Y</code> to agree to save changes when you see the prompt <code>Save modified buffer (ANSWERING "No" WILL DESTROY CHANGES) ?</code>. Then the screen will say <code>File Name to Write: readme.md</code>. You could change the name of the file here but you don\'t want to so press enter. You should now be back to your regular screen.\r\n\r\nYou can type <code>$ cat readme.md</code> to show you the contents of the file. Viola!\r\n<h4>Edit files in a text editor</h4>\r\nThe fastest way to open files in a text editor from the command line would be to type the following:\r\n<pre>$ open readme.md</pre>\r\nThis will automatically open the file in your default text editor. You can make any changes you want in there, and then press <code>cmd-S</code> to save and you are good to go.\r\n<h3>Sanity Check</h3>\r\nFeel free to open up the folder and the file from your Finder window for a sanity check. And there you go! You\'ve successfully learned to navigate your machine, create, edit and delete files and folders with the command-line. You can do a million other things with it but you gotta start somewhere!\r\n<h3>Recap of Commands</h3>\r\n<ul>\r\n	<li><code>$ pwd</code> = print working directory</li>\r\n	<li><code>$ ls</code> = list all files and folders within current directory</li>\r\n	<li><code>$ cd foldername</code> = change directory (go to) to foldername</li>\r\n	<li><code>$ mkdir foldername</code> = make directory (create folder) with name</li>\r\n	<li><code>$ mv foldername to newfoldername</code> = Rename old folder to new name (Or move folder to new directory with new name)</li>\r\n	<li><code>$ cp foldername to foldernamecopy</code> = copy folder to the current directory with a new foldername</li>\r\n	<li><code>$ rm filename</code> = remove (delete) file</li>\r\n	<li><code>$ rm -rf filename</code> = remove (delete) folder recursively (r) with no approval (f)</li>\r\n	<li><code>$ touch filename</code> = create file with filename</li>\r\n	<li><code>$ nano filename</code> = open and edit file within terminal (ctrl-X to close)</li>\r\n	<li><code>$ open filename</code> = open and edit file within your default text editor</li>\r\n	<li><code>$ subl .</code> = open entire folder in Sublime (<a title="How to setup Sublime with the command-line" href="http://dev.dorails.com/railsvitamins/how-to-setup-sublime-with-the-command-line/">Learn how to set this up</a>)</li>\r\n	<li><code>$ cat filename</code> = display contents of file</li>\r\n</ul>\r\n<h3>Tools</h3>\r\nFor the command-line, I use iTerm instead of the stock Terminal app that comes with OSX. Consider using this. I use it mainly because I can quickly press <code>cmd-spacebar</code> anytime I need to get to the terminal (which is a lot). Also I set it to be large halfscreen drop window on the top instead of the usual floating windows, so I don\'t have to mess around with moving and sizing them.\r\n\r\nLike I said above, I use Sublime Text 2 for my text editor. I highly recommend it because:\r\n<ul>\r\n<ul>\r\n	<li>you crack open entire projects with the <code>subl .</code> command (learn how to set this up in another post <a title="How to setup Sublime with the command-line" href="http://dev.dorails.com/railsvitamins/how-to-setup-sublime-with-the-command-line/" target="_blank">here</a>)</li>\r\n	<li>you can easily browse files within it</li>\r\n	<li>it has a package installer that allows you to add any type of language syntax or auto-complete you could ever imagine</li>\r\n	<li>also if you set it up, you can run Rails tests from within Sublime (super handy)</li>\r\n</ul>\r\n</ul>\r\n<h3>Tips</h3>\r\n<ul>\r\n	<li>When things start to get cluttered in your terminal window. Use <code>$ clear</code> to go to a blank screen. But don\'t be alarmed you can scroll up to see your previous commands</li>\r\n	<li>If you need to run a longer command that you recently entered. Press the up/down keys to toggle through all your most recent entries.</li>\r\n	<li>Wean yourself off using Finder windows to navigate your files.</li>\r\n	<li>Setup Sublime Text 2 to work with <code>subl .</code> so you can easily open projects from terminal on the fly. Learn how to do that <a title="How to setup Sublime with the command-line" href="http://dev.dorails.com/railsvitamins/how-to-setup-sublime-with-the-command-line/" target="_blank">here</a>.</li>\r\n	<li>Create a <code>.bash_profile</code> for yourself so you can make shortcut commands. I have a separate post about this <a title="Save a ton of time with .bash_profile aliases" href="http://dev.dorails.com/railsvitamins/save-a-ton-of-time-with-bash_profile-aliases/" target="_blank">here</a>.</li>\r\n</ul>\r\nThat\'s all for now. Let me know if you have any questions or other topics you want me to cover.', 'Getting started with the command-line?', '', 'inherit', 'open', 'open', '', '227-revision-v1', '', '', '2014-09-03 12:18:42', '2014-09-03 17:18:42', '', 227, 'http://dev.dorails.com/railsvitamins/227-revision-v1/', 0, 'revision', '', 0),
(252, 1, '2014-09-03 12:29:21', '2014-09-03 17:29:21', 'I use Sublime Text 2, so I\'ve setup a custom command-line tool that allows me to open files and even entire project directories within Sublime with the command <code>$ subl .</code>. I highly recommend doing this. It takes a minute to setup, but it\'s worth it because it allows you to fly in and out of projects quickly.\n\nFirst create a "symbolic link" in your /bin folder by entering the command below\n<pre>$ ln -s "/Applications/Sublime Text 2.app/Contents/SharedSupport/bin/subl" ~/bin/subl</pre>\nThis command creates a "sym link" in your /bin folder that links to the code within the Sublime Text app. You may need to create a\n\nOnce this is run, open a new terminal window and <code>cd</code> to your project to open a file:\n<pre>$ cd /your/project/directory\n$ subl filename</pre>\nOr crack open the entire project folder with:\n<pre>$ subl .</pre>\nBam, you are setup to navigate through your projects at lightning speed.', 'The best way to open Rails projects from the command-line', '', 'inherit', 'open', 'open', '', '233-autosave-v1', '', '', '2014-09-03 12:29:21', '2014-09-03 17:29:21', '', 233, 'http://dev.dorails.com/railsvitamins/233-autosave-v1/', 0, 'revision', '', 0),
(253, 1, '2014-09-03 12:30:30', '2014-09-03 17:30:30', 'I use Sublime Text 2, so I\'ve setup a custom command-line tool that allows me to open files and even entire project directories within Sublime with the command <code>$ subl .</code>. I highly recommend doing this. It takes a minute to setup, but it\'s worth it because it allows you to fly in and out of projects quickly.\r\n\r\nFirst create a "symbolic link" in your /bin folder by entering the command below\r\n<pre>$ ln -s "/Applications/Sublime Text 2.app/Contents/SharedSupport/bin/subl" ~/bin/subl</pre>\r\nThis command creates a "sym link" in your /bin folder that links to the code within the Sublime Text app. You may also need to create a <code>~/bin</code> folder in your home directory if there isn\'t one there.\r\n\r\nOnce this is run, open a new terminal window and <code>cd</code> to your project to open a file:\r\n<pre>$ cd /your/project/directory\r\n$ subl filename</pre>\r\nOr crack open the entire project folder with:\r\n<pre>$ subl .</pre>\r\nBam, you are setup to navigate through your projects at lightning speed.', 'The best way to open Rails projects from the command-line', '', 'inherit', 'open', 'open', '', '233-revision-v1', '', '', '2014-09-03 12:30:30', '2014-09-03 17:30:30', '', 233, 'http://dev.dorails.com/railsvitamins/233-revision-v1/', 0, 'revision', '', 0),
(254, 1, '2014-09-03 12:51:11', '2014-09-03 17:51:11', 'If you find yourself wasting a ton of time typing things in command-line like: \n\n<pre>$ cd /forever/long/project/directory/path/that/goes/on/forever/and/ever/and/ever</pre>\n\nor you just want to shorten common commands like these to make your life easier. Then I recommend setting up some quick .bash_profile <i>aliases</i>.\n\nTo do so open Terminal, and find and open your .bash_profile file\n\n<pre>$ open ~/.bash_profile</pre>\n\nIf the file doesn\'t exist go ahead and create it\n\n<pre>\n$ touch ~/.bash_profile\n$ open ~/.bash_profile\n</pre>\n\nNow add the following aliases to your file. These allow you to make your own custom commands that are shorter.\n\nFor example, I can type <code>$ sites</code> to jump to my sites directory. Or I type <code>$dr</code> to jump straight to my Do Rails project folder.\n<pre>\nalias sites=\'cd Sites\'\nalias dr=\'cd ~/Sites/do_rails/\'\n<pre>\n\nIt\'s also good if you are tired of typing the same ssh commands over and over.\n<pre>\nalias sshdorails=\'ssh root@555.555.55.5\'\n</pre>\n\nI especially love it for shortening git commands though. I almost always type <code>$ git add .</code> to add all my changes. So I\'ve shortened that to <code>$ add</code> to make my life that much simpler. I haven\'t typed out "git" in months...\n<pre>\nalias add=\'git add .\'\nalias commit=\'git commit -am\'\nalias push=\'git push\'\nalias pull=\'git pull\'\nalias log=\'git log --oneline\'\nalias diff=\'git diff\'\nalias pull=\'git pull\'\nalias preco=\'rake assets:precompile\'\nalias st=\'git status\'\nalias remove=\'git rm --cached\'\n</pre>\n\nLast but not least, make yourself a quick alias to get back to your .bash_profile so you can add aliases on the fly for new projects, etc.\n<pre>alias editbash=\'subl ~/.bash_profile\'</pre>\n\nHuzzah! Hacktastic!', 'Save a ton of time with .bash_profile aliases', '', 'inherit', 'open', 'open', '', '238-autosave-v1', '', '', '2014-09-03 12:51:11', '2014-09-03 17:51:11', '', 238, 'http://dev.dorails.com/railsvitamins/238-autosave-v1/', 0, 'revision', '', 0),
(255, 1, '2014-09-03 12:51:12', '2014-09-03 17:51:12', 'If you find yourself wasting a ton of time typing things in command-line like: \r\n\r\n<pre>$ cd /forever/long/project/directory/path/that/goes/on/forever/and/ever/and/ever</pre>\r\n\r\nor you just want to shorten common commands like these to make your life easier. Then I recommend setting up some quick .bash_profile <i>aliases</i>.\r\n\r\nTo do so open Terminal, and find and open your .bash_profile file\r\n\r\n<pre>$ open ~/.bash_profile</pre>\r\n\r\nIf the file doesn\'t exist go ahead and create it\r\n\r\n<pre>\r\n$ touch ~/.bash_profile\r\n$ open ~/.bash_profile\r\n</pre>\r\n\r\nNow add the following aliases to your file. These allow you to make your own custom commands that are shorter.\r\n\r\nFor example, I can type <code>$ sites</code> to jump to my sites directory. Or I type <code>$dr</code> to jump straight to my Do Rails project folder.\r\n<pre>\r\nalias sites=\'cd Sites\'\r\nalias dr=\'cd ~/Sites/do_rails/\'\r\n<pre>\r\n\r\nIt\'s also good if you are tired of typing the same ssh commands over and over.\r\n<pre>\r\nalias sshdorails=\'ssh root@555.555.55.5\'\r\n</pre>\r\n\r\nI especially love it for shortening git commands though. I almost always type <code>$ git add .</code> to add all my changes. So I\'ve shortened that to <code>$ add</code> to make my life that much simpler. I haven\'t typed out "git" in months...\r\n<pre>\r\nalias add=\'git add .\'\r\nalias commit=\'git commit -am\'\r\nalias push=\'git push\'\r\nalias pull=\'git pull\'\r\nalias log=\'git log --oneline\'\r\nalias diff=\'git diff\'\r\nalias pull=\'git pull\'\r\nalias preco=\'rake assets:precompile\'\r\nalias st=\'git status\'\r\nalias remove=\'git rm --cached\'\r\n</pre>\r\n\r\nLast but not least, make yourself a quick alias to get back to your .bash_profile so you can add aliases on the fly for new projects, etc.\r\n<pre>alias editbash=\'subl ~/.bash_profile\'</pre>\r\n\r\nHuzzah! Hacktastic!', 'Save a ton of time with .bash_profile aliases', '', 'inherit', 'open', 'open', '', '238-revision-v1', '', '', '2014-09-03 12:51:12', '2014-09-03 17:51:12', '', 238, 'http://dev.dorails.com/railsvitamins/238-revision-v1/', 0, 'revision', '', 0),
(256, 1, '2014-09-03 12:51:44', '2014-09-03 17:51:44', 'If you find yourself wasting a ton of time typing things in command-line like: \r\n\r\n<pre>$ cd /forever/long/project/directory/path/that/goes/on/forever/and/ever/and/ever</pre>\r\n\r\nor you just want to shorten common commands like these to make your life easier. Then I recommend setting up some quick .bash_profile <i>aliases</i>.\r\n\r\nTo do so open Terminal, and find and open your .bash_profile file\r\n\r\n<pre>$ open ~/.bash_profile</pre>\r\n\r\nIf the file doesn\'t exist go ahead and create it\r\n\r\n<pre>\r\n$ touch ~/.bash_profile\r\n$ open ~/.bash_profile\r\n</pre>\r\n\r\nNow add the following aliases to your file. These allow you to make your own custom commands that are shorter.\r\n\r\nFor example, I can type <code>$ sites</code> to jump to my sites directory. Or I type <code>$dr</code> to jump straight to my Do Rails project folder.\r\n<pre>\r\nalias sites=\'cd Sites\'\r\nalias dr=\'cd ~/Sites/do_rails/\'\r\n<pre>\r\n\r\nIt\'s also good if you are tired of typing the same ssh commands over and over.\r\n<pre>\r\nalias sshdorails=\'ssh root@555.555.55.5\'\r\n</pre>\r\n\r\nI especially love it for shortening git commands though. I almost always type <code>$ git add .</code> to add all my changes. So I\'ve shortened that to <code>$ add</code> to make my life that much simpler. I haven\'t typed out "git" in months...\r\n<pre>\r\nalias add=\'git add .\'\r\nalias commit=\'git commit -am\'\r\nalias push=\'git push\'\r\nalias pull=\'git pull\'\r\nalias log=\'git log --oneline\'\r\nalias diff=\'git diff\'\r\nalias pull=\'git pull\'\r\nalias preco=\'rake assets:precompile\'\r\nalias st=\'git status\'\r\nalias remove=\'git rm --cached\'\r\n</pre>\r\n\r\nLast but not least, make yourself a quick alias to get back to your .bash_profile so you can add aliases on the fly for new projects, etc.\r\n<pre>alias editbash=\'subl ~/.bash_profile\'</pre>\r\n\r\nHuzzah! Hacktastic!', 'Save a ton of time typing with .bash_profile aliases', '', 'inherit', 'open', 'open', '', '238-revision-v1', '', '', '2014-09-03 12:51:44', '2014-09-03 17:51:44', '', 238, 'http://dev.dorails.com/railsvitamins/238-revision-v1/', 0, 'revision', '', 0) ;
INSERT INTO `wp_posts` ( `ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(257, 1, '2014-09-03 14:34:54', '2014-09-03 19:34:54', 'If you find yourself wasting a ton of time typing things in command-line like: \r\n\r\n<pre>$ cd /forever/long/project/directory/path/that/goes/on/forever/and/ever/and/ever</pre>\r\n\r\nor you just want to shorten common commands like these to make your life easier. Then I recommend setting up some quick .bash_profile <i>aliases</i>.\r\n\r\nTo do so open Terminal, and find and open your .bash_profile file\r\n\r\n<pre>$ open ~/.bash_profile</pre>\r\n\r\nIf the file doesn\'t exist go ahead and create it\r\n\r\n<pre>\r\n$ touch ~/.bash_profile\r\n$ open ~/.bash_profile\r\n</pre>\r\n\r\nNow add the following aliases to your file. These allow you to make your own custom commands that are shorter.\r\n\r\nFor example, I can type <code>$ sites</code> to jump to my sites directory. Or I type <code>$dr</code> to jump straight to my Do Rails project folder.\r\n<pre>\r\nalias sites=\'cd Sites\'\r\nalias dr=\'cd ~/Sites/do_rails\'\r\n<pre>\r\n\r\nIt\'s also good if you are tired of typing the same ssh commands over and over.\r\n<pre>\r\nalias sshdorails=\'ssh root@555.555.55.5\'\r\n</pre>\r\n\r\nI especially love it for shortening git commands though. I almost always type <code>$ git add .</code> to add all my changes. So I\'ve shortened that to <code>$ add</code> to make my life that much simpler. I haven\'t typed out "git" in months...\r\n<pre>\r\nalias add=\'git add .\'\r\nalias commit=\'git commit -am\'\r\nalias push=\'git push\'\r\nalias pull=\'git pull\'\r\nalias log=\'git log --oneline\'\r\nalias diff=\'git diff\'\r\nalias pull=\'git pull\'\r\nalias preco=\'rake assets:precompile\'\r\nalias st=\'git status\'\r\nalias remove=\'git rm --cached\'\r\n</pre>\r\n\r\nLast but not least, make yourself a quick alias to get back to your .bash_profile so you can add aliases on the fly for new projects, etc.\r\n<pre>alias editbash=\'subl ~/.bash_profile\'</pre>\r\n\r\nHuzzah! Hacktastic!', 'Save a ton of time typing with .bash_profile aliases', '', 'inherit', 'open', 'open', '', '238-revision-v1', '', '', '2014-09-03 14:34:54', '2014-09-03 19:34:54', '', 238, 'http://dev.dorails.com/railsvitamins/238-revision-v1/', 0, 'revision', '', 0),
(258, 1, '2014-09-03 14:35:41', '2014-09-03 19:35:41', 'If you find yourself wasting a ton of time typing things in command-line like: \r\n\r\n<pre>$ cd /forever/long/project/directory/path/that/goes/on/forever/and/ever/and/ever</pre>\r\n\r\nor you just want to shorten common commands like these to make your life easier. Then I recommend setting up some quick .bash_profile <i>aliases</i>.\r\n\r\nTo do so open Terminal, and find and open your .bash_profile file\r\n\r\n<pre>$ open ~/.bash_profile</pre>\r\n\r\nIf the file doesn\'t exist go ahead and create it\r\n\r\n<pre>\r\n$ touch ~/.bash_profile\r\n$ open ~/.bash_profile\r\n</pre>\r\n\r\nNow add the following aliases to your file. These allow you to make your own custom commands that are shorter.\r\n\r\nFor example, I can type <code>$ sites</code> to jump to my sites directory. Or I type <code>$dr</code> to jump straight to my Do Rails project folder.\r\n<pre>\r\nalias sites=\'cd Sites\'\r\nalias dr=\'cd ~/Sites/do_rails\'\r\n</pre>\r\n\r\nIt\'s also good if you are tired of typing the same ssh commands over and over.\r\n<pre>\r\nalias sshdorails=\'ssh root@555.555.55.5\'\r\n</pre>\r\n\r\nI especially love it for shortening git commands though. I almost always type <code>$ git add .</code> to add all my changes. So I\'ve shortened that to <code>$ add</code> to make my life that much simpler. I haven\'t typed out "git" in months...\r\n<pre>\r\nalias add=\'git add .\'\r\nalias commit=\'git commit -am\'\r\nalias push=\'git push\'\r\nalias pull=\'git pull\'\r\nalias log=\'git log --oneline\'\r\nalias diff=\'git diff\'\r\nalias pull=\'git pull\'\r\nalias preco=\'rake assets:precompile\'\r\nalias st=\'git status\'\r\nalias remove=\'git rm --cached\'\r\n</pre>\r\n\r\nLast but not least, make yourself a quick alias to get back to your .bash_profile so you can add aliases on the fly for new projects, etc.\r\n<pre>alias editbash=\'subl ~/.bash_profile\'</pre>\r\n\r\nHuzzah! Hacktastic!', 'Save a ton of time typing with .bash_profile aliases', '', 'inherit', 'open', 'open', '', '238-revision-v1', '', '', '2014-09-03 14:35:41', '2014-09-03 19:35:41', '', 238, 'http://dev.dorails.com/railsvitamins/238-revision-v1/', 0, 'revision', '', 0),
(259, 1, '2014-09-03 14:37:26', '2014-09-03 19:37:26', 'If you find yourself wasting a ton of time typing things in command-line like: \r\n\r\n<pre>$ cd /forever/long/project/directory/path/that/goes/on/forever/and/ever/and/ever</pre>\r\n\r\nor you just want to shorten common commands like these to make your life easier. Then I recommend setting up some quick .bash_profile <i>aliases</i>.\r\n\r\nTo do so open Terminal, and find and open your .bash_profile file\r\n\r\n<pre>$ open ~/.bash_profile</pre>\r\n\r\nIf the file doesn\'t exist go ahead and create it\r\n\r\n<pre>\r\n$ touch ~/.bash_profile\r\n$ open ~/.bash_profile\r\n</pre>\r\n\r\nNow add the following aliases to your file. These allow you to make your own custom commands that are shorter.\r\n\r\nFor example, I can type <code>$ sites</code> to jump to my sites directory. Or I type <code>$dr</code> to jump straight to my Do Rails project folder.\r\n<pre>\r\nalias sites=\'cd Sites\'\r\nalias dr=\'cd ~/Sites/do_rails\'\r\n</pre>\r\n\r\nIt\'s also good if you are tired of typing the same ssh commands over and over.\r\n<pre>\r\nalias sshdorails=\'ssh root@555.555.55.5\'\r\n</pre>\r\n\r\nI especially love it for shortening git commands though. I almost always type <code>$ git add .</code> to add all my changes. So I\'ve shortened that to <code>$ add</code> to make my life that much simpler. I haven\'t typed out "git" in months...\r\n<pre>\r\nalias add=\'git add .\'\r\nalias commit=\'git commit -am\'\r\nalias push=\'git push\'\r\nalias pull=\'git pull\'\r\nalias log=\'git log --oneline\'\r\nalias diff=\'git diff\'\r\nalias pull=\'git pull\'\r\nalias preco=\'rake assets:precompile\'\r\nalias st=\'git status\'\r\nalias remove=\'git rm --cached\'\r\n</pre>\r\n\r\nLast but not least, make yourself a quick alias to get back to your .bash_profile so you can add aliases on the fly for new projects, etc.\r\n<pre>alias editbash=\'subl ~/.bash_profile\'</pre>\r\n\r\nOnce you save this file you will need to open a new terminal window for the changes to take effect.\r\n\r\nHuzzah! Hacktastic!', 'Save a ton of time typing with .bash_profile aliases', '', 'inherit', 'open', 'open', '', '238-revision-v1', '', '', '2014-09-03 14:37:26', '2014-09-03 19:37:26', '', 238, 'http://dev.dorails.com/railsvitamins/238-revision-v1/', 0, 'revision', '', 0),
(260, 1, '2014-09-03 15:23:22', '2014-09-03 20:23:22', '<h1 style="text-align: center;">Enjoy!</h1>\r\n\r\n<hr />\r\n\r\nMore Ruby on Rails tips &amp; tricks will be coming soon to your inbox. Until then, you can read more articles <a href="/railsvitamins">here</a>.', 'Thanks', '', 'publish', 'closed', 'open', '', 'thanks', '', '', '2014-09-03 15:46:00', '2014-09-03 20:46:00', '', 111, 'http://dev.dorails.com/?page_id=260', 0, 'page', '', 0),
(261, 1, '2014-09-03 15:20:27', '2014-09-03 20:20:27', '<h1>Thanks :)</h1>\r\nThanks for joining Ruby Vitamins. Stay tuned for the latest Ruby on Rails tips &amp; tricks. In the mean time you can read more articles &lt;a href="/railsvitamins"&gt;here&lt;/a&gt;.', 'Thanks', '', 'inherit', 'open', 'open', '', '260-revision-v1', '', '', '2014-09-03 15:20:27', '2014-09-03 20:20:27', '', 260, 'http://dev.dorails.com/railsvitamins/260-revision-v1/', 0, 'revision', '', 0),
(262, 1, '2014-09-03 15:20:59', '2014-09-03 20:20:59', '<h1>Thanks :)</h1>\r\nThanks for joining Ruby Vitamins. Stay tuned for the latest Ruby on Rails tips &amp; tricks. In the mean time you can read more articles <a href="/railsvitamins">here</a>', 'Thanks', '', 'inherit', 'open', 'open', '', '260-revision-v1', '', '', '2014-09-03 15:20:59', '2014-09-03 20:20:59', '', 260, 'http://dev.dorails.com/railsvitamins/260-revision-v1/', 0, 'revision', '', 0),
(263, 1, '2014-09-03 15:23:23', '2014-09-03 20:23:23', '<h1>Enjoy!</h1>\r\n\r\n<hr />\r\n\r\n&nbsp;\r\n\r\nMore Ruby on Rails tips &amp; tricks will be coming soon to your inbox. Until then, you can read more articles <a href="/railsvitamins">here</a>.', 'Thanks', '', 'inherit', 'open', 'open', '', '260-revision-v1', '', '', '2014-09-03 15:23:23', '2014-09-03 20:23:23', '', 260, 'http://dev.dorails.com/railsvitamins/260-revision-v1/', 0, 'revision', '', 0),
(264, 1, '2014-09-03 15:24:15', '2014-09-03 20:24:15', '<h1 style="text-align: center;">I\'ll keep you posted</h1>\r\n\r\n<hr />\r\n\r\nThanks for your interest on <em>Rails Curve</em>.  I\'ll shoot all the latest news to your inbox. Until then, you can read Rails Vitamins <a href="/railsvitamins">here</a>.', 'Thanks', '', 'publish', 'closed', 'open', '', 'thanks', '', '', '2014-09-03 15:45:41', '2014-09-03 20:45:41', '', 105, 'http://dev.dorails.com/?page_id=264', 0, 'page', '', 0),
(265, 1, '2014-09-03 15:24:15', '2014-09-03 20:24:15', '<h1 style="text-align: center;">Enjoy!</h1>\r\n\r\n<hr />\r\n\r\nMore Ruby on Rails tips &amp; tricks will be coming soon to your inbox. Until then, you can read more articles <a href="/railsvitamins">here</a>.', 'Thanks', '', 'inherit', 'open', 'open', '', '264-revision-v1', '', '', '2014-09-03 15:24:15', '2014-09-03 20:24:15', '', 264, 'http://dev.dorails.com/railsvitamins/264-revision-v1/', 0, 'revision', '', 0),
(266, 1, '2014-09-03 15:25:17', '2014-09-03 20:25:17', '<h1 style="text-align: center;">I\'ll keep you posted</h1>\n\n<hr />\n\nThanks for your interest on <em>Rails Curve</em>.  More Ruby on Rails tips &amp; tricks will be coming soon to your inbox. Until then, you can read more articles <a href="/railsvitamins">here</a>.', 'Thanks', '', 'inherit', 'open', 'open', '', '264-autosave-v1', '', '', '2014-09-03 15:25:17', '2014-09-03 20:25:17', '', 264, 'http://dev.dorails.com/railsvitamins/264-autosave-v1/', 0, 'revision', '', 0),
(267, 1, '2014-09-03 15:26:04', '2014-09-03 20:26:04', '<h1 style="text-align: center;">I\'ll keep you posted</h1>\r\n\r\n<hr />\r\n\r\nThanks for your interest on <em>Rails Curve</em>.  I\'ll shoot all the latest news to your inbox. Until then, you can read Rails Vitamins <a href="/railsvitamins">here</a>.', 'Thanks', '', 'inherit', 'open', 'open', '', '264-revision-v1', '', '', '2014-09-03 15:26:04', '2014-09-03 20:26:04', '', 264, 'http://dev.dorails.com/railsvitamins/264-revision-v1/', 0, 'revision', '', 0),
(268, 1, '2014-09-03 15:26:43', '2014-09-03 20:26:43', '<h1 style="text-align: center;">Enjoy!</h1>\r\n\r\n<hr />\r\n\r\n&nbsp;\r\n\r\nMore Ruby on Rails tips &amp; tricks will be coming soon to your inbox. Until then, you can read more articles <a href="/railsvitamins">here</a>.', 'Thanks', '', 'inherit', 'open', 'open', '', '260-revision-v1', '', '', '2014-09-03 15:26:43', '2014-09-03 20:26:43', '', 260, 'http://dev.dorails.com/railsvitamins/260-revision-v1/', 0, 'revision', '', 0),
(269, 1, '2014-09-03 15:46:00', '2014-09-03 20:46:00', '<h1 style="text-align: center;">Enjoy!</h1>\r\n\r\n<hr />\r\n\r\nMore Ruby on Rails tips &amp; tricks will be coming soon to your inbox. Until then, you can read more articles <a href="/railsvitamins">here</a>.', 'Thanks', '', 'inherit', 'open', 'open', '', '260-revision-v1', '', '', '2014-09-03 15:46:00', '2014-09-03 20:46:00', '', 260, 'http://dev.dorails.com/railsvitamins/260-revision-v1/', 0, 'revision', '', 0),
(270, 1, '2014-09-03 19:53:32', '2014-09-04 00:53:32', '<h1 style="text-align: center;">Terms of Use</h1>\r\n\r\n<hr />\r\n\r\n<h2 id="toc0">Legal Notices</h2>\r\nWe, the Operators of this Website, provide it as a public service to our users.\r\n\r\nPlease carefully review the following basic rules that govern your use of the Website. Please note that your use of the Website constitutes your unconditional agreement to follow and be bound by these Terms and Conditions of Use. If you (the "User") do not agree to them, do not use the Website, provide any materials to the Website or download any materials from them.\r\n\r\nThe Operators reserve the right to update or modify these Terms and Conditions at any time without prior notice to User. Your use of the Website following any such change constitutes your unconditional agreement to follow and be bound by these Terms and Conditions as changed. For this reason, we encourage you to review these Terms and Conditions of Use whenever you use the Website.\r\n\r\nThese Terms and Conditions of Use apply to the use of the Website and do not extend to any linked third party sites. These Terms and Conditions and our <a title="Privacy Policy" href="http://dev.dorails.com/privacy/">Privacy Policy</a>, which are hereby incorporated by reference, contain the entire agreement (the “Agreement”) between you and the Operators with respect to the Website. Any rights not expressly granted herein are reserved.\r\n<h2 id="toc1">Permitted and Prohibited Uses</h2>\r\nYou may use the the Website for the sole purpose of sharing and exchanging ideas with other Users. You may not use the the Website to violate any applicable local, state, national, or international law, including without limitation any applicable laws relating to antitrust or other illegal trade or business practices, federal and state securities laws, regulations promulgated by the U.S. Securities and Exchange Commission, any rules of any national or other securities exchange, and any U.S. laws, rules, and regulations governing the export and re-export of commodities or technical data.\r\n\r\nYou may not upload or transmit any material that infringes or misappropriates any person\'s copyright, patent, trademark, or trade secret, or disclose via the the Website any information the disclosure of which would constitute a violation of any confidentiality obligations you may have.\r\n\r\nYou may not upload any viruses, worms, Trojan horses, or other forms of harmful computer code, nor subject the Website\'s network or servers to unreasonable traffic loads, or otherwise engage in conduct deemed disruptive to the ordinary operation of the Website.\r\n\r\nYou are strictly prohibited from communicating on or through the Website any unlawful, harmful, offensive, threatening, abusive, libelous, harassing, defamatory, vulgar, obscene, profane, hateful, fraudulent, sexually explicit, racially, ethnically, or otherwise objectionable material of any sort, including, but not limited to, any material that encourages conduct that would constitute a criminal offense, give rise to civil liability, or otherwise violate any applicable local, state, national, or international law.\r\n\r\nYou are expressly prohibited from compiling and using other Users\' personal information, including addresses, telephone numbers, fax numbers, email addresses or other contact information that may appear on the Website, for the purpose of creating or compiling marketing and/or mailing lists and from sending other Users unsolicited marketing materials, whether by facsimile, email, or other technological means.\r\n\r\nYou also are expressly prohibited from distributing Users\' personal information to third-party parties for marketing purposes. The Operators shall deem the compiling of marketing and mailing lists using Users\' personal information, the sending of unsolicited marketing materials to Users, or the distribution of Users\' personal information to third parties for marketing purposes as a material breach of these Terms and Conditions of Use, and the Operators reserve the right to terminate or suspend your access to and use of the Website and to suspend or revoke your membership in the consortium without refund of any membership dues paid.\r\n\r\nThe Operators note that unauthorized use of Users\' personal information in connection with unsolicited marketing correspondence also may constitute violations of various state and federal anti-spam statutes. The Operators reserve the right to report the abuse of Users\' personal information to the appropriate law enforcement and government authorities, and the Operators will fully cooperate with any authorities investigating violations of these laws.\r\n<h2 id="toc2">User Submissions</h2>\r\nThe Operators do not want to receive confidential or proprietary information from you through the Website. Any material, information, or other communication you transmit or post ("Contributions") to the Website will be considered non-confidential.\r\n\r\nAll contributions to this site are licensed by you under the MIT License to anyone who wishes to use them, including the Operators.\r\n\r\nIf you work for a company or at a University, it\'s likely that you\'re not the copyright holder of anything you make, even in your free time. Before making contributions to this site, get written permission from your employer.\r\n<h2 id="toc3">User Discussion Lists and Forums</h2>\r\nThe Operators may, but are not obligated to, monitor or review any areas on the Website where users transmit or post communications or communicate solely with each other, including but not limited to user forums and email lists, and the content of any such communications. The Operators, however, will have no liability related to the content of any such communications, whether or not arising under the laws of copyright, libel, privacy, obscenity, or otherwise. The Operators may edit or remove content on the the Website at their discretion at any time.\r\n<h2 id="toc4">Use of Personally Identifiable Information</h2>\r\nInformation submitted to the Website is governed according to the Operators’s current <a title="Privacy Policy" href="http://dev.dorails.com/privacy/">Privacy Policy</a> and the stated license of this website.\r\n\r\nYou agree to provide true, accurate, current, and complete information when registering with the Website. It is your responsibility to maintain and promptly update this account information to keep it true, accurate, current, and complete. If you provides any information that is fraudulent, untrue, inaccurate, incomplete, or not current, or we have reasonable grounds to suspect that such information is fraudulent, untrue, inaccurate, incomplete, or not current, we reserve the right to suspend or terminate your account without notice and to refuse any and all current and future use of the Website.\r\n\r\nAlthough sections of the Website may be viewed simply by visiting the Website, in order to access some Content and/or additional features offered at the Website, you may need to sign on as a guest or register as a member. If you create an account on the Website, you may be asked to supply your name, address, a User ID and password. You are responsible for maintaining the confidentiality of the password and account and are fully responsible for all activities that occur in connection with your password or account. You agree to immediately notify us of any unauthorized use of either your password or account or any other breach of security. You further agree that you will not permit others, including those whose accounts have been terminated, to access the Website using your account or User ID. You grant the Operators and all other persons or entities involved in the operation of the Website the right to transmit, monitor, retrieve, store, and use your information in connection with the operation of the Website and in the provision of services to you. The Operators cannot and do not assume any responsibility or liability for any information you submit, or your or third parties’ use or misuse of information transmitted or received using website. To learn more about how we protect the privacy of the personal information in your account, please visit our <a title="Privacy Policy" href="http://dev.dorails.com/privacy/">Privacy Policy</a>.\r\n<h2 id="toc5">Indemnification</h2>\r\nYou agree to defend, indemnify and hold harmless the Operators, agents, vendors or suppliers from and against any and all claims, damages, costs and expenses, including reasonable attorneys\' fees, arising from or related to your use or misuse of the Website, including, without limitation, your violation of these Terms and Conditions, the infringement by you, or any other subscriber or user of your account, of any intellectual property right or other right of any person or entity.\r\n<h2 id="toc6">Termination</h2>\r\nThese Terms and Conditions of Use are effective until terminated by either party. If you no longer agree to be bound by these Terms and Conditions, you must cease use of the Website. If you are dissatisfied with the Website, their content, or any of these terms, conditions, and policies, your sole legal remedy is to discontinue using the Website. The Operators reserve the right to terminate or suspend your access to and use of the Website, or parts of the Website, without notice, if we believe, in our sole discretion, that such use (i) is in violation of any applicable law; (ii) is harmful to our interests or the interests, including intellectual property or other rights, of another person or entity; or (iii) where the Operators have reason to believe that you are in violation of these Terms and Conditions of Use.\r\n<h2 id="toc7">WARRANTY DISCLAIMER</h2>\r\nTHE WEBSITE AND ASSOCIATED MATERIALS ARE PROVIDED ON AN "AS IS" AND "AS AVAILABLE" BASIS. TO THE FULL EXTENT PERMISSIBLE BY APPLICABLE LAW, THE OPERATORS DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE, OR NON-INFRINGEMENTOF INTELLECTUAL PROPERTY. THE OPERATORS MAKE NO REPRESENTATIONS OR WARRANTY THAT THE WEBSITE WILL MEET YOUR REQUIREMENTS, OR THAT YOUR USE OF THE WEBSITE WILL BE UNINTERRUPTED, TIMELY, SECURE, OR ERROR FREE; NOR DO THE OPERATORS MAKE ANY REPRESENTATION OR WARRANTY AS TO THE RESULTS THAT MAY BE OBTAINED FROM THE USE OF THE WEBSITE. THE OPERATORS MAKE NO REPRESENTATIONS OR WARRANTIES OF ANY KIND, EXPRESS OR IMPLIED, AS TO THE OPERATION OF THE WEBSITE OR THE INFORMATION, CONTENT, MATERIALS, OR PRODUCTS INCLUDED ON THE WEBSITE.\r\n\r\nIN NO EVENT SHALL THE OPERATORS OR ANY OF THEIR AGENTS, VENDORS OR SUPPLIERS BE LIABLE FOR ANY DAMAGES WHATSOEVER (INCLUDING, WITHOUT LIMITATION, DAMAGES FOR LOSS OF PROFITS, BUSINESS INTERRUPTION, LOSS OF INFORMATION) ARISING OUT OF THE USE, MISUSE OF OR INABILITY TO USE THE WEBSITE, EVEN IF THE OPERATORS HAVE BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES. THIS DISCLAIMER CONSTITUTES AN ESSENTIAL PART OF THIS AGREEMENT. BECAUSE SOME JURISDICTIONS PROHIBIT THE EXCLUSION OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES, THE ABOVE LIMITATION MAY NOT APPLY TO YOU.\r\n\r\nYOU UNDERSTAND AND AGREE THAT ANY CONTENT DOWNLOADED OR OTHERWISE OBTAINED THROUGH THE USE OF THE WEBSITE IS AT YOUR OWN DISCRETION AND RISK AND THAT YOU WILL BE SOLELY RESPONSIBLE FOR ANY DAMAGE TO YOUR COMPUTER SYSTEM OR LOSS OF DATA OR BUSINESS INTERRUPTION THAT RESULTS FROM THE DOWNLOAD OF CONTENT. THE OPERATORS SHALL NOT BE RESPONSIBLE FOR ANY LOSS OR DAMAGE CAUSED, OR ALLEGED TO HAVE BEEN CAUSED, DIRECTLY OR INDIRECTLY, BY THE INFORMATION OR IDEAS CONTAINED, SUGGESTED OR REFERENCED IN OR APPEARING ON THE WEBSITE. YOUR PARTICIPATION IN THE WEBSITE IS SOLELY AT YOUR OWN RISK. NO ADVICE OR INFORMATION, WHETHER ORAL OR WRITTEN, OBTAINED BY YOU FROM THE OPERATORS OR THROUGH THE OPERATORS, THEIR EMPLOYEES, OR THIRD PARTIES SHALL CREATE ANY WARRANTY NOT EXPRESSLY MADE HEREIN. YOU ACKNOWLEDGE, BY YOUR USE OF THE THE WEBSITE, THAT YOUR USE OF THE WEBSITE IS AT YOUR SOLE RISK.\r\n\r\nLIABILITY LIMITATION. UNDER NO CIRCUMSTANCES AND UNDER NO LEGAL OR EQUITABLE THEORY, WHETHER IN TORT, CONTRACT, NEGLIGENCE, STRICT LIABILITY OR OTHERWISE, SHALL THE OPERATORS OR ANY OF THEIR AGENTS, VENDORS OR SUPPLIERS BE LIABLE TO USER OR TO ANY OTHER PERSON FOR ANY INDIRECT, SPECIAL, INCIDENTAL OR CONSEQUENTIAL LOSSES OR DAMAGES OF ANY NATURE ARISING OUT OF OR IN CONNECTION WITH THE USE OF OR INABILITY TO USE THE THE WEBSITE OR FOR ANY BREACH OF SECURITY ASSOCIATED WITH THE TRANSMISSION OF SENSITIVE INFORMATION THROUGH THE WEBSITE OR FOR ANY INFORMATION OBTAINED THROUGH THE WEBSITE, INCLUDING, WITHOUT LIMITATION, DAMAGES FOR LOST PROFITS, LOSS OF GOODWILL, LOSS OR CORRUPTION OF DATA, WORK STOPPAGE, ACCURACY OF RESULTS, OR COMPUTER FAILURE OR MALFUNCTION, EVEN IF AN AUTHORIZED REPRESENTATIVE OF THE OPERATORS HAS BEEN ADVISED OF OR SHOULD HAVE KNOWN OF THE POSSIBILITY OF SUCH DAMAGES.\r\n\r\nTHE OPERATORS\'S TOTAL CUMULATIVE LIABILITY FOR ANY AND ALL CLAIMS IN CONNECTION WITH THE WEBSITE WILL NOT EXCEED FIVE U.S. DOLLARS ($5.00). USER AGREES AND ACKNOWLEDGES THAT THE FOREGOING LIMITATIONS ON LIABILITY ARE AN ESSENTIAL BASIS OF THE BARGAIN AND THAT THE OPERATORS WOULD NOT PROVIDE THE WEBSITE ABSENT SUCH LIMITATION.\r\n<h2 id="toc8">General</h2>\r\nThe Website is hosted in the United States. The Operators make no claims that the Content on the Website is appropriate or may be downloaded outside of the United States. Access to the Content may not be legal by certain persons or in certain countries. If you access the Website from outside the United States, you do so at your own risk and are responsible for compliance with the laws of your jurisdiction. The provisions of the UN Convention on Contracts for the International Sale of Goods will not apply to these Terms. A party may give notice to the other party only in writing at that party\'s principal place of business, attention of that party\'s principal legal officer, or at such other address or by such other method as the party shall specify in writing. Notice shall be deemed given upon personal delivery or facsimile, or, if sent by certified mail with postage prepaid, 5 business days after the date of mailing, or, if sent by international overnight courier with postage prepaid, 7 business days after the date of mailing. If any provision herein is held to be unenforceable, the remaining provisions will continue in full force without being affected in any way. Further, the parties agree to replace such unenforceable provision with an enforceable provision that most closely approximates the intent and economic effect of the unenforceable provision. Section headings are for reference purposes only and do not define, limit, construe or describe the scope or extent of such section. The failure of the Operators to act with respect to a breach of this Agreement by you or others does not constitute a waiver and shall not limit the Operators\' rights with respect to such breach or any subsequent breaches. Any action or proceeding arising out of or related to this Agreement or User\'s use of the Website must be brought in the courts of Belgium, and you consent to the exclusive personal jurisdiction and venue of such courts. Any cause of action you may have with respect to your use of the Website must be commenced within one (1) year after the claim or cause of action arises. These Terms set forth the entire understanding and agreement of the parties, and supersedes any and all oral or written agreements or understandings between the parties, as to their subject matter. The waiver of a breach of any provision of this Agreement shall not be construed as a waiver of any other or subsequent breach.\r\n<h2 id="toc9">Links to Other Materials</h2>\r\nThe Website may contain links to sites owned or operated by independent third parties. These links are provided for your convenience and reference only. We do not control such sites and, therefore, we are not responsible for any content posted on these sites. The fact that the Operators offer such links should not be construed in any way as an endorsement, authorization, or sponsorship of that site, its content or the companies or products referenced therein, and the Operators reserve the right to note its lack of affiliation, sponsorship, or endorsement on the Website. If you decide to access any of the third party sites linked to by the Website, you do this entirely at your own risk. Because some sites employ automated search results or otherwise link you to sites containing information that may be deemed inappropriate or offensive, the Operators cannot be held responsible for the accuracy, copyright compliance, legality, or decency of material contained in third party sites, and you hereby irrevocably waive any claim against us with respect to such sites.\r\n<h2 id="toc10">Notification Of Possible Copyright Infringement</h2>\r\nIn the event you believe that material or content published on the Website may infringe on your copyright or that of another, please <a title="Contact Us" href="http://dev.dorails.com/contact/">contact</a> us.', 'Terms of Use', '', 'publish', 'closed', 'closed', '', 'terms-of-use', '', '', '2014-09-03 20:00:26', '2014-09-04 01:00:26', '', 0, 'http://dev.dorails.com/?page_id=270', 0, 'page', '', 0),
(271, 1, '2014-09-03 19:53:32', '2014-09-04 00:53:32', '<h1 style="text-align: center;">Terms of Use</h1>\r\n\r\n<hr />\r\n\r\n<h2 id="toc0">Legal Notices</h2>\r\nWe, the Operators of this Website, provide it as a public service to our users.\r\n\r\nPlease carefully review the following basic rules that govern your use of the Website. Please note that your use of the Website constitutes your unconditional agreement to follow and be bound by these Terms and Conditions of Use. If you (the "User") do not agree to them, do not use the Website, provide any materials to the Website or download any materials from them.\r\n\r\nThe Operators reserve the right to update or modify these Terms and Conditions at any time without prior notice to User. Your use of the Website following any such change constitutes your unconditional agreement to follow and be bound by these Terms and Conditions as changed. For this reason, we encourage you to review these Terms and Conditions of Use whenever you use the Website.\r\n\r\nThese Terms and Conditions of Use apply to the use of the Website and do not extend to any linked third party sites. These Terms and Conditions and our <a href="http://default-template.wikidot.com/legal:privacy-policy">Privacy Policy</a>, which are hereby incorporated by reference, contain the entire agreement (the “Agreement”) between you and the Operators with respect to the Website. Any rights not expressly granted herein are reserved.\r\n<h2 id="toc1">Permitted and Prohibited Uses</h2>\r\nYou may use the the Website for the sole purpose of sharing and exchanging ideas with other Users. You may not use the the Website to violate any applicable local, state, national, or international law, including without limitation any applicable laws relating to antitrust or other illegal trade or business practices, federal and state securities laws, regulations promulgated by the U.S. Securities and Exchange Commission, any rules of any national or other securities exchange, and any U.S. laws, rules, and regulations governing the export and re-export of commodities or technical data.\r\n\r\nYou may not upload or transmit any material that infringes or misappropriates any person\'s copyright, patent, trademark, or trade secret, or disclose via the the Website any information the disclosure of which would constitute a violation of any confidentiality obligations you may have.\r\n\r\nYou may not upload any viruses, worms, Trojan horses, or other forms of harmful computer code, nor subject the Website\'s network or servers to unreasonable traffic loads, or otherwise engage in conduct deemed disruptive to the ordinary operation of the Website.\r\n\r\nYou are strictly prohibited from communicating on or through the Website any unlawful, harmful, offensive, threatening, abusive, libelous, harassing, defamatory, vulgar, obscene, profane, hateful, fraudulent, sexually explicit, racially, ethnically, or otherwise objectionable material of any sort, including, but not limited to, any material that encourages conduct that would constitute a criminal offense, give rise to civil liability, or otherwise violate any applicable local, state, national, or international law.\r\n\r\nYou are expressly prohibited from compiling and using other Users\' personal information, including addresses, telephone numbers, fax numbers, email addresses or other contact information that may appear on the Website, for the purpose of creating or compiling marketing and/or mailing lists and from sending other Users unsolicited marketing materials, whether by facsimile, email, or other technological means.\r\n\r\nYou also are expressly prohibited from distributing Users\' personal information to third-party parties for marketing purposes. The Operators shall deem the compiling of marketing and mailing lists using Users\' personal information, the sending of unsolicited marketing materials to Users, or the distribution of Users\' personal information to third parties for marketing purposes as a material breach of these Terms and Conditions of Use, and the Operators reserve the right to terminate or suspend your access to and use of the Website and to suspend or revoke your membership in the consortium without refund of any membership dues paid.\r\n\r\nThe Operators note that unauthorized use of Users\' personal information in connection with unsolicited marketing correspondence also may constitute violations of various state and federal anti-spam statutes. The Operators reserve the right to report the abuse of Users\' personal information to the appropriate law enforcement and government authorities, and the Operators will fully cooperate with any authorities investigating violations of these laws.\r\n<h2 id="toc2">User Submissions</h2>\r\nThe Operators do not want to receive confidential or proprietary information from you through the Website. Any material, information, or other communication you transmit or post ("Contributions") to the Website will be considered non-confidential.\r\n\r\nAll contributions to this site are licensed by you under the MIT License to anyone who wishes to use them, including the Operators.\r\n\r\nIf you work for a company or at a University, it\'s likely that you\'re not the copyright holder of anything you make, even in your free time. Before making contributions to this site, get written permission from your employer.\r\n<h2 id="toc3">User Discussion Lists and Forums</h2>\r\nThe Operators may, but are not obligated to, monitor or review any areas on the Website where users transmit or post communications or communicate solely with each other, including but not limited to user forums and email lists, and the content of any such communications. The Operators, however, will have no liability related to the content of any such communications, whether or not arising under the laws of copyright, libel, privacy, obscenity, or otherwise. The Operators may edit or remove content on the the Website at their discretion at any time.\r\n<h2 id="toc4">Use of Personally Identifiable Information</h2>\r\nInformation submitted to the Website is governed according to the Operators’s current <a href="http://default-template.wikidot.com/legal:privacy-policy">Privacy Policy</a> and the stated license of this website.\r\n\r\nYou agree to provide true, accurate, current, and complete information when registering with the Website. It is your responsibility to maintain and promptly update this account information to keep it true, accurate, current, and complete. If you provides any information that is fraudulent, untrue, inaccurate, incomplete, or not current, or we have reasonable grounds to suspect that such information is fraudulent, untrue, inaccurate, incomplete, or not current, we reserve the right to suspend or terminate your account without notice and to refuse any and all current and future use of the Website.\r\n\r\nAlthough sections of the Website may be viewed simply by visiting the Website, in order to access some Content and/or additional features offered at the Website, you may need to sign on as a guest or register as a member. If you create an account on the Website, you may be asked to supply your name, address, a User ID and password. You are responsible for maintaining the confidentiality of the password and account and are fully responsible for all activities that occur in connection with your password or account. You agree to immediately notify us of any unauthorized use of either your password or account or any other breach of security. You further agree that you will not permit others, including those whose accounts have been terminated, to access the Website using your account or User ID. You grant the Operators and all other persons or entities involved in the operation of the Website the right to transmit, monitor, retrieve, store, and use your information in connection with the operation of the Website and in the provision of services to you. The Operators cannot and do not assume any responsibility or liability for any information you submit, or your or third parties’ use or misuse of information transmitted or received using website. To learn more about how we protect the privacy of the personal information in your account, please visit our <a href="http://default-template.wikidot.com/legal:privacy-policy">Privacy Policy</a>.\r\n<h2 id="toc5">Indemnification</h2>\r\nYou agree to defend, indemnify and hold harmless the Operators, agents, vendors or suppliers from and against any and all claims, damages, costs and expenses, including reasonable attorneys\' fees, arising from or related to your use or misuse of the Website, including, without limitation, your violation of these Terms and Conditions, the infringement by you, or any other subscriber or user of your account, of any intellectual property right or other right of any person or entity.\r\n<h2 id="toc6">Termination</h2>\r\nThese Terms and Conditions of Use are effective until terminated by either party. If you no longer agree to be bound by these Terms and Conditions, you must cease use of the Website. If you are dissatisfied with the Website, their content, or any of these terms, conditions, and policies, your sole legal remedy is to discontinue using the Website. The Operators reserve the right to terminate or suspend your access to and use of the Website, or parts of the Website, without notice, if we believe, in our sole discretion, that such use (i) is in violation of any applicable law; (ii) is harmful to our interests or the interests, including intellectual property or other rights, of another person or entity; or (iii) where the Operators have reason to believe that you are in violation of these Terms and Conditions of Use.\r\n<h2 id="toc7">WARRANTY DISCLAIMER</h2>\r\nTHE WEBSITE AND ASSOCIATED MATERIALS ARE PROVIDED ON AN "AS IS" AND "AS AVAILABLE" BASIS. TO THE FULL EXTENT PERMISSIBLE BY APPLICABLE LAW, THE OPERATORS DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE, OR NON-INFRINGEMENTOF INTELLECTUAL PROPERTY. THE OPERATORS MAKE NO REPRESENTATIONS OR WARRANTY THAT THE WEBSITE WILL MEET YOUR REQUIREMENTS, OR THAT YOUR USE OF THE WEBSITE WILL BE UNINTERRUPTED, TIMELY, SECURE, OR ERROR FREE; NOR DO THE OPERATORS MAKE ANY REPRESENTATION OR WARRANTY AS TO THE RESULTS THAT MAY BE OBTAINED FROM THE USE OF THE WEBSITE. THE OPERATORS MAKE NO REPRESENTATIONS OR WARRANTIES OF ANY KIND, EXPRESS OR IMPLIED, AS TO THE OPERATION OF THE WEBSITE OR THE INFORMATION, CONTENT, MATERIALS, OR PRODUCTS INCLUDED ON THE WEBSITE.\r\n\r\nIN NO EVENT SHALL THE OPERATORS OR ANY OF THEIR AGENTS, VENDORS OR SUPPLIERS BE LIABLE FOR ANY DAMAGES WHATSOEVER (INCLUDING, WITHOUT LIMITATION, DAMAGES FOR LOSS OF PROFITS, BUSINESS INTERRUPTION, LOSS OF INFORMATION) ARISING OUT OF THE USE, MISUSE OF OR INABILITY TO USE THE WEBSITE, EVEN IF THE OPERATORS HAVE BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES. THIS DISCLAIMER CONSTITUTES AN ESSENTIAL PART OF THIS AGREEMENT. BECAUSE SOME JURISDICTIONS PROHIBIT THE EXCLUSION OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES, THE ABOVE LIMITATION MAY NOT APPLY TO YOU.\r\n\r\nYOU UNDERSTAND AND AGREE THAT ANY CONTENT DOWNLOADED OR OTHERWISE OBTAINED THROUGH THE USE OF THE WEBSITE IS AT YOUR OWN DISCRETION AND RISK AND THAT YOU WILL BE SOLELY RESPONSIBLE FOR ANY DAMAGE TO YOUR COMPUTER SYSTEM OR LOSS OF DATA OR BUSINESS INTERRUPTION THAT RESULTS FROM THE DOWNLOAD OF CONTENT. THE OPERATORS SHALL NOT BE RESPONSIBLE FOR ANY LOSS OR DAMAGE CAUSED, OR ALLEGED TO HAVE BEEN CAUSED, DIRECTLY OR INDIRECTLY, BY THE INFORMATION OR IDEAS CONTAINED, SUGGESTED OR REFERENCED IN OR APPEARING ON THE WEBSITE. YOUR PARTICIPATION IN THE WEBSITE IS SOLELY AT YOUR OWN RISK. NO ADVICE OR INFORMATION, WHETHER ORAL OR WRITTEN, OBTAINED BY YOU FROM THE OPERATORS OR THROUGH THE OPERATORS, THEIR EMPLOYEES, OR THIRD PARTIES SHALL CREATE ANY WARRANTY NOT EXPRESSLY MADE HEREIN. YOU ACKNOWLEDGE, BY YOUR USE OF THE THE WEBSITE, THAT YOUR USE OF THE WEBSITE IS AT YOUR SOLE RISK.\r\n\r\nLIABILITY LIMITATION. UNDER NO CIRCUMSTANCES AND UNDER NO LEGAL OR EQUITABLE THEORY, WHETHER IN TORT, CONTRACT, NEGLIGENCE, STRICT LIABILITY OR OTHERWISE, SHALL THE OPERATORS OR ANY OF THEIR AGENTS, VENDORS OR SUPPLIERS BE LIABLE TO USER OR TO ANY OTHER PERSON FOR ANY INDIRECT, SPECIAL, INCIDENTAL OR CONSEQUENTIAL LOSSES OR DAMAGES OF ANY NATURE ARISING OUT OF OR IN CONNECTION WITH THE USE OF OR INABILITY TO USE THE THE WEBSITE OR FOR ANY BREACH OF SECURITY ASSOCIATED WITH THE TRANSMISSION OF SENSITIVE INFORMATION THROUGH THE WEBSITE OR FOR ANY INFORMATION OBTAINED THROUGH THE WEBSITE, INCLUDING, WITHOUT LIMITATION, DAMAGES FOR LOST PROFITS, LOSS OF GOODWILL, LOSS OR CORRUPTION OF DATA, WORK STOPPAGE, ACCURACY OF RESULTS, OR COMPUTER FAILURE OR MALFUNCTION, EVEN IF AN AUTHORIZED REPRESENTATIVE OF THE OPERATORS HAS BEEN ADVISED OF OR SHOULD HAVE KNOWN OF THE POSSIBILITY OF SUCH DAMAGES.\r\n\r\nTHE OPERATORS\'S TOTAL CUMULATIVE LIABILITY FOR ANY AND ALL CLAIMS IN CONNECTION WITH THE WEBSITE WILL NOT EXCEED FIVE U.S. DOLLARS ($5.00). USER AGREES AND ACKNOWLEDGES THAT THE FOREGOING LIMITATIONS ON LIABILITY ARE AN ESSENTIAL BASIS OF THE BARGAIN AND THAT THE OPERATORS WOULD NOT PROVIDE THE WEBSITE ABSENT SUCH LIMITATION.\r\n<h2 id="toc8">General</h2>\r\nThe Website is hosted in the United States. The Operators make no claims that the Content on the Website is appropriate or may be downloaded outside of the United States. Access to the Content may not be legal by certain persons or in certain countries. If you access the Website from outside the United States, you do so at your own risk and are responsible for compliance with the laws of your jurisdiction. The provisions of the UN Convention on Contracts for the International Sale of Goods will not apply to these Terms. A party may give notice to the other party only in writing at that party\'s principal place of business, attention of that party\'s principal legal officer, or at such other address or by such other method as the party shall specify in writing. Notice shall be deemed given upon personal delivery or facsimile, or, if sent by certified mail with postage prepaid, 5 business days after the date of mailing, or, if sent by international overnight courier with postage prepaid, 7 business days after the date of mailing. If any provision herein is held to be unenforceable, the remaining provisions will continue in full force without being affected in any way. Further, the parties agree to replace such unenforceable provision with an enforceable provision that most closely approximates the intent and economic effect of the unenforceable provision. Section headings are for reference purposes only and do not define, limit, construe or describe the scope or extent of such section. The failure of the Operators to act with respect to a breach of this Agreement by you or others does not constitute a waiver and shall not limit the Operators\' rights with respect to such breach or any subsequent breaches. Any action or proceeding arising out of or related to this Agreement or User\'s use of the Website must be brought in the courts of Belgium, and you consent to the exclusive personal jurisdiction and venue of such courts. Any cause of action you may have with respect to your use of the Website must be commenced within one (1) year after the claim or cause of action arises. These Terms set forth the entire understanding and agreement of the parties, and supersedes any and all oral or written agreements or understandings between the parties, as to their subject matter. The waiver of a breach of any provision of this Agreement shall not be construed as a waiver of any other or subsequent breach.\r\n<h2 id="toc9">Links to Other Materials</h2>\r\nThe Website may contain links to sites owned or operated by independent third parties. These links are provided for your convenience and reference only. We do not control such sites and, therefore, we are not responsible for any content posted on these sites. The fact that the Operators offer such links should not be construed in any way as an endorsement, authorization, or sponsorship of that site, its content or the companies or products referenced therein, and the Operators reserve the right to note its lack of affiliation, sponsorship, or endorsement on the Website. If you decide to access any of the third party sites linked to by the Website, you do this entirely at your own risk. Because some sites employ automated search results or otherwise link you to sites containing information that may be deemed inappropriate or offensive, the Operators cannot be held responsible for the accuracy, copyright compliance, legality, or decency of material contained in third party sites, and you hereby irrevocably waive any claim against us with respect to such sites.\r\n<h2 id="toc10">Notification Of Possible Copyright Infringement</h2>\r\nIn the event you believe that material or content published on the Website may infringe on your copyright or that of another, please<a href="http://default-template.wikidot.com/contact">contact</a> us.', 'Terms of Use', '', 'inherit', 'open', 'open', '', '270-revision-v1', '', '', '2014-09-03 19:53:32', '2014-09-04 00:53:32', '', 270, 'http://dev.dorails.com/railsvitamins/270-revision-v1/', 0, 'revision', '', 0) ;
INSERT INTO `wp_posts` ( `ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(272, 1, '2014-09-03 19:54:39', '2014-09-04 00:54:39', '<h1 style="text-align: center;">Terms of Use</h1>\n\n<hr />\n\n<h2 id="toc0">Legal Notices</h2>\nWe, the Operators of this Website, provide it as a public service to our users.\n\nPlease carefully review the following basic rules that govern your use of the Website. Please note that your use of the Website constitutes your unconditional agreement to follow and be bound by these Terms and Conditions of Use. If you (the "User") do not agree to them, do not use the Website, provide any materials to the Website or download any materials from them.\n\nThe Operators reserve the right to update or modify these Terms and Conditions at any time without prior notice to User. Your use of the Website following any such change constitutes your unconditional agreement to follow and be bound by these Terms and Conditions as changed. For this reason, we encourage you to review these Terms and Conditions of Use whenever you use the Website.\n\nThese Terms and Conditions of Use apply to the use of the Website and do not extend to any linked third party sites. These Terms and Conditions and our <a href="http://default-template.wikidot.com/legal:privacy-policy">Privacy Policy</a>, which are hereby incorporated by reference, contain the entire agreement (the “Agreement”) between you and the Operators with respect to the Website. Any rights not expressly granted herein are reserved.\n<h2 id="toc1">Permitted and Prohibited Uses</h2>\nYou may use the the Website for the sole purpose of sharing and exchanging ideas with other Users. You may not use the the Website to violate any applicable local, state, national, or international law, including without limitation any applicable laws relating to antitrust or other illegal trade or business practices, federal and state securities laws, regulations promulgated by the U.S. Securities and Exchange Commission, any rules of any national or other securities exchange, and any U.S. laws, rules, and regulations governing the export and re-export of commodities or technical data.\n\nYou may not upload or transmit any material that infringes or misappropriates any person\'s copyright, patent, trademark, or trade secret, or disclose via the the Website any information the disclosure of which would constitute a violation of any confidentiality obligations you may have.\n\nYou may not upload any viruses, worms, Trojan horses, or other forms of harmful computer code, nor subject the Website\'s network or servers to unreasonable traffic loads, or otherwise engage in conduct deemed disruptive to the ordinary operation of the Website.\n\nYou are strictly prohibited from communicating on or through the Website any unlawful, harmful, offensive, threatening, abusive, libelous, harassing, defamatory, vulgar, obscene, profane, hateful, fraudulent, sexually explicit, racially, ethnically, or otherwise objectionable material of any sort, including, but not limited to, any material that encourages conduct that would constitute a criminal offense, give rise to civil liability, or otherwise violate any applicable local, state, national, or international law.\n\nYou are expressly prohibited from compiling and using other Users\' personal information, including addresses, telephone numbers, fax numbers, email addresses or other contact information that may appear on the Website, for the purpose of creating or compiling marketing and/or mailing lists and from sending other Users unsolicited marketing materials, whether by facsimile, email, or other technological means.\n\nYou also are expressly prohibited from distributing Users\' personal information to third-party parties for marketing purposes. The Operators shall deem the compiling of marketing and mailing lists using Users\' personal information, the sending of unsolicited marketing materials to Users, or the distribution of Users\' personal information to third parties for marketing purposes as a material breach of these Terms and Conditions of Use, and the Operators reserve the right to terminate or suspend your access to and use of the Website and to suspend or revoke your membership in the consortium without refund of any membership dues paid.\n\nThe Operators note that unauthorized use of Users\' personal information in connection with unsolicited marketing correspondence also may constitute violations of various state and federal anti-spam statutes. The Operators reserve the right to report the abuse of Users\' personal information to the appropriate law enforcement and government authorities, and the Operators will fully cooperate with any authorities investigating violations of these laws.\n<h2 id="toc2">User Submissions</h2>\nThe Operators do not want to receive confidential or proprietary information from you through the Website. Any material, information, or other communication you transmit or post ("Contributions") to the Website will be considered non-confidential.\n\nAll contributions to this site are licensed by you under the MIT License to anyone who wishes to use them, including the Operators.\n\nIf you work for a company or at a University, it\'s likely that you\'re not the copyright holder of anything you make, even in your free time. Before making contributions to this site, get written permission from your employer.\n<h2 id="toc3">User Discussion Lists and Forums</h2>\nThe Operators may, but are not obligated to, monitor or review any areas on the Website where users transmit or post communications or communicate solely with each other, including but not limited to user forums and email lists, and the content of any such communications. The Operators, however, will have no liability related to the content of any such communications, whether or not arising under the laws of copyright, libel, privacy, obscenity, or otherwise. The Operators may edit or remove content on the the Website at their discretion at any time.\n<h2 id="toc4">Use of Personally Identifiable Information</h2>\nInformation submitted to the Website is governed according to the Operators’s current <a href="http://default-template.wikidot.com/legal:privacy-policy">Privacy Policy</a> and the stated license of this website.\n\nYou agree to provide true, accurate, current, and complete information when registering with the Website. It is your responsibility to maintain and promptly update this account information to keep it true, accurate, current, and complete. If you provides any information that is fraudulent, untrue, inaccurate, incomplete, or not current, or we have reasonable grounds to suspect that such information is fraudulent, untrue, inaccurate, incomplete, or not current, we reserve the right to suspend or terminate your account without notice and to refuse any and all current and future use of the Website.\n\nAlthough sections of the Website may be viewed simply by visiting the Website, in order to access some Content and/or additional features offered at the Website, you may need to sign on as a guest or register as a member. If you create an account on the Website, you may be asked to supply your name, address, a User ID and password. You are responsible for maintaining the confidentiality of the password and account and are fully responsible for all activities that occur in connection with your password or account. You agree to immediately notify us of any unauthorized use of either your password or account or any other breach of security. You further agree that you will not permit others, including those whose accounts have been terminated, to access the Website using your account or User ID. You grant the Operators and all other persons or entities involved in the operation of the Website the right to transmit, monitor, retrieve, store, and use your information in connection with the operation of the Website and in the provision of services to you. The Operators cannot and do not assume any responsibility or liability for any information you submit, or your or third parties’ use or misuse of information transmitted or received using website. To learn more about how we protect the privacy of the personal information in your account, please visit our <a href="http://default-template.wikidot.com/legal:privacy-policy">Privacy Policy</a>.\n<h2 id="toc5">Indemnification</h2>\nYou agree to defend, indemnify and hold harmless the Operators, agents, vendors or suppliers from and against any and all claims, damages, costs and expenses, including reasonable attorneys\' fees, arising from or related to your use or misuse of the Website, including, without limitation, your violation of these Terms and Conditions, the infringement by you, or any other subscriber or user of your account, of any intellectual property right or other right of any person or entity.\n<h2 id="toc6">Termination</h2>\nThese Terms and Conditions of Use are effective until terminated by either party. If you no longer agree to be bound by these Terms and Conditions, you must cease use of the Website. If you are dissatisfied with the Website, their content, or any of these terms, conditions, and policies, your sole legal remedy is to discontinue using the Website. The Operators reserve the right to terminate or suspend your access to and use of the Website, or parts of the Website, without notice, if we believe, in our sole discretion, that such use (i) is in violation of any applicable law; (ii) is harmful to our interests or the interests, including intellectual property or other rights, of another person or entity; or (iii) where the Operators have reason to believe that you are in violation of these Terms and Conditions of Use.\n<h2 id="toc7">WARRANTY DISCLAIMER</h2>\nTHE WEBSITE AND ASSOCIATED MATERIALS ARE PROVIDED ON AN "AS IS" AND "AS AVAILABLE" BASIS. TO THE FULL EXTENT PERMISSIBLE BY APPLICABLE LAW, THE OPERATORS DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE, OR NON-INFRINGEMENTOF INTELLECTUAL PROPERTY. THE OPERATORS MAKE NO REPRESENTATIONS OR WARRANTY THAT THE WEBSITE WILL MEET YOUR REQUIREMENTS, OR THAT YOUR USE OF THE WEBSITE WILL BE UNINTERRUPTED, TIMELY, SECURE, OR ERROR FREE; NOR DO THE OPERATORS MAKE ANY REPRESENTATION OR WARRANTY AS TO THE RESULTS THAT MAY BE OBTAINED FROM THE USE OF THE WEBSITE. THE OPERATORS MAKE NO REPRESENTATIONS OR WARRANTIES OF ANY KIND, EXPRESS OR IMPLIED, AS TO THE OPERATION OF THE WEBSITE OR THE INFORMATION, CONTENT, MATERIALS, OR PRODUCTS INCLUDED ON THE WEBSITE.\n\nIN NO EVENT SHALL THE OPERATORS OR ANY OF THEIR AGENTS, VENDORS OR SUPPLIERS BE LIABLE FOR ANY DAMAGES WHATSOEVER (INCLUDING, WITHOUT LIMITATION, DAMAGES FOR LOSS OF PROFITS, BUSINESS INTERRUPTION, LOSS OF INFORMATION) ARISING OUT OF THE USE, MISUSE OF OR INABILITY TO USE THE WEBSITE, EVEN IF THE OPERATORS HAVE BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES. THIS DISCLAIMER CONSTITUTES AN ESSENTIAL PART OF THIS AGREEMENT. BECAUSE SOME JURISDICTIONS PROHIBIT THE EXCLUSION OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES, THE ABOVE LIMITATION MAY NOT APPLY TO YOU.\n\nYOU UNDERSTAND AND AGREE THAT ANY CONTENT DOWNLOADED OR OTHERWISE OBTAINED THROUGH THE USE OF THE WEBSITE IS AT YOUR OWN DISCRETION AND RISK AND THAT YOU WILL BE SOLELY RESPONSIBLE FOR ANY DAMAGE TO YOUR COMPUTER SYSTEM OR LOSS OF DATA OR BUSINESS INTERRUPTION THAT RESULTS FROM THE DOWNLOAD OF CONTENT. THE OPERATORS SHALL NOT BE RESPONSIBLE FOR ANY LOSS OR DAMAGE CAUSED, OR ALLEGED TO HAVE BEEN CAUSED, DIRECTLY OR INDIRECTLY, BY THE INFORMATION OR IDEAS CONTAINED, SUGGESTED OR REFERENCED IN OR APPEARING ON THE WEBSITE. YOUR PARTICIPATION IN THE WEBSITE IS SOLELY AT YOUR OWN RISK. NO ADVICE OR INFORMATION, WHETHER ORAL OR WRITTEN, OBTAINED BY YOU FROM THE OPERATORS OR THROUGH THE OPERATORS, THEIR EMPLOYEES, OR THIRD PARTIES SHALL CREATE ANY WARRANTY NOT EXPRESSLY MADE HEREIN. YOU ACKNOWLEDGE, BY YOUR USE OF THE THE WEBSITE, THAT YOUR USE OF THE WEBSITE IS AT YOUR SOLE RISK.\n\nLIABILITY LIMITATION. UNDER NO CIRCUMSTANCES AND UNDER NO LEGAL OR EQUITABLE THEORY, WHETHER IN TORT, CONTRACT, NEGLIGENCE, STRICT LIABILITY OR OTHERWISE, SHALL THE OPERATORS OR ANY OF THEIR AGENTS, VENDORS OR SUPPLIERS BE LIABLE TO USER OR TO ANY OTHER PERSON FOR ANY INDIRECT, SPECIAL, INCIDENTAL OR CONSEQUENTIAL LOSSES OR DAMAGES OF ANY NATURE ARISING OUT OF OR IN CONNECTION WITH THE USE OF OR INABILITY TO USE THE THE WEBSITE OR FOR ANY BREACH OF SECURITY ASSOCIATED WITH THE TRANSMISSION OF SENSITIVE INFORMATION THROUGH THE WEBSITE OR FOR ANY INFORMATION OBTAINED THROUGH THE WEBSITE, INCLUDING, WITHOUT LIMITATION, DAMAGES FOR LOST PROFITS, LOSS OF GOODWILL, LOSS OR CORRUPTION OF DATA, WORK STOPPAGE, ACCURACY OF RESULTS, OR COMPUTER FAILURE OR MALFUNCTION, EVEN IF AN AUTHORIZED REPRESENTATIVE OF THE OPERATORS HAS BEEN ADVISED OF OR SHOULD HAVE KNOWN OF THE POSSIBILITY OF SUCH DAMAGES.\n\nTHE OPERATORS\'S TOTAL CUMULATIVE LIABILITY FOR ANY AND ALL CLAIMS IN CONNECTION WITH THE WEBSITE WILL NOT EXCEED FIVE U.S. DOLLARS ($5.00). USER AGREES AND ACKNOWLEDGES THAT THE FOREGOING LIMITATIONS ON LIABILITY ARE AN ESSENTIAL BASIS OF THE BARGAIN AND THAT THE OPERATORS WOULD NOT PROVIDE THE WEBSITE ABSENT SUCH LIMITATION.\n<h2 id="toc8">General</h2>\nThe Website is hosted in the United States. The Operators make no claims that the Content on the Website is appropriate or may be downloaded outside of the United States. Access to the Content may not be legal by certain persons or in certain countries. If you access the Website from outside the United States, you do so at your own risk and are responsible for compliance with the laws of your jurisdiction. The provisions of the UN Convention on Contracts for the International Sale of Goods will not apply to these Terms. A party may give notice to the other party only in writing at that party\'s principal place of business, attention of that party\'s principal legal officer, or at such other address or by such other method as the party shall specify in writing. Notice shall be deemed given upon personal delivery or facsimile, or, if sent by certified mail with postage prepaid, 5 business days after the date of mailing, or, if sent by international overnight courier with postage prepaid, 7 business days after the date of mailing. If any provision herein is held to be unenforceable, the remaining provisions will continue in full force without being affected in any way. Further, the parties agree to replace such unenforceable provision with an enforceable provision that most closely approximates the intent and economic effect of the unenforceable provision. Section headings are for reference purposes only and do not define, limit, construe or describe the scope or extent of such section. The failure of the Operators to act with respect to a breach of this Agreement by you or others does not constitute a waiver and shall not limit the Operators\' rights with respect to such breach or any subsequent breaches. Any action or proceeding arising out of or related to this Agreement or User\'s use of the Website must be brought in the courts of Belgium, and you consent to the exclusive personal jurisdiction and venue of such courts. Any cause of action you may have with respect to your use of the Website must be commenced within one (1) year after the claim or cause of action arises. These Terms set forth the entire understanding and agreement of the parties, and supersedes any and all oral or written agreements or understandings between the parties, as to their subject matter. The waiver of a breach of any provision of this Agreement shall not be construed as a waiver of any other or subsequent breach.\n<h2 id="toc9">Links to Other Materials</h2>\nThe Website may contain links to sites owned or operated by independent third parties. These links are provided for your convenience and reference only. We do not control such sites and, therefore, we are not responsible for any content posted on these sites. The fact that the Operators offer such links should not be construed in any way as an endorsement, authorization, or sponsorship of that site, its content or the companies or products referenced therein, and the Operators reserve the right to note its lack of affiliation, sponsorship, or endorsement on the Website. If you decide to access any of the third party sites linked to by the Website, you do this entirely at your own risk. Because some sites employ automated search results or otherwise link you to sites containing information that may be deemed inappropriate or offensive, the Operators cannot be held responsible for the accuracy, copyright compliance, legality, or decency of material contained in third party sites, and you hereby irrevocably waive any claim against us with respect to such sites.\n<h2 id="toc10">Notification Of Possible Copyright Infringement</h2>\nIn the event you believe that material or content published on the Website may infringe on your copyright or that of another, please <a href="http://default-template.wikidot.com/contact">contact</a> us.', 'Terms of Use', '', 'inherit', 'open', 'open', '', '270-autosave-v1', '', '', '2014-09-03 19:54:39', '2014-09-04 00:54:39', '', 270, 'http://dev.dorails.com/railsvitamins/270-autosave-v1/', 0, 'revision', '', 0),
(273, 1, '2014-09-03 19:56:28', '2014-09-04 00:56:28', '<h1 style="text-align: center;">Terms of Use</h1>\r\n\r\n<hr />\r\n\r\n<h2 id="toc0">Legal Notices</h2>\r\nWe, the Operators of this Website, provide it as a public service to our users.\r\n\r\nPlease carefully review the following basic rules that govern your use of the Website. Please note that your use of the Website constitutes your unconditional agreement to follow and be bound by these Terms and Conditions of Use. If you (the "User") do not agree to them, do not use the Website, provide any materials to the Website or download any materials from them.\r\n\r\nThe Operators reserve the right to update or modify these Terms and Conditions at any time without prior notice to User. Your use of the Website following any such change constitutes your unconditional agreement to follow and be bound by these Terms and Conditions as changed. For this reason, we encourage you to review these Terms and Conditions of Use whenever you use the Website.\r\n\r\nThese Terms and Conditions of Use apply to the use of the Website and do not extend to any linked third party sites. These Terms and Conditions and our <a title="Privacy Policy" href="http://dev.dorails.com/privacy/">Privacy Policy</a>, which are hereby incorporated by reference, contain the entire agreement (the “Agreement”) between you and the Operators with respect to the Website. Any rights not expressly granted herein are reserved.\r\n<h2 id="toc1">Permitted and Prohibited Uses</h2>\r\nYou may use the the Website for the sole purpose of sharing and exchanging ideas with other Users. You may not use the the Website to violate any applicable local, state, national, or international law, including without limitation any applicable laws relating to antitrust or other illegal trade or business practices, federal and state securities laws, regulations promulgated by the U.S. Securities and Exchange Commission, any rules of any national or other securities exchange, and any U.S. laws, rules, and regulations governing the export and re-export of commodities or technical data.\r\n\r\nYou may not upload or transmit any material that infringes or misappropriates any person\'s copyright, patent, trademark, or trade secret, or disclose via the the Website any information the disclosure of which would constitute a violation of any confidentiality obligations you may have.\r\n\r\nYou may not upload any viruses, worms, Trojan horses, or other forms of harmful computer code, nor subject the Website\'s network or servers to unreasonable traffic loads, or otherwise engage in conduct deemed disruptive to the ordinary operation of the Website.\r\n\r\nYou are strictly prohibited from communicating on or through the Website any unlawful, harmful, offensive, threatening, abusive, libelous, harassing, defamatory, vulgar, obscene, profane, hateful, fraudulent, sexually explicit, racially, ethnically, or otherwise objectionable material of any sort, including, but not limited to, any material that encourages conduct that would constitute a criminal offense, give rise to civil liability, or otherwise violate any applicable local, state, national, or international law.\r\n\r\nYou are expressly prohibited from compiling and using other Users\' personal information, including addresses, telephone numbers, fax numbers, email addresses or other contact information that may appear on the Website, for the purpose of creating or compiling marketing and/or mailing lists and from sending other Users unsolicited marketing materials, whether by facsimile, email, or other technological means.\r\n\r\nYou also are expressly prohibited from distributing Users\' personal information to third-party parties for marketing purposes. The Operators shall deem the compiling of marketing and mailing lists using Users\' personal information, the sending of unsolicited marketing materials to Users, or the distribution of Users\' personal information to third parties for marketing purposes as a material breach of these Terms and Conditions of Use, and the Operators reserve the right to terminate or suspend your access to and use of the Website and to suspend or revoke your membership in the consortium without refund of any membership dues paid.\r\n\r\nThe Operators note that unauthorized use of Users\' personal information in connection with unsolicited marketing correspondence also may constitute violations of various state and federal anti-spam statutes. The Operators reserve the right to report the abuse of Users\' personal information to the appropriate law enforcement and government authorities, and the Operators will fully cooperate with any authorities investigating violations of these laws.\r\n<h2 id="toc2">User Submissions</h2>\r\nThe Operators do not want to receive confidential or proprietary information from you through the Website. Any material, information, or other communication you transmit or post ("Contributions") to the Website will be considered non-confidential.\r\n\r\nAll contributions to this site are licensed by you under the MIT License to anyone who wishes to use them, including the Operators.\r\n\r\nIf you work for a company or at a University, it\'s likely that you\'re not the copyright holder of anything you make, even in your free time. Before making contributions to this site, get written permission from your employer.\r\n<h2 id="toc3">User Discussion Lists and Forums</h2>\r\nThe Operators may, but are not obligated to, monitor or review any areas on the Website where users transmit or post communications or communicate solely with each other, including but not limited to user forums and email lists, and the content of any such communications. The Operators, however, will have no liability related to the content of any such communications, whether or not arising under the laws of copyright, libel, privacy, obscenity, or otherwise. The Operators may edit or remove content on the the Website at their discretion at any time.\r\n<h2 id="toc4">Use of Personally Identifiable Information</h2>\r\nInformation submitted to the Website is governed according to the Operators’s current <a title="Privacy Policy" href="http://dev.dorails.com/privacy/">Privacy Policy</a> and the stated license of this website.\r\n\r\nYou agree to provide true, accurate, current, and complete information when registering with the Website. It is your responsibility to maintain and promptly update this account information to keep it true, accurate, current, and complete. If you provides any information that is fraudulent, untrue, inaccurate, incomplete, or not current, or we have reasonable grounds to suspect that such information is fraudulent, untrue, inaccurate, incomplete, or not current, we reserve the right to suspend or terminate your account without notice and to refuse any and all current and future use of the Website.\r\n\r\nAlthough sections of the Website may be viewed simply by visiting the Website, in order to access some Content and/or additional features offered at the Website, you may need to sign on as a guest or register as a member. If you create an account on the Website, you may be asked to supply your name, address, a User ID and password. You are responsible for maintaining the confidentiality of the password and account and are fully responsible for all activities that occur in connection with your password or account. You agree to immediately notify us of any unauthorized use of either your password or account or any other breach of security. You further agree that you will not permit others, including those whose accounts have been terminated, to access the Website using your account or User ID. You grant the Operators and all other persons or entities involved in the operation of the Website the right to transmit, monitor, retrieve, store, and use your information in connection with the operation of the Website and in the provision of services to you. The Operators cannot and do not assume any responsibility or liability for any information you submit, or your or third parties’ use or misuse of information transmitted or received using website. To learn more about how we protect the privacy of the personal information in your account, please visit our <a title="Privacy Policy" href="http://dev.dorails.com/privacy/">Privacy Policy</a>.\r\n<h2 id="toc5">Indemnification</h2>\r\nYou agree to defend, indemnify and hold harmless the Operators, agents, vendors or suppliers from and against any and all claims, damages, costs and expenses, including reasonable attorneys\' fees, arising from or related to your use or misuse of the Website, including, without limitation, your violation of these Terms and Conditions, the infringement by you, or any other subscriber or user of your account, of any intellectual property right or other right of any person or entity.\r\n<h2 id="toc6">Termination</h2>\r\nThese Terms and Conditions of Use are effective until terminated by either party. If you no longer agree to be bound by these Terms and Conditions, you must cease use of the Website. If you are dissatisfied with the Website, their content, or any of these terms, conditions, and policies, your sole legal remedy is to discontinue using the Website. The Operators reserve the right to terminate or suspend your access to and use of the Website, or parts of the Website, without notice, if we believe, in our sole discretion, that such use (i) is in violation of any applicable law; (ii) is harmful to our interests or the interests, including intellectual property or other rights, of another person or entity; or (iii) where the Operators have reason to believe that you are in violation of these Terms and Conditions of Use.\r\n<h2 id="toc7">WARRANTY DISCLAIMER</h2>\r\nTHE WEBSITE AND ASSOCIATED MATERIALS ARE PROVIDED ON AN "AS IS" AND "AS AVAILABLE" BASIS. TO THE FULL EXTENT PERMISSIBLE BY APPLICABLE LAW, THE OPERATORS DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE, OR NON-INFRINGEMENTOF INTELLECTUAL PROPERTY. THE OPERATORS MAKE NO REPRESENTATIONS OR WARRANTY THAT THE WEBSITE WILL MEET YOUR REQUIREMENTS, OR THAT YOUR USE OF THE WEBSITE WILL BE UNINTERRUPTED, TIMELY, SECURE, OR ERROR FREE; NOR DO THE OPERATORS MAKE ANY REPRESENTATION OR WARRANTY AS TO THE RESULTS THAT MAY BE OBTAINED FROM THE USE OF THE WEBSITE. THE OPERATORS MAKE NO REPRESENTATIONS OR WARRANTIES OF ANY KIND, EXPRESS OR IMPLIED, AS TO THE OPERATION OF THE WEBSITE OR THE INFORMATION, CONTENT, MATERIALS, OR PRODUCTS INCLUDED ON THE WEBSITE.\r\n\r\nIN NO EVENT SHALL THE OPERATORS OR ANY OF THEIR AGENTS, VENDORS OR SUPPLIERS BE LIABLE FOR ANY DAMAGES WHATSOEVER (INCLUDING, WITHOUT LIMITATION, DAMAGES FOR LOSS OF PROFITS, BUSINESS INTERRUPTION, LOSS OF INFORMATION) ARISING OUT OF THE USE, MISUSE OF OR INABILITY TO USE THE WEBSITE, EVEN IF THE OPERATORS HAVE BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES. THIS DISCLAIMER CONSTITUTES AN ESSENTIAL PART OF THIS AGREEMENT. BECAUSE SOME JURISDICTIONS PROHIBIT THE EXCLUSION OR LIMITATION OF LIABILITY FOR CONSEQUENTIAL OR INCIDENTAL DAMAGES, THE ABOVE LIMITATION MAY NOT APPLY TO YOU.\r\n\r\nYOU UNDERSTAND AND AGREE THAT ANY CONTENT DOWNLOADED OR OTHERWISE OBTAINED THROUGH THE USE OF THE WEBSITE IS AT YOUR OWN DISCRETION AND RISK AND THAT YOU WILL BE SOLELY RESPONSIBLE FOR ANY DAMAGE TO YOUR COMPUTER SYSTEM OR LOSS OF DATA OR BUSINESS INTERRUPTION THAT RESULTS FROM THE DOWNLOAD OF CONTENT. THE OPERATORS SHALL NOT BE RESPONSIBLE FOR ANY LOSS OR DAMAGE CAUSED, OR ALLEGED TO HAVE BEEN CAUSED, DIRECTLY OR INDIRECTLY, BY THE INFORMATION OR IDEAS CONTAINED, SUGGESTED OR REFERENCED IN OR APPEARING ON THE WEBSITE. YOUR PARTICIPATION IN THE WEBSITE IS SOLELY AT YOUR OWN RISK. NO ADVICE OR INFORMATION, WHETHER ORAL OR WRITTEN, OBTAINED BY YOU FROM THE OPERATORS OR THROUGH THE OPERATORS, THEIR EMPLOYEES, OR THIRD PARTIES SHALL CREATE ANY WARRANTY NOT EXPRESSLY MADE HEREIN. YOU ACKNOWLEDGE, BY YOUR USE OF THE THE WEBSITE, THAT YOUR USE OF THE WEBSITE IS AT YOUR SOLE RISK.\r\n\r\nLIABILITY LIMITATION. UNDER NO CIRCUMSTANCES AND UNDER NO LEGAL OR EQUITABLE THEORY, WHETHER IN TORT, CONTRACT, NEGLIGENCE, STRICT LIABILITY OR OTHERWISE, SHALL THE OPERATORS OR ANY OF THEIR AGENTS, VENDORS OR SUPPLIERS BE LIABLE TO USER OR TO ANY OTHER PERSON FOR ANY INDIRECT, SPECIAL, INCIDENTAL OR CONSEQUENTIAL LOSSES OR DAMAGES OF ANY NATURE ARISING OUT OF OR IN CONNECTION WITH THE USE OF OR INABILITY TO USE THE THE WEBSITE OR FOR ANY BREACH OF SECURITY ASSOCIATED WITH THE TRANSMISSION OF SENSITIVE INFORMATION THROUGH THE WEBSITE OR FOR ANY INFORMATION OBTAINED THROUGH THE WEBSITE, INCLUDING, WITHOUT LIMITATION, DAMAGES FOR LOST PROFITS, LOSS OF GOODWILL, LOSS OR CORRUPTION OF DATA, WORK STOPPAGE, ACCURACY OF RESULTS, OR COMPUTER FAILURE OR MALFUNCTION, EVEN IF AN AUTHORIZED REPRESENTATIVE OF THE OPERATORS HAS BEEN ADVISED OF OR SHOULD HAVE KNOWN OF THE POSSIBILITY OF SUCH DAMAGES.\r\n\r\nTHE OPERATORS\'S TOTAL CUMULATIVE LIABILITY FOR ANY AND ALL CLAIMS IN CONNECTION WITH THE WEBSITE WILL NOT EXCEED FIVE U.S. DOLLARS ($5.00). USER AGREES AND ACKNOWLEDGES THAT THE FOREGOING LIMITATIONS ON LIABILITY ARE AN ESSENTIAL BASIS OF THE BARGAIN AND THAT THE OPERATORS WOULD NOT PROVIDE THE WEBSITE ABSENT SUCH LIMITATION.\r\n<h2 id="toc8">General</h2>\r\nThe Website is hosted in the United States. The Operators make no claims that the Content on the Website is appropriate or may be downloaded outside of the United States. Access to the Content may not be legal by certain persons or in certain countries. If you access the Website from outside the United States, you do so at your own risk and are responsible for compliance with the laws of your jurisdiction. The provisions of the UN Convention on Contracts for the International Sale of Goods will not apply to these Terms. A party may give notice to the other party only in writing at that party\'s principal place of business, attention of that party\'s principal legal officer, or at such other address or by such other method as the party shall specify in writing. Notice shall be deemed given upon personal delivery or facsimile, or, if sent by certified mail with postage prepaid, 5 business days after the date of mailing, or, if sent by international overnight courier with postage prepaid, 7 business days after the date of mailing. If any provision herein is held to be unenforceable, the remaining provisions will continue in full force without being affected in any way. Further, the parties agree to replace such unenforceable provision with an enforceable provision that most closely approximates the intent and economic effect of the unenforceable provision. Section headings are for reference purposes only and do not define, limit, construe or describe the scope or extent of such section. The failure of the Operators to act with respect to a breach of this Agreement by you or others does not constitute a waiver and shall not limit the Operators\' rights with respect to such breach or any subsequent breaches. Any action or proceeding arising out of or related to this Agreement or User\'s use of the Website must be brought in the courts of Belgium, and you consent to the exclusive personal jurisdiction and venue of such courts. Any cause of action you may have with respect to your use of the Website must be commenced within one (1) year after the claim or cause of action arises. These Terms set forth the entire understanding and agreement of the parties, and supersedes any and all oral or written agreements or understandings between the parties, as to their subject matter. The waiver of a breach of any provision of this Agreement shall not be construed as a waiver of any other or subsequent breach.\r\n<h2 id="toc9">Links to Other Materials</h2>\r\nThe Website may contain links to sites owned or operated by independent third parties. These links are provided for your convenience and reference only. We do not control such sites and, therefore, we are not responsible for any content posted on these sites. The fact that the Operators offer such links should not be construed in any way as an endorsement, authorization, or sponsorship of that site, its content or the companies or products referenced therein, and the Operators reserve the right to note its lack of affiliation, sponsorship, or endorsement on the Website. If you decide to access any of the third party sites linked to by the Website, you do this entirely at your own risk. Because some sites employ automated search results or otherwise link you to sites containing information that may be deemed inappropriate or offensive, the Operators cannot be held responsible for the accuracy, copyright compliance, legality, or decency of material contained in third party sites, and you hereby irrevocably waive any claim against us with respect to such sites.\r\n<h2 id="toc10">Notification Of Possible Copyright Infringement</h2>\r\nIn the event you believe that material or content published on the Website may infringe on your copyright or that of another, please <a title="Contact Us" href="http://dev.dorails.com/contact/">contact</a> us.', 'Terms of Use', '', 'inherit', 'open', 'open', '', '270-revision-v1', '', '', '2014-09-03 19:56:28', '2014-09-04 00:56:28', '', 270, 'http://dev.dorails.com/railsvitamins/270-revision-v1/', 0, 'revision', '', 0),
(274, 1, '2014-09-03 19:59:20', '2014-09-04 00:59:20', '', 'Terms', '', 'publish', 'open', 'open', '', 'terms', '', '', '2014-09-03 19:59:52', '2014-09-04 00:59:52', '', 0, 'http://dev.dorails.com/?p=274', 2, 'nav_menu_item', '', 0),
(275, 1, '2014-09-03 20:04:07', '2014-09-04 01:04:07', '<h1 style="text-align: center;">Privacy Policy</h1>\r\n\r\n<hr />\r\n\r\n&nbsp;\r\n<h3>What information do we collect?</h3>\r\nWe collect information from you when you register on our site, place an order, subscribe to our newsletter, respond to a survey, fill out a form or send band information.\r\n\r\nWhen ordering or registering on our site, as appropriate, you may be asked to enter your: name, e-mail address, mailing address or phone number. You may, however, visit our site anonymously.\r\n<h3>What do we use your information for?</h3>\r\nAny of the information we collect from you may be used in one of the following ways:\r\n\r\n; To personalize your experience\r\n(your information helps us to better respond to your individual needs)\r\n\r\n; To improve our website\r\n(we continually strive to improve our website offerings based on the information and feedback we receive from you)\r\n\r\n; To improve customer service\r\n(your information helps us to more effectively respond to your customer service requests and support needs)\r\n\r\n; To administer a contest, promotion, survey or other site feature\r\n\r\n; To send periodic emails\r\n<blockquote>The email address you provide for order processing, may be used to send you information and updates pertaining to your order, in addition to receiving occasional company news, updates, related product or service information, etc.</blockquote>\r\nNote: If at any time you would like to unsubscribe from receiving future emails, we include detailed unsubscribe instructions at the bottom of each email.\r\n<h3>How do we protect your information?</h3>\r\nWe implement a variety of security measures to maintain the safety of your personal information when you place an order or enter, submit, or access your personal information.\r\n\r\nWe offer the use of a secure server. All supplied sensitive/credit information is transmitted via Secure Socket Layer (SSL) technology and then encrypted into our Payment gateway providers database only to be accessible by those authorized with special access rights to such systems, and are required to?keep the information confidential.\r\n\r\nAfter a transaction, your private information (credit cards, social security numbers, financials, etc.) will not be stored on our servers.\r\n<h3>Do we use cookies?</h3>\r\nYes (Cookies are small files that a site or its service provider transfers to your computers hard drive through your Web browser (if you allow) that enables the sites or service providers systems to recognize your browser and capture and remember certain information\r\n\r\nWe use cookies to understand and save your preferences for future visits, keep track of advertisements and compile aggregate data about site traffic and site interaction so that we can offer better site experiences and tools in the future. We may contract with third-party service providers to assist us in better understanding our site visitors. These service providers are not permitted to use the information collected on our behalf except to help us conduct and improve our business.\r\n\r\nIf you prefer, you can choose to have your computer warn you each time a cookie is being sent, or you can choose to turn off all cookies via your browser settings. Like most websites, if you turn your cookies off, some of our services may not function properly. However, you can still place orders over the telephone or by contacting customer service.\r\n<h3>Do we disclose any information to outside parties?</h3>\r\nWe do not sell, trade, or otherwise transfer to outside parties your personally identifiable information. This does not include trusted third parties who assist us in operating our website, conducting our business, or servicing you, so long as those parties agree to keep this information confidential. We may also release your information when we believe release is appropriate to comply with the law, enforce our site policies, or protect ours or others rights, property, or safety. However, non-personally identifiable visitor information may be provided to other parties for marketing, advertising, or other uses.\r\n<h3>Third party links</h3>\r\nOccasionally, at our discretion, we may include or offer third party products or services on our website. These third party sites have separate and independent privacy policies. We therefore have no responsibility or liability for the content and activities of these linked sites. Nonetheless, we seek to protect the integrity of our site and welcome any feedback about these sites.\r\n<h3>California Online Privacy Protection Act Compliance</h3>\r\nBecause we value your privacy we have taken the necessary precautions to be in compliance with the California Online Privacy Protection Act. We therefore will not distribute your personal information to outside parties without your consent.\r\n<h3>Childrens Online Privacy Protection Act Compliance</h3>\r\nWe are in compliance with the requirements of COPPA (Childrens Online Privacy Protection Act), we do not collect any information from anyone under 13 years of age. Our website, products and services are all directed to people who are at least 13 years old or older.\r\n<h3>Online Privacy Policy Only</h3>\r\nThis online privacy policy applies only to information collected through our website and not to information collected offline.\r\n<h3>Your Consent</h3>\r\nBy using our site, you consent to our web site privacy policy.\r\n<h3>Changes to our Privacy Policy</h3>\r\nIf we decide to change our privacy policy, we will post those changes on this page, and/or update the Privacy Policy modification date below.\r\n\r\nThis policy was last modified on 6/30/2014\r\n<h3>Contacting Us</h3>\r\nIf there are any questions regarding this privacy policy you may contact us using the information below.\r\n\r\nhttp://dev.dorails.com\r\n\r\nParadox\r\ninfo@paradoxsites.com', 'Privacy Policy', '', 'inherit', 'open', 'open', '', '5-revision-v1', '', '', '2014-09-03 20:04:07', '2014-09-04 01:04:07', '', 5, 'http://dev.dorails.com/railsvitamins/5-revision-v1/', 0, 'revision', '', 0),
(276, 1, '2014-09-03 20:06:17', '2014-09-04 01:06:17', '<h1>Contact Us</h1>\r\n\r\n<hr />\r\n\r\n&nbsp;\r\n\r\n[gravityform id="2" name="Contact Us" ajax="true"]', 'Contact Us', '', 'inherit', 'open', 'open', '', '15-revision-v1', '', '', '2014-09-03 20:06:17', '2014-09-04 01:06:17', '', 15, 'http://dev.dorails.com/railsvitamins/15-revision-v1/', 0, 'revision', '', 0),
(277, 1, '2014-09-03 20:06:25', '2014-09-04 01:06:25', '<h1>Contact Us</h1>\r\n\r\n<hr />\r\n\r\n[gravityform id="2" name="Contact Us" ajax="true"]', 'Contact Us', '', 'inherit', 'open', 'open', '', '15-revision-v1', '', '', '2014-09-03 20:06:25', '2014-09-04 01:06:25', '', 15, 'http://dev.dorails.com/railsvitamins/15-revision-v1/', 0, 'revision', '', 0),
(278, 1, '2014-09-03 20:07:03', '2014-09-04 01:07:03', '<h1 style="text-align: center;">Contact Us</h1>\r\n\r\n<hr />\r\n\r\n[gravityform id="2" name="Contact Us" ajax="true"]', 'Contact Us', '', 'inherit', 'open', 'open', '', '15-revision-v1', '', '', '2014-09-03 20:07:03', '2014-09-04 01:07:03', '', 15, 'http://dev.dorails.com/railsvitamins/15-revision-v1/', 0, 'revision', '', 0),
(279, 1, '2014-09-03 20:07:20', '2014-09-04 01:07:20', '<h1 style="text-align: center;">Privacy Policy</h1>\r\n\r\n<hr />\r\n\r\n<h3> What information do we collect?</h3>\r\nWe collect information from you when you register on our site, place an order, subscribe to our newsletter, respond to a survey, fill out a form or send band information.\r\n\r\nWhen ordering or registering on our site, as appropriate, you may be asked to enter your: name, e-mail address, mailing address or phone number. You may, however, visit our site anonymously.\r\n<h3>What do we use your information for?</h3>\r\nAny of the information we collect from you may be used in one of the following ways:\r\n\r\n; To personalize your experience\r\n(your information helps us to better respond to your individual needs)\r\n\r\n; To improve our website\r\n(we continually strive to improve our website offerings based on the information and feedback we receive from you)\r\n\r\n; To improve customer service\r\n(your information helps us to more effectively respond to your customer service requests and support needs)\r\n\r\n; To administer a contest, promotion, survey or other site feature\r\n\r\n; To send periodic emails\r\n<blockquote>The email address you provide for order processing, may be used to send you information and updates pertaining to your order, in addition to receiving occasional company news, updates, related product or service information, etc.</blockquote>\r\nNote: If at any time you would like to unsubscribe from receiving future emails, we include detailed unsubscribe instructions at the bottom of each email.\r\n<h3>How do we protect your information?</h3>\r\nWe implement a variety of security measures to maintain the safety of your personal information when you place an order or enter, submit, or access your personal information.\r\n\r\nWe offer the use of a secure server. All supplied sensitive/credit information is transmitted via Secure Socket Layer (SSL) technology and then encrypted into our Payment gateway providers database only to be accessible by those authorized with special access rights to such systems, and are required to?keep the information confidential.\r\n\r\nAfter a transaction, your private information (credit cards, social security numbers, financials, etc.) will not be stored on our servers.\r\n<h3>Do we use cookies?</h3>\r\nYes (Cookies are small files that a site or its service provider transfers to your computers hard drive through your Web browser (if you allow) that enables the sites or service providers systems to recognize your browser and capture and remember certain information\r\n\r\nWe use cookies to understand and save your preferences for future visits, keep track of advertisements and compile aggregate data about site traffic and site interaction so that we can offer better site experiences and tools in the future. We may contract with third-party service providers to assist us in better understanding our site visitors. These service providers are not permitted to use the information collected on our behalf except to help us conduct and improve our business.\r\n\r\nIf you prefer, you can choose to have your computer warn you each time a cookie is being sent, or you can choose to turn off all cookies via your browser settings. Like most websites, if you turn your cookies off, some of our services may not function properly. However, you can still place orders over the telephone or by contacting customer service.\r\n<h3>Do we disclose any information to outside parties?</h3>\r\nWe do not sell, trade, or otherwise transfer to outside parties your personally identifiable information. This does not include trusted third parties who assist us in operating our website, conducting our business, or servicing you, so long as those parties agree to keep this information confidential. We may also release your information when we believe release is appropriate to comply with the law, enforce our site policies, or protect ours or others rights, property, or safety. However, non-personally identifiable visitor information may be provided to other parties for marketing, advertising, or other uses.\r\n<h3>Third party links</h3>\r\nOccasionally, at our discretion, we may include or offer third party products or services on our website. These third party sites have separate and independent privacy policies. We therefore have no responsibility or liability for the content and activities of these linked sites. Nonetheless, we seek to protect the integrity of our site and welcome any feedback about these sites.\r\n<h3>California Online Privacy Protection Act Compliance</h3>\r\nBecause we value your privacy we have taken the necessary precautions to be in compliance with the California Online Privacy Protection Act. We therefore will not distribute your personal information to outside parties without your consent.\r\n<h3>Childrens Online Privacy Protection Act Compliance</h3>\r\nWe are in compliance with the requirements of COPPA (Childrens Online Privacy Protection Act), we do not collect any information from anyone under 13 years of age. Our website, products and services are all directed to people who are at least 13 years old or older.\r\n<h3>Online Privacy Policy Only</h3>\r\nThis online privacy policy applies only to information collected through our website and not to information collected offline.\r\n<h3>Your Consent</h3>\r\nBy using our site, you consent to our web site privacy policy.\r\n<h3>Changes to our Privacy Policy</h3>\r\nIf we decide to change our privacy policy, we will post those changes on this page, and/or update the Privacy Policy modification date below.\r\n\r\nThis policy was last modified on 6/30/2014\r\n<h3>Contacting Us</h3>\r\nIf there are any questions regarding this privacy policy you may contact us using the information below.\r\n\r\nhttp://dev.dorails.com\r\n\r\nParadox\r\ninfo@paradoxsites.com', 'Privacy Policy', '', 'inherit', 'open', 'open', '', '5-revision-v1', '', '', '2014-09-03 20:07:20', '2014-09-04 01:07:20', '', 5, 'http://dev.dorails.com/railsvitamins/5-revision-v1/', 0, 'revision', '', 0) ;
INSERT INTO `wp_posts` ( `ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(280, 1, '2014-09-04 11:49:30', '2014-09-04 16:49:30', 'You’re halfway through your third Ruby on Rails book and you feel like you\'ve hit a wall. It’s 1 o’clock in the morning and your shoulders are feeling heavy. You\'re ready to quit for the night, but for months you\'ve kept telling yourself:\r\n<h3>“If I just finish this last Rails course, <strong>then</strong> I\'ll be ready to start building my Rails app”.</h3>\r\nYou decide to power through and do yet another Ruby exercise on lambda’s and hashes. An hour later, your eyes are glazed over with confusion and exhaustion.\r\n<h4>You feel more like a transcriptionist <em>monkey</em> than a developer.</h4>\r\nYou now have <em>one more</em> refactoring technique swirling around in your brain with no way to use it. You’re officially fried.\r\n\r\nThat’s when you see the next section has an <em>example</em>. "Woohoo!” You can actually <strong>apply</strong> your knowledge!\r\n<h4>But right off the bat you get stuck with another<em> lovely</em> error message.</h4>\r\nUgggh! After an hour and a half of putzing around to get past that, you slam your laptop shut. Now your eyes are wide open and bloodshot. You’re face is turning red. You throw the book across the room into the trash can. Kobe! With teeth clenched you say to yourself,\r\n<h3>"It should <em>not</em> be <strong>THIS</strong> hard!”</h3>\r\nEveryone told you that Rails was <em>easy</em>. But you’ve learned nothing. You’ve accomplished nothing. At this rate you will <strong>never</strong> get your app built.\r\n\r\nYou’re mind is racing as you lay in bed. You’re flailing to find <em>some</em> way to make this work.\r\n<h4>“If I would’ve got that Computer Science degree, I could do this…”\r\n“I should\'ve picked the right Rails courses, then I wouldn’t have wasted the last 9 months”\r\n"If I wasn’t forced to learn so many things at once...”</h4>\r\nOn and on.\r\n\r\nAt this point so many concepts have been thrown at you, but you have <strong>no clue</strong> about how to put them all together.\r\n<h4>You understand HTML &amp; CSS but this is a different monster.</h4>\r\nWhat the hell is MVC? Should you tackle front-end styling first? or back-end database stuff? Should you learn Ruby first before Rails? How do you configure a server for Rails? You can feel your dream slowly being crushed by the load.\r\n\r\nYou click off the light and close your eyes. Now you feel like your sinking into the bed.\r\n<h4>This is not your fault.</h4>\r\nThe learning curve is just too steep. The resources out there are too advanced. Maybe apps are not your thing. Maybe you should just stick to what you know best. You could just go back to making plain \'ol websites and forget all about building apps. So much time and effort would be wasted if you quit now, but maybe it would be best to cut your losses. As dawn breaks, you drift off to sleep.\r\n<h3>But what would it be like if you <em><strong>could</strong></em> build a finished Rails app?</h3>\r\nWhat if you could get it done and live in a matter of <em>days</em>. Seriously, I know it sounds crazy. Imagine there\'s no learning curve. Just you and the code. Doing and learning all at once.\r\n\r\nYou could finally understand the big picture of how it all works together. If you had a clear plan, you could learn each part of Rails in exactly the right order. You could even cut through error messages like they were butter. What if nothing stood in the way of you learning Rails and getting your app shipped?\r\n<h3>Then the dream of building and launching your Rails app could finally come true.</h3>\r\nContrary to the hype. Ruby on Rails does have a crazy difficult learning curve. Rails apps take months and months to build. But guess what, it doesn’t have to be that hard.\r\n\r\nFIX\r\n\r\nWhat it took me years to figure out:\r\n\r\nLearning Rails <em>doesn\'t</em> have to be this hard. You don’t have to have a CS degree. You don’t have to understand every detail about the Ruby language to build a Rails app. Learn by doing! The best way to learn Ruby on Rails is to actually build a Rails app one piece at a time. It’s all about stacking up quick wins that work toward the goal getting an app done.\r\n\r\n<span style="color: #3b3a3c;">I learned the hard way. It took me a long time to wrap my head around Rails. Let me give you a shortcut so you can save a lot of heartache. If you had a fast track, you could save months (or in my case - years) of wasted time. Not to mention you could avoid a ton of unnecessary pain and heartache.</span>\r\n\r\n<span style="color: #3b3a3c;">With my Rails Curve course you will build and deploy a live Rails app in 30 days.</span>\r\n\r\n<span style="color: #3b3a3c;">Bypass the learning curve altogether. I will walk you through how to build a web app from start to finish. And you will grow all the skills you need to make your own apps moving forward. In four weeks you’ll get experience with all the tools, concepts and skills that you need to – plan, design, develop and (most importantly) ship a web app.</span>\r\n\r\nYou will learn <strong>your</strong> way – by <strong>doing</strong>. After all, you decided to learn Rails so you could <em>build</em> an app – so why not learn by <strong>actually building</strong><em> one</em>?\r\n<h4 style="text-align: left;">By following the method of building <strong>AND</strong> learning at the same time you will...</h4>\r\n<ul>\r\n	<li>Understand the big picture <strong>faster</strong></li>\r\n	<li>Pick up complex skills and concepts <strong>faster</strong></li>\r\n	<li>Avoid getting paralyzed by the tiny details</li>\r\n	<li>Avoid the pain of wasting months studying in-depth concepts</li>\r\n	<li>Punch perfectionism <em>in the face</em></li>\r\n</ul>\r\nInstead of spinning your wheels on learning <em>abstract</em> concepts, <em>Rails Curve</em> will give you:\r\n<h4>a clear <strong>day-by-day plan</strong> for how to build a robust Rails app from <strong>start to finish</strong>.</h4>\r\nEach lesson will include bite-sized video screencasts that will walk you through <strong>exactly</strong> what to do, in plain english. <em>Rails Curve</em> gives you a solid path of <em>exactly</em> what to learn in <em>exactly</em> the right order. You will quickly move step by step through the process and pick up skills in each lesson until you have a completed (live) web app and the skills you need to dive into even more advanced material.\r\n<h4>As you move through each lesson, you will get a solid foundation of the key concepts and get <strong>first-hand experience</strong> on how they all work <strong>together</strong>.</h4>\r\nAnd no dull copy/pasting is necessary, you will simply write code yourself and learn the what, why and how as you go. Plus, everything is based on Rails 4 so you’ll have the latest and greatest training for Rails.\r\n<h4 style="text-align: left;"><em>Rails Curve</em> will <strong>jump-start</strong> your understanding of key elements like...</h4>\r\n<div class="row">\r\n<ul class="col-md-6">\r\n	<li>Ruby</li>\r\n	<li>Gems</li>\r\n	<li>Ruby on Rails Framework</li>\r\n	<li>Command Line (Terminal)</li>\r\n	<li>MVC pattern (Model View Controller)</li>\r\n	<li>Object-Oriented Programming</li>\r\n	<li>Active Record</li>\r\n	<li>Databases</li>\r\n	<li>HTML</li>\r\n	<li>CSS and Sass</li>\r\n	<li>Javascript and CoffeeScript</li>\r\n</ul>\r\n<ul class="col-md-6">\r\n	<li>Front-end Frameworks</li>\r\n	<li>Deployment</li>\r\n	<li>Version Control</li>\r\n	<li>Validation</li>\r\n	<li>User Authentication</li>\r\n	<li>UI Design</li>\r\n	<li>UX Design</li>\r\n	<li>Project Management</li>\r\n	<li>and more...</li>\r\n</ul>\r\n</div>\r\n<h3>You can’t build an app without the right tools</h3>\r\nSo you will get hands-on experience with all of the standard tools like the command-line (Terminal), a text editor (like <em>Sublime</em> Text), <em>Git</em>, <em>Github</em>, <em>Heroku</em>, <em>Twitter Bootstrap</em>, <em>Devise</em>, and more. You will learn the ins-and-outs of all the tools you <em>gotta have</em> in your Rails toolbelt.\r\n<h4>With <em>Rails Curve</em> you will learn <strong>exactly</strong> how to do things like ...</h4>\r\n<ul>\r\n	<li>use the command-line to create a new blank-slate app</li>\r\n	<li>use a single command to create a rails server on your computer</li>\r\n	<li>use <em>Git</em> to manage your source code and push it to an online repo at <em>Github</em></li>\r\n	<li>use the command-line to generate the pages and elements of your app on the fly</li>\r\n	<li>use the command-line to manage your database</li>\r\n	<li>use the command-line to push your app to a live server on <em>Heroku</em></li>\r\n	<li>use <em>Twitter Bootstrap</em> to rapidly style your app - with <strong>no</strong> design experience needed.</li>\r\n	<li>use the <em>Devise</em> gem to create user sign-up and sign-in in a matter of minutes.</li>\r\n	<li>and a lot more</li>\r\n</ul>\r\n<h3>But no amount of skills or tools will wipe out the possibility of <strong>error messages</strong>.</h3>\r\nSo with <em>Rails Curve</em> will teach you how to <strong>eliminate</strong> "getting stuck" forever. You’ll get <strong>real-world experience</strong> troubleshooting error messages for yourself <em>quickly</em> so you never have to slam on the breaks again. You will master the art of ...\r\n<ul>\r\n	<li>Reading error messages to get clues about what part of your app needs fixing</li>\r\n	<li>Googling and searching online dev communities to get past any error <em>in minutes</em></li>\r\n	<li>checking <em>Rails</em> and <em>Heroku</em> error logs using your trusty command line</li>\r\n</ul>\r\n<h3>By the time you finish <em>Rails Curve</em> you will have...</h3>\r\n<ul>\r\n	<li>seen how to make a solid plan you can follow</li>\r\n	<li>created all the key features needed for the app</li>\r\n	<li>sketched &amp; styled a beautiful UI on the front-end of the app</li>\r\n	<li>created a solid database back-end for the app</li>\r\n	<li>implemented a user authentication system for users to sign in and sign out</li>\r\n	<li>deployed your app to a live server</li>\r\n	<li>grown a slew of foundational web development skills in the process</li>\r\n</ul>\r\n<h3>You can <em>finally</em> get the <strong>traction</strong> you need</h3>\r\nWhether you are short on time, cash or have no formal education in programming, you will learn how to move the needle no matter what the circumstances. You will learn to make a production plan for yourself that keeps you moving forward. You will experience what it’s like to go from start to finish with a Rails app.\r\n\r\nWhen you complete <em>Rails Curve</em> you’ll feel confident that you can build apps from start to finish on your own. You’ll be totally certain that you can get past any error or issue. Your excitement won’t diminish because you’ll have a solid plan moves you to progress. You will be relieved that you don’t have to spend thousands of dollars and months of time to learn Rails. And you can finally feel in control because you will understand what each line of code does.\r\n<h3>So, fast forward 30 days and you have finished with <em>Rails Curve</em>. <strong>Now what?</strong></h3>\r\nBack to the obscure world of not knowing what’s next? <strong><em>No way</em>.</strong> When you complete the lessons you will definitely want to transition into building your own app idea. So <em>Rails Curve</em> includes outro lessons that will walk you through how to <strong>create your own plan</strong> for <em>your</em> app. This will leave you with a solid action plan that you can follow from start to finish. If you have unique issues or you need a push in the right direction, I also offer <a href="mailto:me@tyrichards.com">Rails coaching</a>. My goal is to see everyone who goes through <em>Rails Curve</em> build and launch their own app and build their career with great success and without stalling out.\r\n<h2>Join other makers who learn by doing</h2>\r\nWith <em>Rails Curve</em> you will build a <em>real</em> Rails app from start to finish and get all the skills you need to move forward and build your own app.\r\n\r\nLet <em>Rails Curve</em> take away the agony of learning Ruby on Rails.', 'Rails Curve', '', 'inherit', 'open', 'open', '', '105-revision-v1', '', '', '2014-09-04 11:49:30', '2014-09-04 16:49:30', '', 105, 'http://dev.dorails.com/railsvitamins/105-revision-v1/', 0, 'revision', '', 0),
(281, 1, '2014-09-04 12:03:59', '2014-09-04 17:03:59', 'You’re halfway through your third Ruby on Rails book and you feel like you\'ve hit a wall. It’s 1 o’clock in the morning and your shoulders are feeling heavy. You\'re ready to quit for the night, but for months you\'ve kept telling yourself:\r\n<h3>“If I just finish this last Rails course, <strong>then</strong> I\'ll be ready to start building my Rails app”.</h3>\r\nYou decide to power through and do yet another Ruby exercise on lambda’s and hashes. An hour later, your eyes are glazed over with confusion and exhaustion.\r\n<h4>You feel more like a transcriptionist <em>monkey</em> than a developer.</h4>\r\nYou now have <em>one more</em> refactoring technique swirling around in your brain with no way to use it. You’re officially fried.\r\n\r\nThat’s when you see the next section has an <em>example</em>. "Woohoo!” You can actually <strong>apply</strong> your knowledge!\r\n<h4>But right off the bat you get stuck with another<em> lovely</em> error message.</h4>\r\nUgggh! After an hour and a half of putzing around to get past that, you slam your laptop shut. Now your eyes are wide open and bloodshot. You’re face is turning red. You throw the book across the room into the trash can. Kobe! With teeth clenched you say to yourself,\r\n<h3>"It should <em>not</em> be <strong>THIS</strong> hard!”</h3>\r\nEveryone told you that Rails was <em>easy</em>. But you’ve learned nothing. You’ve accomplished nothing. At this rate you will <strong>never</strong> get your app built.\r\n\r\nYou’re mind is racing as you lay in bed. You’re flailing to find <em>some</em> way to make this work.\r\n<h4>“If I would’ve got that Computer Science degree, I could do this…”\r\n“I should\'ve picked the right Rails courses, then I wouldn’t have wasted the last 9 months”\r\n"If I wasn’t forced to learn so many things at once...”</h4>\r\nOn and on.\r\n\r\nAt this point so many concepts have been thrown at you, but you have <strong>no clue</strong> about how to put them all together.\r\n<h4>You understand HTML &amp; CSS but this is a different monster.</h4>\r\nWhat the hell is MVC? Should you tackle front-end styling first? or back-end database stuff? Should you learn Ruby first before Rails? How do you configure a server for Rails? You can feel your dream slowly being crushed by the load.\r\n\r\nYou click off the light and close your eyes. Now you feel like your sinking into the bed.\r\n<h4>This is not your fault.</h4>\r\nThe learning curve is just too steep. The resources out there are too advanced. Maybe apps are not your thing. Maybe you should just stick to what you know best. You could just go back to making plain \'ol websites and forget all about building apps. So much time and effort would be wasted if you quit now, but maybe it would be best to cut your losses. As dawn breaks, you drift off to sleep.\r\n<h3>But what would it be like if you <em><strong>could</strong></em> build a finished Rails app?</h3>\r\nWhat if you could get it done and live in a matter of <em>days</em>. Seriously, I know it sounds crazy. Imagine there\'s no learning curve. Just you and the code. Doing and learning all at once.\r\n\r\nYou could finally understand the big picture of how it all works together. If you had a clear plan, you could learn each part of Rails in exactly the right order. You could even cut through error messages like they were butter. What if nothing stood in the way of you learning Rails and getting your app shipped?\r\n<h3>Then the dream of building and launching your Rails app could finally come true.</h3>\r\nBut contrary to the hype, Ruby on Rails does have a crazy difficult learning curve. Rails apps take months and months to build.\r\n<h4>What it took me years to figure out:</h4>\r\nLearning Rails <em>doesn\'t</em> have to be <strong>this</strong> hard. You don’t have to have a CS degree. You don’t have to understand every detail about the Ruby language to build a Rails app. Learn by doing! The best way to learn Ruby on Rails more many is to actually build a Rails app one piece at a time. It’s all about stacking up quick wins that work toward the goal of getting a Rails app finished.\r\n<h4><span style="color: #3b3a3c;">I learned the hard way</span></h4>\r\n<span style="color: #3b3a3c;">It took me a <em>long time</em> to wrap my head around Rails. Let me give you a shortcut so you can save a lot of heartache. If you have a fast track, you will save months (or in my case - years) of wasted time. Not to mention you would avoid a <em>ton</em> of unnecessary pain and heartache.</span>\r\n<h3><span style="color: #3b3a3c;">With my Rails Curve course you will build and deploy a live Rails app in 30 days.</span></h3>\r\n<span style="color: #3b3a3c;">Bypass the learning curve altogether! I will walk you through how to build a web app from start to finish. And you will grow all the skills you need to make your own apps moving forward. In four weeks you’ll get experience with all the tools, concepts and skills that you need to – plan, design, develop and (most importantly) ship a web app.</span>\r\n<h4>Learn by doing</h4>\r\nYou will learn <strong>your</strong> way – by <strong>doing</strong>. After all, you decided to learn Rails so you could <em>build</em> an app – so why not learn by <strong>actually building</strong> <strong>one</strong>?\r\n<h4 style="text-align: left;">By following the method of building <strong>AND</strong> learning at the same time you will...</h4>\r\n<ul>\r\n	<li>Understand the big picture <strong>faster</strong></li>\r\n	<li>Pick up complex skills and concepts <strong>faster</strong></li>\r\n	<li>Avoid getting paralyzed by the tiny details</li>\r\n	<li>Avoid the pain of wasting months studying in-depth concepts</li>\r\n	<li>Punch perfectionism <em>in the face</em></li>\r\n</ul>\r\nInstead of spinning your wheels on learning <em>abstract </em>one-off concepts, <em>Rails Curve</em> will give you:\r\n<h4>a clear <strong>day-by-day plan</strong> for how to build a robust Rails app from <strong>start to finish</strong>.</h4>\r\nEach lesson will include bite-sized video screencasts that will walk you through <strong>exactly</strong> what to do, in plain english. <em>Rails Curve</em> gives you a solid path of <em>exactly</em> what to learn in <em>exactly</em> the right order. You will quickly move step by step through the process and pick up skills in each lesson until you have a completed (live) web app and the skills you need to dive into even more advanced material.\r\n<h4>As you move through each lesson, you will get a solid foundation of the key concepts and get <strong>first-hand experience</strong> on how they all work <em><strong>together</strong></em>.</h4>\r\nAnd no dull copy/pasting is necessary, you will write code yourself and learn the what, why and how as you go. Plus, everything is based on Rails 4 so you’ll have the latest and greatest training for Rails.\r\n<h4 style="text-align: left;"><em>Rails Curve</em> will <strong>jump-start</strong> your understanding of key elements like:</h4>\r\n<div class="row">\r\n<ul class="col-md-6">\r\n	<li>Ruby</li>\r\n	<li>Gems</li>\r\n	<li>Ruby on Rails Framework</li>\r\n	<li>Command Line (Terminal)</li>\r\n	<li>MVC pattern (Model View Controller)</li>\r\n	<li>Object-Oriented Programming</li>\r\n	<li>Active Record</li>\r\n	<li>Databases</li>\r\n	<li>HTML &amp; ERB</li>\r\n	<li>CSS and Sass</li>\r\n	<li>Javascript and CoffeeScript</li>\r\n</ul>\r\n<ul class="col-md-6">\r\n	<li>Front-end Frameworks</li>\r\n	<li>Deployment</li>\r\n	<li>Version Control</li>\r\n	<li>Validation</li>\r\n	<li>User Authentication</li>\r\n	<li>UI Design</li>\r\n	<li>UX Design</li>\r\n	<li>Project Management</li>\r\n	<li>and more...</li>\r\n</ul>\r\n</div>\r\n<h3>You can’t build an app without the right tools</h3>\r\nSo you will get hands-on experience with all of the standard tools like the command-line (Terminal), a text editor (like <em>Sublime</em> Text), <em>Git</em>, <em>Github</em>, <em>Heroku</em>, <em>Twitter Bootstrap</em>, <em>Devise</em>, and more. You will learn the ins-and-outs of all the tools you <em>gotta have</em> in your Rails toolbelt.\r\n<h4>With <em>Rails Curve</em> you will learn <strong>exactly</strong> how to do things like ...</h4>\r\n<ul>\r\n	<li>use the command-line to create a new blank-slate app</li>\r\n	<li>use a single command to create a rails server on your computer</li>\r\n	<li>use <em>Git</em> to manage your source code and push it to an online repo at <em>Github</em></li>\r\n	<li>use the command-line to generate the pages and elements of your app on the fly</li>\r\n	<li>use the command-line to manage your database</li>\r\n	<li>use the command-line to push your app to a live server on <em>Heroku</em></li>\r\n	<li>use <em>Twitter Bootstrap</em> to rapidly style your app - with <strong>no</strong> design experience needed.</li>\r\n	<li>use the <em>Devise</em> gem to create user sign-up and sign-in in a matter of minutes.</li>\r\n	<li>and a lot more</li>\r\n</ul>\r\n<h3>Learn to deal with <strong>error messages</strong>.</h3>\r\nThe<em> Rails Curve </em>course will teach you how to <strong>eliminate</strong> "getting stuck" forever. You’ll get <strong>real-world experience</strong> troubleshooting error messages for yourself <em>quickly</em> so you never have to slam on the breaks again. You will master the art of ...\r\n<ul>\r\n	<li>Reading error messages to get clues about what part of your app needs fixing</li>\r\n	<li>Googling and searching online dev communities to get past any error <em>in minutes</em></li>\r\n	<li>checking <em>Rails</em> and <em>Heroku</em> error logs using your trusty command line</li>\r\n</ul>\r\n<h3>By the time you finish <em>Rails Curve</em> you will have...</h3>\r\n<ul>\r\n	<li>seen how to make a solid plan you can follow</li>\r\n	<li>created all the key features needed for the app</li>\r\n	<li>sketched &amp; styled a beautiful UI on the front-end of the app</li>\r\n	<li>created a solid database back-end for the app</li>\r\n	<li>implemented a user authentication system for users to sign in and sign out</li>\r\n	<li>deployed your app to a live server</li>\r\n	<li>grown a slew of foundational web development skills in the process</li>\r\n</ul>\r\n<h3>You can <em>finally</em> get the <strong>traction</strong> you need</h3>\r\nWhen you complete <em>Rails Curve</em> you’ll feel confident that you can build apps from start to finish on your own. You’ll be totally certain that you can get past any error or issue. Your excitement won’t diminish because you’ll have a solid plan that moves you to progress. You will be relieved that you don’t have to spend thousands of dollars and months of time to learn Rails. And you can finally feel in control because you will understand what each line of code does.\r\n<h3>So, fast forward 30 days and you have finished with <em>Rails Curve</em>. <strong>Now what?</strong></h3>\r\nBack to the obscure world of not knowing what’s next? <strong><em>No way</em>.</strong> When you complete the lessons you will definitely want to transition into building your own app idea. So <em>Rails Curve</em> includes outro lessons that will walk you through how to <strong>create your own plan</strong> for <em>your</em> app. This will leave you with a solid action plan that you can follow from start to finish. If you have unique issues or you need a push in the right direction, I also offer <a href="mailto:me@tyrichards.com">Rails coaching</a>. My goal is to see everyone who goes through <em>Rails Curve</em> build and launch their own apps and build their business or career with great success and without burning out.\r\n<h2>Join other developers who learn by doing</h2>\r\nWith <em>Rails Curve</em> you will build a <em>real</em> Rails app from start to finish and get all the skills you need to move forward and build your own app.\r\n\r\nLet my <em>Rails Curve </em>course take away the agony of learning Ruby on Rails.', 'Rails Curve', '', 'inherit', 'open', 'open', '', '105-revision-v1', '', '', '2014-09-04 12:03:59', '2014-09-04 17:03:59', '', 105, 'http://dev.dorails.com/railsvitamins/105-revision-v1/', 0, 'revision', '', 0),
(282, 1, '2014-09-04 12:07:57', '2014-09-04 17:07:57', 'You’re halfway through your third Ruby on Rails book and you feel like you\'ve hit a wall. It’s 1 o’clock in the morning and your shoulders are feeling heavy. You\'re ready to quit for the night, but for months you\'ve kept telling yourself:\r\n<h3>“If I just finish this last Rails course, <strong>then</strong> I\'ll be ready to start building my Rails app”.</h3>\r\nYou decide to power through and do yet another Ruby exercise on lambda’s and hashes. An hour later, your eyes are glazed over with confusion and exhaustion.\r\n<h4>You feel more like a transcriptionist <em>monkey</em> than a developer.</h4>\r\nYou now have <em>one more</em> refactoring technique swirling around in your brain with no way to use it. You’re officially fried.\r\n\r\nThat’s when you see the next section has an <em>example</em>. "Woohoo!” You can actually <strong>apply</strong> your knowledge!\r\n<h4>But right off the bat you get stuck with another<em> lovely</em> error message.</h4>\r\nUgggh! After an hour and a half of putzing around to get past that, you slam your laptop shut. Now your eyes are wide open and bloodshot. You’re face is turning red. You throw the book across the room into the trash can. Kobe! With teeth clenched you say to yourself,\r\n<h3>"It should <em>not</em> be <strong>THIS</strong> hard!”</h3>\r\nEveryone told you that Rails was <em>easy</em>. But you’ve learned nothing. You’ve accomplished nothing. At this rate you will <strong>never</strong> get your app built.\r\n\r\nYou’re mind is racing as you lay in bed. You’re flailing to find <em>some</em> way to make this work.\r\n<h4>“If I would’ve got that Computer Science degree, I could do this…”\r\n“I should\'ve picked the right Rails courses, then I wouldn’t have wasted the last 9 months”\r\n"If I wasn’t forced to learn so many things at once...”</h4>\r\nOn and on.\r\n\r\nAt this point so many concepts have been thrown at you, but you have <strong>no clue</strong> about how to put them all together.\r\n<h4>You understand HTML &amp; CSS but this is a different monster.</h4>\r\nWhat the hell is MVC? Should you tackle front-end styling first? or back-end database stuff? Should you learn Ruby first before Rails? How do you configure a server for Rails? You can feel your dream slowly being crushed by the load.\r\n\r\nYou click off the light and close your eyes. Now you feel like your sinking into the bed.\r\n<h4>This is not your fault.</h4>\r\nThe learning curve is just too steep. The resources out there are too advanced. Maybe apps are not your thing. Maybe you should just stick to what you know best. You could just go back to making plain \'ol websites and forget all about building apps. So much time and effort would be wasted if you quit now, but maybe it would be best to cut your losses. As dawn breaks, you drift off to sleep.\r\n<h3>But what would it be like if you <em><strong>could</strong></em> build a finished Rails app?</h3>\r\nWhat if you could get it done and live in a matter of <em>days</em>. Seriously, I know it sounds crazy. Imagine there\'s no learning curve. Just you and the code. Doing and learning all at once.\r\n\r\nYou could finally understand the big picture of how it all works together. If you had a clear plan, you could learn each part of Rails in exactly the right order. You could even cut through error messages like they were butter. What if nothing stood in the way of you learning Rails and getting your app shipped?\r\n<h3>Then the dream of building and launching your Rails app could finally come true.</h3>\r\nBut contrary to the hype, Ruby on Rails does have a crazy difficult learning curve. Rails apps take months and months to build.\r\n<h4>What it took me years to figure out:</h4>\r\nLearning Rails <em>doesn\'t</em> have to be <strong>this</strong> hard. You don’t have to have a CS degree. You don’t have to understand every detail about the Ruby language to build a Rails app. Learn by doing! The best way to learn Ruby on Rails more many is to actually build a Rails app one piece at a time. It’s all about stacking up quick wins that work toward the goal of getting a Rails app finished.\r\n<h4><span style="color: #3b3a3c;">I learned the hard way</span></h4>\r\n<span style="color: #3b3a3c;">It took me a <em>long time</em> to wrap my head around Rails. Let me give you a shortcut so you can save a lot of heartache. If you have a fast track, you will save months (or in my case - years) of wasted time. Not to mention you would avoid a <em>ton</em> of unnecessary pain and heartache.</span>\r\n<h3><span style="color: #3b3a3c;">With my Rails Curve course you will build and deploy a live Rails app in 30 days.</span></h3>\r\n<span style="color: #3b3a3c;">Bypass the learning curve altogether! I will walk you through how to build a web app from start to finish. And you will grow all the skills you need to make your own apps moving forward. In four weeks you’ll get experience with all the tools, concepts and skills that you need to – plan, design, develop and (most importantly) ship a web app.</span>\r\n<h4>Learn by doing</h4>\r\nYou will learn <strong>your</strong> way – by <strong>doing</strong>. After all, you decided to learn Rails so you could <em>build</em> an app – so why not learn by <strong>actually building</strong> <strong>one</strong>?\r\n<h4 style="text-align: left;">By following the method of building <strong>AND</strong> learning at the same time you will...</h4>\r\n<ul>\r\n	<li>Understand the big picture <strong>faster</strong></li>\r\n	<li>Pick up complex skills and concepts <strong>faster</strong></li>\r\n	<li>Avoid getting paralyzed by the tiny details</li>\r\n	<li>Avoid the pain of wasting months studying in-depth concepts</li>\r\n	<li>Punch perfectionism <em>in the face</em></li>\r\n</ul>\r\nInstead of spinning your wheels on learning <em>abstract </em>one-off concepts, <em>Rails Curve</em> will give you:\r\n<h4>a clear <strong>day-by-day plan</strong> for how to build a robust Rails app from <strong>start to finish</strong>.</h4>\r\nEach lesson will include bite-sized video screencasts that will walk you through <strong>exactly</strong> what to do, in plain english. <em>Rails Curve</em> gives you a solid path of <em>exactly</em> what to learn in <em>exactly</em> the right order. You will quickly move step by step through the process and pick up skills in each lesson until you have a completed (live) web app and the skills you need to dive into even more advanced material.\r\n<h4>As you move through each lesson, you will get a solid foundation of the key concepts and get <strong>first-hand experience</strong> on how they all work <em><strong>together</strong></em>.</h4>\r\nAnd no dull copy/pasting is necessary, you will write code yourself and learn the what, why and how as you go. Plus, everything is based on Rails 4 so you’ll have the latest and greatest training for Rails.\r\n<h4 style="text-align: left;"><em>Rails Curve</em> will <strong>jump-start</strong> your understanding of key elements like:</h4>\r\n<div class="row">\r\n<ul class="col-md-6">\r\n	<li>Ruby</li>\r\n	<li>Gems</li>\r\n	<li>Ruby on Rails Framework</li>\r\n	<li>Command Line (Terminal)</li>\r\n	<li>MVC pattern (Model View Controller)</li>\r\n	<li>Object-Oriented Programming</li>\r\n	<li>Active Record</li>\r\n	<li>Databases</li>\r\n	<li>HTML &amp; ERB</li>\r\n	<li>CSS and Sass</li>\r\n	<li>Javascript and CoffeeScript</li>\r\n</ul>\r\n<ul class="col-md-6">\r\n	<li>Front-end Frameworks</li>\r\n	<li>Deployment</li>\r\n	<li>Version Control</li>\r\n	<li>Validation</li>\r\n	<li>User Authentication</li>\r\n	<li>UI Design</li>\r\n	<li>UX Design</li>\r\n	<li>Project Management</li>\r\n	<li>and more...</li>\r\n</ul>\r\n</div>\r\n<h3>You can’t build an app without the right tools</h3>\r\nSo you will get hands-on experience with all of the standard tools like the command-line (Terminal), a text editor (like <em>Sublime</em> Text), <em>Git</em>, <em>Github</em>, <em>Heroku</em>, <em>Twitter Bootstrap</em>, <em>Devise</em>, and more. You will learn the ins-and-outs of all the tools you <em>gotta have</em> in your Rails toolbelt.\r\n<h4>With <em>Rails Curve</em> you will learn <strong>exactly</strong> how to do things like ...</h4>\r\n<ul>\r\n	<li>use the command-line to create a new blank-slate app</li>\r\n	<li>use a single command to create a rails server on your computer</li>\r\n	<li>use <em>Git</em> to manage your source code and push it to an online repo at <em>Github</em></li>\r\n	<li>use the command-line to generate the pages and elements of your app on the fly</li>\r\n	<li>use the command-line to manage your database</li>\r\n	<li>use the command-line to push your app to a live server on <em>Heroku</em></li>\r\n	<li>use <em>Twitter Bootstrap</em> to rapidly style your app - with <strong>no</strong> design experience needed.</li>\r\n	<li>use the <em>Devise</em> gem to create user sign-up and sign-in in a matter of minutes.</li>\r\n	<li>and a lot more</li>\r\n</ul>\r\n<h3>Learn to deal with <strong>error messages</strong>.</h3>\r\nThe<em> Rails Curve </em>course will teach you how to <strong>eliminate</strong> "getting stuck" forever. You’ll get <strong>real-world experience</strong> troubleshooting error messages for yourself <em>quickly</em> so you never have to slam on the breaks again. You will master the art of ...\r\n<ul>\r\n	<li>Reading error messages to get clues about what part of your app needs fixing</li>\r\n	<li>Googling and searching online dev communities to get past any error <em>in minutes</em></li>\r\n	<li>checking <em>Rails</em> and <em>Heroku</em> error logs using your trusty command line</li>\r\n</ul>\r\n<h3>By the time you finish <em>Rails Curve</em> you will have...</h3>\r\n<ul>\r\n	<li>seen how to make a solid plan you can follow</li>\r\n	<li>created all the key features needed for the app</li>\r\n	<li>sketched &amp; styled a beautiful UI on the front-end of the app</li>\r\n	<li>created a solid database back-end for the app</li>\r\n	<li>implemented a user authentication system for users to sign in and sign out</li>\r\n	<li>deployed your app to a live server</li>\r\n	<li>grown a slew of foundational web development skills in the process</li>\r\n</ul>\r\n<h3>You can <em>finally</em> get the <strong>traction</strong> you need</h3>\r\nWhen you complete <em>Rails Curve</em> you’ll feel confident that you can build apps from start to finish on your own. You’ll be totally certain that you can get past any error or issue. Your excitement won’t diminish because you’ll have a solid plan that moves you to progress. You will be relieved that you don’t have to spend thousands of dollars and months of time to learn Rails. And you can finally feel in control because you will understand what each line of code does.\r\n<h3>So, fast forward 30 days and you have finished with <em>Rails Curve</em>. <strong>Now what?</strong></h3>\r\nBack to the obscure world of not knowing what’s next? <strong><em>No way</em>.</strong> When you complete the lessons you will definitely want to transition into building your own app idea. So <em>Rails Curve</em> includes outro lessons that will walk you through how to <strong>create your own plan</strong> for <em>your</em> app. This will leave you with a solid action plan that you can follow from start to finish. If you have unique issues or you need a push in the right direction, I also offer <a href="mailto:me@tyrichards.com">Rails coaching</a>. My goal is to see everyone who goes through <em>Rails Curve</em> build and launch their own apps and build their business or career with great success and without burning out.\r\n<h2>Join other developers who learn by doing</h2>\r\nWith <em>Rails Curve</em> you will build a <em>real</em> Rails app from start to finish and get all the skills you need to move forward and build your own app.\r\n\r\nLet my <em>Rails Curve </em>course take away the agony of learning Ruby on Rails.', '30-Day Rails App', '', 'inherit', 'open', 'open', '', '105-revision-v1', '', '', '2014-09-04 12:07:57', '2014-09-04 17:07:57', '', 105, 'http://dev.dorails.com/railsvitamins/105-revision-v1/', 0, 'revision', '', 0),
(283, 1, '2014-09-04 12:08:33', '2014-09-04 17:08:33', 'You’re halfway through your third Ruby on Rails book and you feel like you\'ve hit a wall. It’s 1 o’clock in the morning and your shoulders are feeling heavy. You\'re ready to quit for the night, but for months you\'ve kept telling yourself:\r\n<h3>“If I just finish this last Rails course, <strong>then</strong> I\'ll be ready to start building my Rails app”.</h3>\r\nYou decide to power through and do yet another Ruby exercise on lambda’s and hashes. An hour later, your eyes are glazed over with confusion and exhaustion.\r\n<h4>You feel more like a transcriptionist <em>monkey</em> than a developer.</h4>\r\nYou now have <em>one more</em> refactoring technique swirling around in your brain with no way to use it. You’re officially fried.\r\n\r\nThat’s when you see the next section has an <em>example</em>. "Woohoo!” You can actually <strong>apply</strong> your knowledge!\r\n<h4>But right off the bat you get stuck with another<em> lovely</em> error message.</h4>\r\nUgggh! After an hour and a half of putzing around to get past that, you slam your laptop shut. Now your eyes are wide open and bloodshot. You’re face is turning red. You throw the book across the room into the trash can. Kobe! With teeth clenched you say to yourself,\r\n<h3>"It should <em>not</em> be <strong>THIS</strong> hard!”</h3>\r\nEveryone told you that Rails was <em>easy</em>. But you’ve learned nothing. You’ve accomplished nothing. At this rate you will <strong>never</strong> get your app built.\r\n\r\nYou’re mind is racing as you lay in bed. You’re flailing to find <em>some</em> way to make this work.\r\n<h4>“If I would’ve got that Computer Science degree, I could do this…”\r\n“I should\'ve picked the right Rails courses, then I wouldn’t have wasted the last 9 months”\r\n"If I wasn’t forced to learn so many things at once...”</h4>\r\nOn and on.\r\n\r\nAt this point so many concepts have been thrown at you, but you have <strong>no clue</strong> about how to put them all together.\r\n<h4>You understand HTML &amp; CSS but this is a different monster.</h4>\r\nWhat the hell is MVC? Should you tackle front-end styling first? or back-end database stuff? Should you learn Ruby first before Rails? How do you configure a server for Rails? You can feel your dream slowly being crushed by the load.\r\n\r\nYou click off the light and close your eyes. Now you feel like your sinking into the bed.\r\n<h4>This is not your fault.</h4>\r\nThe learning curve is just too steep. The resources out there are too advanced. Maybe apps are not your thing. Maybe you should just stick to what you know best. You could just go back to making plain \'ol websites and forget all about building apps. So much time and effort would be wasted if you quit now, but maybe it would be best to cut your losses. As dawn breaks, you drift off to sleep.\r\n<h3>But what would it be like if you <em><strong>could</strong></em> build a finished Rails app?</h3>\r\nWhat if you could get it done and live in a matter of <em>days</em>. Seriously, I know it sounds crazy. Imagine there\'s no learning curve. Just you and the code. Doing and learning all at once.\r\n\r\nYou could finally understand the big picture of how it all works together. If you had a clear plan, you could learn each part of Rails in exactly the right order. You could even cut through error messages like they were butter. What if nothing stood in the way of you learning Rails and getting your app shipped?\r\n<h3>Then the dream of building and launching your Rails app could finally come true.</h3>\r\nBut contrary to the hype, Ruby on Rails does have a crazy difficult learning curve. Rails apps take months and months to build.\r\n<h4>What it took me years to figure out:</h4>\r\nLearning Rails <em>doesn\'t</em> have to be <strong>this</strong> hard. You don’t have to have a CS degree. You don’t have to understand every detail about the Ruby language to build a Rails app. Learn by doing! The best way to learn Ruby on Rails more many is to actually build a Rails app one piece at a time. It’s all about stacking up quick wins that work toward the goal of getting a Rails app finished.\r\n<h4><span style="color: #3b3a3c;">I learned the hard way</span></h4>\r\n<span style="color: #3b3a3c;">It took me a <em>long time</em> to wrap my head around Rails. Let me give you a shortcut so you can save a lot of heartache. If you have a fast track, you will save months (or in my case - years) of wasted time. Not to mention you would avoid a <em>ton</em> of unnecessary pain and heartache.</span>\r\n<h3><span style="color: #3b3a3c;">With my Rails Curve course you will build and deploy a live Rails app in 30 days.</span></h3>\r\n<span style="color: #3b3a3c;">Bypass the learning curve altogether! I will walk you through how to build a web app from start to finish. And you will grow all the skills you need to make your own apps moving forward. In four weeks you’ll get experience with all the tools, concepts and skills that you need to – plan, design, develop and (most importantly) ship a web app.</span>\r\n<h4>Learn by doing</h4>\r\nYou will learn <strong>your</strong> way – by <strong>doing</strong>. After all, you decided to learn Rails so you could <em>build</em> an app – so why not learn by <strong>actually building</strong> <strong>one</strong>?\r\n<h4 style="text-align: left;">By following the method of building <strong>AND</strong> learning at the same time you will...</h4>\r\n<ul>\r\n	<li>Understand the big picture <strong>faster</strong></li>\r\n	<li>Pick up complex skills and concepts <strong>faster</strong></li>\r\n	<li>Avoid getting paralyzed by the tiny details</li>\r\n	<li>Avoid the pain of wasting months studying in-depth concepts</li>\r\n	<li>Punch perfectionism <em>in the face</em></li>\r\n</ul>\r\nInstead of spinning your wheels on learning <em>abstract </em>one-off concepts, <em>Rails Curve</em> will give you:\r\n<h4>a clear <strong>day-by-day plan</strong> for how to build a robust Rails app from <strong>start to finish</strong>.</h4>\r\nEach lesson will include bite-sized video screencasts that will walk you through <strong>exactly</strong> what to do, in plain english. <em>Rails Curve</em> gives you a solid path of <em>exactly</em> what to learn in <em>exactly</em> the right order. You will quickly move step by step through the process and pick up skills in each lesson until you have a completed (live) web app and the skills you need to dive into even more advanced material.\r\n<h4>As you move through each lesson, you will get a solid foundation of the key concepts and get <strong>first-hand experience</strong> on how they all work <em><strong>together</strong></em>.</h4>\r\nAnd no dull copy/pasting is necessary, you will write code yourself and learn the what, why and how as you go. Plus, everything is based on Rails 4 so you’ll have the latest and greatest training for Rails.\r\n<h4 style="text-align: left;"><em>Rails Curve</em> will <strong>jump-start</strong> your understanding of key elements like:</h4>\r\n<div class="row">\r\n<ul class="col-md-6">\r\n	<li>Ruby</li>\r\n	<li>Gems</li>\r\n	<li>Ruby on Rails Framework</li>\r\n	<li>Command Line (Terminal)</li>\r\n	<li>MVC pattern (Model View Controller)</li>\r\n	<li>Object-Oriented Programming</li>\r\n	<li>Active Record</li>\r\n	<li>Databases</li>\r\n	<li>HTML &amp; ERB</li>\r\n	<li>CSS and Sass</li>\r\n	<li>Javascript and CoffeeScript</li>\r\n</ul>\r\n<ul class="col-md-6">\r\n	<li>Front-end Frameworks</li>\r\n	<li>Deployment</li>\r\n	<li>Version Control</li>\r\n	<li>Validation</li>\r\n	<li>User Authentication</li>\r\n	<li>UI Design</li>\r\n	<li>UX Design</li>\r\n	<li>Project Management</li>\r\n	<li>and more...</li>\r\n</ul>\r\n</div>\r\n<h3>You can’t build an app without the right tools</h3>\r\nSo you will get hands-on experience with all of the standard tools like the command-line (Terminal), a text editor (like <em>Sublime</em> Text), <em>Git</em>, <em>Github</em>, <em>Heroku</em>, <em>Twitter Bootstrap</em>, <em>Devise</em>, and more. You will learn the ins-and-outs of all the tools you <em>gotta have</em> in your Rails toolbelt.\r\n<h4>With <em>Rails Curve</em> you will learn <strong>exactly</strong> how to do things like ...</h4>\r\n<ul>\r\n	<li>use the command-line to create a new blank-slate app</li>\r\n	<li>use a single command to create a rails server on your computer</li>\r\n	<li>use <em>Git</em> to manage your source code and push it to an online repo at <em>Github</em></li>\r\n	<li>use the command-line to generate the pages and elements of your app on the fly</li>\r\n	<li>use the command-line to manage your database</li>\r\n	<li>use the command-line to push your app to a live server on <em>Heroku</em></li>\r\n	<li>use <em>Twitter Bootstrap</em> to rapidly style your app - with <strong>no</strong> design experience needed.</li>\r\n	<li>use the <em>Devise</em> gem to create user sign-up and sign-in in a matter of minutes.</li>\r\n	<li>and a lot more</li>\r\n</ul>\r\n<h3>Learn to deal with <strong>error messages</strong>.</h3>\r\nThe<em> Rails Curve </em>course will teach you how to <strong>eliminate</strong> "getting stuck" forever. You’ll get <strong>real-world experience</strong> troubleshooting error messages for yourself <em>quickly</em> so you never have to slam on the breaks again. You will master the art of ...\r\n<ul>\r\n	<li>Reading error messages to get clues about what part of your app needs fixing</li>\r\n	<li>Googling and searching online dev communities to get past any error <em>in minutes</em></li>\r\n	<li>checking <em>Rails</em> and <em>Heroku</em> error logs using your trusty command line</li>\r\n</ul>\r\n<h3>By the time you finish <em>Rails Curve</em> you will have...</h3>\r\n<ul>\r\n	<li>seen how to make a solid plan you can follow</li>\r\n	<li>created all the key features needed for the app</li>\r\n	<li>sketched &amp; styled a beautiful UI on the front-end of the app</li>\r\n	<li>created a solid database back-end for the app</li>\r\n	<li>implemented a user authentication system for users to sign in and sign out</li>\r\n	<li>deployed your app to a live server</li>\r\n	<li>grown a slew of foundational web development skills in the process</li>\r\n</ul>\r\n<h3>You can <em>finally</em> get the <strong>traction</strong> you need</h3>\r\nWhen you complete <em>Rails Curve</em> you’ll feel confident that you can build apps from start to finish on your own. You’ll be totally certain that you can get past any error or issue. Your excitement won’t diminish because you’ll have a solid plan that moves you to progress. You will be relieved that you don’t have to spend thousands of dollars and months of time to learn Rails. And you can finally feel in control because you will understand what each line of code does.\r\n<h3>So, fast forward 30 days and you have finished with <em>Rails Curve</em>. <strong>Now what?</strong></h3>\r\nBack to the obscure world of not knowing what’s next? <strong><em>No way</em>.</strong> When you complete the lessons you will definitely want to transition into building your own app idea. So <em>Rails Curve</em> includes outro lessons that will walk you through how to <strong>create your own plan</strong> for <em>your</em> app. This will leave you with a solid action plan that you can follow from start to finish. If you have unique issues or you need a push in the right direction, I also offer <a href="mailto:me@tyrichards.com">Rails coaching</a>. My goal is to see everyone who goes through <em>Rails Curve</em> build and launch their own apps and build their business or career with great success and without burning out.\r\n<h2>Join other developers who learn by doing</h2>\r\nWith <em>Rails Curve</em> you will build a <em>real</em> Rails app from start to finish and get all the skills you need to move forward and build your own app.\r\n\r\nLet my <em>Rails Curve </em>course take away the agony of learning Ruby on Rails.', '30-Day Rails', '', 'inherit', 'open', 'open', '', '105-revision-v1', '', '', '2014-09-04 12:08:33', '2014-09-04 17:08:33', '', 105, 'http://dev.dorails.com/railsvitamins/105-revision-v1/', 0, 'revision', '', 0) ;
INSERT INTO `wp_posts` ( `ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(284, 1, '2014-09-04 12:15:55', '2014-09-04 17:15:55', 'You’re halfway through your third Ruby on Rails book and you feel like you\'ve hit a wall. It’s 1 o’clock in the morning and your shoulders are feeling heavy. You\'re ready to quit for the night, but for months you\'ve kept telling yourself:\r\n<h3>“If I just finish this last Rails course, <strong>then</strong> I\'ll be ready to start building my Rails app”.</h3>\r\nYou decide to power through and do yet another Ruby exercise on lambda’s and hashes. An hour later, your eyes are glazed over with confusion and exhaustion.\r\n<h4>You feel more like a transcriptionist <em>monkey</em> than a developer.</h4>\r\nYou now have <em>one more</em> refactoring technique swirling around in your brain with no way to use it. You’re officially fried.\r\n\r\nThat’s when you see the next section has an <em>example</em>. "Woohoo!” You can actually <strong>apply</strong> your knowledge!\r\n<h4>But right off the bat you get stuck with another<em> lovely</em> error message.</h4>\r\nUgggh! After an hour and a half of putzing around to get past that, you slam your laptop shut. Now your eyes are wide open and bloodshot. You’re face is turning red. You throw the book across the room into the trash can. Kobe! With teeth clenched you say to yourself,\r\n<h3>"It should <em>not</em> be <strong>THIS</strong> hard!”</h3>\r\nEveryone told you that Rails was <em>easy</em>. But you’ve learned nothing. You’ve accomplished nothing. At this rate you will <strong>never</strong> get your app built.\r\n\r\nYou’re mind is racing as you lay in bed. You’re flailing to find <em>some</em> way to make this work.\r\n\r\n<strong>“If I would’ve got that Computer Science degree, I could do this…”</strong>\r\n\r\n<strong>“I should\'ve picked the right Rails courses, then I wouldn’t have wasted the last 9 months”</strong>\r\n\r\n<strong>"If I wasn’t forced to learn so many things at once...”</strong>\r\n\r\nOn and on.\r\n\r\nAt this point so many concepts have been thrown at you, but you have <strong>no clue</strong> about how to put them all together.\r\n<h4>You understand HTML &amp; CSS but this is a different monster.</h4>\r\nWhat the hell is MVC? Should you tackle front-end styling first? or back-end database stuff? Should you learn Ruby first before Rails? How do you configure a server for Rails? You can feel your dream slowly being crushed by the load.\r\n\r\nYou click off the light and close your eyes. Now you feel like your sinking into the bed.\r\n<h4>This is not your fault.</h4>\r\nThe learning curve is just too steep. The resources out there are too advanced. Maybe apps are not your thing. Maybe you should just stick to what you know best. You could just go back to making plain \'ol websites and forget all about building apps. So much time and effort would be wasted if you quit now, but maybe it would be best to cut your losses. As dawn breaks, you drift off to sleep.\r\n<h3>But what would it be like if you <em><strong>could</strong></em> build a finished Rails app?</h3>\r\nWhat if you could get it done and live in a matter of <em>days</em>. Seriously, I know it sounds crazy. Imagine there\'s no learning curve. Just you and the code. Doing and learning all at once.\r\n\r\nYou could finally understand the big picture of how it all works together. If you had a clear plan, you could learn each part of Rails in exactly the right order. You could even cut through error messages like they were butter. What if nothing stood in the way of you learning Rails and getting your app shipped?\r\n<h3>Then the dream of building and launching your Rails app could finally come true.</h3>\r\nBut contrary to the hype, Ruby on Rails does have a crazy difficult learning curve. Rails apps take months and months to build.\r\n<h4>What it took me years to figure out:</h4>\r\nLearning Rails <em>doesn\'t</em> have to be <strong>this</strong> hard. You don’t have to have a CS degree. You don’t have to understand every detail about the Ruby language to build a Rails app. Learn by doing! The best way to learn Ruby on Rails more many is to actually build a Rails app one piece at a time. It’s all about stacking up quick wins that work toward the goal of getting a Rails app finished.\r\n<h4><span style="color: #3b3a3c;">I learned the hard way</span></h4>\r\n<span style="color: #3b3a3c;">It took me a <em>long time</em> to wrap my head around Rails. Let me give you a shortcut so you can save a lot of heartache. If you have a fast track, you will save months (or in my case - years) of wasted time. Not to mention you would avoid a <em>ton</em> of unnecessary pain and heartache.</span>\r\n<h3><span style="color: #3b3a3c;">With my Rails Curve course you will build and deploy a live Rails app in 30 days.</span></h3>\r\n<span style="color: #3b3a3c;">Bypass the learning curve altogether! I will walk you through how to build a web app from start to finish. And you will grow all the skills you need to make your own apps moving forward. In four weeks you’ll get experience with all the tools, concepts and skills that you need to – plan, design, develop and (most importantly) ship a web app.</span>\r\n<h4>Learn by doing</h4>\r\nYou will learn <strong>your</strong> way – by <strong>doing</strong>. After all, you decided to learn Rails so you could <em>build</em> an app – so why not learn by <strong>actually building</strong> <strong>one</strong>?\r\n<h4 style="text-align: left;">By following the method of building <strong>AND</strong> learning at the same time you will...</h4>\r\n<ul>\r\n	<li>Understand the big picture <strong>faster</strong></li>\r\n	<li>Pick up complex skills and concepts <strong>faster</strong></li>\r\n	<li>Avoid getting paralyzed by the tiny details</li>\r\n	<li>Avoid the pain of wasting months studying in-depth concepts</li>\r\n	<li>Punch perfectionism <em>in the face</em></li>\r\n</ul>\r\nInstead of spinning your wheels on learning <em>abstract </em>one-off concepts, <em>Rails Curve</em> will give you:\r\n<h4>a clear <strong>day-by-day plan</strong> for how to build a robust Rails app from <strong>start to finish</strong>.</h4>\r\nEach lesson will include bite-sized video screencasts that will walk you through <strong>exactly</strong> what to do, in plain english. <em>Rails Curve</em> gives you a solid path of <em>exactly</em> what to learn in <em>exactly</em> the right order. You will quickly move step by step through the process and pick up skills in each lesson until you have a completed (live) web app and the skills you need to dive into even more advanced material.\r\n<h4>As you move through each lesson, you will get a solid foundation of the key concepts and get <strong>first-hand experience</strong> on how they all work <em><strong>together</strong></em>.</h4>\r\nAnd no dull copy/pasting is necessary, you will write code yourself and learn the what, why and how as you go. Plus, everything is based on Rails 4 so you’ll have the latest and greatest training for Rails.\r\n<h4 style="text-align: left;"><em>Rails Curve</em> will <strong>jump-start</strong> your understanding of key elements like:</h4>\r\n<div class="row">\r\n<ul class="col-md-6">\r\n	<li>Ruby</li>\r\n	<li>Gems</li>\r\n	<li>Ruby on Rails Framework</li>\r\n	<li>Command Line (Terminal)</li>\r\n	<li>MVC pattern (Model View Controller)</li>\r\n	<li>Object-Oriented Programming</li>\r\n	<li>Active Record</li>\r\n	<li>Databases</li>\r\n	<li>HTML &amp; ERB</li>\r\n	<li>CSS and Sass</li>\r\n	<li>Javascript and CoffeeScript</li>\r\n</ul>\r\n<ul class="col-md-6">\r\n	<li>Front-end Frameworks</li>\r\n	<li>Deployment</li>\r\n	<li>Version Control</li>\r\n	<li>Validation</li>\r\n	<li>User Authentication</li>\r\n	<li>UI Design</li>\r\n	<li>UX Design</li>\r\n	<li>Project Management</li>\r\n	<li>and more...</li>\r\n</ul>\r\n</div>\r\n<h3>You can’t build an app without the right tools</h3>\r\nSo you will get hands-on experience with all of the standard tools like the command-line (Terminal), a text editor (like <em>Sublime</em> Text), <em>Git</em>, <em>Github</em>, <em>Heroku</em>, <em>Twitter Bootstrap</em>, <em>Devise</em>, and more. You will learn the ins-and-outs of all the tools you <em>gotta have</em> in your Rails toolbelt.\r\n<h4>With <em>Rails Curve</em> you will learn <strong>exactly</strong> how to do things like ...</h4>\r\n<ul>\r\n	<li>use the command-line to create a new blank-slate app</li>\r\n	<li>use a single command to create a rails server on your computer</li>\r\n	<li>use <em>Git</em> to manage your source code and push it to an online repo at <em>Github</em></li>\r\n	<li>use the command-line to generate the pages and elements of your app on the fly</li>\r\n	<li>use the command-line to manage your database</li>\r\n	<li>use the command-line to push your app to a live server on <em>Heroku</em></li>\r\n	<li>use <em>Twitter Bootstrap</em> to rapidly style your app - with <strong>no</strong> design experience needed.</li>\r\n	<li>use the <em>Devise</em> gem to create user sign-up and sign-in in a matter of minutes.</li>\r\n	<li>and a lot more</li>\r\n</ul>\r\n<h3>Learn to deal with <strong>error messages</strong>.</h3>\r\nThe<em> Rails Curve </em>course will teach you how to <strong>eliminate</strong> "getting stuck" forever. You’ll get <strong>real-world experience</strong> troubleshooting error messages for yourself <em>quickly</em> so you never have to slam on the breaks again. You will master the art of ...\r\n<ul>\r\n	<li>Reading error messages to get clues about what part of your app needs fixing</li>\r\n	<li>Googling and searching online dev communities to get past any error <em>in minutes</em></li>\r\n	<li>checking <em>Rails</em> and <em>Heroku</em> error logs using your trusty command line</li>\r\n</ul>\r\n<h3>By the time you finish <em>Rails Curve</em> you will have...</h3>\r\n<ul>\r\n	<li>seen how to make a solid plan you can follow</li>\r\n	<li>created all the key features needed for the app</li>\r\n	<li>sketched &amp; styled a beautiful UI on the front-end of the app</li>\r\n	<li>created a solid database back-end for the app</li>\r\n	<li>implemented a user authentication system for users to sign in and sign out</li>\r\n	<li>deployed your app to a live server</li>\r\n	<li>grown a slew of foundational web development skills in the process</li>\r\n</ul>\r\n<h3>You can <em>finally</em> get the <strong>traction</strong> you need</h3>\r\nWhen you complete <em>Rails Curve</em> you’ll feel confident that you can build apps from start to finish on your own. You’ll be totally certain that you can get past any error or issue. Your excitement won’t diminish because you’ll have a solid plan that moves you to progress. You will be relieved that you don’t have to spend thousands of dollars and months of time to learn Rails. And you can finally feel in control because you will understand what each line of code does.\r\n<h3>So, fast forward 30 days and you have finished with <em>Rails Curve</em>. <strong>Now what?</strong></h3>\r\nBack to the obscure world of not knowing what’s next? <strong><em>No way</em>.</strong> When you complete the lessons you will definitely want to transition into building your own app idea. So <em>Rails Curve</em> includes outro lessons that will walk you through how to <strong>create your own plan</strong> for <em>your</em> app. This will leave you with a solid action plan that you can follow from start to finish. If you have unique issues or you need a push in the right direction, I also offer <a href="mailto:me@tyrichards.com">Rails coaching</a>. My goal is to see everyone who goes through <em>Rails Curve</em> build and launch their own apps and build their business or career with great success and without burning out.\r\n<h2>Join other developers who learn by doing</h2>\r\nWith <em>Rails Curve</em> you will build a <em>real</em> Rails app from start to finish and get all the skills you need to move forward and build your own app.\r\n\r\nLet my <em>Rails Curve </em>course take away the agony of learning Ruby on Rails.', '30-Day Rails', '', 'inherit', 'open', 'open', '', '105-revision-v1', '', '', '2014-09-04 12:15:55', '2014-09-04 17:15:55', '', 105, 'http://dev.dorails.com/railsvitamins/105-revision-v1/', 0, 'revision', '', 0),
(285, 1, '2014-09-04 12:17:17', '2014-09-04 17:17:17', 'You’re halfway through your third Ruby on Rails book and you feel like you\'ve hit a wall. It’s 1 o’clock in the morning and your shoulders are feeling heavy. You\'re ready to quit for the night, but for months you\'ve kept telling yourself:\r\n<h3>“If I just finish this last Rails course, <strong>then</strong> I\'ll be ready to start building my Rails app”.</h3>\r\nYou decide to power through and do yet another Ruby exercise on lambda’s and hashes. An hour later, your eyes are glazed over with confusion and exhaustion.\r\n<h4>You feel more like a transcriptionist <em>monkey</em> than a developer.</h4>\r\nYou now have <em>one more</em> refactoring technique swirling around in your brain with no way to use it. You’re officially fried.\r\n\r\nThat’s when you see the next section has an <em>example</em>. "Woohoo!” You can actually <strong>apply</strong> your knowledge!\r\n<h4>But right off the bat you get stuck with another<em> lovely</em> error message.</h4>\r\nUgggh! After an hour and a half of putzing around to get past that, you slam your laptop shut. Now your eyes are wide open and bloodshot. You’re face is turning red. You throw the book across the room into the trash can. Kobe! With teeth clenched you say to yourself,\r\n<h3>"It should <em>not</em> be <strong>THIS</strong> hard!”</h3>\r\nEveryone told you that Rails was <em>easy</em>. But you’ve learned nothing. You’ve accomplished nothing. At this rate you will <strong>never</strong> get your app built.\r\n\r\nYou’re mind is racing as you lay in bed. You’re flailing to find <em>some</em> way to make this work.\r\n<h5>“If I would’ve got that Computer Science degree, I could do this…”</h5>\r\n<h5>“I should\'ve picked the right Rails courses, then I wouldn’t have wasted the last 9 months”</h5>\r\n<h5>"If I wasn’t forced to learn so many things at once...”</h5>\r\nOn and on.\r\n\r\nAt this point so many concepts have been thrown at you, but you have <strong>no clue</strong> about how to put them all together.\r\n<h4>You understand HTML &amp; CSS but this is a different monster.</h4>\r\nWhat the hell is MVC? Should you tackle front-end styling first? or back-end database stuff? Should you learn Ruby first before Rails? How do you configure a server for Rails? You can feel your dream slowly being crushed by the load.\r\n\r\nYou click off the light and close your eyes. Now you feel like your sinking into the bed.\r\n<h4>This is not your fault.</h4>\r\nThe learning curve is just too steep. The resources out there are too advanced. Maybe apps are not your thing. Maybe you should just stick to what you know best. You could just go back to making plain \'ol websites and forget all about building apps. So much time and effort would be wasted if you quit now, but maybe it would be best to cut your losses. As dawn breaks, you drift off to sleep.\r\n<h3>But what would it be like if you <em><strong>could</strong></em> build a finished Rails app?</h3>\r\nWhat if you could get it done and live in a matter of <em>days</em>. Seriously, I know it sounds crazy. Imagine there\'s no learning curve. Just you and the code. Doing and learning all at once.\r\n\r\nYou could finally understand the big picture of how it all works together. If you had a clear plan, you could learn each part of Rails in exactly the right order. You could even cut through error messages like they were butter. What if nothing stood in the way of you learning Rails and getting your app shipped?\r\n<h3>Then the dream of building and launching your Rails app could finally come true.</h3>\r\nBut contrary to the hype, Ruby on Rails does have a crazy difficult learning curve. Rails apps take months and months to build.\r\n<h4>What it took me years to figure out:</h4>\r\nLearning Rails <em>doesn\'t</em> have to be <strong>this</strong> hard. You don’t have to have a CS degree. You don’t have to understand every detail about the Ruby language to build a Rails app. Learn by doing! The best way to learn Ruby on Rails more many is to actually build a Rails app one piece at a time. It’s all about stacking up quick wins that work toward the goal of getting a Rails app finished.\r\n<h4><span style="color: #3b3a3c;">I learned the hard way</span></h4>\r\n<span style="color: #3b3a3c;">It took me a <em>long time</em> to wrap my head around Rails. Let me give you a shortcut so you can save a lot of heartache. If you have a fast track, you will save months (or in my case - years) of wasted time. Not to mention you would avoid a <em>ton</em> of unnecessary pain and heartache.</span>\r\n<h3><span style="color: #3b3a3c;">With my Rails Curve course you will build and deploy a live Rails app in 30 days.</span></h3>\r\n<span style="color: #3b3a3c;">Bypass the learning curve altogether! I will walk you through how to build a web app from start to finish. And you will grow all the skills you need to make your own apps moving forward. In four weeks you’ll get experience with all the tools, concepts and skills that you need to – plan, design, develop and (most importantly) ship a web app.</span>\r\n<h4>Learn by doing</h4>\r\nYou will learn <strong>your</strong> way – by <strong>doing</strong>. After all, you decided to learn Rails so you could <em>build</em> an app – so why not learn by <strong>actually building</strong> <strong>one</strong>?\r\n<h4 style="text-align: left;">By following the method of building <strong>AND</strong> learning at the same time you will...</h4>\r\n<ul>\r\n	<li>Understand the big picture <strong>faster</strong></li>\r\n	<li>Pick up complex skills and concepts <strong>faster</strong></li>\r\n	<li>Avoid getting paralyzed by the tiny details</li>\r\n	<li>Avoid the pain of wasting months studying in-depth concepts</li>\r\n	<li>Punch perfectionism <em>in the face</em></li>\r\n</ul>\r\nInstead of spinning your wheels on learning <em>abstract </em>one-off concepts, <em>Rails Curve</em> will give you:\r\n<h4>a clear <strong>day-by-day plan</strong> for how to build a robust Rails app from <strong>start to finish</strong>.</h4>\r\nEach lesson will include bite-sized video screencasts that will walk you through <strong>exactly</strong> what to do, in plain english. <em>Rails Curve</em> gives you a solid path of <em>exactly</em> what to learn in <em>exactly</em> the right order. You will quickly move step by step through the process and pick up skills in each lesson until you have a completed (live) web app and the skills you need to dive into even more advanced material.\r\n<h4>As you move through each lesson, you will get a solid foundation of the key concepts and get <strong>first-hand experience</strong> on how they all work <em><strong>together</strong></em>.</h4>\r\nAnd no dull copy/pasting is necessary, you will write code yourself and learn the what, why and how as you go. Plus, everything is based on Rails 4 so you’ll have the latest and greatest training for Rails.\r\n<h4 style="text-align: left;"><em>Rails Curve</em> will <strong>jump-start</strong> your understanding of key elements like:</h4>\r\n<div class="row">\r\n<ul class="col-md-6">\r\n	<li>Ruby</li>\r\n	<li>Gems</li>\r\n	<li>Ruby on Rails Framework</li>\r\n	<li>Command Line (Terminal)</li>\r\n	<li>MVC pattern (Model View Controller)</li>\r\n	<li>Object-Oriented Programming</li>\r\n	<li>Active Record</li>\r\n	<li>Databases</li>\r\n	<li>HTML &amp; ERB</li>\r\n	<li>CSS and Sass</li>\r\n	<li>Javascript and CoffeeScript</li>\r\n</ul>\r\n<ul class="col-md-6">\r\n	<li>Front-end Frameworks</li>\r\n	<li>Deployment</li>\r\n	<li>Version Control</li>\r\n	<li>Validation</li>\r\n	<li>User Authentication</li>\r\n	<li>UI Design</li>\r\n	<li>UX Design</li>\r\n	<li>Project Management</li>\r\n	<li>and more...</li>\r\n</ul>\r\n</div>\r\n<h3>You can’t build an app without the right tools</h3>\r\nSo you will get hands-on experience with all of the standard tools like the command-line (Terminal), a text editor (like <em>Sublime</em> Text), <em>Git</em>, <em>Github</em>, <em>Heroku</em>, <em>Twitter Bootstrap</em>, <em>Devise</em>, and more. You will learn the ins-and-outs of all the tools you <em>gotta have</em> in your Rails toolbelt.\r\n<h4>With <em>Rails Curve</em> you will learn <strong>exactly</strong> how to do things like ...</h4>\r\n<ul>\r\n	<li>use the command-line to create a new blank-slate app</li>\r\n	<li>use a single command to create a rails server on your computer</li>\r\n	<li>use <em>Git</em> to manage your source code and push it to an online repo at <em>Github</em></li>\r\n	<li>use the command-line to generate the pages and elements of your app on the fly</li>\r\n	<li>use the command-line to manage your database</li>\r\n	<li>use the command-line to push your app to a live server on <em>Heroku</em></li>\r\n	<li>use <em>Twitter Bootstrap</em> to rapidly style your app - with <strong>no</strong> design experience needed.</li>\r\n	<li>use the <em>Devise</em> gem to create user sign-up and sign-in in a matter of minutes.</li>\r\n	<li>and a lot more</li>\r\n</ul>\r\n<h3>Learn to deal with <strong>error messages</strong>.</h3>\r\nThe<em> Rails Curve </em>course will teach you how to <strong>eliminate</strong> "getting stuck" forever. You’ll get <strong>real-world experience</strong> troubleshooting error messages for yourself <em>quickly</em> so you never have to slam on the breaks again. You will master the art of ...\r\n<ul>\r\n	<li>Reading error messages to get clues about what part of your app needs fixing</li>\r\n	<li>Googling and searching online dev communities to get past any error <em>in minutes</em></li>\r\n	<li>checking <em>Rails</em> and <em>Heroku</em> error logs using your trusty command line</li>\r\n</ul>\r\n<h3>By the time you finish <em>Rails Curve</em> you will have...</h3>\r\n<ul>\r\n	<li>seen how to make a solid plan you can follow</li>\r\n	<li>created all the key features needed for the app</li>\r\n	<li>sketched &amp; styled a beautiful UI on the front-end of the app</li>\r\n	<li>created a solid database back-end for the app</li>\r\n	<li>implemented a user authentication system for users to sign in and sign out</li>\r\n	<li>deployed your app to a live server</li>\r\n	<li>grown a slew of foundational web development skills in the process</li>\r\n</ul>\r\n<h3>You can <em>finally</em> get the <strong>traction</strong> you need</h3>\r\nWhen you complete <em>Rails Curve</em> you’ll feel confident that you can build apps from start to finish on your own. You’ll be totally certain that you can get past any error or issue. Your excitement won’t diminish because you’ll have a solid plan that moves you to progress. You will be relieved that you don’t have to spend thousands of dollars and months of time to learn Rails. And you can finally feel in control because you will understand what each line of code does.\r\n<h3>So, fast forward 30 days and you have finished with <em>Rails Curve</em>. <strong>Now what?</strong></h3>\r\nBack to the obscure world of not knowing what’s next? <strong><em>No way</em>.</strong> When you complete the lessons you will definitely want to transition into building your own app idea. So <em>Rails Curve</em> includes outro lessons that will walk you through how to <strong>create your own plan</strong> for <em>your</em> app. This will leave you with a solid action plan that you can follow from start to finish. If you have unique issues or you need a push in the right direction, I also offer <a href="mailto:me@tyrichards.com">Rails coaching</a>. My goal is to see everyone who goes through <em>Rails Curve</em> build and launch their own apps and build their business or career with great success and without burning out.\r\n<h2>Join other developers who learn by doing</h2>\r\nWith <em>Rails Curve</em> you will build a <em>real</em> Rails app from start to finish and get all the skills you need to move forward and build your own app.\r\n\r\nLet my <em>Rails Curve </em>course take away the agony of learning Ruby on Rails.', '30-Day Rails', '', 'inherit', 'open', 'open', '', '105-revision-v1', '', '', '2014-09-04 12:17:17', '2014-09-04 17:17:17', '', 105, 'http://dev.dorails.com/railsvitamins/105-revision-v1/', 0, 'revision', '', 0),
(286, 1, '2014-09-04 12:17:52', '2014-09-04 17:17:52', 'You’re halfway through your third Ruby on Rails book and you feel like you\'ve hit a wall. It’s 1 o’clock in the morning and your shoulders are feeling heavy. You\'re ready to quit for the night, but for months you\'ve kept telling yourself:\r\n<h3>“If I just finish this last Rails course, <strong>then</strong> I\'ll be ready to start building my Rails app”.</h3>\r\nYou decide to power through and do yet another Ruby exercise on lambda’s and hashes. An hour later, your eyes are glazed over with confusion and exhaustion.\r\n<h4>You feel more like a transcriptionist <em>monkey</em> than a developer.</h4>\r\nYou now have <em>one more</em> refactoring technique swirling around in your brain with no way to use it. You’re officially fried.\r\n\r\nThat’s when you see the next section has an <em>example</em>. "Woohoo!” You can actually <strong>apply</strong> your knowledge!\r\n<h4>But right off the bat you get stuck with another<em> lovely</em> error message.</h4>\r\nUgggh! After an hour and a half of putzing around to get past that, you slam your laptop shut. Now your eyes are wide open and bloodshot. You’re face is turning red. You throw the book across the room into the trash can. Kobe! With teeth clenched you say to yourself,\r\n<h3>"It should <em>not</em> be <strong>THIS</strong> hard!”</h3>\r\nEveryone told you that Rails was <em>easy</em>. But you’ve learned nothing. You’ve accomplished nothing. At this rate you will <strong>never</strong> get your app built.\r\n\r\nYou’re mind is racing as you lay in bed. You’re flailing to find <em>some</em> way to make this work.\r\n<h4>“If I would’ve got that Computer Science degree, I could do this…”</h4>\r\n<h4>“I should\'ve picked the right Rails courses, then I wouldn’t have wasted the last 9 months”</h4>\r\n<h4>"If I wasn’t forced to learn so many things at once...”</h4>\r\nOn and on.\r\n\r\nAt this point so many concepts have been thrown at you, but you have <strong>no clue</strong> about how to put them all together.\r\n<h4>You understand HTML &amp; CSS but this is a different monster.</h4>\r\nWhat the hell is MVC? Should you tackle front-end styling first? or back-end database stuff? Should you learn Ruby first before Rails? How do you configure a server for Rails? You can feel your dream slowly being crushed by the load.\r\n\r\nYou click off the light and close your eyes. Now you feel like your sinking into the bed.\r\n<h4>This is not your fault.</h4>\r\nThe learning curve is just too steep. The resources out there are too advanced. Maybe apps are not your thing. Maybe you should just stick to what you know best. You could just go back to making plain \'ol websites and forget all about building apps. So much time and effort would be wasted if you quit now, but maybe it would be best to cut your losses. As dawn breaks, you drift off to sleep.\r\n<h3>But what would it be like if you <em><strong>could</strong></em> build a finished Rails app?</h3>\r\nWhat if you could get it done and live in a matter of <em>days</em>. Seriously, I know it sounds crazy. Imagine there\'s no learning curve. Just you and the code. Doing and learning all at once.\r\n\r\nYou could finally understand the big picture of how it all works together. If you had a clear plan, you could learn each part of Rails in exactly the right order. You could even cut through error messages like they were butter. What if nothing stood in the way of you learning Rails and getting your app shipped?\r\n<h3>Then the dream of building and launching your Rails app could finally come true.</h3>\r\nBut contrary to the hype, Ruby on Rails does have a crazy difficult learning curve. Rails apps take months and months to build.\r\n<h4>What it took me years to figure out:</h4>\r\nLearning Rails <em>doesn\'t</em> have to be <strong>this</strong> hard. You don’t have to have a CS degree. You don’t have to understand every detail about the Ruby language to build a Rails app. Learn by doing! The best way to learn Ruby on Rails more many is to actually build a Rails app one piece at a time. It’s all about stacking up quick wins that work toward the goal of getting a Rails app finished.\r\n<h4><span style="color: #3b3a3c;">I learned the hard way</span></h4>\r\n<span style="color: #3b3a3c;">It took me a <em>long time</em> to wrap my head around Rails. Let me give you a shortcut so you can save a lot of heartache. If you have a fast track, you will save months (or in my case - years) of wasted time. Not to mention you would avoid a <em>ton</em> of unnecessary pain and heartache.</span>\r\n<h3><span style="color: #3b3a3c;">With my Rails Curve course you will build and deploy a live Rails app in 30 days.</span></h3>\r\n<span style="color: #3b3a3c;">Bypass the learning curve altogether! I will walk you through how to build a web app from start to finish. And you will grow all the skills you need to make your own apps moving forward. In four weeks you’ll get experience with all the tools, concepts and skills that you need to – plan, design, develop and (most importantly) ship a web app.</span>\r\n<h4>Learn by doing</h4>\r\nYou will learn <strong>your</strong> way – by <strong>doing</strong>. After all, you decided to learn Rails so you could <em>build</em> an app – so why not learn by <strong>actually building</strong> <strong>one</strong>?\r\n<h4 style="text-align: left;">By following the method of building <strong>AND</strong> learning at the same time you will...</h4>\r\n<ul>\r\n	<li>Understand the big picture <strong>faster</strong></li>\r\n	<li>Pick up complex skills and concepts <strong>faster</strong></li>\r\n	<li>Avoid getting paralyzed by the tiny details</li>\r\n	<li>Avoid the pain of wasting months studying in-depth concepts</li>\r\n	<li>Punch perfectionism <em>in the face</em></li>\r\n</ul>\r\nInstead of spinning your wheels on learning <em>abstract </em>one-off concepts, <em>Rails Curve</em> will give you:\r\n<h4>a clear <strong>day-by-day plan</strong> for how to build a robust Rails app from <strong>start to finish</strong>.</h4>\r\nEach lesson will include bite-sized video screencasts that will walk you through <strong>exactly</strong> what to do, in plain english. <em>Rails Curve</em> gives you a solid path of <em>exactly</em> what to learn in <em>exactly</em> the right order. You will quickly move step by step through the process and pick up skills in each lesson until you have a completed (live) web app and the skills you need to dive into even more advanced material.\r\n<h4>As you move through each lesson, you will get a solid foundation of the key concepts and get <strong>first-hand experience</strong> on how they all work <em><strong>together</strong></em>.</h4>\r\nAnd no dull copy/pasting is necessary, you will write code yourself and learn the what, why and how as you go. Plus, everything is based on Rails 4 so you’ll have the latest and greatest training for Rails.\r\n<h4 style="text-align: left;"><em>Rails Curve</em> will <strong>jump-start</strong> your understanding of key elements like:</h4>\r\n<div class="row">\r\n<ul class="col-md-6">\r\n	<li>Ruby</li>\r\n	<li>Gems</li>\r\n	<li>Ruby on Rails Framework</li>\r\n	<li>Command Line (Terminal)</li>\r\n	<li>MVC pattern (Model View Controller)</li>\r\n	<li>Object-Oriented Programming</li>\r\n	<li>Active Record</li>\r\n	<li>Databases</li>\r\n	<li>HTML &amp; ERB</li>\r\n	<li>CSS and Sass</li>\r\n	<li>Javascript and CoffeeScript</li>\r\n</ul>\r\n<ul class="col-md-6">\r\n	<li>Front-end Frameworks</li>\r\n	<li>Deployment</li>\r\n	<li>Version Control</li>\r\n	<li>Validation</li>\r\n	<li>User Authentication</li>\r\n	<li>UI Design</li>\r\n	<li>UX Design</li>\r\n	<li>Project Management</li>\r\n	<li>and more...</li>\r\n</ul>\r\n</div>\r\n<h3>You can’t build an app without the right tools</h3>\r\nSo you will get hands-on experience with all of the standard tools like the command-line (Terminal), a text editor (like <em>Sublime</em> Text), <em>Git</em>, <em>Github</em>, <em>Heroku</em>, <em>Twitter Bootstrap</em>, <em>Devise</em>, and more. You will learn the ins-and-outs of all the tools you <em>gotta have</em> in your Rails toolbelt.\r\n<h4>With <em>Rails Curve</em> you will learn <strong>exactly</strong> how to do things like ...</h4>\r\n<ul>\r\n	<li>use the command-line to create a new blank-slate app</li>\r\n	<li>use a single command to create a rails server on your computer</li>\r\n	<li>use <em>Git</em> to manage your source code and push it to an online repo at <em>Github</em></li>\r\n	<li>use the command-line to generate the pages and elements of your app on the fly</li>\r\n	<li>use the command-line to manage your database</li>\r\n	<li>use the command-line to push your app to a live server on <em>Heroku</em></li>\r\n	<li>use <em>Twitter Bootstrap</em> to rapidly style your app - with <strong>no</strong> design experience needed.</li>\r\n	<li>use the <em>Devise</em> gem to create user sign-up and sign-in in a matter of minutes.</li>\r\n	<li>and a lot more</li>\r\n</ul>\r\n<h3>Learn to deal with <strong>error messages</strong>.</h3>\r\nThe<em> Rails Curve </em>course will teach you how to <strong>eliminate</strong> "getting stuck" forever. You’ll get <strong>real-world experience</strong> troubleshooting error messages for yourself <em>quickly</em> so you never have to slam on the breaks again. You will master the art of ...\r\n<ul>\r\n	<li>Reading error messages to get clues about what part of your app needs fixing</li>\r\n	<li>Googling and searching online dev communities to get past any error <em>in minutes</em></li>\r\n	<li>checking <em>Rails</em> and <em>Heroku</em> error logs using your trusty command line</li>\r\n</ul>\r\n<h3>By the time you finish <em>Rails Curve</em> you will have...</h3>\r\n<ul>\r\n	<li>seen how to make a solid plan you can follow</li>\r\n	<li>created all the key features needed for the app</li>\r\n	<li>sketched &amp; styled a beautiful UI on the front-end of the app</li>\r\n	<li>created a solid database back-end for the app</li>\r\n	<li>implemented a user authentication system for users to sign in and sign out</li>\r\n	<li>deployed your app to a live server</li>\r\n	<li>grown a slew of foundational web development skills in the process</li>\r\n</ul>\r\n<h3>You can <em>finally</em> get the <strong>traction</strong> you need</h3>\r\nWhen you complete <em>Rails Curve</em> you’ll feel confident that you can build apps from start to finish on your own. You’ll be totally certain that you can get past any error or issue. Your excitement won’t diminish because you’ll have a solid plan that moves you to progress. You will be relieved that you don’t have to spend thousands of dollars and months of time to learn Rails. And you can finally feel in control because you will understand what each line of code does.\r\n<h3>So, fast forward 30 days and you have finished with <em>Rails Curve</em>. <strong>Now what?</strong></h3>\r\nBack to the obscure world of not knowing what’s next? <strong><em>No way</em>.</strong> When you complete the lessons you will definitely want to transition into building your own app idea. So <em>Rails Curve</em> includes outro lessons that will walk you through how to <strong>create your own plan</strong> for <em>your</em> app. This will leave you with a solid action plan that you can follow from start to finish. If you have unique issues or you need a push in the right direction, I also offer <a href="mailto:me@tyrichards.com">Rails coaching</a>. My goal is to see everyone who goes through <em>Rails Curve</em> build and launch their own apps and build their business or career with great success and without burning out.\r\n<h2>Join other developers who learn by doing</h2>\r\nWith <em>Rails Curve</em> you will build a <em>real</em> Rails app from start to finish and get all the skills you need to move forward and build your own app.\r\n\r\nLet my <em>Rails Curve </em>course take away the agony of learning Ruby on Rails.', '30-Day Rails', '', 'inherit', 'open', 'open', '', '105-revision-v1', '', '', '2014-09-04 12:17:52', '2014-09-04 17:17:52', '', 105, 'http://dev.dorails.com/railsvitamins/105-revision-v1/', 0, 'revision', '', 0),
(287, 1, '2014-09-04 12:18:19', '2014-09-04 17:18:19', 'You’re halfway through your third Ruby on Rails book and you feel like you\'ve hit a wall. It’s 1 o’clock in the morning and your shoulders are feeling heavy. You\'re ready to quit for the night, but for months you\'ve kept telling yourself:\r\n<h3>“If I just finish this last Rails course, <strong>then</strong> I\'ll be ready to start building my Rails app”.</h3>\r\nYou decide to power through and do yet another Ruby exercise on lambda’s and hashes. An hour later, your eyes are glazed over with confusion and exhaustion.\r\n<h4>You feel more like a transcriptionist <em>monkey</em> than a developer.</h4>\r\nYou now have <em>one more</em> refactoring technique swirling around in your brain with no way to use it. You’re officially fried.\r\n\r\nThat’s when you see the next section has an <em>example</em>. "Woohoo!” You can actually <strong>apply</strong> your knowledge!\r\n<h4>But right off the bat you get stuck with another<em> lovely</em> error message.</h4>\r\nUgggh! After an hour and a half of putzing around to get past that, you slam your laptop shut. Now your eyes are wide open and bloodshot. You’re face is turning red. You throw the book across the room into the trash can. Kobe! With teeth clenched you say to yourself,\r\n<h3>"It should <em>not</em> be <strong>THIS</strong> hard!”</h3>\r\nEveryone told you that Rails was <em>easy</em>. But you’ve learned nothing. You’ve accomplished nothing. At this rate you will <strong>never</strong> get your app built.\r\n\r\nYou’re mind is racing as you lay in bed. You’re flailing to find <em>some</em> way to make this work.\r\n<h4>“If I would’ve got that Computer Science degree, I could do this…”</h4>\r\n<h4>“I should\'ve picked the right Rails courses, then I wouldn’t have wasted the last 9 months”</h4>\r\n<h4>"If I wasn’t forced to learn so many concepts at once...”</h4>\r\nOn and on.\r\n\r\nAt this point so many concepts have been thrown at you, but you have <strong>no clue</strong> about how to put them all together.\r\n<h4>You understand HTML &amp; CSS but this is a different monster.</h4>\r\nWhat the hell is MVC? Should you tackle front-end styling first? or back-end database stuff? Should you learn Ruby first before Rails? How do you configure a server for Rails? You can feel your dream slowly being crushed by the load.\r\n\r\nYou click off the light and close your eyes. Now you feel like your sinking into the bed.\r\n<h4>This is not your fault.</h4>\r\nThe learning curve is just too steep. The resources out there are too advanced. Maybe apps are not your thing. Maybe you should just stick to what you know best. You could just go back to making plain \'ol websites and forget all about building apps. So much time and effort would be wasted if you quit now, but maybe it would be best to cut your losses. As dawn breaks, you drift off to sleep.\r\n<h3>But what would it be like if you <em><strong>could</strong></em> build a finished Rails app?</h3>\r\nWhat if you could get it done and live in a matter of <em>days</em>. Seriously, I know it sounds crazy. Imagine there\'s no learning curve. Just you and the code. Doing and learning all at once.\r\n\r\nYou could finally understand the big picture of how it all works together. If you had a clear plan, you could learn each part of Rails in exactly the right order. You could even cut through error messages like they were butter. What if nothing stood in the way of you learning Rails and getting your app shipped?\r\n<h3>Then the dream of building and launching your Rails app could finally come true.</h3>\r\nBut contrary to the hype, Ruby on Rails does have a crazy difficult learning curve. Rails apps take months and months to build.\r\n<h4>What it took me years to figure out:</h4>\r\nLearning Rails <em>doesn\'t</em> have to be <strong>this</strong> hard. You don’t have to have a CS degree. You don’t have to understand every detail about the Ruby language to build a Rails app. Learn by doing! The best way to learn Ruby on Rails more many is to actually build a Rails app one piece at a time. It’s all about stacking up quick wins that work toward the goal of getting a Rails app finished.\r\n<h4><span style="color: #3b3a3c;">I learned the hard way</span></h4>\r\n<span style="color: #3b3a3c;">It took me a <em>long time</em> to wrap my head around Rails. Let me give you a shortcut so you can save a lot of heartache. If you have a fast track, you will save months (or in my case - years) of wasted time. Not to mention you would avoid a <em>ton</em> of unnecessary pain and heartache.</span>\r\n<h3><span style="color: #3b3a3c;">With my Rails Curve course you will build and deploy a live Rails app in 30 days.</span></h3>\r\n<span style="color: #3b3a3c;">Bypass the learning curve altogether! I will walk you through how to build a web app from start to finish. And you will grow all the skills you need to make your own apps moving forward. In four weeks you’ll get experience with all the tools, concepts and skills that you need to – plan, design, develop and (most importantly) ship a web app.</span>\r\n<h4>Learn by doing</h4>\r\nYou will learn <strong>your</strong> way – by <strong>doing</strong>. After all, you decided to learn Rails so you could <em>build</em> an app – so why not learn by <strong>actually building</strong> <strong>one</strong>?\r\n<h4 style="text-align: left;">By following the method of building <strong>AND</strong> learning at the same time you will...</h4>\r\n<ul>\r\n	<li>Understand the big picture <strong>faster</strong></li>\r\n	<li>Pick up complex skills and concepts <strong>faster</strong></li>\r\n	<li>Avoid getting paralyzed by the tiny details</li>\r\n	<li>Avoid the pain of wasting months studying in-depth concepts</li>\r\n	<li>Punch perfectionism <em>in the face</em></li>\r\n</ul>\r\nInstead of spinning your wheels on learning <em>abstract </em>one-off concepts, <em>Rails Curve</em> will give you:\r\n<h4>a clear <strong>day-by-day plan</strong> for how to build a robust Rails app from <strong>start to finish</strong>.</h4>\r\nEach lesson will include bite-sized video screencasts that will walk you through <strong>exactly</strong> what to do, in plain english. <em>Rails Curve</em> gives you a solid path of <em>exactly</em> what to learn in <em>exactly</em> the right order. You will quickly move step by step through the process and pick up skills in each lesson until you have a completed (live) web app and the skills you need to dive into even more advanced material.\r\n<h4>As you move through each lesson, you will get a solid foundation of the key concepts and get <strong>first-hand experience</strong> on how they all work <em><strong>together</strong></em>.</h4>\r\nAnd no dull copy/pasting is necessary, you will write code yourself and learn the what, why and how as you go. Plus, everything is based on Rails 4 so you’ll have the latest and greatest training for Rails.\r\n<h4 style="text-align: left;"><em>Rails Curve</em> will <strong>jump-start</strong> your understanding of key elements like:</h4>\r\n<div class="row">\r\n<ul class="col-md-6">\r\n	<li>Ruby</li>\r\n	<li>Gems</li>\r\n	<li>Ruby on Rails Framework</li>\r\n	<li>Command Line (Terminal)</li>\r\n	<li>MVC pattern (Model View Controller)</li>\r\n	<li>Object-Oriented Programming</li>\r\n	<li>Active Record</li>\r\n	<li>Databases</li>\r\n	<li>HTML &amp; ERB</li>\r\n	<li>CSS and Sass</li>\r\n	<li>Javascript and CoffeeScript</li>\r\n</ul>\r\n<ul class="col-md-6">\r\n	<li>Front-end Frameworks</li>\r\n	<li>Deployment</li>\r\n	<li>Version Control</li>\r\n	<li>Validation</li>\r\n	<li>User Authentication</li>\r\n	<li>UI Design</li>\r\n	<li>UX Design</li>\r\n	<li>Project Management</li>\r\n	<li>and more...</li>\r\n</ul>\r\n</div>\r\n<h3>You can’t build an app without the right tools</h3>\r\nSo you will get hands-on experience with all of the standard tools like the command-line (Terminal), a text editor (like <em>Sublime</em> Text), <em>Git</em>, <em>Github</em>, <em>Heroku</em>, <em>Twitter Bootstrap</em>, <em>Devise</em>, and more. You will learn the ins-and-outs of all the tools you <em>gotta have</em> in your Rails toolbelt.\r\n<h4>With <em>Rails Curve</em> you will learn <strong>exactly</strong> how to do things like ...</h4>\r\n<ul>\r\n	<li>use the command-line to create a new blank-slate app</li>\r\n	<li>use a single command to create a rails server on your computer</li>\r\n	<li>use <em>Git</em> to manage your source code and push it to an online repo at <em>Github</em></li>\r\n	<li>use the command-line to generate the pages and elements of your app on the fly</li>\r\n	<li>use the command-line to manage your database</li>\r\n	<li>use the command-line to push your app to a live server on <em>Heroku</em></li>\r\n	<li>use <em>Twitter Bootstrap</em> to rapidly style your app - with <strong>no</strong> design experience needed.</li>\r\n	<li>use the <em>Devise</em> gem to create user sign-up and sign-in in a matter of minutes.</li>\r\n	<li>and a lot more</li>\r\n</ul>\r\n<h3>Learn to deal with <strong>error messages</strong>.</h3>\r\nThe<em> Rails Curve </em>course will teach you how to <strong>eliminate</strong> "getting stuck" forever. You’ll get <strong>real-world experience</strong> troubleshooting error messages for yourself <em>quickly</em> so you never have to slam on the breaks again. You will master the art of ...\r\n<ul>\r\n	<li>Reading error messages to get clues about what part of your app needs fixing</li>\r\n	<li>Googling and searching online dev communities to get past any error <em>in minutes</em></li>\r\n	<li>checking <em>Rails</em> and <em>Heroku</em> error logs using your trusty command line</li>\r\n</ul>\r\n<h3>By the time you finish <em>Rails Curve</em> you will have...</h3>\r\n<ul>\r\n	<li>seen how to make a solid plan you can follow</li>\r\n	<li>created all the key features needed for the app</li>\r\n	<li>sketched &amp; styled a beautiful UI on the front-end of the app</li>\r\n	<li>created a solid database back-end for the app</li>\r\n	<li>implemented a user authentication system for users to sign in and sign out</li>\r\n	<li>deployed your app to a live server</li>\r\n	<li>grown a slew of foundational web development skills in the process</li>\r\n</ul>\r\n<h3>You can <em>finally</em> get the <strong>traction</strong> you need</h3>\r\nWhen you complete <em>Rails Curve</em> you’ll feel confident that you can build apps from start to finish on your own. You’ll be totally certain that you can get past any error or issue. Your excitement won’t diminish because you’ll have a solid plan that moves you to progress. You will be relieved that you don’t have to spend thousands of dollars and months of time to learn Rails. And you can finally feel in control because you will understand what each line of code does.\r\n<h3>So, fast forward 30 days and you have finished with <em>Rails Curve</em>. <strong>Now what?</strong></h3>\r\nBack to the obscure world of not knowing what’s next? <strong><em>No way</em>.</strong> When you complete the lessons you will definitely want to transition into building your own app idea. So <em>Rails Curve</em> includes outro lessons that will walk you through how to <strong>create your own plan</strong> for <em>your</em> app. This will leave you with a solid action plan that you can follow from start to finish. If you have unique issues or you need a push in the right direction, I also offer <a href="mailto:me@tyrichards.com">Rails coaching</a>. My goal is to see everyone who goes through <em>Rails Curve</em> build and launch their own apps and build their business or career with great success and without burning out.\r\n<h2>Join other developers who learn by doing</h2>\r\nWith <em>Rails Curve</em> you will build a <em>real</em> Rails app from start to finish and get all the skills you need to move forward and build your own app.\r\n\r\nLet my <em>Rails Curve </em>course take away the agony of learning Ruby on Rails.', '30-Day Rails', '', 'inherit', 'open', 'open', '', '105-revision-v1', '', '', '2014-09-04 12:18:19', '2014-09-04 17:18:19', '', 105, 'http://dev.dorails.com/railsvitamins/105-revision-v1/', 0, 'revision', '', 0) ;
INSERT INTO `wp_posts` ( `ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(288, 1, '2014-09-04 12:22:14', '2014-09-04 17:22:14', 'You’re halfway through your third Ruby on Rails book and you feel like you\'ve hit a wall. It’s 1 o’clock in the morning and your shoulders are feeling heavy. You\'re ready to quit for the night, but for months you\'ve kept telling yourself:\r\n<h3>“If I just finish this last Rails course, <strong>then</strong> I\'ll be ready to start building my Rails app”.</h3>\r\nYou decide to power through and do yet another Ruby exercise on lambda’s and hashes. An hour later, your eyes are glazed over with confusion and exhaustion.\r\n<h4>You feel more like a transcriptionist <em>monkey</em> than a developer.</h4>\r\nYou now have <em>one more</em> refactoring technique swirling around in your brain with no way to use it. You’re officially fried.\r\n\r\nThat’s when you see the next section has an <em>example</em>. "Woohoo!” You can actually <strong>apply</strong> your knowledge!\r\n<h4>But right off the bat you get stuck with another<em> lovely</em> error message.</h4>\r\nUgggh! After an hour and a half of putzing around to get past that, you slam your laptop shut. Now your eyes are wide open and bloodshot. You’re face is turning red. You throw the book across the room into the trash can. Kobe! With teeth clenched you say to yourself,\r\n<h3>"It should <em>not</em> be <strong>THIS</strong> hard!”</h3>\r\nEveryone told you that Rails was <em>easy</em>. But you’ve learned nothing. You’ve accomplished nothing. At this rate you will <strong>never</strong> get your app built.\r\n\r\nYou’re mind is racing as you lay in bed. You’re flailing to find <em>some</em> way to make this work.\r\n<h4>“If I would’ve got that Computer Science degree, I could do this…”</h4>\r\n<h4>“I should\'ve picked the right Rails courses, then I wouldn’t have wasted the last 9 months”</h4>\r\n<h4>"If I wasn’t forced to learn so many concepts at once...”</h4>\r\nOn and on.\r\n\r\nAt this point so many concepts have been thrown at you, but you have <strong>no clue</strong> about how to put them all together.\r\n<h4>You understand HTML &amp; CSS but this is a different monster.</h4>\r\nWhat the hell is MVC? Should you tackle front-end styling first? or back-end database stuff? Should you learn Ruby first before Rails? How do you configure a server for Rails? You can feel your dream slowly being crushed by the load.\r\n\r\nYou click off the light and close your eyes. Now you feel like your sinking into the bed.\r\n<h4>This is not your fault.</h4>\r\nThe learning curve is just too steep. The resources out there are too advanced. Maybe apps are not your thing. Maybe you should just stick to what you know best. You could just go back to making plain \'ol websites and forget all about building apps. So much time and effort would be wasted if you quit now, but maybe it would be best to cut your losses. As dawn breaks, you drift off to sleep.\r\n<h3>But what would it be like if you <em><strong>could</strong></em> build a finished Rails app?</h3>\r\nWhat if you could get it done and live in a matter of <em>days</em>. Seriously, I know it sounds crazy. Imagine there\'s no learning curve. Just you and the code. Doing and learning all at once.\r\n\r\nYou could finally understand the big picture of how it all works together. If you had a clear plan, you could learn each part of Rails in exactly the right order. You could even cut through error messages like they were butter. What if nothing stood in the way of you learning Rails and getting your app shipped?\r\n<h3>Then the dream of building and launching your Rails app could finally come true.</h3>\r\nBut contrary to the hype, Ruby on Rails does have a crazy difficult learning curve. Rails apps take months and months to build.\r\n<h4>What it took me years to figure out:</h4>\r\nLearning Rails <em>doesn\'t</em> have to be <strong>this</strong> hard. You don’t have to have a CS degree. You don’t have to understand every detail about the Ruby language to build a Rails app. Learn by doing! The best way to learn Ruby on Rails more many is to actually build a Rails app one piece at a time. It’s all about stacking up quick wins that work toward the goal of getting a Rails app finished.\r\n<h4><span style="color: #3b3a3c;">I learned the hard way</span></h4>\r\n<span style="color: #3b3a3c;">It took me a <em>long time</em> to wrap my head around Rails. Let me give you a shortcut so you can save a lot of heartache. If you have a fast track, you will save months (or in my case - years) of wasted time. Not to mention you would avoid a <em>ton</em> of unnecessary pain and heartache.</span>\r\n<h3>With my <em>Rails Curve</em> course you will build and deploy a live Rails app in 30 days.</h3>\r\n<span style="color: #3b3a3c;">Bypass the learning curve altogether! I will walk you through how to build a web app from start to finish. And you will grow all the skills you need to make your own apps moving forward. In four weeks you’ll get experience with all the tools, concepts and skills that you need to – plan, design, develop and (most importantly) ship a web app.</span>\r\n<h4>Learn by doing</h4>\r\nYou will learn <strong>your</strong> way – by <strong>doing</strong>. After all, you decided to learn Rails so you could <em>build</em> an app – so why not learn by <strong>actually building</strong> <strong>one</strong>?\r\n<h4 style="text-align: left;">By following the method of building <strong>AND</strong> learning at the same time you will...</h4>\r\n<ul>\r\n	<li>Understand the big picture <strong>faster</strong></li>\r\n	<li>Pick up complex skills and concepts <strong>faster</strong></li>\r\n	<li>Avoid getting paralyzed by the tiny details</li>\r\n	<li>Avoid the pain of wasting months studying in-depth concepts</li>\r\n	<li>Punch perfectionism <em>in the face</em></li>\r\n</ul>\r\nInstead of spinning your wheels on learning <em>abstract </em>one-off concepts, <em>Rails Curve</em> will give you:\r\n<h4>a clear <strong>day-by-day plan</strong> for how to build a robust Rails app from <strong>start to finish</strong>.</h4>\r\nEach lesson will include bite-sized video screencasts that will walk you through <strong>exactly</strong> what to do, in plain english. <em>Rails Curve</em> gives you a solid path of <em>exactly</em> what to learn in <em>exactly</em> the right order. You will quickly move step by step through the process and pick up skills in each lesson until you have a completed (live) web app and the skills you need to dive into even more advanced material.\r\n<h4>As you move through each lesson, you will get a solid foundation of the key concepts and get <strong>first-hand experience</strong> on how they all work <em><strong>together</strong></em>.</h4>\r\nAnd no dull copy/pasting is necessary, you will write code yourself and learn the what, why and how as you go. Plus, everything is based on Rails 4 so you’ll have the latest and greatest training for Rails.\r\n<h4 style="text-align: left;"><em>Rails Curve</em> will <strong>jump-start</strong> your understanding of key elements like:</h4>\r\n<div class="row">\r\n<ul class="col-md-6">\r\n	<li>Ruby</li>\r\n	<li>Gems</li>\r\n	<li>Ruby on Rails Framework</li>\r\n	<li>Command Line (Terminal)</li>\r\n	<li>MVC pattern (Model View Controller)</li>\r\n	<li>Object-Oriented Programming</li>\r\n	<li>Active Record</li>\r\n	<li>Databases</li>\r\n	<li>HTML &amp; ERB</li>\r\n	<li>CSS and Sass</li>\r\n	<li>Javascript and CoffeeScript</li>\r\n</ul>\r\n<ul class="col-md-6">\r\n	<li>Front-end Frameworks</li>\r\n	<li>Deployment</li>\r\n	<li>Version Control</li>\r\n	<li>Validation</li>\r\n	<li>User Authentication</li>\r\n	<li>UI Design</li>\r\n	<li>UX Design</li>\r\n	<li>Project Management</li>\r\n	<li>and more...</li>\r\n</ul>\r\n</div>\r\n<h3>You can’t build an app without the right tools</h3>\r\nSo you will get hands-on experience with all of the standard tools like the command-line (Terminal), a text editor (like <em>Sublime</em> Text), <em>Git</em>, <em>Github</em>, <em>Heroku</em>, <em>Twitter Bootstrap</em>, <em>Devise</em>, and more. You will learn the ins-and-outs of all the tools you <em>gotta have</em> in your Rails toolbelt.\r\n<h4>With <em>Rails Curve</em> you will learn <strong>exactly</strong> how to do things like ...</h4>\r\n<ul>\r\n	<li>use the command-line to create a new blank-slate app</li>\r\n	<li>use a single command to create a rails server on your computer</li>\r\n	<li>use <em>Git</em> to manage your source code and push it to an online repo at <em>Github</em></li>\r\n	<li>use the command-line to generate the pages and elements of your app on the fly</li>\r\n	<li>use the command-line to manage your database</li>\r\n	<li>use the command-line to push your app to a live server on <em>Heroku</em></li>\r\n	<li>use <em>Twitter Bootstrap</em> to rapidly style your app - with <strong>no</strong> design experience needed.</li>\r\n	<li>use the <em>Devise</em> gem to create user sign-up and sign-in in a matter of minutes.</li>\r\n	<li>and a lot more</li>\r\n</ul>\r\n<h3>Learn to deal with <strong>error messages</strong>.</h3>\r\nThe<em> Rails Curve </em>course will teach you how to <strong>eliminate</strong> "getting stuck" forever. You’ll get <strong>real-world experience</strong> troubleshooting error messages for yourself <em>quickly</em> so you never have to slam on the breaks again. You will master the art of ...\r\n<ul>\r\n	<li>Reading error messages to get clues about what part of your app needs fixing</li>\r\n	<li>Googling and searching online dev communities to get past any error <em>in minutes</em></li>\r\n	<li>checking <em>Rails</em> and <em>Heroku</em> error logs using your trusty command line</li>\r\n</ul>\r\n<h3>By the time you finish <em>Rails Curve</em> you will have...</h3>\r\n<ul>\r\n	<li>seen how to make a solid plan you can follow</li>\r\n	<li>created all the key features needed for the app</li>\r\n	<li>sketched &amp; styled a beautiful UI on the front-end of the app</li>\r\n	<li>created a solid database back-end for the app</li>\r\n	<li>implemented a user authentication system for users to sign in and sign out</li>\r\n	<li>deployed your app to a live server</li>\r\n	<li>grown a slew of foundational web development skills in the process</li>\r\n</ul>\r\n<h3>You can <em>finally</em> get the <strong>traction</strong> you need</h3>\r\nWhen you complete <em>Rails Curve</em> you’ll feel confident that you can build apps from start to finish on your own. You’ll be totally certain that you can get past any error or issue. Your excitement won’t diminish because you’ll have a solid plan that moves you to progress. You will be relieved that you don’t have to spend thousands of dollars and months of time to learn Rails. And you can finally feel in control because you will understand what each line of code does.\r\n<h3>So, fast forward 30 days and you have finished with <em>Rails Curve</em>. <strong>Now what?</strong></h3>\r\nBack to the obscure world of not knowing what’s next? <strong><em>No way</em>.</strong> When you complete the lessons you will definitely want to transition into building your own app idea. So <em>Rails Curve</em> includes outro lessons that will walk you through how to <strong>create your own plan</strong> for <em>your</em> app. This will leave you with a solid action plan that you can follow from start to finish. If you have unique issues or you need a push in the right direction, I also offer <a href="mailto:me@tyrichards.com">Rails coaching</a>. My goal is to see everyone who goes through <em>Rails Curve</em> build and launch their own apps and build their business or career with great success and without burning out.\r\n<h2>Join other developers who learn by doing</h2>\r\nWith <em>Rails Curve</em> you will build a <em>real</em> Rails app from start to finish and get all the skills you need to move forward and build your own app.\r\n\r\nLet my <em>Rails Curve </em>course take away the agony of learning Ruby on Rails.', '30-Day Rails', '', 'inherit', 'open', 'open', '', '105-revision-v1', '', '', '2014-09-04 12:22:14', '2014-09-04 17:22:14', '', 105, 'http://dev.dorails.com/railsvitamins/105-revision-v1/', 0, 'revision', '', 0),
(289, 1, '2014-09-04 12:23:25', '2014-09-04 17:23:25', 'You’re halfway through your third Ruby on Rails book and you feel like you\'ve hit a wall. It’s 1 o’clock in the morning and your shoulders are feeling heavy. You\'re ready to quit for the night, but for months you\'ve kept telling yourself:\r\n<h3>“If I just finish this last Rails course, <strong>then</strong> I\'ll be ready to start building my Rails app”.</h3>\r\nYou decide to power through and do yet another Ruby exercise on lambda’s and hashes. An hour later, your eyes are glazed over with confusion and exhaustion.\r\n<h4>You feel more like a transcriptionist <em>monkey</em> than a developer.</h4>\r\nYou now have <em>one more</em> refactoring technique swirling around in your brain with no way to use it. You’re officially fried.\r\n\r\nThat’s when you see the next section has an <em>example</em>. "Woohoo!” You can actually <strong>apply</strong> your knowledge!\r\n<h4>But right off the bat you get stuck with another<em> lovely</em> error message.</h4>\r\nUgggh! After an hour and a half of putzing around to get past that, you slam your laptop shut. Now your eyes are wide open and bloodshot. You’re face is turning red. You throw the book across the room into the trash can. Kobe! With teeth clenched you say to yourself,\r\n<h3>"It should <em>not</em> be <strong>THIS</strong> hard!”</h3>\r\nEveryone told you that Rails was <em>easy</em>. But you’ve learned nothing. You’ve accomplished nothing. At this rate you will <strong>never</strong> get your app built.\r\n\r\nYou’re mind is racing as you lay in bed. You’re flailing to find <em>some</em> way to make this work.\r\n<h4>“If I would’ve got that Computer Science degree, I could do this…”</h4>\r\n<h4>“I should\'ve picked the right Rails courses, then I wouldn’t have wasted the last 9 months”</h4>\r\n<h4>"If I wasn’t forced to learn so many concepts at once...”</h4>\r\nOn and on.\r\n\r\nAt this point so many concepts have been thrown at you, but you have <strong>no clue</strong> about how to put them all together.\r\n<h4>You understand HTML &amp; CSS but this is a different monster.</h4>\r\nWhat the hell is MVC? Should you tackle front-end styling first? or back-end database stuff? Should you learn Ruby first before Rails? How do you configure a server for Rails? You can feel your dream slowly being crushed by the load.\r\n\r\nYou click off the light and close your eyes. Now you feel like your sinking into the bed.\r\n<h4>This is not your fault.</h4>\r\nThe learning curve is just too steep. The resources out there are too advanced. Maybe apps are not your thing. Maybe you should just stick to what you know best. You could just go back to making plain \'ol websites and forget all about building apps. So much time and effort would be wasted if you quit now, but maybe it would be best to cut your losses. As dawn breaks, you drift off to sleep.\r\n<h3>But what would it be like if you <em><strong>could</strong></em> build a finished Rails app?</h3>\r\nWhat if you could get it done and live in a matter of <em>days</em>. Seriously, I know it sounds crazy. Imagine there\'s no learning curve. Just you and the code. Doing and learning all at once.\r\n\r\nYou could finally understand the big picture of how it all works together. If you had a clear plan, you could learn each part of Rails in exactly the right order. You could even cut through error messages like they were butter. What if nothing stood in the way of you learning Rails and getting your app shipped?\r\n<h3>Then the dream of building and launching your Rails app could finally come true.</h3>\r\nBut contrary to the hype, Ruby on Rails does have a crazy difficult learning curve. Rails apps take months and months to build.\r\n<h4>What it took me years to figure out:</h4>\r\nLearning Rails <em>doesn\'t</em> have to be <strong>this</strong> hard. You don’t have to have a CS degree. You don’t have to understand every detail about the Ruby language to build a Rails app. Learn by doing! The best way to learn Ruby on Rails more many is to actually build a Rails app one piece at a time. It’s all about stacking up quick wins that work toward the goal of getting a Rails app finished.\r\n<h4>Don\'t learned the hard way</h4>\r\nIt took me a <em>long time</em> to wrap my head around Rails. Let me give you a shortcut so you can save a lot of heartache. If you have a fast track, you will save months (or in my case - years) of wasted time. Not to mention you would avoid a ton of unnecessary pain and heartache.\r\n<h3>With my <em>Rails Curve</em> course you will build and deploy a live Rails app in 30 days.</h3>\r\nBypass the learning curve altogether! I will walk you through how to build a web app from start to finish. And you will grow all the skills you need to make your own apps moving forward. In four weeks you’ll get experience with all the tools, concepts and skills that you need to – plan, design, develop and (most importantly) ship a web app.\r\n<h4>Learn by doing</h4>\r\nYou will learn <strong>your</strong> way – by <strong>doing</strong>. After all, you decided to learn Rails so you could <em>build</em> an app – so why not learn by <strong>actually building</strong> <strong>one</strong>?\r\n<h4 style="text-align: left;">By following the method of building <strong>AND</strong> learning at the same time you will...</h4>\r\n<ul>\r\n	<li>Understand the big picture <strong>faster</strong></li>\r\n	<li>Pick up complex skills and concepts <strong>faster</strong></li>\r\n	<li>Avoid getting paralyzed by the tiny details</li>\r\n	<li>Avoid the pain of wasting months studying in-depth concepts</li>\r\n	<li>Punch perfectionism <em>in the face</em></li>\r\n</ul>\r\nInstead of spinning your wheels on learning <em>abstract </em>one-off concepts, <em>Rails Curve</em> will give you:\r\n<h4>a clear <strong>day-by-day plan</strong> for how to build a robust Rails app from <strong>start to finish</strong>.</h4>\r\nEach lesson will include bite-sized video screencasts that will walk you through <strong>exactly</strong> what to do, in plain english. <em>Rails Curve</em> gives you a solid path of <em>exactly</em> what to learn in <em>exactly</em> the right order. You will quickly move step by step through the process and pick up skills in each lesson until you have a completed (live) web app and the skills you need to dive into even more advanced material.\r\n<h4>As you move through each lesson, you will get a solid foundation of the key concepts and get <strong>first-hand experience</strong> on how they all work <em><strong>together</strong></em>.</h4>\r\nAnd no dull copy/pasting is necessary, you will write code yourself and learn the what, why and how as you go. Plus, everything is based on Rails 4 so you’ll have the latest and greatest training for Rails.\r\n<h4 style="text-align: left;"><em>Rails Curve</em> will <strong>jump-start</strong> your understanding of key elements like:</h4>\r\n<div class="row">\r\n<ul class="col-md-6">\r\n	<li>Ruby</li>\r\n	<li>Gems</li>\r\n	<li>Ruby on Rails Framework</li>\r\n	<li>Command Line (Terminal)</li>\r\n	<li>MVC pattern (Model View Controller)</li>\r\n	<li>Object-Oriented Programming</li>\r\n	<li>Active Record</li>\r\n	<li>Databases</li>\r\n	<li>HTML &amp; ERB</li>\r\n	<li>CSS and Sass</li>\r\n	<li>Javascript and CoffeeScript</li>\r\n</ul>\r\n<ul class="col-md-6">\r\n	<li>Front-end Frameworks</li>\r\n	<li>Deployment</li>\r\n	<li>Version Control</li>\r\n	<li>Validation</li>\r\n	<li>User Authentication</li>\r\n	<li>UI Design</li>\r\n	<li>UX Design</li>\r\n	<li>Project Management</li>\r\n	<li>and more...</li>\r\n</ul>\r\n</div>\r\n<h3>You can’t build an app without the right tools</h3>\r\nSo you will get hands-on experience with all of the standard tools like the command-line (Terminal), a text editor (like <em>Sublime</em> Text), <em>Git</em>, <em>Github</em>, <em>Heroku</em>, <em>Twitter Bootstrap</em>, <em>Devise</em>, and more. You will learn the ins-and-outs of all the tools you <em>gotta have</em> in your Rails toolbelt.\r\n<h4>With <em>Rails Curve</em> you will learn <strong>exactly</strong> how to do things like ...</h4>\r\n<ul>\r\n	<li>use the command-line to create a new blank-slate app</li>\r\n	<li>use a single command to create a rails server on your computer</li>\r\n	<li>use <em>Git</em> to manage your source code and push it to an online repo at <em>Github</em></li>\r\n	<li>use the command-line to generate the pages and elements of your app on the fly</li>\r\n	<li>use the command-line to manage your database</li>\r\n	<li>use the command-line to push your app to a live server on <em>Heroku</em></li>\r\n	<li>use <em>Twitter Bootstrap</em> to rapidly style your app - with <strong>no</strong> design experience needed.</li>\r\n	<li>use the <em>Devise</em> gem to create user sign-up and sign-in in a matter of minutes.</li>\r\n	<li>and a lot more</li>\r\n</ul>\r\n<h3>Learn to deal with <strong>error messages</strong>.</h3>\r\nThe<em> Rails Curve </em>course will teach you how to <strong>eliminate</strong> "getting stuck" forever. You’ll get <strong>real-world experience</strong> troubleshooting error messages for yourself <em>quickly</em> so you never have to slam on the breaks again. You will master the art of ...\r\n<ul>\r\n	<li>Reading error messages to get clues about what part of your app needs fixing</li>\r\n	<li>Googling and searching online dev communities to get past any error <em>in minutes</em></li>\r\n	<li>checking <em>Rails</em> and <em>Heroku</em> error logs using your trusty command line</li>\r\n</ul>\r\n<h3>By the time you finish <em>Rails Curve</em> you will have...</h3>\r\n<ul>\r\n	<li>seen how to make a solid plan you can follow</li>\r\n	<li>created all the key features needed for the app</li>\r\n	<li>sketched &amp; styled a beautiful UI on the front-end of the app</li>\r\n	<li>created a solid database back-end for the app</li>\r\n	<li>implemented a user authentication system for users to sign in and sign out</li>\r\n	<li>deployed your app to a live server</li>\r\n	<li>grown a slew of foundational web development skills in the process</li>\r\n</ul>\r\n<h3>You can <em>finally</em> get the <strong>traction</strong> you need</h3>\r\nWhen you complete <em>Rails Curve</em> you’ll feel confident that you can build apps from start to finish on your own. You’ll be totally certain that you can get past any error or issue. Your excitement won’t diminish because you’ll have a solid plan that moves you to progress. You will be relieved that you don’t have to spend thousands of dollars and months of time to learn Rails. And you can finally feel in control because you will understand what each line of code does.\r\n<h3>So, fast forward 30 days and you have finished with <em>Rails Curve</em>. <strong>Now what?</strong></h3>\r\nBack to the obscure world of not knowing what’s next? <strong><em>No way</em>.</strong> When you complete the lessons you will definitely want to transition into building your own app idea. So <em>Rails Curve</em> includes outro lessons that will walk you through how to <strong>create your own plan</strong> for <em>your</em> app. This will leave you with a solid action plan that you can follow from start to finish. If you have unique issues or you need a push in the right direction, I also offer <a href="mailto:me@tyrichards.com">Rails coaching</a>. My goal is to see everyone who goes through <em>Rails Curve</em> build and launch their own apps and build their business or career with great success and without burning out.\r\n<h2>Join other developers who learn by doing</h2>\r\nWith <em>Rails Curve</em> you will build a <em>real</em> Rails app from start to finish and get all the skills you need to move forward and build your own app.\r\n\r\nLet my <em>Rails Curve </em>course take away the agony of learning Ruby on Rails.', '30-Day Rails', '', 'inherit', 'open', 'open', '', '105-revision-v1', '', '', '2014-09-04 12:23:25', '2014-09-04 17:23:25', '', 105, 'http://dev.dorails.com/railsvitamins/105-revision-v1/', 0, 'revision', '', 0),
(291, 1, '2014-09-04 13:20:48', '2014-09-04 18:20:48', 'You’re halfway through your third Ruby on Rails book and you feel like you\'ve hit a wall. It’s 1 o’clock in the morning and your shoulders are feeling heavy. You\'re ready to quit for the night, but for months you\'ve kept telling yourself:\r\n<h3>“If I just finish this last Rails course, <strong>then</strong> I\'ll be ready to start building my Rails app”.</h3>\r\nYou decide to power through and do yet another Ruby exercise on lambda’s and hashes. An hour later, your eyes are glazed over with confusion and exhaustion.\r\n<h4>You feel more like a transcriptionist <em>monkey</em> than a developer.</h4>\r\nYou now have <em>one more</em> refactoring technique swirling around in your brain with no way to use it. You’re officially fried.\r\n\r\nThat’s when you see the next section has an <em>example</em>. "Woohoo!” You can actually <strong>apply</strong> your knowledge!\r\n<h4>But right off the bat you get stuck with another<em> lovely</em> error message.</h4>\r\nUgggh! After an hour and a half of putzing around to get past that, you slam your laptop shut. Now your eyes are wide open and bloodshot. You’re face is turning red. You throw the book across the room into the trash can. Kobe! With teeth clenched you say to yourself,\r\n<h3>"It should <em>not</em> be <strong>THIS</strong> hard!”</h3>\r\nEveryone told you that Rails was <em>easy</em>. But you’ve learned nothing. You’ve accomplished nothing. At this rate you will <strong>never</strong> get your app built.\r\n\r\nYou’re mind is racing as you lay in bed. You’re flailing to find <em>some</em> way to make this work.\r\n<h4>“If I would’ve got that Computer Science degree, I could do this…”</h4>\r\n<h4>“I should\'ve picked the right Rails courses, then I wouldn’t have wasted the last 9 months”</h4>\r\n<h4>"If I wasn’t forced to learn so many concepts at once...”</h4>\r\nOn and on.\r\n\r\nAt this point so many concepts have been thrown at you, but you have <strong>no clue</strong> about how to put them all together.\r\n<h4>You understand HTML &amp; CSS but this is a different monster.</h4>\r\nWhat the hell is MVC? Should you tackle front-end styling first? or back-end database stuff? Should you learn Ruby first before Rails? How do you configure a server for Rails? You can feel your dream slowly being crushed by the load.\r\n\r\nYou click off the light and close your eyes. Now you feel like your sinking into the bed.\r\n<h4>This is not your fault.</h4>\r\nThe learning curve is just too steep. The resources out there are too advanced. Maybe apps are not your thing. Maybe you should just stick to what you know best. You could just go back to making plain \'ol websites and forget all about building apps. So much time and effort would be wasted if you quit now, but maybe it would be best to cut your losses. As dawn breaks, you drift off to sleep.\r\n<h3>But what would it be like if you <em><strong>could</strong></em> build a finished Rails app?</h3>\r\nWhat if you could get it done and live in a matter of <em>days</em>. Seriously, I know it sounds crazy. Imagine there\'s no learning curve. Just you and the code. Doing and learning all at once.\r\n\r\nYou could finally understand the big picture of how it all works together. If you had a clear plan, you could learn each part of Rails in exactly the right order. You could even cut through error messages like they were butter. What if nothing stood in the way of you learning Rails and getting your app shipped?\r\n<h3>Then the dream of building and launching your Rails app could finally come true.</h3>\r\nBut contrary to the hype, Ruby on Rails does have a crazy difficult learning curve. Rails apps take months and months to build.\r\n<h4>What it took me years to figure out:</h4>\r\nLearning Rails <em>doesn\'t</em> have to be <strong>this</strong> hard. You don’t have to have a CS degree. You don’t have to understand every detail about the Ruby language to build a Rails app. Learn by doing! The best way to learn Ruby on Rails more many is to actually build a Rails app one piece at a time. It’s all about stacking up quick wins that work toward the goal of getting a Rails app finished.\r\n<h4>Don\'t learned the hard way</h4>\r\nIt took me a <em>long time</em> to wrap my head around Rails. Let me give you a shortcut so you can save a lot of heartache. If you have a fast track, you will save months (or in my case - years) of wasted time. Not to mention you would avoid a ton of unnecessary pain and heartache.\r\n<h3>With my <em>30-Day Rails</em> course you will build and deploy a live Rails app in 30 days.</h3>\r\nBypass the learning curve altogether! I will walk you through how to build a web app from start to finish. And you will grow all the skills you need to make your own apps moving forward. In four weeks you’ll get experience with all the tools, concepts and skills that you need to – plan, design, develop and (most importantly) ship a web app.\r\n<h4>Learn by doing</h4>\r\nYou will learn <strong>your</strong> way – by <strong>doing</strong>. After all, you decided to learn Rails so you could <em>build</em> an app – so why not learn by <strong>actually building</strong> <strong>one</strong>?\r\n<h4 style="text-align: left;">By following the method of building <strong>AND</strong> learning at the same time you will...</h4>\r\n<ul>\r\n	<li>Understand the big picture <strong>faster</strong></li>\r\n	<li>Pick up complex skills and concepts <strong>faster</strong></li>\r\n	<li>Avoid getting paralyzed by the tiny details</li>\r\n	<li>Avoid the pain of wasting months studying in-depth concepts</li>\r\n	<li>Punch perfectionism <em>in the face</em></li>\r\n</ul>\r\nInstead of spinning your wheels on learning <em>abstract </em>one-off concepts, <em>30-Day Rails</em> will give you:\r\n<h4>a clear <strong>day-by-day plan</strong> for how to build a robust Rails app from <strong>start to finish</strong>.</h4>\r\nEach lesson will include bite-sized video screencasts that will walk you through <strong>exactly</strong> what to do, in plain english. <em>30-Day Rails</em> gives you a solid path of <em>exactly</em> what to learn in <em>exactly</em> the right order. You will quickly move step by step through the process and pick up skills in each lesson until you have a completed (live) web app and the skills you need to dive into even more advanced material.\r\n<h4>As you move through each lesson, you will get a solid foundation of the key concepts and get <strong>first-hand experience</strong> on how they all work <em><strong>together</strong></em>.</h4>\r\nAnd no dull copy/pasting is necessary, you will write code yourself and learn the what, why and how as you go. Plus, everything is based on Rails 4 so you’ll have the latest and greatest training for Rails.\r\n<h4 style="text-align: left;"><em>30-Day Rails</em> will <strong>jump-start</strong> your understanding of key elements like:</h4>\r\n<div class="row">\r\n<ul class="col-md-6">\r\n	<li>Ruby</li>\r\n	<li>Gems</li>\r\n	<li>Ruby on Rails Framework</li>\r\n	<li>Command Line (Terminal)</li>\r\n	<li>MVC pattern (Model View Controller)</li>\r\n	<li>Object-Oriented Programming</li>\r\n	<li>Active Record</li>\r\n	<li>Databases</li>\r\n	<li>HTML &amp; ERB</li>\r\n	<li>CSS and Sass</li>\r\n	<li>Javascript and CoffeeScript</li>\r\n</ul>\r\n<ul class="col-md-6">\r\n	<li>Front-end Frameworks</li>\r\n	<li>Deployment</li>\r\n	<li>Version Control</li>\r\n	<li>Validation</li>\r\n	<li>User Authentication</li>\r\n	<li>UI Design</li>\r\n	<li>UX Design</li>\r\n	<li>Project Management</li>\r\n	<li>and more...</li>\r\n</ul>\r\n</div>\r\n<h3>You can’t build an app without the right tools</h3>\r\nSo you will get hands-on experience with all of the standard tools like the command-line (Terminal), a text editor (like <em>Sublime</em> Text), <em>Git</em>, <em>Github</em>, <em>Heroku</em>, <em>Twitter Bootstrap</em>, <em>Devise</em>, and more. You will learn the ins-and-outs of all the tools you <em>gotta have</em> in your Rails toolbelt.\r\n<h4>With <em>30-Day Rails</em> you will learn <strong>exactly</strong> how to do things like ...</h4>\r\n<ul>\r\n	<li>use the command-line to create a new blank-slate app</li>\r\n	<li>use a single command to create a rails server on your computer</li>\r\n	<li>use <em>Git</em> to manage your source code and push it to an online repo at <em>Github</em></li>\r\n	<li>use the command-line to generate the pages and elements of your app on the fly</li>\r\n	<li>use the command-line to manage your database</li>\r\n	<li>use the command-line to push your app to a live server on <em>Heroku</em></li>\r\n	<li>use <em>Twitter Bootstrap</em> to rapidly style your app - with <strong>no</strong> design experience needed.</li>\r\n	<li>use the <em>Devise</em> gem to create user sign-up and sign-in in a matter of minutes.</li>\r\n	<li>and a lot more</li>\r\n</ul>\r\n<h3>Learn to deal with <strong>error messages</strong>.</h3>\r\nThe<em> 30-Day Rails </em>course will teach you how to <strong>eliminate</strong> "getting stuck" forever. You’ll get <strong>real-world experience</strong> troubleshooting error messages for yourself <em>quickly</em> so you never have to slam on the breaks again. You will master the art of ...\r\n<ul>\r\n	<li>Reading error messages to get clues about what part of your app needs fixing</li>\r\n	<li>Googling and searching online dev communities to get past any error <em>in minutes</em></li>\r\n	<li>checking <em>Rails</em> and <em>Heroku</em> error logs using your trusty command line</li>\r\n</ul>\r\n<h3>By the time you finish <em>30-Day Rails</em> you will have...</h3>\r\n<ul>\r\n	<li>seen how to make a solid plan you can follow</li>\r\n	<li>created all the key features needed for the app</li>\r\n	<li>sketched &amp; styled a beautiful UI on the front-end of the app</li>\r\n	<li>created a solid database back-end for the app</li>\r\n	<li>implemented a user authentication system for users to sign in and sign out</li>\r\n	<li>deployed your app to a live server</li>\r\n	<li>grown a slew of foundational web development skills in the process</li>\r\n</ul>\r\n<h3>You can <em>finally</em> get the <strong>traction</strong> you need</h3>\r\nWhen you complete <em>30-Day Rails</em> you’ll feel confident that you can build apps from start to finish on your own. You’ll be totally certain that you can get past any error or issue. Your excitement won’t diminish because you’ll have a solid plan that moves you to progress. You will be relieved that you don’t have to spend thousands of dollars and months of time to learn Rails. And you can finally feel in control because you will understand what each line of code does.\r\n<h3>So, fast forward 30 days and you have finished with <em>30-Day Rails</em>. <strong>Now what?</strong></h3>\r\nBack to the obscure world of not knowing what’s next? <strong><em>No way</em>.</strong> When you complete the lessons you will definitely want to transition into building your own app idea. So <em>30-Day Rails</em> includes outro lessons that will walk you through how to <strong>create your own plan</strong> for <em>your</em> app. This will leave you with a solid action plan that you can follow from start to finish. If you have unique issues or you need a push in the right direction, I also offer <a href="mailto:me@tyrichards.com">Rails coaching</a>. My goal is to see everyone who goes through <i>30-Day Rails</i> build and launch their own apps and build their business or career with great success and without burning out.\r\n<h2>Join other developers who learn by doing</h2>\r\nWith <i>30-Day Rails</i> you will build a <em>real</em> Rails app from start to finish and get all the skills you need to move forward and build your own app.\r\n\r\nLet my <em>30-Day Rails</em><em> </em>course take away the agony of learning Ruby on Rails.', '30-Day Rails', '', 'inherit', 'open', 'open', '', '105-revision-v1', '', '', '2014-09-04 13:20:48', '2014-09-04 18:20:48', '', 105, 'http://dev.dorails.com/railsvitamins/105-revision-v1/', 0, 'revision', '', 0),
(292, 1, '2014-09-04 13:27:20', '2014-09-04 18:27:20', 'Are you spinning your wheels with Rails? Buried in error messages? Wasting a load of time trying to figure out the essentials of Ruby on Rails? Do you learn by doing? Well imagine you could get all of the key Rails skills and <strong>build</strong> an app at the same time.\r\n\r\nMy <a title="30-Day Rails" href="http://dev.dorails.com/30dayrails/" target="_blank">upcoming course</a> can give you the foundational skills you need to build <b>AND </b>ship Rails apps. Whether it\'s to level up your career or start your own business, I think it can help you get launched. I\'d go on but I\'ve already said it <a title="30-Day Rails" href="http://dev.dorails.com/30dayrails/" target="_blank">here</a>. If you\'re stuck and need a leg up with Ruby on Rails, check it out by clicking below.\r\n\r\n<a class="btn btn-primary" title="30-Day Rails" href="http://dev.dorails.com/30dayrails/">Learn more</a>', 'Speed up the learning curve for Ruby on Rails', '', 'inherit', 'open', 'open', '', '137-revision-v1', '', '', '2014-09-04 13:27:20', '2014-09-04 18:27:20', '', 137, 'http://dev.dorails.com/railsvitamins/137-revision-v1/', 0, 'revision', '', 0),
(293, 1, '2014-09-04 20:36:26', '2014-09-05 01:36:26', '[gravityform id="1" name="Want more?" ajax="true"]', 'Get Newsletter', '', 'inherit', 'open', 'open', '', '9-autosave-v1', '', '', '2014-09-04 20:36:26', '2014-09-05 01:36:26', '', 9, 'http://dev.dorails.com/railsvitamins/9-autosave-v1/', 0, 'revision', '', 0),
(294, 1, '2014-09-04 20:36:28', '2014-09-05 01:36:28', '[gravityform id="1" name="Want more?" ajax="true"]', 'Get Newsletter', '', 'inherit', 'open', 'open', '', '9-revision-v1', '', '', '2014-09-04 20:36:28', '2014-09-05 01:36:28', '', 9, 'http://dev.dorails.com/railsvitamins/9-revision-v1/', 0, 'revision', '', 0) ;

#
# End of data contents of table `wp_posts`
# --------------------------------------------------------



#
# Delete any existing table `wp_rg_form`
#

DROP TABLE IF EXISTS `wp_rg_form`;


#
# Table structure of table `wp_rg_form`
#

CREATE TABLE `wp_rg_form` (
  `id` mediumint(8) unsigned NOT NULL AUTO_INCREMENT,
  `title` varchar(150) NOT NULL,
  `date_created` datetime NOT NULL,
  `is_active` tinyint(1) NOT NULL DEFAULT '1',
  `is_trash` tinyint(1) NOT NULL DEFAULT '0',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8;


#
# Data contents of table `wp_rg_form`
#
INSERT INTO `wp_rg_form` ( `id`, `title`, `date_created`, `is_active`, `is_trash`) VALUES
(1, 'Don\'t miss out on my next post.', '2014-06-16 21:58:59', 1, 0),
(2, 'Send a message', '2014-06-17 20:47:59', 1, 0),
(3, 'Notify me when <i>30-Day Rails</i> is released', '2014-08-23 20:42:52', 1, 0),
(4, 'Pre-Order and Pay What You Want', '2014-08-24 09:56:59', 1, 0) ;

#
# End of data contents of table `wp_rg_form`
# --------------------------------------------------------



#
# Delete any existing table `wp_rg_form_meta`
#

DROP TABLE IF EXISTS `wp_rg_form_meta`;


#
# Table structure of table `wp_rg_form_meta`
#

CREATE TABLE `wp_rg_form_meta` (
  `form_id` mediumint(8) unsigned NOT NULL,
  `display_meta` longtext,
  `entries_grid_meta` longtext,
  `confirmations` longtext,
  `notifications` longtext,
  PRIMARY KEY (`form_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;


#
# Data contents of table `wp_rg_form_meta`
#
INSERT INTO `wp_rg_form_meta` ( `form_id`, `display_meta`, `entries_grid_meta`, `confirmations`, `notifications`) VALUES
(1, '{"title":"Don\'t miss out on my next post.","description":"Sign up to receive more Rails tips & tricks right to your inbox.","labelPlacement":"top_label","descriptionPlacement":"below","button":{"type":"text","text":"Sign Up","imageUrl":""},"fields":[{"adminLabel":"","adminOnly":"","allowsPrepopulate":false,"defaultValue":"","description":"","content":"","cssClass":"","errorMessage":"","id":4,"inputName":"","isRequired":true,"label":"First Name","noDuplicates":"","size":"large","type":"text","postCustomFieldName":"","displayAllCategories":false,"displayCaption":"","displayDescription":"","displayTitle":"","inputType":"","rangeMin":"","rangeMax":"","calendarIconType":"","calendarIconUrl":"","dateType":"","dateFormat":"","phoneFormat":"","addressType":"","defaultCountry":"","defaultProvince":"","defaultState":"","hideAddress2":"","hideCountry":"","hideState":"","inputs":null,"nameFormat":"","allowedExtensions":"","captchaType":"","pageNumber":1,"captchaTheme":"","simpleCaptchaSize":"","simpleCaptchaFontColor":"","simpleCaptchaBackgroundColor":"","failed_validation":"","productField":"","enablePasswordInput":"","maxLength":"","enablePrice":"","basePrice":"","multipleFiles":false,"maxFiles":"","calculationFormula":"","calculationRounding":"","enableCalculation":"","disableQuantity":false,"inputMask":false,"inputMaskValue":"","formId":1,"descriptionPlacement":"below"},{"adminLabel":"","adminOnly":"","allowsPrepopulate":false,"defaultValue":"","description":"","content":"","cssClass":"","errorMessage":"Don\'t forget your email","id":3,"inputName":"","isRequired":true,"label":"Email","noDuplicates":false,"size":"large","type":"email","postCustomFieldName":"","displayAllCategories":false,"displayCaption":"","displayDescription":"","displayTitle":"","inputType":"","rangeMin":"","rangeMax":"","calendarIconType":"","calendarIconUrl":"","dateType":"","dateFormat":"","phoneFormat":"","addressType":"","defaultCountry":"","defaultProvince":"","defaultState":"","hideAddress2":"","hideCountry":"","hideState":"","inputs":null,"nameFormat":"","allowedExtensions":"","captchaType":"","pageNumber":1,"captchaTheme":"","simpleCaptchaSize":"","simpleCaptchaFontColor":"","simpleCaptchaBackgroundColor":"","failed_validation":"","productField":"","enablePasswordInput":"","maxLength":"","enablePrice":"","basePrice":"","multipleFiles":false,"maxFiles":"","calculationFormula":"","calculationRounding":"","enableCalculation":"","disableQuantity":false,"inputMask":false,"inputMaskValue":"","formId":1,"descriptionPlacement":"below"}],"id":1,"useCurrentUserAsAuthor":true,"postContentTemplateEnabled":false,"postTitleTemplateEnabled":false,"postTitleTemplate":"","postContentTemplate":"","lastPageButton":null,"pagination":null,"firstPageCssClass":null,"cssClass":"gplaceholder","enableHoneypot":"","enableAnimation":"","limitEntries":"","limitEntriesCount":"","limitEntriesPeriod":"","limitEntriesMessage":"","scheduleForm":"","scheduleStart":"","scheduleStartHour":"","scheduleStartMinute":"","scheduleStartAmpm":"","scheduleEnd":"","scheduleEndHour":"","scheduleEndMinute":"","scheduleEndAmpm":"","schedulePendingMessage":"","scheduleMessage":"","requireLogin":"","requireLoginMessage":""}', '', '{"539f68a36e35d":{"id":"539f68a36e35d","name":"Default Confirmation","isDefault":"1","type":"page","message":"","url":"","pageId":"260","queryString":"","disableAutoformat":"","conditionalLogic":[]}}', '{"539f68a36dc50":{"id":"539f68a36dc50","to":"{admin_email}","name":"Admin Notification","event":"form_submission","toType":"email","subject":"New submission from {form_title}","message":"{all_fields}"},"53f90293deebd":{"isActive":true,"id":"53f90293deebd","name":"User Autoresponse","event":"form_submission","to":"3","toType":"field","bcc":"","subject":"Nice to meet you :)","message":"<h1 style=\\"color: #202020;\\">Nice to meet you :)<\\/h1>\\r\\n<div style=\\"color: #202020;\\"><\\/div>\\r\\n<div style=\\"color: #202020;\\">Hey\\u00a0{First Name:4}!<\\/div>\\r\\n<div style=\\"color: #202020;\\"><\\/div>\\r\\n<div style=\\"color: #202020;\\">Thanks for joining my little newsletter, Rails Vitamins. I will talk about all things Ruby on Rails including\\u00a0development, design,\\u00a0and bootstrapping.\\u00a0I hope you\'ll stick around, and please don\'t be afraid to reach out to me whenever you\'d like.<\\/div>\\r\\n<div style=\\"color: #202020;\\">\\r\\n\\r\\nI guess I should introduce myself\\u00a0and tell you a bit about who I am and why I am offering regular advice for Rails developers (or aspiring devs). Then I want to know\\u00a0<strong>one thing that annoys you about Rails or freelancing<\\/strong>.\\r\\n\\r\\nMy name is Ty. I\'m passionate\\u00a0about building products that make the world a better place, writing music, and traveling.\\u00a0In 2003 I started freelancing as a\\u00a0web developer &amp; designer. I officially\\u00a0started my web &amp; mobile app development biz back in 2011 and kept growing from there. Now we\'ve got clients all over the US and a small team of remote developers &amp;\\u00a0designers. You can learn about us\\u00a0<a style=\\"color: #ee4343;\\" href=\\"http:\\/\\/paradoxcreative.com\\/\\" target=\\"_blank\\">here<\\/a>.\\r\\n\\r\\nI have screwed up\\u00a0<em>so<\\/em>\\u00a0many things along the way (and still do), and learned a lot of things the hard\\u00a0way.\\u00a0I\\u00a0have\\u00a0juggled\\u00a0projects,\\u00a0clients, and teams, along with the\\u00a0day-to-day\\u00a0business admin stuff.\\u00a0<em>Here\'s my chance to pay it forward to other freelancers and make sure you don\'t run into all the problems I have<\\/em>.\\r\\n\\r\\nBy the way, I have a new course\\u00a0called 30-Day Rails that helps you bypass the learning curve for Ruby on Rails. You can learn more about it <a title=\\"30-Day Rails\\" href=\\"http:\\/\\/dev.dorails.com\\/30dayrails\\/\\" target=\\"_blank\\">here<\\/a>.\\r\\n<h3>First, though, some homework. (I know, right? We\\u00a0<em>just<\\/em>\\u00a0met.)\\u00a0I\'d love if you would hit reply to this email and tell me about yourself.<\\/h3>\\r\\n<ul>\\r\\n\\t<li>Who are you?<\\/li>\\r\\n\\t<li>What do you do?<\\/li>\\r\\n\\t<li>What are you passionate about?<\\/li>\\r\\n\\t<li><span style=\\"font-family: arial, \'helvetica neue\', helvetica, sans-serif;\\">Consider yourself a beginner or advanced?<\\/span><\\/li>\\r\\n\\t<li><strong>What is one thing that annoys you about\\u00a0Rails or freelancing?<\\/strong><\\/li>\\r\\n<\\/ul>\\r\\nMaybe you have questions about something you\'re stuck on in Rails, front-end, back-end, design, managing time, hourly rates, client problems, invoicing\\/propsals, you name it...\\r\\n\\r\\n<\\/div>\\r\\n<div style=\\"color: #202020;\\">\\r\\n\\r\\nFeel free to keep it short if you\'re busy, but I\'d still love to hear from you.\\u00a0I read and reply to every email that comes my way.\\u00a0Thanks again for joining, and I hope you\'re having an awesome day.\\r\\n\\r\\nTake care,\\r\\nTy\\r\\n\\r\\nP.S. See all the articles I wrote for Rails devs on\\u00a0the blog.\\u00a0<a style=\\"color: #ee4343;\\" href=\\"http:\\/\\/railsvitamins.com\\/\\" target=\\"_blank\\">Check them out if you haven\'t yet<\\/a>. Also follow us on twitter @RailsVitamins\\r\\n\\r\\n<\\/div>","from":"ty@railsvitamins.com","fromName":"Rails Vitamins","replyTo":"ty@railsvitamins.com","routing":null,"conditionalLogic":null,"disableAutoformat":""}}'),
(2, '{"title":"Send a message","description":"Stuck on a project ? Have an idea for the next Rails Vitamin? Or just want to give us a shout? Complete the form or email us at <a href=\\"mailto:ty@dorails.com\\">ty@dorails.com<\\/a> and we\'ll get back with you shortly.","labelPlacement":"top_label","descriptionPlacement":"below","button":{"type":"text","text":"Send","imageUrl":""},"fields":[{"adminLabel":"","adminOnly":"","allowsPrepopulate":false,"defaultValue":"","description":"","content":"","cssClass":"","errorMessage":"","id":1,"inputName":"","isRequired":true,"label":"First Name","noDuplicates":"","size":"medium","type":"text","postCustomFieldName":"","displayAllCategories":false,"displayCaption":"","displayDescription":"","displayTitle":"","inputType":"","rangeMin":"","rangeMax":"","calendarIconType":"","calendarIconUrl":"","dateType":"","dateFormat":"","phoneFormat":"","addressType":"","defaultCountry":"","defaultProvince":"","defaultState":"","hideAddress2":"","hideCountry":"","hideState":"","inputs":null,"nameFormat":"","allowedExtensions":"","captchaType":"","pageNumber":1,"captchaTheme":"","simpleCaptchaSize":"","simpleCaptchaFontColor":"","simpleCaptchaBackgroundColor":"","failed_validation":"","productField":"","enablePasswordInput":"","maxLength":"","enablePrice":"","basePrice":"","multipleFiles":false,"maxFiles":"","calculationFormula":"","calculationRounding":"","enableCalculation":"","disableQuantity":false,"inputMask":false,"inputMaskValue":"","formId":2,"descriptionPlacement":"below"},{"adminLabel":"","adminOnly":"","allowsPrepopulate":false,"defaultValue":"","description":"","content":"","cssClass":"","errorMessage":"","id":2,"inputName":"","isRequired":true,"label":"Last Name","noDuplicates":"","size":"medium","type":"text","postCustomFieldName":"","displayAllCategories":false,"displayCaption":"","displayDescription":"","displayTitle":"","inputType":"","rangeMin":"","rangeMax":"","calendarIconType":"","calendarIconUrl":"","dateType":"","dateFormat":"","phoneFormat":"","addressType":"","defaultCountry":"","defaultProvince":"","defaultState":"","hideAddress2":"","hideCountry":"","hideState":"","inputs":null,"nameFormat":"","allowedExtensions":"","captchaType":"","pageNumber":1,"captchaTheme":"","simpleCaptchaSize":"","simpleCaptchaFontColor":"","simpleCaptchaBackgroundColor":"","failed_validation":"","productField":"","enablePasswordInput":"","maxLength":"","enablePrice":"","basePrice":"","multipleFiles":false,"maxFiles":"","calculationFormula":"","calculationRounding":"","enableCalculation":"","disableQuantity":false,"inputMask":false,"inputMaskValue":"","formId":2,"descriptionPlacement":"below"},{"adminLabel":"","adminOnly":"","allowsPrepopulate":false,"defaultValue":"","description":"","content":"","cssClass":"","errorMessage":"","id":3,"inputName":"","isRequired":true,"label":"Email","noDuplicates":"","size":"medium","type":"email","postCustomFieldName":"","displayAllCategories":false,"displayCaption":"","displayDescription":"","displayTitle":"","inputType":"","rangeMin":"","rangeMax":"","calendarIconType":"","calendarIconUrl":"","dateType":"","dateFormat":"","phoneFormat":"","addressType":"","defaultCountry":"","defaultProvince":"","defaultState":"","hideAddress2":"","hideCountry":"","hideState":"","inputs":null,"nameFormat":"","allowedExtensions":"","captchaType":"","pageNumber":1,"captchaTheme":"","simpleCaptchaSize":"","simpleCaptchaFontColor":"","simpleCaptchaBackgroundColor":"","failed_validation":"","productField":"","enablePasswordInput":"","maxLength":"","enablePrice":"","basePrice":"","multipleFiles":false,"maxFiles":"","calculationFormula":"","calculationRounding":"","enableCalculation":"","disableQuantity":false,"inputMask":false,"inputMaskValue":"","formId":2,"descriptionPlacement":"below"},{"adminLabel":"","adminOnly":"","allowsPrepopulate":"","defaultValue":"","description":"","content":"","cssClass":"","errorMessage":"","id":4,"inputName":"","isRequired":false,"label":"Phone","noDuplicates":"","size":"medium","type":"phone","postCustomFieldName":"","displayAllCategories":"","displayCaption":"","displayDescription":"","displayTitle":"","inputType":"","rangeMin":"","rangeMax":"","calendarIconType":"","calendarIconUrl":"","dateType":"","dateFormat":"","phoneFormat":"standard","addressType":"","defaultCountry":"","defaultProvince":"","defaultState":"","hideAddress2":"","hideCountry":"","hideState":"","inputs":null,"nameFormat":"","allowedExtensions":"","captchaType":"","pageNumber":1,"captchaTheme":"","simpleCaptchaSize":"","simpleCaptchaFontColor":"","simpleCaptchaBackgroundColor":"","failed_validation":"","productField":"","enablePasswordInput":"","maxLength":"","enablePrice":"","basePrice":"","formId":2,"descriptionPlacement":"below"},{"adminLabel":"","adminOnly":"","allowsPrepopulate":false,"defaultValue":"","description":"","content":"","cssClass":"gf_full","errorMessage":"","id":5,"inputName":"","isRequired":true,"label":"Message","noDuplicates":"","size":"medium","type":"textarea","postCustomFieldName":"","displayAllCategories":false,"displayCaption":"","displayDescription":"","displayTitle":"","inputType":"","rangeMin":"","rangeMax":"","calendarIconType":"","calendarIconUrl":"","dateType":"","dateFormat":"","phoneFormat":"","addressType":"","defaultCountry":"","defaultProvince":"","defaultState":"","hideAddress2":"","hideCountry":"","hideState":"","inputs":null,"nameFormat":"","allowedExtensions":"","captchaType":"","pageNumber":1,"captchaTheme":"","simpleCaptchaSize":"","simpleCaptchaFontColor":"","simpleCaptchaBackgroundColor":"","failed_validation":"","productField":"","enablePasswordInput":"","maxLength":"","enablePrice":"","basePrice":"","multipleFiles":false,"maxFiles":"","calculationFormula":"","calculationRounding":"","enableCalculation":"","disableQuantity":false,"inputMask":false,"inputMaskValue":"","formId":2,"descriptionPlacement":"below"},{"id":6,"label":"Opt In","adminLabel":"","type":"checkbox","isRequired":false,"size":"medium","errorMessage":"","choices":[{"text":"I want to recieve Rails Vitamins newsletter","value":"I want to recieve Rails Vitamins newsletter","isSelected":false,"price":""}],"inputs":[{"id":"6.1","label":"I want to recieve Rails Vitamins newsletter","name":""}],"multipleFiles":false,"maxFiles":"","calculationFormula":"","calculationRounding":"","enableCalculation":"","disableQuantity":false,"displayAllCategories":false,"inputMask":false,"inputMaskValue":"","allowsPrepopulate":false}],"id":2,"useCurrentUserAsAuthor":true,"postContentTemplateEnabled":false,"postTitleTemplateEnabled":false,"postTitleTemplate":"","postContentTemplate":"","lastPageButton":null,"pagination":null,"firstPageCssClass":null,"cssClass":"gplaceholder","enableHoneypot":"","enableAnimation":"","limitEntries":"","limitEntriesCount":"","limitEntriesPeriod":"","limitEntriesMessage":"","scheduleForm":"","scheduleStart":"","scheduleStartHour":"","scheduleStartMinute":"","scheduleStartAmpm":"","scheduleEnd":"","scheduleEndHour":"","scheduleEndMinute":"","scheduleEndAmpm":"","schedulePendingMessage":"","scheduleMessage":"","requireLogin":"","requireLoginMessage":""}', NULL, '{"53a0a97fe01f7":{"id":"53a0a97fe01f7","name":"Default Confirmation","isDefault":"1","type":"message","message":"Thanks for contacting us! We will get in touch with you shortly.","url":"","pageId":"","queryString":"","disableAutoformat":"","conditionalLogic":[]}}', '{"53a0a97fdff03":{"id":"53a0a97fdff03","to":"{admin_email}","name":"Admin Notification","event":"form_submission","toType":"email","subject":"New submission from {form_title}","message":"{all_fields}"}}'),
(3, '{"title":"Notify me when <i>30-Day Rails<\\/i> is released","description":"Find out the latest on when 30-Day Rails will be available by signing up below. And in the mean time you\'ll get awesome Ruby on Rails tips & tricks.","labelPlacement":"top_label","descriptionPlacement":"below","button":{"type":"text","text":"Notify Me","imageUrl":""},"fields":[{"adminLabel":"","adminOnly":"","allowsPrepopulate":false,"defaultValue":"","description":"","content":"","cssClass":"","errorMessage":"","id":4,"inputName":"","isRequired":true,"label":"First Name","noDuplicates":"","size":"large","type":"text","postCustomFieldName":"","displayAllCategories":false,"displayCaption":"","displayDescription":"","displayTitle":"","inputType":"","rangeMin":"","rangeMax":"","calendarIconType":"","calendarIconUrl":"","dateType":"","dateFormat":"","phoneFormat":"","addressType":"","defaultCountry":"","defaultProvince":"","defaultState":"","hideAddress2":"","hideCountry":"","hideState":"","inputs":null,"nameFormat":"","allowedExtensions":"","captchaType":"","pageNumber":1,"captchaTheme":"","simpleCaptchaSize":"","simpleCaptchaFontColor":"","simpleCaptchaBackgroundColor":"","failed_validation":"","productField":"","enablePasswordInput":"","maxLength":"","enablePrice":"","basePrice":"","multipleFiles":false,"maxFiles":"","calculationFormula":"","calculationRounding":"","enableCalculation":"","disableQuantity":false,"inputMask":false,"inputMaskValue":"","formId":3,"descriptionPlacement":"below"},{"adminLabel":"","adminOnly":"","allowsPrepopulate":false,"defaultValue":"","description":"","content":"","cssClass":"","errorMessage":"Don\'t forget your email","id":3,"inputName":"","isRequired":true,"label":"Email","noDuplicates":false,"size":"large","type":"email","postCustomFieldName":"","displayAllCategories":false,"displayCaption":"","displayDescription":"","displayTitle":"","inputType":"","rangeMin":"","rangeMax":"","calendarIconType":"","calendarIconUrl":"","dateType":"","dateFormat":"","phoneFormat":"","addressType":"","defaultCountry":"","defaultProvince":"","defaultState":"","hideAddress2":"","hideCountry":"","hideState":"","inputs":null,"nameFormat":"","allowedExtensions":"","captchaType":"","pageNumber":1,"captchaTheme":"","simpleCaptchaSize":"","simpleCaptchaFontColor":"","simpleCaptchaBackgroundColor":"","failed_validation":"","productField":"","enablePasswordInput":"","maxLength":"","enablePrice":"","basePrice":"","multipleFiles":false,"maxFiles":"","calculationFormula":"","calculationRounding":"","enableCalculation":"","disableQuantity":false,"inputMask":false,"inputMaskValue":"","formId":3,"descriptionPlacement":"below"}],"id":3,"useCurrentUserAsAuthor":true,"postContentTemplateEnabled":false,"postTitleTemplateEnabled":false,"postTitleTemplate":"","postContentTemplate":"","lastPageButton":null,"pagination":null,"firstPageCssClass":null,"cssClass":"gplaceholder","enableHoneypot":"","enableAnimation":"","limitEntries":"","limitEntriesCount":"","limitEntriesPeriod":"","limitEntriesMessage":"","scheduleForm":"","scheduleStart":"","scheduleStartHour":"","scheduleStartMinute":"","scheduleStartAmpm":"","scheduleEnd":"","scheduleEndHour":"","scheduleEndMinute":"","scheduleEndAmpm":"","schedulePendingMessage":"","scheduleMessage":"","requireLogin":"","requireLoginMessage":"","notifications":{"539f68a36dc50":{"id":"539f68a36dc50","to":"{admin_email}","name":"Admin Notification","event":"form_submission","toType":"email","subject":"New submission from {form_title}","message":"{all_fields}"},"53f906dd24c7d":{"isActive":true,"id":"53f906dd24c7d","name":"User Autoresponse","event":"form_submission","to":"3","toType":"field","bcc":"","subject":"Thanks for your interest in Rails Curve","message":"Hey\\u00a0{First Name:4},\\r\\n\\r\\nThanks for checking out 30-Day Rails<em>.\\u00a0<\\/em>\\r\\n\\r\\nMy name is Ty, and I\'m a developer trying to kill the\\u00a0barrier to entry to learn Ruby on Rails and build apps. I\'m working out the details right now to get 30-Day Rails\\u00a0launched soon. I\'ll keep you posted on the release date.\\r\\n\\r\\nI know we just met, but can I ask you a favor? I\'m trying to make this the best product for you. If you have a quick second could you please shoot me an\\u00a0email with the following:\\r\\n<ul>\\r\\n\\t<li>Tell me a bit about yourself?<\\/li>\\r\\n\\t<li>What are you passionate about?<\\/li>\\r\\n\\t<li>Would you consider yourself a beginner or advanced at Rails?<\\/li>\\r\\n\\t<li>What you are hoping to get from 30-Day Rails?<\\/li>\\r\\n<\\/ul>\\r\\nIn the mean time checkout my weekly Rails tips and tricks on <a href=\\"http:\\/\\/dev.dorails.com\\/railsvitamins\\">Rails Vitamins<\\/a>. \\u00a0Talk to you soon!\\r\\n\\r\\nCheers,\\r\\nTy","from":"ty@railsvitamins.com","fromName":"30-Day Rails","replyTo":"ty@railsvitamins.com","routing":null,"conditionalLogic":null,"disableAutoformat":""}},"confirmations":{"539f68a36e35d":{"id":"539f68a36e35d","name":"Default Confirmation","isDefault":"1","type":"page","message":"","url":"","pageId":"264","queryString":"","disableAutoformat":"","conditionalLogic":[]}}}', '', '{"539f68a36e35d":{"id":"539f68a36e35d","name":"Default Confirmation","isDefault":"1","type":"page","message":"","url":"","pageId":"264","queryString":"","disableAutoformat":"","conditionalLogic":[]}}', '{"539f68a36dc50":{"id":"539f68a36dc50","to":"{admin_email}","name":"Admin Notification","event":"form_submission","toType":"email","subject":"New submission from {form_title}","message":"{all_fields}"},"53f906dd24c7d":{"isActive":true,"id":"53f906dd24c7d","name":"User Autoresponse","event":"form_submission","to":"3","toType":"field","bcc":"","subject":"Thanks for your interest in Rails Curve","message":"Hey\\u00a0{First Name:4},\\r\\n\\r\\nThanks for checking out 30-Day Rails<em>.\\u00a0<\\/em>\\r\\n\\r\\nMy name is Ty, and I\'m a developer trying to kill the\\u00a0barrier to entry to learn Ruby on Rails and build apps. I\'m working out the details right now to get 30-Day Rails\\u00a0launched soon. I\'ll keep you posted on the release date.\\r\\n\\r\\nI know we just met, but can I ask you a favor? I\'m trying to make this the best product for you. If you have a quick second could you please shoot me an\\u00a0email with the following:\\r\\n<ul>\\r\\n\\t<li>Tell me a bit about yourself?<\\/li>\\r\\n\\t<li>What are you passionate about?<\\/li>\\r\\n\\t<li>Would you consider yourself a beginner or advanced at Rails?<\\/li>\\r\\n\\t<li>What you are hoping to get from 30-Day Rails?<\\/li>\\r\\n<\\/ul>\\r\\nIn the mean time checkout my weekly Rails tips and tricks on <a href=\\"http:\\/\\/dev.dorails.com\\/railsvitamins\\">Rails Vitamins<\\/a>. \\u00a0Talk to you soon!\\r\\n\\r\\nCheers,\\r\\nTy","from":"ty@railsvitamins.com","fromName":"30-Day Rails","replyTo":"ty@railsvitamins.com","routing":null,"conditionalLogic":null,"disableAutoformat":""}}'),
(4, '{"title":"Pre-Order and Pay What You Want","description":"","labelPlacement":"top_label","descriptionPlacement":"below","button":{"type":"text","text":"Pre-Order Now","imageUrl":""},"fields":[{"adminLabel":"","adminOnly":"","allowsPrepopulate":false,"defaultValue":"","description":"","content":"","cssClass":"","errorMessage":"","id":6,"inputName":"","isRequired":true,"label":"Price","noDuplicates":"","size":"large","type":"product","postCustomFieldName":"","displayAllCategories":false,"displayCaption":"","displayDescription":"","displayTitle":"","inputType":"select","rangeMin":"","rangeMax":"","calendarIconType":"","calendarIconUrl":"","dateType":"","dateFormat":"","phoneFormat":"","addressType":"","defaultCountry":"","defaultProvince":"","defaultState":"","hideAddress2":"","hideCountry":"","hideState":"","inputs":null,"nameFormat":"","allowedExtensions":"","captchaType":"","pageNumber":1,"captchaTheme":"","simpleCaptchaSize":"","simpleCaptchaFontColor":"","simpleCaptchaBackgroundColor":"","failed_validation":"","productField":"","enablePasswordInput":"","maxLength":"","enablePrice":true,"basePrice":"$0.00","multipleFiles":false,"maxFiles":"","calculationFormula":"","calculationRounding":"","enableCalculation":"","disableQuantity":false,"inputMask":false,"inputMaskValue":"","choices":[{"text":"Select your price","value":"Select your price","isSelected":false,"price":""},{"text":"$0.01","value":"$0.01","isSelected":false,"price":"$0.01"},{"text":"$10.00","value":"$10.00","isSelected":false,"price":"$10.00"},{"text":"$15.00","value":"$15.00","isSelected":false,"price":"$15.00"},{"text":"$20.00","value":"$20.00","isSelected":false,"price":"$20.00"},{"text":"$25.00","value":"$25.00","isSelected":false,"price":"$25.00"},{"text":"$30.00","value":"$30.00","isSelected":false,"price":"$30.00"},{"text":"$35.00","value":"$35.00","isSelected":false,"price":"$35.00"},{"text":"$40.00","value":"$40.00","isSelected":false,"price":"$40.00"},{"text":"$45.00","value":"$45.00","isSelected":false,"price":"$45.00"},{"text":"$50.00","value":"$50.00","isSelected":false,"price":"$50.00"},{"text":"$55.00","value":"$55.00","isSelected":false,"price":"$55.00"},{"text":"$60.00","value":"$60.00","isSelected":false,"price":"$60.00"},{"text":"$65.00","value":"$65.00","isSelected":false,"price":"$65.00"},{"text":"$70.00","value":"$70.00","isSelected":false,"price":"$70.00"},{"text":"$75.00","value":"$75.00","isSelected":false,"price":"$75.00"},{"text":"$80.00","value":"$80.00","isSelected":false,"price":"$80.00"},{"text":"$80.00","value":"$80.00","isSelected":false,"price":"$80.00"},{"text":"$85.00","value":"$85.00","isSelected":false,"price":"$85.00"},{"text":"$90.00","value":"$90.00","isSelected":false,"price":"$90.00"},{"text":"$95.00","value":"$95.00","isSelected":false,"price":"$95.00"},{"text":"$100.00","value":"$100.00","isSelected":false,"price":"$100.00"}],"enableChoiceValue":false,"enableEnhancedUI":0,"formId":4,"descriptionPlacement":"below"},{"adminLabel":"","adminOnly":"","allowsPrepopulate":false,"defaultValue":"","description":"","content":"","cssClass":"gf_left_half","errorMessage":"","id":1,"inputName":"","isRequired":true,"label":"First Name","noDuplicates":"","size":"medium","type":"text","postCustomFieldName":"","displayAllCategories":false,"displayCaption":"","displayDescription":"","displayTitle":"","inputType":"","rangeMin":"","rangeMax":"","calendarIconType":"","calendarIconUrl":"","dateType":"","dateFormat":"","phoneFormat":"","addressType":"","defaultCountry":"","defaultProvince":"","defaultState":"","hideAddress2":"","hideCountry":"","hideState":"","inputs":null,"nameFormat":"","allowedExtensions":"","captchaType":"","pageNumber":1,"captchaTheme":"","simpleCaptchaSize":"","simpleCaptchaFontColor":"","simpleCaptchaBackgroundColor":"","failed_validation":"","productField":"","enablePasswordInput":"","maxLength":"","enablePrice":"","basePrice":"","multipleFiles":false,"maxFiles":"","calculationFormula":"","calculationRounding":"","enableCalculation":"","disableQuantity":false,"inputMask":false,"inputMaskValue":"","formId":4,"descriptionPlacement":"below","conditionalLogic":{"actionType":"show","logicType":"all","rules":[{"fieldId":"6","operator":"isnot","value":"Select your price"}]}},{"adminLabel":"","adminOnly":"","allowsPrepopulate":false,"defaultValue":"","description":"","content":"","cssClass":"gf_right_half","errorMessage":"","id":2,"inputName":"","isRequired":true,"label":"Last Name","noDuplicates":"","size":"medium","type":"text","postCustomFieldName":"","displayAllCategories":false,"displayCaption":"","displayDescription":"","displayTitle":"","inputType":"","rangeMin":"","rangeMax":"","calendarIconType":"","calendarIconUrl":"","dateType":"","dateFormat":"","phoneFormat":"","addressType":"","defaultCountry":"","defaultProvince":"","defaultState":"","hideAddress2":"","hideCountry":"","hideState":"","inputs":null,"nameFormat":"","allowedExtensions":"","captchaType":"","pageNumber":1,"captchaTheme":"","simpleCaptchaSize":"","simpleCaptchaFontColor":"","simpleCaptchaBackgroundColor":"","failed_validation":"","productField":"","enablePasswordInput":"","maxLength":"","enablePrice":"","basePrice":"","multipleFiles":false,"maxFiles":"","calculationFormula":"","calculationRounding":"","enableCalculation":"","disableQuantity":false,"inputMask":false,"inputMaskValue":"","formId":4,"descriptionPlacement":"below","conditionalLogic":{"actionType":"show","logicType":"all","rules":[{"fieldId":"6","operator":"isnot","value":"Select your price"}]}},{"adminLabel":"","adminOnly":"","allowsPrepopulate":false,"defaultValue":"","description":"","content":"","cssClass":"gf_left_half","errorMessage":"","id":3,"inputName":"","isRequired":true,"label":"Email","noDuplicates":false,"size":"medium","type":"email","postCustomFieldName":"","displayAllCategories":false,"displayCaption":"","displayDescription":"","displayTitle":"","inputType":"","rangeMin":"","rangeMax":"","calendarIconType":"","calendarIconUrl":"","dateType":"","dateFormat":"","phoneFormat":"","addressType":"","defaultCountry":"","defaultProvince":"","defaultState":"","hideAddress2":"","hideCountry":"","hideState":"","inputs":null,"nameFormat":"","allowedExtensions":"","captchaType":"","pageNumber":1,"captchaTheme":"","simpleCaptchaSize":"","simpleCaptchaFontColor":"","simpleCaptchaBackgroundColor":"","failed_validation":"","productField":"","enablePasswordInput":"","maxLength":"","enablePrice":"","basePrice":"","multipleFiles":false,"maxFiles":"","calculationFormula":"","calculationRounding":"","enableCalculation":"","disableQuantity":false,"inputMask":false,"inputMaskValue":"","emailConfirmEnabled":false,"formId":4,"descriptionPlacement":"below","conditionalLogic":{"actionType":"show","logicType":"all","rules":[{"fieldId":"6","operator":"isnot","value":"Select your price"}]}},{"adminLabel":"","adminOnly":"","allowsPrepopulate":false,"defaultValue":"","description":"","content":"","cssClass":"gf_right_half","errorMessage":"","id":5,"inputName":"","isRequired":true,"label":"Phone","noDuplicates":"","size":"medium","type":"phone","postCustomFieldName":"","displayAllCategories":false,"displayCaption":"","displayDescription":"","displayTitle":"","inputType":"","rangeMin":"","rangeMax":"","calendarIconType":"","calendarIconUrl":"","dateType":"","dateFormat":"","phoneFormat":"standard","addressType":"","defaultCountry":"","defaultProvince":"","defaultState":"","hideAddress2":"","hideCountry":"","hideState":"","inputs":null,"nameFormat":"","allowedExtensions":"","captchaType":"","pageNumber":1,"captchaTheme":"","simpleCaptchaSize":"","simpleCaptchaFontColor":"","simpleCaptchaBackgroundColor":"","failed_validation":"","productField":"","enablePasswordInput":"","maxLength":"","enablePrice":"","basePrice":"","formId":4,"descriptionPlacement":"below","multipleFiles":false,"maxFiles":"","calculationFormula":"","calculationRounding":"","enableCalculation":"","disableQuantity":false,"inputMask":false,"inputMaskValue":"","conditionalLogic":{"actionType":"show","logicType":"all","rules":[{"fieldId":"6","operator":"isnot","value":"Select your price"}]}},{"adminLabel":"","adminOnly":"","allowsPrepopulate":false,"defaultValue":"","description":"","content":"","cssClass":"","errorMessage":"","id":4,"inputName":"","isRequired":true,"label":"Password","noDuplicates":"","size":"medium","type":"password","postCustomFieldName":"","displayAllCategories":false,"displayCaption":"","displayDescription":"","displayTitle":"","inputType":"","rangeMin":"","rangeMax":"","calendarIconType":"","calendarIconUrl":"","dateType":"","dateFormat":"","phoneFormat":"","addressType":"","defaultCountry":"","defaultProvince":"","defaultState":"","hideAddress2":"","hideCountry":"","hideState":"","inputs":null,"nameFormat":"","allowedExtensions":"","captchaType":"","pageNumber":1,"captchaTheme":"","simpleCaptchaSize":"","simpleCaptchaFontColor":"","simpleCaptchaBackgroundColor":"","failed_validation":"","productField":"","enablePasswordInput":"","maxLength":"","enablePrice":"","basePrice":"","displayOnly":true,"multipleFiles":false,"maxFiles":"","calculationFormula":"","calculationRounding":"","enableCalculation":"","disableQuantity":false,"inputMask":false,"inputMaskValue":"","passwordStrengthEnabled":false,"minPasswordStrength":"","formId":4,"descriptionPlacement":"below","conditionalLogic":{"actionType":"show","logicType":"all","rules":[{"fieldId":"6","operator":"isnot","value":"Select your price"}]}},{"adminLabel":"","adminOnly":"","allowsPrepopulate":false,"defaultValue":"","description":"","content":"","cssClass":"","errorMessage":"","id":8,"inputName":"","isRequired":true,"label":"Credit Card Info","noDuplicates":"","size":"medium","type":"creditcard","postCustomFieldName":"","displayAllCategories":false,"displayCaption":"","displayDescription":"","displayTitle":"","inputType":"","rangeMin":"","rangeMax":"","calendarIconType":"","calendarIconUrl":"","dateType":"","dateFormat":"","phoneFormat":"","addressType":"","defaultCountry":"","defaultProvince":"","defaultState":"","hideAddress2":"","hideCountry":"","hideState":"","inputs":[{"id":8.1,"label":"Card Number","name":""},{"id":8.2,"label":"Expiration Date","name":""},{"id":8.3,"label":"Security Code","name":""},{"id":8.4,"label":"Card Type","name":""},{"id":8.5,"label":"Cardholder\'s Name","name":""}],"nameFormat":"","allowedExtensions":"","captchaType":"","pageNumber":1,"captchaTheme":"","simpleCaptchaSize":"","simpleCaptchaFontColor":"","simpleCaptchaBackgroundColor":"","failed_validation":"","productField":"","enablePasswordInput":"","maxLength":"","enablePrice":"","basePrice":"","multipleFiles":false,"maxFiles":"","calculationFormula":"","calculationRounding":"","enableCalculation":"","disableQuantity":false,"inputMask":false,"inputMaskValue":"","creditCards":["amex","visa","discover","mastercard"],"forceSSL":false,"conditionalLogic":{"actionType":"show","logicType":"all","rules":[{"fieldId":"6","operator":"isnot","value":"Select your price"}]},"formId":4,"descriptionPlacement":"below"}],"id":4,"useCurrentUserAsAuthor":true,"postContentTemplateEnabled":false,"postTitleTemplateEnabled":false,"postTitleTemplate":"","postContentTemplate":"","lastPageButton":null,"pagination":null,"firstPageCssClass":null,"cssClass":"gplaceholder","enableHoneypot":"","enableAnimation":"","limitEntries":"","limitEntriesCount":"","limitEntriesPeriod":"","limitEntriesMessage":"","scheduleForm":"","scheduleStart":"","scheduleStartHour":"","scheduleStartMinute":"","scheduleStartAmpm":"","scheduleEnd":"","scheduleEndHour":"","scheduleEndMinute":"","scheduleEndAmpm":"","schedulePendingMessage":"","scheduleMessage":"","requireLogin":"","requireLoginMessage":""}', '', '{"53f9b6ebef4bb":{"id":"53f9b6ebef4bb","name":"Default Confirmation","isDefault":"1","type":"page","message":"","url":"","pageId":"147","queryString":"","disableAutoformat":"","conditionalLogic":[]}}', '{"53f9b6ebef0ab":{"id":"53f9b6ebef0ab","name":"Admin Notification","event":"form_submission","to":"me@tyrichards.com","toType":"email","bcc":"","subject":"New sign up for Rails Curve","message":"{all_fields}","from":"noreply@dorails.com","fromName":"Rails Curve","replyTo":"","routing":null,"conditionalLogic":null,"disableAutoformat":""},"53f9b96cb327a":{"id":"53f9b96cb327a","name":"User Autoresponse","event":"form_submission","to":"3","toType":"field","bcc":"","subject":"Thanks for Pre-ordering Rails Curve","message":"Hey\\u00a0{First Name:4},\\r\\n\\r\\nThanks for pre-ordering\\u00a0<em>Rails Curve.\\u00a0<\\/em>\\r\\n\\r\\nMy name is Ty, and I\'m a developer trying to kill the\\u00a0barrier to entry to learn Ruby on Rails and build apps. I\'m working out the details right now to get\\u00a0<em>Rails Curve<\\/em>\\u00a0launched in the next coming weeks. I\'ll keep you posted on the release date.\\r\\n\\r\\nI know we just met, but can I ask you a favor? I\'m trying to make this the best product for you. If you have a quick second could you please shoot me an\\u00a0email with the following:\\r\\n<ul>\\r\\n\\t<li>Tell me a bit about yourself?<\\/li>\\r\\n\\t<li>What are you passionate about?<\\/li>\\r\\n\\t<li>Would you consider yourself a beginner or advanced at Rails?<\\/li>\\r\\n\\t<li>What you are hoping to get from\\u00a0Rails Curve?<\\/li>\\r\\n<\\/ul>\\r\\nIn the mean time checkout my weekly Rails tips and tricks on\\u00a0<a href=\\"http:\\/\\/dev.dorails.com\\/railsvitamins\\">Rails Vitamins<\\/a>. \\u00a0Talk to you soon!\\r\\n\\r\\nCheers,\\r\\nTy","from":"me@tyrichards.com","fromName":"Rails Curve","replyTo":"me@tyrichards.com","routing":null,"conditionalLogic":null,"disableAutoformat":""}}') ;

#
# End of data contents of table `wp_rg_form_meta`
# --------------------------------------------------------



#
# Delete any existing table `wp_rg_form_view`
#

DROP TABLE IF EXISTS `wp_rg_form_view`;


#
# Table structure of table `wp_rg_form_view`
#

CREATE TABLE `wp_rg_form_view` (
  `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `form_id` mediumint(8) unsigned NOT NULL,
  `date_created` datetime NOT NULL,
  `ip` char(15) DEFAULT NULL,
  `count` mediumint(8) unsigned NOT NULL DEFAULT '1',
  PRIMARY KEY (`id`),
  KEY `form_id` (`form_id`)
) ENGINE=InnoDB AUTO_INCREMENT=288 DEFAULT CHARSET=utf8;


#
# Data contents of table `wp_rg_form_view`
#
INSERT INTO `wp_rg_form_view` ( `id`, `form_id`, `date_created`, `ip`, `count`) VALUES
(1, 1, '2014-06-16 22:05:36', '127.0.0.1', 15),
(2, 1, '2014-06-17 02:22:27', '127.0.0.1', 42),
(3, 1, '2014-06-17 03:03:29', '127.0.0.1', 39),
(4, 1, '2014-06-17 12:57:44', '127.0.0.1', 2),
(5, 1, '2014-06-17 15:43:25', '127.0.0.1', 8),
(6, 1, '2014-06-17 16:23:31', '127.0.0.1', 7),
(7, 1, '2014-06-17 17:04:19', '127.0.0.1', 29),
(8, 1, '2014-06-17 18:01:30', '127.0.0.1', 95),
(9, 1, '2014-06-17 19:00:02', '127.0.0.1', 23),
(10, 1, '2014-06-17 20:15:35', '127.0.0.1', 24),
(11, 2, '2014-06-17 20:51:30', '127.0.0.1', 3),
(12, 2, '2014-06-17 21:00:05', '127.0.0.1', 2),
(13, 1, '2014-06-17 21:04:14', '127.0.0.1', 212),
(14, 1, '2014-06-17 22:03:05', '127.0.0.1', 15),
(15, 2, '2014-06-18 00:23:31', '64.125.188.26', 5),
(16, 1, '2014-06-18 00:47:47', '127.0.0.1', 5),
(17, 1, '2014-06-23 19:09:40', '127.0.0.1', 1),
(18, 1, '2014-08-01 17:13:14', '127.0.0.1', 22),
(19, 1, '2014-08-01 18:00:21', '127.0.0.1', 3),
(20, 1, '2014-08-01 19:42:36', '127.0.0.1', 1),
(21, 1, '2014-08-01 20:52:29', '127.0.0.1', 5),
(22, 1, '2014-08-01 21:04:01', '127.0.0.1', 23),
(23, 1, '2014-08-01 22:08:38', '127.0.0.1', 2),
(24, 1, '2014-08-02 01:13:23', '127.0.0.1', 1),
(25, 1, '2014-08-02 06:20:22', '127.0.0.1', 9),
(26, 1, '2014-08-02 15:10:22', '127.0.0.1', 2),
(27, 1, '2014-08-02 21:59:25', '127.0.0.1', 1),
(28, 1, '2014-08-02 22:00:06', '127.0.0.1', 14),
(29, 1, '2014-08-02 23:35:50', '127.0.0.1', 25),
(30, 1, '2014-08-03 00:01:17', '127.0.0.1', 43),
(31, 2, '2014-08-03 00:12:29', '127.0.0.1', 1),
(32, 1, '2014-08-03 02:17:15', '127.0.0.1', 3),
(33, 1, '2014-08-04 13:44:05', '127.0.0.1', 2),
(34, 1, '2014-08-04 14:35:00', '127.0.0.1', 1),
(35, 1, '2014-08-04 15:53:59', '66.249.84.36', 3),
(36, 1, '2014-08-04 16:00:28', '66.249.67.73', 45),
(37, 2, '2014-08-04 16:16:25', '63.163.55.1', 1),
(38, 1, '2014-08-04 17:23:37', '166.78.181.113', 5),
(39, 1, '2014-08-04 18:08:15', '50.28.55.90', 12),
(40, 1, '2014-08-04 19:19:03', '92.222.3.13', 73),
(41, 1, '2014-08-04 20:01:33', '54.176.5.146', 27),
(42, 1, '2014-08-04 21:08:31', '71.170.133.143', 15),
(43, 1, '2014-08-04 22:00:19', '23.242.64.49', 20),
(44, 1, '2014-08-04 23:10:48', '66.249.85.93', 2),
(45, 1, '2014-08-05 00:06:18', '69.7.115.126', 3),
(46, 1, '2014-08-05 02:34:54', '88.190.23.224', 2),
(47, 1, '2014-08-05 03:07:45', '149.254.224.238', 6),
(48, 1, '2014-08-05 04:09:51', '107.77.64.79', 9),
(49, 1, '2014-08-05 05:31:06', '94.23.251.171', 8),
(50, 1, '2014-08-05 06:17:21', '150.70.173.41', 4),
(51, 1, '2014-08-05 07:15:40', '50.18.91.166', 3),
(52, 1, '2014-08-05 09:42:59', '66.249.67.47', 1),
(53, 1, '2014-08-05 11:12:59', '2.124.247.105', 4),
(54, 1, '2014-08-05 12:01:18', '172.7.240.55', 3),
(55, 1, '2014-08-05 13:32:58', '5.255.228.41', 3),
(56, 1, '2014-08-05 14:09:23', '69.41.14.130', 10),
(57, 1, '2014-08-05 15:21:21', '66.249.67.47', 53),
(58, 1, '2014-08-05 16:00:11', '107.21.185.75', 19),
(59, 1, '2014-08-05 17:00:37', '69.15.199.198', 7),
(60, 1, '2014-08-05 18:06:13', '99.8.38.146', 7),
(61, 1, '2014-08-05 20:13:31', '74.6.254.133', 10),
(62, 1, '2014-08-05 21:02:07', '205.201.132.14', 6),
(63, 1, '2014-08-05 22:49:21', '64.125.188.25', 2),
(64, 1, '2014-08-06 00:38:41', '66.249.85.93', 4),
(65, 1, '2014-08-06 01:33:14', '8.28.16.254', 6),
(66, 1, '2014-08-06 02:31:03', '66.249.67.73', 7),
(67, 1, '2014-08-06 04:36:50', '37.200.65.208', 2),
(68, 1, '2014-08-06 05:34:51', '23.112.33.168', 6),
(69, 1, '2014-08-06 09:15:41', '166.147.88.40', 3),
(70, 1, '2014-08-06 13:47:10', '5.9.112.67', 3),
(71, 1, '2014-08-06 14:21:41', '5.255.228.41', 1),
(72, 1, '2014-08-06 16:07:45', '54.83.163.76', 3),
(73, 1, '2014-08-06 17:08:19', '107.77.80.86', 77),
(74, 2, '2014-08-06 17:50:58', '173.74.33.52', 2),
(75, 1, '2014-08-06 18:00:57', '184.173.120.245', 33),
(76, 2, '2014-08-06 18:34:56', '64.125.188.25', 1),
(77, 1, '2014-08-06 19:42:48', '5.9.127.154', 4),
(78, 1, '2014-08-06 20:17:00', '23.114.57.72', 4),
(79, 1, '2014-08-06 21:22:59', '66.249.92.58', 4),
(80, 1, '2014-08-06 23:06:31', '5.255.228.44', 4),
(81, 1, '2014-08-07 00:32:29', '5.9.112.68', 3),
(82, 1, '2014-08-07 01:36:18', '66.249.67.47', 1),
(83, 1, '2014-08-07 02:00:59', '66.249.85.93', 16),
(84, 1, '2014-08-07 05:52:01', '66.249.92.58', 1),
(85, 1, '2014-08-07 09:44:56', '66.249.92.45', 1),
(86, 1, '2014-08-07 13:03:22', '64.125.188.25', 1),
(87, 1, '2014-08-07 15:28:01', '69.58.178.59', 92),
(88, 2, '2014-08-07 15:28:03', '69.58.178.59', 1),
(89, 1, '2014-08-07 16:00:55', '184.173.120.245', 24),
(90, 1, '2014-08-07 17:00:59', '212.56.101.85', 32),
(91, 1, '2014-08-07 18:34:41', '36.251.84.159', 10),
(92, 2, '2014-08-07 18:34:43', '36.251.84.159', 1),
(93, 1, '2014-08-07 19:11:47', '121.205.198.149', 7),
(94, 1, '2014-08-07 20:00:16', '166.147.72.148', 13),
(95, 1, '2014-08-07 21:08:52', '2.123.21.174', 8),
(96, 1, '2014-08-07 22:33:55', '50.201.187.132', 2),
(97, 1, '2014-08-08 01:09:29', '5.255.228.44', 1),
(98, 1, '2014-08-08 04:17:53', '54.237.150.220', 5),
(99, 1, '2014-08-08 05:29:48', '66.249.67.73', 2),
(100, 1, '2014-08-08 06:54:40', '66.249.92.45', 1) ;
INSERT INTO `wp_rg_form_view` ( `id`, `form_id`, `date_created`, `ip`, `count`) VALUES
(101, 1, '2014-08-08 07:32:08', '66.249.67.60', 1),
(102, 1, '2014-08-08 08:49:09', '5.255.228.41', 1),
(103, 1, '2014-08-08 09:13:15', '54.224.168.33', 2),
(104, 1, '2014-08-08 10:30:58', '54.224.168.33', 3),
(105, 1, '2014-08-08 13:36:58', '66.249.69.216', 1),
(106, 1, '2014-08-08 14:17:52', '66.249.69.247', 17),
(107, 1, '2014-08-08 15:27:24', '64.134.157.250', 4),
(108, 1, '2014-08-08 19:11:39', '66.249.69.247', 11),
(109, 1, '2014-08-08 20:22:59', '207.244.73.5', 5),
(110, 1, '2014-08-08 21:36:20', '66.249.69.216', 12),
(111, 1, '2014-08-08 22:47:40', '92.58.229.93', 5),
(112, 1, '2014-08-08 23:58:04', '180.110.199.192', 4),
(113, 1, '2014-08-09 01:15:01', '5.9.127.154', 5),
(114, 1, '2014-08-09 03:13:30', '66.249.69.232', 1),
(115, 1, '2014-08-09 05:11:49', '5.255.228.41', 1),
(116, 1, '2014-08-09 11:43:33', '198.101.238.203', 4),
(117, 1, '2014-08-09 12:22:27', '166.78.181.113', 4),
(118, 1, '2014-08-09 14:54:09', '66.249.64.62', 4),
(119, 1, '2014-08-09 17:01:31', '134.225.2.2', 1),
(120, 1, '2014-08-09 20:02:26', '208.43.251.182', 4),
(121, 1, '2014-08-09 21:21:02', '66.249.64.67', 4),
(122, 1, '2014-08-09 22:06:40', '108.184.181.101', 6),
(123, 1, '2014-08-10 01:13:55', '66.249.64.62', 1),
(124, 1, '2014-08-10 02:11:10', '66.249.64.62', 1),
(125, 1, '2014-08-10 06:04:38', '66.249.64.67', 4),
(126, 1, '2014-08-10 07:35:54', '80.79.120.238', 6),
(127, 1, '2014-08-10 12:37:37', '66.249.64.67', 1),
(128, 1, '2014-08-10 13:01:02', '66.249.64.62', 5),
(129, 1, '2014-08-10 16:13:28', '66.249.85.93', 8),
(130, 1, '2014-08-10 17:26:02', '66.249.67.60', 1),
(131, 1, '2014-08-10 18:06:20', '66.249.67.73', 1),
(132, 1, '2014-08-11 04:45:09', '178.154.163.29', 4),
(133, 1, '2014-08-11 05:06:12', '54.221.199.147', 2),
(134, 1, '2014-08-11 07:14:32', '27.150.222.246', 4),
(135, 1, '2014-08-11 08:21:08', '66.249.67.60', 1),
(136, 1, '2014-08-11 13:22:41', '66.249.88.93', 4),
(137, 1, '2014-08-11 14:07:08', '66.249.76.189', 11),
(138, 1, '2014-08-11 15:43:19', '199.16.156.126', 4),
(139, 1, '2014-08-11 16:01:41', '199.116.169.254', 16),
(140, 2, '2014-08-11 16:03:31', '199.116.169.254', 2),
(141, 1, '2014-08-11 17:17:19', '66.249.76.189', 5),
(142, 1, '2014-08-11 18:55:21', '66.249.76.189', 1),
(143, 1, '2014-08-11 19:37:38', '89.145.108.203', 1),
(144, 1, '2014-08-11 23:20:32', '192.99.39.75', 8),
(145, 1, '2014-08-12 01:30:13', '41.184.34.98', 4),
(146, 1, '2014-08-12 02:17:58', '24.117.96.4', 4),
(147, 1, '2014-08-12 03:36:10', '216.52.242.13', 1),
(148, 1, '2014-08-12 04:45:07', '66.249.67.60', 1),
(149, 1, '2014-08-12 05:58:10', '199.16.156.125', 1),
(150, 1, '2014-08-12 07:32:05', '216.52.242.14', 1),
(151, 1, '2014-08-12 13:39:45', '77.87.78.7', 1),
(152, 1, '2014-08-12 14:54:11', '66.249.65.32', 4),
(153, 1, '2014-08-12 16:03:59', '66.220.158.119', 5),
(154, 1, '2014-08-12 18:22:56', '54.189.129.82', 4),
(155, 1, '2014-08-12 19:11:01', '66.249.65.40', 21),
(156, 1, '2014-08-12 20:06:01', '66.249.65.40', 14),
(157, 1, '2014-08-12 22:01:01', '66.249.65.112', 1),
(158, 1, '2014-08-12 23:37:59', '173.74.33.52', 17),
(159, 1, '2014-08-13 00:22:16', '173.74.33.52', 22),
(160, 1, '2014-08-13 01:25:44', '77.87.78.7', 2),
(161, 1, '2014-08-13 03:10:05', '66.249.85.93', 5),
(162, 1, '2014-08-13 08:00:44', '66.249.65.104', 2),
(163, 1, '2014-08-13 09:11:25', '198.27.75.158', 4),
(164, 1, '2014-08-13 16:05:04', '120.147.144.117', 8),
(165, 1, '2014-08-13 19:02:28', '199.16.156.125', 18),
(166, 1, '2014-08-14 00:12:20', '76.10.161.162', 10),
(167, 1, '2014-08-14 04:13:49', '178.154.163.29', 4),
(168, 1, '2014-08-14 05:49:16', '162.216.5.200', 8),
(169, 1, '2014-08-14 07:11:58', '216.52.242.13', 1),
(170, 1, '2014-08-14 13:49:06', '112.18.33.112', 4),
(171, 1, '2014-08-14 14:17:54', '66.249.67.190', 4),
(172, 1, '2014-08-14 15:52:17', '66.196.200.146', 8),
(173, 1, '2014-08-14 16:15:28', '66.249.92.175', 2),
(174, 1, '2014-08-14 17:48:49', '66.249.85.93', 4),
(175, 1, '2014-08-14 23:55:59', '76.31.146.17', 4),
(176, 1, '2014-08-15 00:00:28', '77.87.78.7', 1),
(177, 1, '2014-08-15 01:48:05', '77.87.78.7', 2),
(178, 1, '2014-08-15 02:55:27', '178.154.163.29', 1),
(179, 1, '2014-08-15 03:49:45', '178.154.163.29', 1),
(180, 1, '2014-08-15 07:34:40', '66.249.84.36', 4),
(181, 1, '2014-08-15 08:45:51', '216.52.242.13', 1),
(182, 1, '2014-08-15 09:09:06', '192.99.39.74', 4),
(183, 1, '2014-08-15 13:41:22', '77.87.78.7', 1),
(184, 1, '2014-08-15 14:54:11', '66.249.67.203', 4),
(185, 1, '2014-08-15 22:07:12', '5.255.253.150', 2),
(186, 1, '2014-08-15 23:49:46', '61.155.4.78', 4),
(187, 1, '2014-08-16 00:20:16', '178.154.163.29', 9),
(188, 1, '2014-08-16 08:58:05', '207.46.13.67', 1),
(189, 1, '2014-08-16 10:21:02', '157.55.39.90', 1),
(190, 1, '2014-08-16 12:52:00', '77.87.78.7', 1),
(191, 1, '2014-08-16 17:04:19', '207.46.13.67', 1),
(192, 1, '2014-08-16 18:20:56', '157.55.39.187', 4),
(193, 1, '2014-08-16 19:36:44', '157.55.39.111', 1),
(194, 1, '2014-08-16 20:35:09', '66.249.67.203', 4),
(195, 2, '2014-08-16 20:58:25', '157.55.39.90', 1),
(196, 1, '2014-08-16 21:44:59', '66.249.67.190', 2),
(197, 1, '2014-08-16 22:10:12', '216.52.242.13', 1),
(198, 1, '2014-08-16 23:04:58', '66.249.67.177', 1),
(199, 1, '2014-08-17 00:01:24', '66.249.67.203', 1),
(200, 1, '2014-08-17 02:37:58', '157.55.39.90', 1) ;
INSERT INTO `wp_rg_form_view` ( `id`, `form_id`, `date_created`, `ip`, `count`) VALUES
(201, 1, '2014-08-17 03:25:44', '66.220.152.118', 2),
(202, 1, '2014-08-17 04:23:28', '157.55.39.90', 1),
(203, 1, '2014-08-17 13:01:04', '66.249.64.17', 2),
(204, 1, '2014-08-17 14:17:56', '66.249.64.27', 20),
(205, 1, '2014-08-17 15:11:03', '178.154.163.29', 2),
(206, 1, '2014-08-17 19:35:57', '66.51.177.86', 5),
(207, 1, '2014-08-17 20:16:16', '66.249.64.27', 7),
(208, 1, '2014-08-18 09:29:59', '66.249.64.27', 4),
(209, 1, '2014-08-18 10:50:44', '66.249.64.17', 1),
(210, 1, '2014-08-18 11:42:05', '197.149.64.18', 4),
(211, 1, '2014-08-18 12:34:59', '66.249.65.104', 4),
(212, 1, '2014-08-18 13:14:21', '66.249.65.104', 1),
(213, 1, '2014-08-18 16:12:42', '178.154.163.29', 5),
(214, 1, '2014-08-18 19:04:26', '66.249.65.104', 1),
(215, 1, '2014-08-18 20:26:06', '61.155.4.78', 9),
(216, 1, '2014-08-18 21:57:42', '66.249.65.112', 4),
(217, 1, '2014-08-18 22:47:04', '107.178.200.56', 5),
(218, 1, '2014-08-19 02:22:59', '199.59.148.210', 4),
(219, 1, '2014-08-19 05:42:48', '192.99.39.82', 4),
(220, 1, '2014-08-19 12:28:56', '77.87.78.7', 2),
(221, 1, '2014-08-19 14:27:26', '66.249.85.93', 4),
(222, 1, '2014-08-19 20:11:33', '208.43.245.244', 4),
(223, 1, '2014-08-19 22:31:18', '199.16.156.126', 1),
(224, 1, '2014-08-20 00:33:22', '77.87.78.7', 1),
(225, 1, '2014-08-20 05:46:54', '62.219.8.233', 4),
(226, 1, '2014-08-20 07:52:59', '192.187.126.42', 2),
(227, 1, '2014-08-20 08:43:56', '65.181.126.166', 4),
(228, 1, '2014-08-20 10:56:28', '192.114.71.13', 27),
(229, 2, '2014-08-20 10:57:08', '192.114.71.13', 1),
(230, 1, '2014-08-20 12:07:14', '64.246.178.34', 4),
(231, 1, '2014-08-20 14:17:57', '66.249.64.22', 4),
(232, 1, '2014-08-20 16:37:01', '199.116.169.254', 12),
(233, 1, '2014-08-21 03:21:17', '66.249.85.93', 4),
(234, 2, '2014-08-21 11:09:28', '66.249.64.17', 1),
(235, 1, '2014-08-21 11:48:05', '58.212.43.165', 4),
(236, 1, '2014-08-21 13:49:52', '216.52.242.13', 1),
(237, 1, '2014-08-21 15:06:30', '199.16.156.126', 3),
(238, 1, '2014-08-21 17:05:46', '199.59.148.209', 1),
(239, 1, '2014-08-21 19:49:57', '65.55.213.45', 4),
(240, 1, '2014-08-21 20:40:27', '199.16.156.125', 1),
(241, 1, '2014-08-22 14:34:05', '127.0.0.1', 48),
(242, 1, '2014-08-22 15:04:21', '127.0.0.1', 184),
(243, 1, '2014-08-22 16:00:39', '127.0.0.1', 99),
(244, 1, '2014-08-22 17:14:18', '127.0.0.1', 34),
(245, 1, '2014-08-22 18:31:08', '127.0.0.1', 15),
(246, 1, '2014-08-22 19:00:52', '127.0.0.1', 61),
(247, 2, '2014-08-22 19:06:06', '127.0.0.1', 10),
(248, 1, '2014-08-22 20:05:27', '127.0.0.1', 78),
(249, 1, '2014-08-22 22:14:29', '127.0.0.1', 41),
(250, 1, '2014-08-23 00:27:38', '127.0.0.1', 14),
(251, 1, '2014-08-23 01:00:37', '127.0.0.1', 41),
(252, 1, '2014-08-23 02:14:31', '127.0.0.1', 6),
(253, 1, '2014-09-02 02:37:18', '127.0.0.1', 41),
(254, 3, '2014-09-02 02:37:31', '127.0.0.1', 3),
(255, 3, '2014-09-02 13:18:54', '127.0.0.1', 1),
(256, 1, '2014-09-02 13:18:59', '127.0.0.1', 29),
(257, 1, '2014-09-02 15:01:29', '127.0.0.1', 65),
(258, 3, '2014-09-02 15:01:54', '127.0.0.1', 7),
(259, 3, '2014-09-02 16:03:58', '127.0.0.1', 1),
(260, 1, '2014-09-02 16:19:16', '127.0.0.1', 8),
(261, 3, '2014-09-02 18:29:38', '127.0.0.1', 6),
(262, 1, '2014-09-02 18:34:44', '127.0.0.1', 24),
(263, 3, '2014-09-02 19:14:59', '127.0.0.1', 1),
(264, 1, '2014-09-02 19:24:36', '127.0.0.1', 48),
(265, 1, '2014-09-03 13:13:51', '127.0.0.1', 8),
(266, 1, '2014-09-04 18:30:09', '54.242.232.73', 39),
(267, 3, '2014-09-04 18:31:07', '54.80.210.31', 10),
(268, 3, '2014-09-04 19:02:55', '199.59.148.211', 30),
(269, 1, '2014-09-04 19:06:01', '95.212.51.154', 75),
(270, 1, '2014-09-04 20:45:20', '50.23.254.154', 34),
(271, 3, '2014-09-04 20:46:37', '173.192.79.101', 5),
(272, 1, '2014-09-04 21:00:14', '36.72.73.15', 36),
(273, 3, '2014-09-04 21:01:18', '36.72.73.15', 26),
(274, 2, '2014-09-04 21:01:43', '36.72.73.15', 1),
(275, 3, '2014-09-04 22:03:55', '199.16.156.125', 27),
(276, 1, '2014-09-04 22:37:33', '5.255.228.40', 14),
(277, 4, '2014-09-05 03:04:08', '127.0.0.1', 21),
(278, 3, '2014-09-05 03:04:08', '127.0.0.1', 29),
(279, 1, '2014-09-05 03:42:12', '127.0.0.1', 17),
(280, 4, '2014-09-05 04:04:10', '127.0.0.1', 40),
(281, 3, '2014-09-05 04:04:10', '127.0.0.1', 47),
(282, 1, '2014-09-05 04:10:39', '127.0.0.1', 420),
(283, 1, '2014-09-05 05:02:23', '127.0.0.1', 12),
(284, 3, '2014-09-05 05:02:23', '127.0.0.1', 8),
(285, 4, '2014-09-05 05:02:23', '127.0.0.1', 4),
(286, 3, '2014-09-05 15:06:11', '127.0.0.1', 2),
(287, 4, '2014-09-05 15:06:11', '127.0.0.1', 1) ;

#
# End of data contents of table `wp_rg_form_view`
# --------------------------------------------------------



#
# Delete any existing table `wp_rg_lead`
#

DROP TABLE IF EXISTS `wp_rg_lead`;


#
# Table structure of table `wp_rg_lead`
#

CREATE TABLE `wp_rg_lead` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `form_id` mediumint(8) unsigned NOT NULL,
  `post_id` bigint(20) unsigned DEFAULT NULL,
  `date_created` datetime NOT NULL,
  `is_starred` tinyint(1) NOT NULL DEFAULT '0',
  `is_read` tinyint(1) NOT NULL DEFAULT '0',
  `ip` varchar(39) NOT NULL,
  `source_url` varchar(200) NOT NULL DEFAULT '',
  `user_agent` varchar(250) NOT NULL DEFAULT '',
  `currency` varchar(5) DEFAULT NULL,
  `payment_status` varchar(15) DEFAULT NULL,
  `payment_date` datetime DEFAULT NULL,
  `payment_amount` decimal(19,2) DEFAULT NULL,
  `payment_method` varchar(30) DEFAULT NULL,
  `transaction_id` varchar(50) DEFAULT NULL,
  `is_fulfilled` tinyint(1) DEFAULT NULL,
  `created_by` bigint(20) unsigned DEFAULT NULL,
  `transaction_type` tinyint(1) DEFAULT NULL,
  `status` varchar(20) NOT NULL DEFAULT 'active',
  PRIMARY KEY (`id`),
  KEY `form_id` (`form_id`),
  KEY `status` (`status`)
) ENGINE=InnoDB AUTO_INCREMENT=18 DEFAULT CHARSET=utf8;


#
# Data contents of table `wp_rg_lead`
#
INSERT INTO `wp_rg_lead` ( `id`, `form_id`, `post_id`, `date_created`, `is_starred`, `is_read`, `ip`, `source_url`, `user_agent`, `currency`, `payment_status`, `payment_date`, `payment_amount`, `payment_method`, `transaction_id`, `is_fulfilled`, `created_by`, `transaction_type`, `status`) VALUES
(1, 1, NULL, '2014-06-17 19:41:01', 0, 0, '127.0.0.1', 'http://dev.dev.dorails.com/subscribe/?ckcachecontrol=1403033496', 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/35.0.1916.153 Safari/537.36', 'USD', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'trash'),
(2, 1, NULL, '2014-06-17 20:15:47', 0, 0, '127.0.0.1', 'http://dev.dev.dorails.com/?ckcachecontrol=1403033496', 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/35.0.1916.153 Safari/537.36', 'USD', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'trash'),
(3, 1, NULL, '2014-06-17 22:16:13', 0, 0, '172.4.181.220', 'http://dev.dev.dorails.com/', 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/35.0.1916.153 Safari/537.36', 'USD', NULL, NULL, NULL, NULL, NULL, NULL, 1, NULL, 'trash'),
(5, 1, NULL, '2014-06-17 22:26:47', 0, 0, '172.4.181.220', 'http://dev.dev.dorails.com/', 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/35.0.1916.153 Safari/537.36', 'USD', NULL, NULL, NULL, NULL, NULL, NULL, 1, NULL, 'trash'),
(7, 1, NULL, '2014-06-17 22:32:15', 0, 0, '172.4.181.220', 'http://dev.dev.dorails.com/', 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/35.0.1916.153 Safari/537.36', 'USD', NULL, NULL, NULL, NULL, NULL, NULL, 1, NULL, 'trash'),
(8, 1, NULL, '2014-06-17 22:34:13', 0, 0, '172.4.181.220', 'http://dev.dev.dorails.com/', 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/35.0.1916.153 Safari/537.36', 'USD', NULL, NULL, NULL, NULL, NULL, NULL, 1, NULL, 'trash'),
(9, 1, NULL, '2014-06-17 22:40:45', 0, 0, '172.4.181.220', 'http://dev.dev.dorails.com/', 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/35.0.1916.153 Safari/537.36', 'USD', NULL, NULL, NULL, NULL, NULL, NULL, 1, NULL, 'active'),
(10, 1, NULL, '2014-08-05 03:09:54', 0, 0, '149.254.224.238', 'http://dev.dorails.com/', 'Mozilla/5.0 (Linux; Android 4.1.2; GT-I8190N Build/JZO54K) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/35.0.1916.122 Mobile Safari/537.36', 'USD', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'active'),
(11, 1, NULL, '2014-08-05 05:49:44', 0, 0, '173.74.33.52', 'http://dev.dorails.com/get-going-with-git/', 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10.9; rv:31.0) Gecko/20100101 Firefox/31.0', 'USD', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'active'),
(12, 1, NULL, '2014-08-05 21:10:49', 0, 0, '23.114.57.72', 'http://dev.dorails.com/', 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/36.0.1985.125 Safari/537.36', 'USD', NULL, NULL, NULL, NULL, NULL, NULL, 1, NULL, 'active'),
(13, 1, NULL, '2014-08-05 21:22:01', 0, 0, '23.114.57.72', 'http://dev.dorails.com/', 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/36.0.1985.125 Safari/537.36', 'USD', NULL, NULL, NULL, NULL, NULL, NULL, 1, NULL, 'active'),
(14, 1, NULL, '2014-08-06 18:14:39', 0, 0, '23.114.57.72', 'http://dev.dorails.com/hop-on-the-github-bandwagon/', 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/36.0.1985.125 Safari/537.36', 'USD', NULL, NULL, NULL, NULL, NULL, NULL, 1, NULL, 'active'),
(15, 1, NULL, '2014-08-06 18:36:16', 0, 0, '23.114.57.72', 'http://dev.dorails.com/', 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/36.0.1985.125 Safari/537.36', 'USD', NULL, NULL, NULL, NULL, NULL, NULL, 1, NULL, 'active'),
(16, 1, NULL, '2014-08-12 20:00:54', 0, 0, '66.68.44.162', 'http://dev.dorails.com/hop-on-the-github-bandwagon/', 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/36.0.1985.125 Safari/537.36', 'USD', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'active'),
(17, 3, NULL, '2014-09-04 18:45:07', 0, 0, '84.3.50.101', 'http://dev.dorails.com/30dayrails/', 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10.9; rv:32.0) Gecko/20100101 Firefox/32.0', 'USD', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'active') ;

#
# End of data contents of table `wp_rg_lead`
# --------------------------------------------------------



#
# Delete any existing table `wp_rg_lead_detail`
#

DROP TABLE IF EXISTS `wp_rg_lead_detail`;


#
# Table structure of table `wp_rg_lead_detail`
#

CREATE TABLE `wp_rg_lead_detail` (
  `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `lead_id` int(10) unsigned NOT NULL,
  `form_id` mediumint(8) unsigned NOT NULL,
  `field_number` float NOT NULL,
  `value` varchar(200) DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `form_id` (`form_id`),
  KEY `lead_id` (`lead_id`),
  KEY `lead_field_number` (`lead_id`,`field_number`)
) ENGINE=InnoDB AUTO_INCREMENT=43 DEFAULT CHARSET=utf8;


#
# Data contents of table `wp_rg_lead_detail`
#
INSERT INTO `wp_rg_lead_detail` ( `id`, `lead_id`, `form_id`, `field_number`, `value`) VALUES
(2, 1, 1, '3', 'emily@tyrichards.com'),
(4, 2, 1, '3', 'tyrichards@me.com'),
(6, 3, 1, '3', 'tyrichards@me.com'),
(13, 5, 1, '3', 'tyrichards@me.com'),
(20, 7, 1, '3', 'tyrichards@me.com'),
(22, 8, 1, '3', 'tyrichards@me.com'),
(24, 9, 1, '3', 'tyrichards@me.com'),
(26, 10, 1, '3', 'sthomas03@hotmail.com'),
(28, 11, 1, '3', 'nickme@gher.com'),
(30, 12, 1, '3', 'ty@paradoxsites.com'),
(32, 13, 1, '3', 'me@tyrichards.com'),
(33, 14, 1, '4', 'Ty'),
(35, 14, 1, '3', 'ty@paradoxsites.com'),
(36, 15, 1, '4', 'Ty'),
(38, 15, 1, '3', 'tyrichards@me.com'),
(39, 16, 1, '4', 'Ben'),
(40, 16, 1, '3', 'ben@bjmfactory.com'),
(41, 17, 3, '4', 'Geza'),
(42, 17, 3, '3', 'kutigeza@gmail.com') ;

#
# End of data contents of table `wp_rg_lead_detail`
# --------------------------------------------------------



#
# Delete any existing table `wp_rg_lead_detail_long`
#

DROP TABLE IF EXISTS `wp_rg_lead_detail_long`;


#
# Table structure of table `wp_rg_lead_detail_long`
#

CREATE TABLE `wp_rg_lead_detail_long` (
  `lead_detail_id` bigint(20) unsigned NOT NULL,
  `value` longtext,
  PRIMARY KEY (`lead_detail_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;


#
# Data contents of table `wp_rg_lead_detail_long`
#

#
# End of data contents of table `wp_rg_lead_detail_long`
# --------------------------------------------------------



#
# Delete any existing table `wp_rg_lead_meta`
#

DROP TABLE IF EXISTS `wp_rg_lead_meta`;


#
# Table structure of table `wp_rg_lead_meta`
#

CREATE TABLE `wp_rg_lead_meta` (
  `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `form_id` mediumint(8) unsigned NOT NULL DEFAULT '0',
  `lead_id` bigint(20) unsigned NOT NULL,
  `meta_key` varchar(255) DEFAULT NULL,
  `meta_value` longtext,
  PRIMARY KEY (`id`),
  KEY `meta_key` (`meta_key`),
  KEY `lead_id` (`lead_id`),
  KEY `form_id_meta_key` (`form_id`,`meta_key`)
) ENGINE=InnoDB AUTO_INCREMENT=22 DEFAULT CHARSET=utf8;


#
# Data contents of table `wp_rg_lead_meta`
#
INSERT INTO `wp_rg_lead_meta` ( `id`, `form_id`, `lead_id`, `meta_key`, `meta_value`) VALUES
(1, 1, 2, 'user_registration_feed_id', '1'),
(2, 1, 2, 'mailchimp_is_subscribed', '1'),
(3, 1, 3, 'user_registration_feed_id', '1'),
(4, 1, 3, 'mailchimp_is_subscribed', '1'),
(7, 1, 5, 'user_registration_feed_id', '1'),
(8, 1, 5, 'mailchimp_is_subscribed', '1'),
(11, 1, 7, 'mailchimp_is_subscribed', '1'),
(12, 1, 8, 'mailchimp_is_subscribed', '1'),
(13, 1, 9, 'mailchimp_is_subscribed', '1'),
(14, 1, 10, 'mailchimp_is_subscribed', '1'),
(15, 1, 11, 'mailchimp_is_subscribed', '1'),
(16, 1, 12, 'mailchimp_is_subscribed', '1'),
(17, 1, 13, 'mailchimp_is_subscribed', '1'),
(18, 1, 14, 'mailchimp_is_subscribed', '1'),
(19, 1, 15, 'mailchimp_is_subscribed', '1'),
(20, 1, 16, 'mailchimp_is_subscribed', '1'),
(21, 3, 17, 'mailchimp_is_subscribed', '1') ;

#
# End of data contents of table `wp_rg_lead_meta`
# --------------------------------------------------------



#
# Delete any existing table `wp_rg_lead_notes`
#

DROP TABLE IF EXISTS `wp_rg_lead_notes`;


#
# Table structure of table `wp_rg_lead_notes`
#

CREATE TABLE `wp_rg_lead_notes` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `lead_id` int(10) unsigned NOT NULL,
  `user_name` varchar(250) DEFAULT NULL,
  `user_id` bigint(20) DEFAULT NULL,
  `date_created` datetime NOT NULL,
  `value` longtext,
  `note_type` varchar(50) DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `lead_id` (`lead_id`),
  KEY `lead_user_key` (`lead_id`,`user_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;


#
# Data contents of table `wp_rg_lead_notes`
#

#
# End of data contents of table `wp_rg_lead_notes`
# --------------------------------------------------------



#
# Delete any existing table `wp_rg_mailchimp`
#

DROP TABLE IF EXISTS `wp_rg_mailchimp`;


#
# Table structure of table `wp_rg_mailchimp`
#

CREATE TABLE `wp_rg_mailchimp` (
  `id` mediumint(8) unsigned NOT NULL AUTO_INCREMENT,
  `form_id` mediumint(8) unsigned NOT NULL,
  `is_active` tinyint(1) NOT NULL DEFAULT '1',
  `meta` longtext,
  PRIMARY KEY (`id`),
  KEY `form_id` (`form_id`)
) ENGINE=InnoDB AUTO_INCREMENT=6 DEFAULT CHARSET=utf8;


#
# Data contents of table `wp_rg_mailchimp`
#
INSERT INTO `wp_rg_mailchimp` ( `id`, `form_id`, `is_active`, `meta`) VALUES
(1, 1, 1, 'a:10:{s:12:"double_optin";b:0;s:15:"contact_list_id";s:10:"10300bb940";s:17:"contact_list_name";s:14:"Rails Vitamins";s:6:"groups";a:0:{}s:9:"field_map";a:3:{s:5:"EMAIL";s:1:"3";s:5:"FNAME";s:1:"4";s:5:"LNAME";s:1:"5";}s:13:"welcome_email";b:1;s:13:"optin_enabled";b:0;s:14:"optin_field_id";s:0:"";s:14:"optin_operator";s:0:"";s:11:"optin_value";s:0:"";}'),
(2, 2, 1, 'a:10:{s:12:"double_optin";b:0;s:15:"contact_list_id";s:10:"10300bb940";s:17:"contact_list_name";s:14:"Rails Vitamins";s:6:"groups";a:0:{}s:9:"field_map";a:3:{s:5:"EMAIL";s:1:"3";s:5:"FNAME";s:1:"1";s:5:"LNAME";s:1:"2";}s:13:"welcome_email";b:0;s:13:"optin_enabled";b:1;s:14:"optin_field_id";s:1:"6";s:14:"optin_operator";s:2:"is";s:11:"optin_value";s:43:"I want to recieve Rails Vitamins newsletter";}'),
(3, 3, 1, 'a:10:{s:12:"double_optin";b:0;s:15:"contact_list_id";s:10:"b3309c067e";s:17:"contact_list_name";s:11:"Rails Curve";s:6:"groups";a:0:{}s:9:"field_map";a:3:{s:5:"EMAIL";s:1:"3";s:5:"FNAME";s:1:"4";s:5:"LNAME";s:1:"5";}s:13:"welcome_email";b:0;s:13:"optin_enabled";b:0;s:14:"optin_field_id";s:0:"";s:14:"optin_operator";s:0:"";s:11:"optin_value";s:0:"";}'),
(4, 3, 1, 'a:10:{s:12:"double_optin";b:0;s:15:"contact_list_id";s:10:"10300bb940";s:17:"contact_list_name";s:14:"Rails Vitamins";s:6:"groups";a:0:{}s:9:"field_map";a:3:{s:5:"EMAIL";s:1:"3";s:5:"FNAME";s:1:"4";s:5:"LNAME";s:1:"5";}s:13:"welcome_email";b:0;s:13:"optin_enabled";b:0;s:14:"optin_field_id";s:0:"";s:14:"optin_operator";s:0:"";s:11:"optin_value";s:0:"";}'),
(5, 4, 1, 'a:10:{s:12:"double_optin";b:0;s:15:"contact_list_id";s:10:"e2db7fc8ec";s:17:"contact_list_name";s:31:"Rails Curve Pre-order Customers";s:6:"groups";a:0:{}s:9:"field_map";a:3:{s:5:"EMAIL";s:1:"3";s:5:"FNAME";s:1:"1";s:5:"LNAME";s:1:"2";}s:13:"welcome_email";b:0;s:13:"optin_enabled";b:0;s:14:"optin_field_id";s:0:"";s:14:"optin_operator";s:0:"";s:11:"optin_value";s:0:"";}') ;

#
# End of data contents of table `wp_rg_mailchimp`
# --------------------------------------------------------



#
# Delete any existing table `wp_rg_userregistration`
#

DROP TABLE IF EXISTS `wp_rg_userregistration`;


#
# Table structure of table `wp_rg_userregistration`
#

CREATE TABLE `wp_rg_userregistration` (
  `id` mediumint(8) unsigned NOT NULL AUTO_INCREMENT,
  `form_id` mediumint(8) unsigned NOT NULL,
  `is_active` tinyint(1) NOT NULL DEFAULT '1',
  `meta` longtext,
  PRIMARY KEY (`id`),
  KEY `form_id` (`form_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;


#
# Data contents of table `wp_rg_userregistration`
#

#
# End of data contents of table `wp_rg_userregistration`
# --------------------------------------------------------



#
# Delete any existing table `wp_signups`
#

DROP TABLE IF EXISTS `wp_signups`;


#
# Table structure of table `wp_signups`
#

CREATE TABLE `wp_signups` (
  `signup_id` bigint(20) NOT NULL AUTO_INCREMENT,
  `domain` varchar(200) NOT NULL DEFAULT '',
  `path` varchar(100) NOT NULL DEFAULT '',
  `title` longtext NOT NULL,
  `user_login` varchar(60) NOT NULL DEFAULT '',
  `user_email` varchar(100) NOT NULL DEFAULT '',
  `registered` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `activated` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `active` tinyint(1) NOT NULL DEFAULT '0',
  `activation_key` varchar(50) NOT NULL DEFAULT '',
  `meta` longtext,
  PRIMARY KEY (`signup_id`),
  KEY `activation_key` (`activation_key`),
  KEY `user_email` (`user_email`),
  KEY `user_login_email` (`user_login`,`user_email`),
  KEY `domain_path` (`domain`,`path`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;


#
# Data contents of table `wp_signups`
#

#
# End of data contents of table `wp_signups`
# --------------------------------------------------------



#
# Delete any existing table `wp_term_relationships`
#

DROP TABLE IF EXISTS `wp_term_relationships`;


#
# Table structure of table `wp_term_relationships`
#

CREATE TABLE `wp_term_relationships` (
  `object_id` bigint(20) unsigned NOT NULL DEFAULT '0',
  `term_taxonomy_id` bigint(20) unsigned NOT NULL DEFAULT '0',
  `term_order` int(11) NOT NULL DEFAULT '0',
  PRIMARY KEY (`object_id`,`term_taxonomy_id`),
  KEY `term_taxonomy_id` (`term_taxonomy_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;


#
# Data contents of table `wp_term_relationships`
#
INSERT INTO `wp_term_relationships` ( `object_id`, `term_taxonomy_id`, `term_order`) VALUES
(19, 3, 0),
(20, 3, 0),
(21, 3, 0),
(42, 5, 0),
(52, 5, 0),
(52, 6, 0),
(73, 5, 0),
(88, 5, 0),
(98, 5, 0),
(114, 2, 0),
(115, 2, 0),
(137, 4, 0),
(137, 5, 0),
(137, 6, 0),
(181, 5, 0),
(188, 5, 0),
(209, 2, 0),
(213, 2, 0),
(227, 5, 0),
(233, 5, 0),
(238, 5, 0),
(274, 3, 0) ;

#
# End of data contents of table `wp_term_relationships`
# --------------------------------------------------------



#
# Delete any existing table `wp_term_taxonomy`
#

DROP TABLE IF EXISTS `wp_term_taxonomy`;


#
# Table structure of table `wp_term_taxonomy`
#

CREATE TABLE `wp_term_taxonomy` (
  `term_taxonomy_id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `term_id` bigint(20) unsigned NOT NULL DEFAULT '0',
  `taxonomy` varchar(32) NOT NULL DEFAULT '',
  `description` longtext NOT NULL,
  `parent` bigint(20) unsigned NOT NULL DEFAULT '0',
  `count` bigint(20) NOT NULL DEFAULT '0',
  PRIMARY KEY (`term_taxonomy_id`),
  UNIQUE KEY `term_id_taxonomy` (`term_id`,`taxonomy`),
  KEY `taxonomy` (`taxonomy`)
) ENGINE=InnoDB AUTO_INCREMENT=7 DEFAULT CHARSET=utf8;


#
# Data contents of table `wp_term_taxonomy`
#
INSERT INTO `wp_term_taxonomy` ( `term_taxonomy_id`, `term_id`, `taxonomy`, `description`, `parent`, `count`) VALUES
(1, 1, 'category', '', 0, 0),
(2, 2, 'nav_menu', '', 0, 4),
(3, 3, 'nav_menu', '', 0, 4),
(4, 4, 'category', '', 0, 1),
(5, 5, 'category', '', 0, 11),
(6, 6, 'category', '', 0, 2) ;

#
# End of data contents of table `wp_term_taxonomy`
# --------------------------------------------------------



#
# Delete any existing table `wp_terms`
#

DROP TABLE IF EXISTS `wp_terms`;


#
# Table structure of table `wp_terms`
#

CREATE TABLE `wp_terms` (
  `term_id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(200) NOT NULL DEFAULT '',
  `slug` varchar(200) NOT NULL DEFAULT '',
  `term_group` bigint(10) NOT NULL DEFAULT '0',
  PRIMARY KEY (`term_id`),
  UNIQUE KEY `slug` (`slug`),
  KEY `name` (`name`)
) ENGINE=InnoDB AUTO_INCREMENT=7 DEFAULT CHARSET=utf8;


#
# Data contents of table `wp_terms`
#
INSERT INTO `wp_terms` ( `term_id`, `name`, `slug`, `term_group`) VALUES
(1, 'Uncategorized', 'uncategorized', 0),
(2, 'Header Menu', 'header-menu', 0),
(3, 'Footer Menu', 'footer-menu', 0),
(4, 'Bootstrapping', 'bootstrapping', 0),
(5, 'Development', 'development', 0),
(6, 'Design', 'design', 0) ;

#
# End of data contents of table `wp_terms`
# --------------------------------------------------------



#
# Delete any existing table `wp_usermeta`
#

DROP TABLE IF EXISTS `wp_usermeta`;


#
# Table structure of table `wp_usermeta`
#

CREATE TABLE `wp_usermeta` (
  `umeta_id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `user_id` bigint(20) unsigned NOT NULL DEFAULT '0',
  `meta_key` varchar(255) DEFAULT NULL,
  `meta_value` longtext,
  PRIMARY KEY (`umeta_id`),
  KEY `user_id` (`user_id`),
  KEY `meta_key` (`meta_key`)
) ENGINE=InnoDB AUTO_INCREMENT=20 DEFAULT CHARSET=utf8;


#
# Data contents of table `wp_usermeta`
#
INSERT INTO `wp_usermeta` ( `umeta_id`, `user_id`, `meta_key`, `meta_value`) VALUES
(1, 1, 'first_name', ''),
(2, 1, 'last_name', ''),
(3, 1, 'nickname', 'Ty Richards'),
(4, 1, 'description', ''),
(5, 1, 'rich_editing', 'true'),
(6, 1, 'comment_shortcuts', 'false'),
(7, 1, 'admin_color', 'fresh'),
(8, 1, 'use_ssl', '0'),
(9, 1, 'show_admin_bar_front', 'false'),
(10, 1, 'wp_capabilities', 'a:1:{s:13:"administrator";b:1;}'),
(11, 1, 'wp_user_level', '10'),
(12, 1, 'dismissed_wp_pointers', 'wp350_media,wp360_revisions,wp360_locks,wp390_widgets,disqus_settings_pointer'),
(13, 1, 'show_welcome_panel', '1'),
(14, 1, 'wp_dashboard_quick_press_last_post_id', '208'),
(15, 1, 'wp_user-settings', 'editor=tinymce&hidetb=1&wplink=1&libraryContent=browse&ed_size=488&align=center&woosidebarsshowadvanced=1&cats=pop'),
(16, 1, 'wp_user-settings-time', '1409775798'),
(17, 1, 'managenav-menuscolumnshidden', 'a:4:{i:0;s:11:"link-target";i:1;s:11:"css-classes";i:2;s:3:"xfn";i:3;s:11:"description";}'),
(18, 1, 'metaboxhidden_nav-menus', 'a:3:{i:0;s:8:"add-post";i:1;s:12:"add-post_tag";i:2;s:15:"add-post_format";}'),
(19, 1, 'nav_menu_recently_edited', '3') ;

#
# End of data contents of table `wp_usermeta`
# --------------------------------------------------------



#
# Delete any existing table `wp_users`
#

DROP TABLE IF EXISTS `wp_users`;


#
# Table structure of table `wp_users`
#

CREATE TABLE `wp_users` (
  `ID` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `user_login` varchar(60) NOT NULL DEFAULT '',
  `user_pass` varchar(64) NOT NULL DEFAULT '',
  `user_nicename` varchar(50) NOT NULL DEFAULT '',
  `user_email` varchar(100) NOT NULL DEFAULT '',
  `user_url` varchar(100) NOT NULL DEFAULT '',
  `user_registered` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `user_activation_key` varchar(60) NOT NULL DEFAULT '',
  `user_status` int(11) NOT NULL DEFAULT '0',
  `display_name` varchar(250) NOT NULL DEFAULT '',
  PRIMARY KEY (`ID`),
  KEY `user_login_key` (`user_login`),
  KEY `user_nicename` (`user_nicename`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8;


#
# Data contents of table `wp_users`
#
INSERT INTO `wp_users` ( `ID`, `user_login`, `user_pass`, `user_nicename`, `user_email`, `user_url`, `user_registered`, `user_activation_key`, `user_status`, `display_name`) VALUES
(1, 'Ty Richards', '$P$B7YJYcaSfSoTRWCWOQqW/zL45x0K9o0', 'ty-richards', 'me@tyrichards.com', '', '2014-06-16 16:07:20', '', 0, 'Ty Richards') ;

#
# End of data contents of table `wp_users`
# --------------------------------------------------------

#
# Add constraints back in
#

